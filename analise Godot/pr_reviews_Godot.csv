"AThousandShips","MEMBER","","2024-10-14T11:51:24Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-14T11:52:22Z",false,"COMMENTED"
"betalars","NONE","","2024-10-14T11:54:10Z",false,"COMMENTED"
"betalars","NONE","","2024-10-14T11:54:28Z",false,"COMMENTED"
"betalars","NONE","","2024-10-14T11:54:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-14T11:55:30Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-14T11:55:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-14T11:55:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-14T11:56:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-14T11:56:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-14T12:00:00Z",false,"COMMENTED"
"betalars","NONE","","2024-10-14T12:01:45Z",false,"COMMENTED"
"betalars","NONE","","2024-10-14T13:11:30Z",false,"COMMENTED"
"betalars","NONE","","2024-10-14T13:32:07Z",false,"COMMENTED"
"betalars","NONE","","2024-10-14T13:32:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-14T13:35:19Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-10-13T23:51:29Z",false,"COMMENTED"
"jaydensipe","CONTRIBUTOR","","2024-10-14T00:05:14Z",false,"COMMENTED"
"timothyqiu","MEMBER","I think you can merge #98157 into this one. It is essentially the same as this one.","2024-10-13T23:56:47Z",false,"COMMENTED"
"jaydensipe","CONTRIBUTOR","","2024-10-14T00:05:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-14T14:02:45Z",false,"COMMENTED"
"dalexeev","MEMBER","Looks good to me. Please add a test.","2024-10-13T20:03:12Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-10-13T20:22:39Z",false,"COMMENTED"
"HolonProduction","MEMBER","","2024-10-13T20:44:49Z",false,"COMMENTED"
"fire","MEMBER","","2024-10-13T17:20:40Z",false,"COMMENTED"
"Bromeon","CONTRIBUTOR","Thanks a lot for your contribution! üôÇ 


> In `JSON::stringify`, regarding the new `allow_nonfinite` parameter: When set to true, the following will occur:
> 
>   * NAN values become the keyword `NaN`
>   * INF values become the keyword `Infinity`
>   * -INF values become the keyword `-Infinity`
>
>
> This is based on a somewhat common nonstandard extension that is compatible with, at the minimum, Python's own JSON functions and a few other places. (See here https://evanhahn.com/pythons-nonstandard-json-encoding/)
> The rationale of these keywords is to not be arbitrary, and instead the commonly supported.

The problem is still that it's non-standard, and calling it ""JSON"" is misleading. It's not JSON, but a custom protocol that has JSON as a subset.

While such extensions address the problem of having a serialization format that Godot can save and read again, they simultaneously cause interop problems for every non-Godot JSON deserializer, e.g. webservers, tools like `jq`, and JSON libraries in almost all programming languages. 

I don't think we are doing users a favor by locking them into a format that can only be understood by Godot and Python, especially not under the cover of the `JSON` class. It's not obvious for people unfamiliar with the protocol that these extensions are unsupported in the majority of software.


---

Maybe taking a step back, it would be good to know which problem we are exactly solving. Could you elaborate in which context you needed this?

Related, do we really want to encourage NaN (which is often the result of logic errors) to creep into serialization formats? Can we not expect users to handle these values explicitly and define a domain-specific value for them? I don't think the engine should make such a choice, precisely because there's no standard way of representing them in JSON and different applications may have different preferences.


","2024-10-14T15:08:19Z",false,"CHANGES_REQUESTED"
"dustdfg","CONTRIBUTOR","Didn't try to compile but expect it will work. LGTM.","2024-10-13T05:08:12Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-10-13T11:25:25Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-10-13T13:25:28Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-10-13T13:27:27Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-10-13T13:34:56Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-10-13T13:35:10Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-10-13T14:28:18Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-10-12T09:13:46Z",false,"APPROVED"
"timothyqiu","MEMBER","Tested some common use cases locally, and it worked as expected.","2024-10-13T02:03:23Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-10-14T09:11:15Z",false,"COMMENTED"
"fire","MEMBER","I approve of the general pattern of replacing string concatenation with vformat format strings.","2024-10-12T02:58:12Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","Good catch!","2024-10-12T19:13:09Z",false,"APPROVED"
"AThousandShips","MEMBER","Looks good otherwise, I thin this is a worthwhile change even though noisy","2024-10-11T10:03:51Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Nice, but it would be nice to squash the commits together, too. See [the Pull Request Workflow](https://docs.godotengine.org/en/stable/contributing/workflow/pr_workflow.html#the-interactive-rebase).","2024-10-11T07:46:59Z",false,"APPROVED"
"SaracenOne","MEMBER","Tested, LGTM üëç ","2024-10-10T23:01:05Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-10-12T00:57:50Z",false,"APPROVED"
"raulsntos","MEMBER","It's fine for the exported APK to include the same `.jar` multiple times. As I understand it, `.jar` files can only be added to the APK when building the APK so the pre-built export template APK won't care about these `.jar` files that are added later, we already take care of adding the `.jar` file to the export template APK.

The problem you are having is likely exclusive to Gradle builds. The Gradle build likely includes these `.jar` files multiple times because `ExportPlugin::add_shared_object` adds the files to the `android/build/libs` directory and the Gradle build will take all the `.jar` files in there without de-duplicating them when building the APK.","2024-10-10T17:54:59Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-10-10T18:19:18Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-10-10T18:21:06Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-10-12T19:30:59Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-10-12T19:50:54Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-10-12T20:28:43Z",false,"COMMENTED"
"raulsntos","MEMBER","Thanks, it looks good. Can you add the fixed case to [`MustBeVariant.GD0301.cs`](https://github.com/godotengine/godot/blob/68f053bf82ff811c7a6f870832eb4bc4d09a62e5/modules/mono/editor/Godot.NET.Sdk/Godot.SourceGenerators.Tests/TestData/Sources/MustBeVariant.GD0301.cs)? That way we verify that the PR fixes it and that we don't re-introduce the bug in the future.","2024-10-10T18:19:13Z",false,"COMMENTED"
"zaevi","CONTRIBUTOR","","2024-10-10T19:01:25Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-10-12T05:19:29Z",false,"COMMENTED"
"raulsntos","MEMBER","LGTM. Thanks!","2024-10-12T05:19:42Z",false,"APPROVED"
"bruvzg","MEMBER","I do not think we want to pin it, SDK distribution format was changed only once since 2021, so it's an extremely rare event.

And doing so will require constantly updating it manually (a new Vulkan SDK is released about every 2 months, and we definitely always want to use the latest version).","2024-10-10T07:12:29Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-10T10:36:17Z",false,"COMMENTED"
"Calinou","MEMBER","That makes sense to expose. Docs look good to me.","2024-10-10T12:41:34Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-10T12:42:42Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-10-10T13:02:14Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-10-09T21:51:38Z",false,"COMMENTED"
"Calinou","MEMBER","Code looks good to me. It makes sense to expose this in Button since multiline buttons are fully supported in 4.x.","2024-10-10T14:31:45Z",false,"APPROVED"
"bruvzg","MEMBER","Grab area seems to be still a bit off (red area works, the rest is still click-through):

<img width=""101"" alt=""Screenshot 2024-10-10 at 09 18 01"" src=""https://github.com/user-attachments/assets/9640a762-42ca-48f0-9701-8c001b53a5d2"">
","2024-10-10T06:19:46Z",false,"COMMENTED"
"Blevins42069","NONE","","2024-10-09T22:04:15Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-10T18:16:17Z",false,"COMMENTED"
"matheusmdx","CONTRIBUTOR","","2024-10-10T19:37:18Z",false,"COMMENTED"
"fire","MEMBER","Upstream changes look ok","2024-10-10T17:58:20Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

I'm not sure if there's a lot of use to the primitive box/sphere/cylinder/capsule colliders as a default though, given scenes made of multiple meshes will most likely have different shapes for each part of the scene. The trimesh and convex options are more suited here. I guess it's not a big problem to expose anyway.","2024-10-11T10:07:43Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-10-09T13:25:06Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-10-10T13:17:52Z",false,"APPROVED"
"fire","MEMBER","","2024-10-09T09:12:37Z",false,"APPROVED"
"verypleasentusername","NONE","","2024-10-09T10:17:38Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-10-09T08:18:48Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-10-09T17:16:54Z",false,"APPROVED"
"Calinou","MEMBER","","2024-10-11T09:12:55Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-10-11T09:13:10Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-10-11T09:13:32Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-10-11T09:14:50Z",false,"COMMENTED"
"Nikitf777","NONE","","2024-10-11T12:09:46Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-10-11T12:18:39Z",false,"COMMENTED"
"Nikitf777","NONE","","2024-10-13T11:09:29Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-10-13T11:13:31Z",false,"COMMENTED"
"Nikitf777","NONE","","2024-10-13T20:48:30Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-10-14T05:58:42Z",false,"CHANGES_REQUESTED"
"m4gr3d","CONTRIBUTOR","Looks good!

Can you squash the commits.","2024-10-14T14:51:17Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","","2024-10-09T14:31:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-08T17:36:47Z",false,"COMMENTED"
"RobProductions","CONTRIBUTOR","","2024-10-08T17:37:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-08T17:39:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","Works, and seems the previous intermittent issue might be caching related so should work going forward","2024-10-08T16:44:46Z",false,"APPROVED"
"clayjohn","MEMBER","Seems fine. But I wonder why this situation was happening in the OP? Is the editor somehow trying to preview the noise texture before it is created?","2024-10-08T17:30:01Z",false,"APPROVED"
"Maran23","CONTRIBUTOR","","2024-10-09T07:50:06Z",false,"COMMENTED"
"bruvzg","MEMBER","Change seems fine, but `_refresh_menu_names` probably should call it only once at the end of the function, not for the every item.","2024-10-08T21:07:10Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-10-09T07:19:12Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-10-08T15:10:25Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-10-08T18:08:15Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (including with different font sizes in the RichTextLabel), it works as expected.","2024-10-11T10:57:01Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-10-08T07:22:09Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-10-08T21:03:46Z",false,"APPROVED"
"fire","MEMBER","The reasoning makes sense.","2024-10-07T23:23:23Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-10-08T09:15:18Z",false,"APPROVED"
"raulsntos","MEMBER","Nice catch, thank you!","2024-10-08T02:04:13Z",false,"APPROVED"
"juanjp600","CONTRIBUTOR","","2024-10-09T13:24:04Z",false,"COMMENTED"
"raulsntos","MEMBER","Thanks for the contribution. You are totally right about the Dictionary hint being wrong, but I don't really understand the part about `set_typed`. We're not calling `set_typed` for typed Arrays and that works fine with arrays of nodes (e.g.: `Godot.Collections.Array<Label>`). So I feel like there may be a way to fix the bug without `set_typed`.

Calling `set_typed` is probably something that we should do anyway, and not just on Dictionary but on Array as well. However, I don't really like the current PR's implementation, it relays heavily on reflection which may be incompatible with trimming/NativeAOT, and may add substantial cost to typed Dictionaries which may be unacceptable to some users.

I have not looked at the changes to `packed_scene.cpp` at all, that's an area of Godot I'm not very familiar with so I don't think I can comment on it.","2024-10-12T17:01:16Z",false,"COMMENTED"
"SaracenOne","MEMBER","","2024-10-10T22:38:17Z",false,"CHANGES_REQUESTED"
"SaracenOne","MEMBER","My previous feedback was mistaken since all CanvasItems have z_relative set on by default, so this should be fine to merge as is after all üëç ","2024-10-10T22:57:03Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-10-07T19:33:16Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","","2024-10-07T17:09:31Z",false,"APPROVED"
"fire","MEMBER","","2024-10-07T17:20:45Z",false,"COMMENTED"
"fire","MEMBER","","2024-10-07T17:21:34Z",false,"COMMENTED"
"fire","MEMBER","","2024-10-07T17:24:22Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-10-07T18:45:47Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-10-07T19:28:39Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-10-07T18:10:58Z",false,"APPROVED"
"adamscott","MEMBER","","2024-10-07T15:08:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-07T15:27:08Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-10-07T15:48:29Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-10-07T15:51:21Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-10-07T16:02:44Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-10-07T19:33:00Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-10-07T22:48:12Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-10-08T14:49:37Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","I disagree with `FORCE_SEMICOLON` being added in this context (see https://github.com/godotengine/godot/pull/97934#discussion_r1792030407), but I'm otherwise onboard with this! I'd recommend a `.git-blame-ignore-revs` commit as well, as there's no functional changes to speak of.","2024-10-08T14:59:10Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-10-07T17:35:25Z",false,"COMMENTED"
"Lateasusual","CONTRIBUTOR","","2024-10-07T19:09:13Z",false,"COMMENTED"
"MewPurPur","CONTRIBUTOR","Looks like I copied the wrong text into the svg file back then.","2024-10-08T07:03:41Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-10-08T07:10:34Z",false,"APPROVED"
"clayjohn","MEMBER","Great work so far. I think the approach right now is a bit hacky so I have left some comments about my concerns and how to address them. ","2024-10-07T21:16:34Z",false,"COMMENTED"
"huwpascoe","NONE","","2024-10-08T00:31:41Z",false,"COMMENTED"
"huwpascoe","NONE","","2024-10-08T00:55:48Z",false,"COMMENTED"
"timothyqiu","MEMBER","I could not test the described problem, but the modification itself should be safe.","2024-10-08T01:39:46Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-10-07T21:18:59Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-10-08T15:12:00Z",false,"APPROVED"
"Calinou","MEMBER","There's also a note that needs to be removed in BaseMaterial3D:

```
doc/classes/BaseMaterial3D.xml:
  352  			Sets whether the shading takes place, per-pixel, per-vertex or unshaded. Per-vertex lighting is faster, making it the best choice for mobile applications, however it looks considerably worse than per-pixel. Unshaded rendering is the fastest, but disables all interactions with lights.
  353: 			[b]Note:[/b] Setting the shading mode vertex shading currently has no effect, as vertex shading is not implemented yet.
  354  		</member>
```","2024-10-07T17:10:30Z",false,"CHANGES_REQUESTED"
"mhilbrunner","MEMBER","","2024-10-08T15:13:12Z",false,"APPROVED"
"raulsntos","MEMBER","Thanks, this is looking great.

Also, since you are a new contributor, make sure to read [CONTRIBUTING.md](https://github.com/godotengine/godot/blob/master/CONTRIBUTING.md) and the [contributing documentation](https://docs.godotengine.org/en/latest/contributing/workflow/pr_workflow.html) if you haven't already.

You'll need to squash the commits before this PR can be merged. The [contributing documentation](https://docs.godotengine.org/en/latest/contributing/workflow/pr_workflow.html#the-interactive-rebase) contains information about squashing in case you need it.

Feel free to reach out in the [development chat](https://chat.godotengine.org/channel/dotnet) if you need help.","2024-10-07T02:14:51Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-10-07T19:06:04Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-10-08T15:14:43Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-10-08T15:18:14Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-13T09:40:20Z",false,"COMMENTED"
"0x53A","NONE","","2024-10-13T09:43:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-13T09:45:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM","2024-10-13T11:06:42Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-10-06T18:00:42Z",false,"CHANGES_REQUESTED"
"bruvzg","MEMBER","","2024-10-06T19:39:28Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-10-06T20:20:55Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-10-06T20:59:29Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-10-06T21:01:15Z",false,"COMMENTED"
"bruvzg","MEMBER","Tested with https://github.com/godotengine/godot/issues/95580 scene, seems to be working fine.","2024-10-08T07:12:48Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-10-07T20:20:52Z",false,"APPROVED"
"timothyqiu","MEMBER","Tested locally. `ItemList`s now have the same right padding as in 4.3.stable and previous 4.4.dev versions.","2024-10-06T15:51:10Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-10-06T16:18:12Z",false,"APPROVED"
"tetrapod00","CONTRIBUTOR","Reviewing functionality, not code:
Tested the new version with the arrows. It works great for both typical editor usage and the pathological MRP. I like this solution, it feels very natural.

The arrows should be either disabled (grayed out and non-interactive) or completely hidden when all the buttons fit horizontally  (which is most of the time, in typical editor usage). I would personally prefer being hidden entirely, since in typical editor usage you should never need to use these arrows. But you can find a precedent for either hiding or disabling within the `BottomPanel` itself (toast notifications are disabled/enabled, but the expand vertically button hides and unhides).","2024-10-07T17:43:33Z",false,"CHANGES_REQUESTED"
"KoBeWi","MEMBER","","2024-10-07T21:00:41Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-07T21:01:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-07T21:05:13Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-10-07T23:17:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-08T14:25:08Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-08T14:27:12Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-08T14:28:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-08T14:29:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","There are some inefficient calls (see comments), but functionally it's ok.","2024-10-08T14:43:22Z",false,"APPROVED"
"WhalesState","CONTRIBUTOR","","2024-10-08T15:02:22Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-08T15:58:15Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-10-08T17:42:19Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-08T17:44:05Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-10-08T17:52:24Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-10-06T18:24:17Z",false,"APPROVED"
"AThousandShips","MEMBER","I'm not sure if the super groups like `@godotengine/_editor` actually work as such ","2024-10-09T14:49:14Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-10-09T14:57:40Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-09T15:00:07Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-10-09T15:21:33Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-09T15:23:13Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-10-09T15:24:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","The ones here look good I think, can't speak to missing cases but I think this is good to go","2024-10-09T15:27:07Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

My only concern is that the short viewable area for the path will become even shorter with the addition of a new button:

![image](https://github.com/user-attachments/assets/f94ed81d-49d1-4440-9e06-b5f50a1ab744)

I don't know a good solution to this. I'd say the saved click is worth losing some space here, since it's often needed, especially when setting up materials or audio samples.","2024-10-06T23:27:53Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-10-06T01:50:53Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-10-05T20:12:34Z",false,"COMMENTED"
"timothyqiu","MEMBER","LGTM. `LocalVector::clear()` retains capacity.","2024-10-06T04:43:33Z",false,"APPROVED"
"Calinou","MEMBER","","2024-10-05T15:59:27Z",false,"APPROVED"
"fire","MEMBER","","2024-10-05T18:41:35Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-10-05T20:50:09Z",false,"COMMENTED"
"ttencate","CONTRIBUTOR","","2024-10-07T07:10:06Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great to me! Thank you!","2024-10-07T21:20:02Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-10-07T21:25:08Z",false,"COMMENTED"
"SaracenOne","MEMBER","Good catch, I spotted this recently too. The fix looks fine üëç ","2024-10-10T23:08:26Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-05T08:38:32Z",false,"APPROVED"
"fire","MEMBER","","2024-10-05T18:12:11Z",false,"APPROVED"
"mhilbrunner","MEMBER","T-T-Triple approval!","2024-10-05T18:44:37Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-10-07T00:31:56Z",false,"APPROVED"
"TokageItLab","MEMBER","@AtlaStar Don't merge from master, instead you must reset them, interactive rebase and force push to keep it as 1 commit, see [PR workflow](https://docs.godotengine.org/en/stable/contributing/workflow/pr_workflow.html#the-interactive-rebase)","2024-10-10T21:43:05Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","","2024-10-10T23:20:30Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-04T23:00:03Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-10-04T23:58:06Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-04T19:58:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-04T19:24:37Z",false,"APPROVED"
"bruvzg","MEMBER","> Applications should send very minimal debug output and provide a way for the user to enable or disable its use. See [Event Tracing](https://learn.microsoft.com/en-us/windows/win32/etw/event-tracing-portal) to learn more about tracing details.

`OutputDebugString` is not intended to print everything (and `logv` is used to print everything, not just errors).","2024-10-04T16:39:08Z",false,"CHANGES_REQUESTED"
"SaracenOne","MEMBER","Tested. Appears to fix the problem. LTGM üëç ","2024-10-04T16:39:18Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-10-04T17:28:09Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-04T16:06:51Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.","2024-10-04T18:58:58Z",false,"APPROVED"
"WhalesState","CONTRIBUTOR","","2024-10-04T10:41:18Z",false,"COMMENTED"
"syntaxerror247","CONTRIBUTOR","","2024-10-04T10:42:42Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-10-04T10:46:36Z",false,"COMMENTED"
"syntaxerror247","CONTRIBUTOR","","2024-10-04T11:52:55Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-10-04T19:16:59Z",false,"APPROVED"
"KoBeWi","MEMBER","This basically reverts the ColorPicker part of #97094 idk why that code was merged if the author of that PR has approved this one ü§∑‚Äç‚ôÇÔ∏è

The code looks ok, but I didn't test it on mobile.","2024-10-05T15:33:34Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-10-04T15:21:08Z",false,"COMMENTED"
"KingTheFifth","NONE","","2024-10-04T15:59:29Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I looked at the entire file. This makes sense to me on paper, but I have not tested.","2024-10-04T18:43:14Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-10-04T05:00:48Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-10-04T11:11:47Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-10-04T11:12:12Z",false,"COMMENTED"
"mhilbrunner","MEMBER","LGTM (besides the Variant change, not sure I 100% grok that one).","2024-10-05T18:46:05Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","Looks good to me, we should run the workflow and make sure the tests pass.","2024-10-04T05:36:12Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","I don't believe most of these comments are necessary. The code should speak for itself. If comments are necessary, it seems like the SUBCASE macro in this same file is more explicit than a comment.","2024-10-04T18:50:51Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-10-03T23:34:18Z",false,"APPROVED"
"YeldhamDev","MEMBER","This fixes the error spam in my PR.","2024-10-04T03:48:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-04T08:46:46Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-10-04T09:54:57Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-10-04T10:48:01Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-04T10:52:33Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-04T10:57:28Z",false,"APPROVED"
"BSChad","NONE","","2024-10-08T03:26:38Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","Looking good","2024-10-03T19:26:49Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-10-06T22:46:00Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-10-06T22:53:25Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-10-07T13:23:56Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-10-07T13:28:09Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-10-07T13:34:31Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-10-07T13:35:03Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","I don't really know the OpenXR API that well so TIWAGOS but everything looks fine! Thank you for fixing this issue, now ""full-featured"" Wayland-only builds are a thing!","2024-10-07T13:36:35Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-10-03T14:37:25Z",false,"COMMENTED"
"tdaven","CONTRIBUTOR","","2024-10-03T14:47:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-03T14:51:23Z",false,"COMMENTED"
"tdaven","CONTRIBUTOR","","2024-10-03T14:51:43Z",false,"COMMENTED"
"tdaven","CONTRIBUTOR","","2024-10-04T00:08:09Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-10-04T20:18:21Z",false,"COMMENTED"
"tdaven","CONTRIBUTOR","","2024-10-04T21:14:50Z",false,"COMMENTED"
"tdaven","CONTRIBUTOR","","2024-10-05T22:36:38Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-10-05T22:40:34Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks good to me!","2024-10-05T23:01:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-03T14:33:48Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-03T12:03:15Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks! I didn't test, but the code changes make sense to me","2024-10-03T13:16:02Z",false,"APPROVED"
"SaracenOne","MEMBER","Good catch, LGTM üëç 
That said, it has made me aware that there's other edge cases we need to catch too, like what happens if you're playing an AnimationPlayer and then delete the animations while its still playing.","2024-10-03T09:43:09Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-04T08:47:35Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-10-03T22:58:40Z",false,"COMMENTED"
"huwpascoe","NONE","","2024-10-04T01:42:41Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-10-03T18:15:13Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-10-03T18:49:35Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected. Code looks good to me.","2024-10-04T00:33:32Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-02T21:55:22Z",false,"APPROVED"
"fire","MEMBER","Looks like a mechanical replacement of Vector to LocalVector with a fixup for ptrw. see the proposal for reasoning.

https://github.com/godotengine/godot-proposals/issues/10594","2024-10-05T18:42:53Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-04T08:50:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-02T15:39:28Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-02T14:38:05Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Sure","2024-10-02T17:08:54Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-10-03T05:08:01Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good.

Now that I see the changes closer again, IIUC, this only makes a different for distributions of Clang which do not define `__GNUC__`. I believe both Linux and Apple versions of Clang do define `__GNUC__`, so it's probably meaningful only for MSVC clang-cl and the vanilla Clang for Windows you're adding support for in the other PR?

Either way, this is correct and good to merge.","2024-10-02T13:14:56Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-02T10:19:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-02T10:21:05Z",false,"COMMENTED"
"dustdfg","CONTRIBUTOR","","2024-10-02T10:34:32Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-10-04T08:51:36Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","Shouldnt we extend it to FileAccess and PackedByteArray now given the chance to do so?","2024-10-02T07:12:47Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-10-02T17:45:19Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","","2024-10-03T16:59:40Z",false,"APPROVED"
"adamscott","MEMBER","","2024-10-07T16:57:34Z",false,"COMMENTED"
"EAinsley","CONTRIBUTOR","","2024-10-07T17:01:24Z",false,"COMMENTED"
"anvilfolk","CONTRIBUTOR","","2024-10-01T19:56:22Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-10-01T20:59:39Z",false,"COMMENTED"
"anvilfolk","CONTRIBUTOR","","2024-10-01T21:44:53Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-10-02T00:17:44Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","Correctly implemented","2024-10-01T19:35:35Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-02T14:21:11Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-10-02T20:21:09Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-10-01T16:02:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-01T16:02:27Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-10-01T15:53:22Z",false,"COMMENTED"
"clayjohn","MEMBER","Thank you!","2024-10-01T18:15:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-01T14:27:28Z",false,"APPROVED"
"fire","MEMBER","","2024-10-02T04:57:16Z",false,"COMMENTED"
"fire","MEMBER","","2024-10-02T04:57:26Z",false,"COMMENTED"
"YYF233333","NONE","","2024-10-02T06:30:56Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-10-01T12:22:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-10-01T13:34:24Z",false,"APPROVED"
"Nazarwadim","CONTRIBUTOR","","2024-10-01T15:22:40Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-04T08:51:59Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-01T09:01:23Z",false,"APPROVED"
"fire","MEMBER","","2024-10-01T19:34:08Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

**Testing project:** [test_pr_97676.zip](https://github.com/user-attachments/files/17213830/test_pr_97676.zip)

### Before

*Using Filmic tonemapping with whitepoint 1.0. (It's hard to avoid this overly contrasted look with this HDRI when using Compatibility, even when **HDR Clamp Exposure** is enabled in the Import dock.)*

![Screenshot_20241001_195256 png webp](https://github.com/user-attachments/assets/2565a18f-b74b-4aba-a52d-46326fb1805e)

### After

![Screenshot_20241001_195247 png webp](https://github.com/user-attachments/assets/a3befa8c-0b25-44cb-8d06-30225c5c38b4)

### Forward+ (for reference)

*Using ACES tonemapping with whitepoint 16.0.*

![Screenshot_20241001_195838 png webp](https://github.com/user-attachments/assets/1e523425-e112-4652-8176-0f86e3e41045)

### Mobile (for reference)

![Screenshot_20241001_195854 png webp](https://github.com/user-attachments/assets/f079494e-353f-447c-99ad-d81087685cb5)
","2024-10-01T17:55:41Z",false,"APPROVED"
"HolonProduction","MEMBER","Can confirm that this fixes the linked issue. Code looks straight forward.","2024-10-01T08:39:59Z",false,"APPROVED"
"HolonProduction","MEMBER","The search bar adjustment works as well. As said before I think merging this fix is a good idea since a generalized fix on `CodeEdit` level may pose some challenges at the moment.","2024-10-03T08:16:34Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","Looks good to me, we should proceed with the workflow run.","2024-10-01T06:49:26Z",false,"APPROVED"
"HolonProduction","MEMBER","","2024-10-01T07:45:59Z",false,"COMMENTED"
"HolonProduction","MEMBER","Not sure whether we should split up the update process in two methods like this (e.g. creating the duplicates in _event_config_confirmed and working with the duplicates in _event_add_edit_confirmed). This might come back at us later if someone tries to use _event_add_edit_confirmed directly and it modifies stuff in place.

Maybe we should just do the duplicate check before showing the dialogue and put all the other stuff in _event_add_edit_confirmed :thinking: ","2024-10-02T06:43:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-02T09:48:16Z",false,"COMMENTED"
"jaydensipe","CONTRIBUTOR","","2024-10-02T15:40:54Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","Just some nitpicks, mostly you should rename `uses` with `impl` everywhere.","2024-10-03T16:23:28Z",false,"COMMENTED"
"Loff3","NONE","I've suggested a few small changes to the wording that might help improve clarity.","2024-10-14T09:42:23Z",false,"CHANGES_REQUESTED"
"RandomShaper","MEMBER","","2024-10-01T10:22:58Z",false,"APPROVED"
"akien-mga","MEMBER","This looks fishy to me, the code on lines 3185 to 3190 does nothing as it's always overridden by line 3193. I think this requires a bit more research into why the code is this way and how to fix it.

Also, thanks for your first contribution and welcome :tada: ","2024-10-01T13:38:31Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-10-01T05:10:44Z",false,"APPROVED"
"Faless","COLLABORATOR","Looking good overall, see review comments.

As mentioned in the other PR, this feature should also be disabled in release build (and probably extracted as an EditorDebuggerPlugin), but we can do that in a separate PR.","2024-10-01T08:07:28Z",false,"CHANGES_REQUESTED"
"KoBeWi","MEMBER","","2024-10-01T10:08:40Z",false,"COMMENTED"
"Faless","COLLABORATOR","LGTM","2024-10-01T11:31:09Z",false,"APPROVED"
"akien-mga","MEMBER","Looks great!","2024-10-01T13:00:09Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-01T13:32:54Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-02T12:21:03Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","Shoot, good catch! Not used to testing against pre-release versions, so this slipped through the cracks","2024-09-30T14:12:45Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-02T12:09:34Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-30T10:30:03Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-09-30T11:59:09Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Me too, me too","2024-09-30T12:39:25Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-03T15:45:01Z",false,"COMMENTED"
"ydeltastar","CONTRIBUTOR","","2024-10-03T16:17:07Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-03T22:33:57Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-04T12:14:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-04T12:14:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-04T14:24:58Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-04T14:27:01Z",false,"APPROVED"
"ydeltastar","CONTRIBUTOR","","2024-10-04T14:31:52Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-04T14:40:37Z",false,"COMMENTED"
"ydeltastar","CONTRIBUTOR","","2024-10-04T14:45:12Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-04T14:49:28Z",false,"COMMENTED"
"adamscott","MEMBER","Hi there! Thanks for your first contribution! We're close, thanks to you!","2024-09-30T14:22:46Z",false,"CHANGES_REQUESTED"
"SourceOfHTML","CONTRIBUTOR","","2024-09-30T14:43:25Z",false,"COMMENTED"
"SourceOfHTML","CONTRIBUTOR","","2024-09-30T14:48:40Z",false,"COMMENTED"
"adamscott","MEMBER","Should be good to merge after the style checks. I tested it and it works well!","2024-09-30T15:37:46Z",false,"APPROVED"
"YeldhamDev","MEMBER","","2024-10-04T03:56:05Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-04T08:37:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-29T19:06:31Z",false,"APPROVED"
"Geometror","MEMBER","I was concerned that the positions of each node would change in the resource file each time your scale changes (problematic for teams), but this is not the case. However, the size does change. In case you have the time, could you check why this is happening? Otherwise I think it would be fine to merge without the size fix.","2024-09-30T10:49:19Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-09-29T13:26:01Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-29T13:36:07Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-09-29T13:53:19Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-09-29T13:54:38Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-29T14:01:37Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-09-29T14:20:45Z",false,"APPROVED"
"Delsin-Yu","CONTRIBUTOR","","2024-09-29T11:16:31Z",false,"COMMENTED"
"anvilfolk","CONTRIBUTOR","","2024-09-29T13:33:42Z",false,"COMMENTED"
"fire","MEMBER","Looks ok to me","2024-09-29T09:59:04Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-29T10:27:01Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-10-04T15:40:02Z",false,"COMMENTED"
"Faless","COLLABORATOR","LGTM, nice work :rocket: ","2024-09-29T13:02:22Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-29T13:03:43Z",false,"APPROVED"
"mhilbrunner","MEMBER","Looks good! Docs change is fine, as are the tests, built and tested locally on Windows.","2024-09-30T09:50:25Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great! Thanks for updating the documentation as well. 

I tested on the MRPs from https://github.com/godotengine/godot/issues/87847 and https://github.com/godotengine/godot/issues/11417 and confirm that this fixes the former without re-introducing the issue from the latter. ","2024-09-29T04:32:54Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-09-29T11:44:49Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-28T14:55:02Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-28T14:55:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-28T12:11:38Z",false,"DISMISSED"
"AThousandShips","MEMBER","","2024-09-28T12:24:24Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-28T12:24:35Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T12:46:14Z",false,"COMMENTED"
"Faless","COLLABORATOR","Looking good, please see changes to avoid including `std:optional`.

As @AThousandShips pointed out, we might also want to remove the lambdas too (though there are some use in other editor code, we still try to avoid them, especially in combination with `auto`).","2024-09-28T12:51:09Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-09-28T12:52:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-28T12:53:00Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T12:58:05Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T13:00:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-28T13:01:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-28T13:03:52Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T13:18:47Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T13:21:03Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-28T13:22:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-28T13:33:09Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T13:41:47Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-28T13:45:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-28T13:45:54Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-09-28T13:46:51Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T13:57:44Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T14:12:43Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T14:13:11Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T14:13:26Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T14:15:06Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T14:15:11Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T14:15:15Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T14:15:35Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T14:16:04Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T14:20:38Z",false,"COMMENTED"
"Faless","COLLABORATOR","LGTM :+1: , nice work!","2024-09-28T15:11:38Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-28T15:15:37Z",false,"APPROVED"
"rsubtil","CONTRIBUTOR","","2024-09-28T15:50:43Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T15:50:55Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T15:51:07Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T15:51:36Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T15:51:45Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T15:51:55Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T15:51:59Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T15:52:14Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T15:52:24Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T15:52:32Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-28T15:52:43Z",false,"COMMENTED"
"akien-mga","MEMBER","Great work as usual! Thanks for your dedication to maintaining the DAP support!","2024-10-04T09:11:37Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

Optimized, stripped Linux x86_64 editor binary size is about 300 KB larger (this is with https://github.com/godotengine/godot/pull/85321 taken into account). Release export template is 86 KB larger.

## Benchmark

Performance on LDR texture imports seems to be roughly identical. Here's an exercept on a [few 4K textures](https://polyhaven.com/a/blue_metal_plate):

### Before

```
EditorFileSystem: ""res://blue_metal_plate_disp_4k.jpg"" import took 439 ms.
EditorFileSystem: ""res://blue_metal_plate_diff_4k.jpg"" import took 1094 ms.
EditorFileSystem: ""res://blue_metal_plate_arm_4k.jpg"" import took 1438 ms.
EditorFileSystem: ""res://blue_metal_plate_nor_gl_4k.jpg"" import took 1495 ms.
```

### After

```
BasisU: Encoding a 4096x4096 image with 12 mipmaps took 371 ms.
EditorFileSystem: ""res://blue_metal_plate_disp_4k.jpg"" import took 449 ms.

BasisU: Encoding a 4096x4096 image with 12 mipmaps took 776 ms.
EditorFileSystem: ""res://blue_metal_plate_diff_4k.jpg"" import took 1157 ms.

BasisU: Encoding a 4096x4096 image with 12 mipmaps took 828 ms.
EditorFileSystem: ""res://blue_metal_plate_arm_4k.jpg"" import took 1256 ms.

BasisU: Encoding a 4096x4096 image with 12 mipmaps took 1193 ms.
EditorFileSystem: ""res://blue_metal_plate_nor_gl_4k.jpg"" import took 1503 ms.
```

### Quality

*Click to view at full size. Texture size was limited to 1024 on import to make the difference more noticeable.*

Lossless | VRAM Compressed Low Quality
-|-
![Screenshot_20241004_203403 png webp](https://github.com/user-attachments/assets/2141d43c-23e8-412b-aba9-c1d3e7f3b4a1) | ![Screenshot_20241004_203409 png webp](https://github.com/user-attachments/assets/fa547edc-f077-41db-845e-ebbb1d553021)

VRAM Compressed High Quality | Basis Universal
-|-
![Screenshot_20241004_203416 png webp](https://github.com/user-attachments/assets/af9bb998-2aab-4512-8d8b-62446888722f) | ![Screenshot_20241004_203423 png webp](https://github.com/user-attachments/assets/4021b811-eac3-418c-bf08-34c4ec55521f)
","2024-10-04T18:28:29Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me, just missing this diff for vendoring instructions:
```diff
diff --git a/thirdparty/README.md b/thirdparty/README.md
index c9a0cefb05..bbf4bcecb7 100644
--- a/thirdparty/README.md
+++ b/thirdparty/README.md
@@ -64,7 +64,8 @@ Files extracted from upstream source:
 
 Files extracted from upstream source:
 
-- `encoder/` and `transcoder/` folders, minus `jpgd.{cpp,h}`
+- `encoder/` and `transcoder/` folders, with the following files removed from `encoder`:
+  `jpgd.{cpp,h}`, `3rdparty/{qoi.h,tinydds.h,tinyexr.cpp,tinyexr.h}`
 - `LICENSE`
 
 Applied upstream PR https://github.com/BinomialLLC/basis_universal/pull/344 to
```

Regarding QOI support, we have #91263 so if it gets approved we could consider re-enabling support for that, if it's deemed useful.","2024-10-04T20:09:16Z",false,"APPROVED"
"clayjohn","MEMBER","Changes to modules/basis_universal look good to me!
","2024-10-05T00:07:11Z",false,"APPROVED"
"fire","MEMBER","","2024-10-05T18:30:22Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","","2024-09-28T13:47:09Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-28T15:41:54Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-09-29T00:32:49Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-09-29T06:56:24Z",false,"COMMENTED"
"timothyqiu","MEMBER","Tested locally and it works as expected.

I'm not sure if an RAII `InputGuard` is worth the effort. `_parse_input_event_impl()` does not have early returns currently. It's future-proof of course, so I'm okay with it.","2024-09-29T13:36:43Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-28T09:13:20Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-09-29T00:28:18Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-29T14:47:27Z",false,"COMMENTED"
"shahriarlabib000","CONTRIBUTOR","","2024-09-29T15:17:42Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-10-04T16:50:18Z",false,"APPROVED"
"TokageItLab","MEMBER","Okay, I understand that instead of limiting the FPS digits, we snap to a rational number of seconds. I think this is acceptable as it is not a bad approach.

However, since such snapping is not consistent with other places, please add a comment in the code.

Also, the FPS must be limited to `< 10000`, because if the FPS exceeds 5 digits, the upper limit of precision will be exceeded and the snap will be broken.","2024-09-29T05:36:41Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","","2024-09-29T05:43:44Z",false,"COMMENTED"
"AtlaStar","CONTRIBUTOR","","2024-09-29T06:46:18Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-09-29T07:19:49Z",false,"CHANGES_REQUESTED"
"AtlaStar","CONTRIBUTOR","","2024-09-29T07:26:03Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-09-29T08:14:30Z",false,"CHANGES_REQUESTED"
"AtlaStar","CONTRIBUTOR","","2024-09-29T08:24:19Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-09-29T08:25:43Z",false,"COMMENTED"
"AtlaStar","CONTRIBUTOR","","2024-09-29T08:27:19Z",false,"COMMENTED"
"AtlaStar","CONTRIBUTOR","","2024-09-29T08:27:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-29T08:28:49Z",false,"COMMENTED"
"TokageItLab","MEMBER","Alright LGTM, please squash this commit into one commit to follow the PR workflow.
https://docs.godotengine.org/en/stable/contributing/workflow/pr_workflow.html#the-interactive-rebase","2024-09-29T08:29:41Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-02T12:09:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-02T12:09:57Z",false,"APPROVED"
"AtlaStar","CONTRIBUTOR","","2024-10-02T23:51:26Z",false,"COMMENTED"
"AtlaStar","CONTRIBUTOR","Alright, things are fine, appears to work properly on testing again.","2024-10-02T23:57:26Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-10-07T02:38:33Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-10-07T02:48:17Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-10-07T02:40:03Z",false,"APPROVED"
"aaronfranke","MEMBER","Makes sense to me, good cleanup. I didn't test it but I expect this works.","2024-10-10T02:36:19Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-27T20:18:06Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","","2024-09-28T14:52:35Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-28T14:54:53Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-28T14:55:34Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-28T15:15:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-28T15:17:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-28T16:12:50Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-28T17:42:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-28T17:43:50Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-28T17:44:25Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-10-04T14:54:27Z",false,"APPROVED"
"huwpascoe","NONE","It's good to merge.","2024-09-30T17:10:16Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-28T16:01:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-28T16:56:44Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","#97553 will make any extra verbosity irrelevant, so this works as-is.","2024-09-28T17:44:03Z",false,"APPROVED"
"adamscott","MEMBER","Seems alright. I verified and it seems effectively that the check is already made at line 149.","2024-09-27T16:53:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-04T17:02:54Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-27T14:10:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-27T14:11:29Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-27T14:22:46Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-09-27T14:40:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-27T14:50:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-27T14:53:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-27T15:51:16Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-09-29T20:06:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-29T21:16:14Z",false,"COMMENTED"
"Macksaur","CONTRIBUTOR","","2024-10-04T14:51:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-04T14:58:03Z",false,"COMMENTED"
"Macksaur","CONTRIBUTOR","","2024-10-04T14:59:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-04T15:03:05Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-09-30T12:03:53Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-09-30T12:04:35Z",false,"COMMENTED"
"TokageItLab","MEMBER","I have tested PhysicalBone (https://github.com/godotengine/godot/pull/96270), Retarget (https://github.com/godotengine/godot/pull/97824) and some IK, it looks good as it is working fine.

I appreciate that you send this PR as this was one of the task of our todo list, as I commented in https://github.com/godotengine/godot/pull/92931#issuecomment-2159525026, thanks.","2024-10-07T18:31:40Z",false,"APPROVED"
"fire","MEMBER","","2024-10-08T00:04:09Z",false,"APPROVED"
"Nazarwadim","CONTRIBUTOR","","2024-10-08T08:03:47Z",false,"COMMENTED"
"detomon","CONTRIBUTOR","","2024-10-08T14:06:05Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-10-08T16:00:04Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-10-08T17:02:46Z",false,"APPROVED"
"SaracenOne","MEMBER","Tested and yes, I think this is a sensible improvement to the behaviour of the gizmo. It might be worth adding similar behaviour to the capsules for consistency in the future, but I think this is fine to merge. üëç ","2024-10-11T00:41:02Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-11T09:46:45Z",false,"APPROVED"
"HolonProduction","MEMBER","","2024-10-11T16:31:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-11T16:33:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-27T11:32:10Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me!

I'll let @BastiaanOlij confirm as he implemented this class.","2024-09-27T12:18:07Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","The reasoning these were originally ""private"" was because we didn't want to expose these methods to normal users. They should only be called internally by the engine.
But that idea is very outdated by now as this indeed hinders their use from gdextension. So I think this change is fine.","2024-09-28T00:53:28Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-09-27T12:42:13Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks!

Overall, I think this is change makes sense. Aside from the note from RedMser, the only additional note I have is about the method name.","2024-09-27T15:01:11Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-09-29T05:52:14Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-09-29T05:52:44Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks! Looks good to me :-)","2024-09-29T16:08:34Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-09-27T11:09:33Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-27T18:32:00Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-09-27T19:52:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-28T15:11:37Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-28T15:13:22Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-28T15:13:59Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-28T15:18:12Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-28T15:18:57Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-09-28T15:23:02Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-10-01T13:56:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-27T09:50:54Z",false,"APPROVED"
"WhalesState","CONTRIBUTOR","","2024-10-03T05:15:47Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-10-03T05:17:38Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-10-03T05:18:22Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-10-03T05:20:32Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-10-03T05:22:56Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-10-03T05:28:12Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-10-03T05:30:02Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-10-03T06:01:38Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-10-04T08:07:47Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-10-04T08:30:45Z",false,"COMMENTED"
"YeldhamDev","MEMBER","LGTM.","2024-10-03T12:58:01Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Looks good!","2024-09-27T01:32:51Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-04T08:52:57Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-27T08:52:48Z",false,"COMMENTED"
"matthewestopinal","CONTRIBUTOR","","2024-09-28T15:11:16Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-28T15:26:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","Can't comment on the specifics but this works and looks good save for a few comments ","2024-09-28T16:49:46Z",false,"APPROVED"
"matthewestopinal","CONTRIBUTOR","","2024-09-28T18:14:36Z",false,"COMMENTED"
"matthewestopinal","CONTRIBUTOR","","2024-09-28T18:14:43Z",false,"COMMENTED"
"matthewestopinal","CONTRIBUTOR","","2024-09-28T18:14:50Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-10-01T15:09:48Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-09-26T20:49:52Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-09-26T21:28:10Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-29T13:15:02Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me, just left a minor nitpick.","2024-09-29T13:15:17Z",false,"APPROVED"
"kisg","CONTRIBUTOR","","2024-09-29T15:54:47Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-09-29T15:55:57Z",false,"COMMENTED"
"bruvzg","MEMBER","We already have `OS::request_permission(""CAMERA"")` (and signal in the main) that is used on Android, so instead of adding new methods, it should be reused for macOS as well.","2024-09-26T21:06:28Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-28T22:29:45Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me!","2024-09-28T22:30:56Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-29T08:06:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-26T15:54:22Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-26T15:54:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-26T21:24:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","The implementation is ok, though as I mentioned, the hard-coding should be eventually removed.","2024-09-26T21:25:46Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-26T13:53:49Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-26T13:59:31Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-26T14:01:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-26T14:04:30Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","","2024-10-01T19:37:32Z",false,"APPROVED"
"clayjohn","MEMBER","Makes sense!","2024-10-01T20:13:35Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-26T13:31:04Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-09-26T13:32:48Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-26T13:34:30Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-09-26T13:35:20Z",false,"COMMENTED"
"akien-mga","MEMBER","If it works, that looks good to me. Let's wait for confirmation.","2024-09-26T13:40:37Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-09-26T12:35:47Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-26T12:31:52Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-09-26T12:38:07Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-26T16:16:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-26T09:30:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM and the workarounds aren't obtrusive ","2024-09-26T09:44:02Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-26T09:46:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-26T08:25:47Z",false,"APPROVED"
"fire","MEMBER","It makes sense but it doesn't do much.","2024-09-26T07:29:00Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-26T07:36:55Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-26T08:26:50Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks!

Are the permission changes documented anywhere?

The code for this change looks good, so I think it's fine to move forward with this. However, it would be nice to be able to confirm the new permission name in some way.","2024-09-26T11:24:04Z",false,"APPROVED"
"devloglogan","CONTRIBUTOR","LGTM!","2024-09-26T18:29:44Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks!

This makes sense to me in principle, although, I'm not personally that familiar with the `CameraServer` stuff.","2024-10-05T17:40:17Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","Looking good to me, I'm looking forward for a maintainer to review this!","2024-09-27T04:52:20Z",false,"APPROVED"
"reduz","MEMBER","","2024-09-25T17:23:42Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-25T17:42:09Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-09-25T18:06:24Z",false,"COMMENTED"
"RandomShaper","MEMBER","As far as I can tell, some extra memory ordering enforcement is needed here. That said, I haven't been able to make this misbehave on ARM, the weakest ordering arch we're targeting, in the experiments I'm doing in #97654. I may make a future PR adding those even if it's only for theoretical correctness or future-proofing.

For now, I can't but greenlight this.","2024-10-04T07:51:20Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","","2024-09-25T17:16:03Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-09-26T06:50:34Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-09-26T07:09:23Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-26T07:15:28Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-09-26T10:04:30Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-09-26T10:11:28Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-09-26T10:23:41Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-26T10:46:32Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-25T16:55:01Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-09-25T15:09:01Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-25T15:32:27Z",false,"COMMENTED"
"Maran23","CONTRIBUTOR","","2024-09-25T15:46:41Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-25T20:59:12Z",false,"COMMENTED"
"Maran23","CONTRIBUTOR","Code looks good and makes sense. A nice improvement for usability. 
Also matches pretty much all other dialogs, as I also identified/unified in https://github.com/godotengine/godot/pull/96400.

The `text_submitted` `SceneStringName` could be used/replaced everywhere else in a future PR.","2024-09-25T21:14:15Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","","2024-09-27T04:50:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-27T10:15:01Z",false,"APPROVED"
"Calinou","MEMBER","","2024-09-26T21:37:02Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-26T21:37:10Z",false,"COMMENTED"
"Calinou","MEMBER","Should be good to merge after applying suggestions and squashing commits together.","2024-09-26T21:37:24Z",false,"APPROVED"
"akien-mga","MEMBER","Tested on KDE Plasma on Wayland (running the X11 version of Godot) and it seems to work well :)","2024-09-25T15:56:35Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-25T14:02:20Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-25T14:03:45Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-25T14:05:02Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-25T14:06:32Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-25T14:34:27Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-25T14:37:36Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-25T14:40:55Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-09-27T04:55:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-27T10:25:28Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-09-27T10:40:20Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-27T15:58:24Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-27T16:09:09Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-27T17:31:15Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-28T18:35:48Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-09-28T19:11:41Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-28T20:31:31Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks fine to me, though I'm still a bit worried about the `AR` shenanigans we've been making lately. I'm sure we'll find more exotic Windows toolchain setups where this might break.","2024-10-04T09:08:03Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-10-04T10:07:14Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-10-10T15:14:02Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-25T11:21:10Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-25T11:27:12Z",false,"APPROVED"
"dustdfg","CONTRIBUTOR","","2024-09-25T11:29:30Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-25T11:35:48Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-25T12:00:13Z",false,"COMMENTED"
"dustdfg","CONTRIBUTOR","","2024-09-25T12:03:14Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-26T09:50:37Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-01T20:46:30Z",false,"APPROVED"
"akien-mga","MEMBER","This is co-authored by Clay and Hugo so it's pretty much peer reviewed already. Seems simple enough for me to approve for merge.","2024-09-25T14:22:13Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","It's the small things that count. Commit and title could be more descriptive, though.","2024-09-24T21:46:15Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","Sounds good to me! Tested with the MRP on master and with this PR and it fixes the issue as expected.","2024-09-26T09:54:51Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-26T12:51:49Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-26T13:54:16Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-24T17:06:00Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-26T20:08:35Z",false,"COMMENTED"
"clayjohn","MEMBER","How often is `get_configuration_warnings` called? Its after every property change right? If so, we need to cache the result of `can_create_rendering_device()` somewhere or else this is going to make things very slow","2024-09-26T23:44:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-27T09:33:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-01T13:52:14Z",false,"DISMISSED"
"clayjohn","MEMBER","Looks great! Thanks for taking a look at the performance. This is good to merge after https://github.com/godotengine/godot/pull/97698","2024-10-01T20:12:58Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","","2024-09-24T18:11:20Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-09-24T21:47:56Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-09-24T18:47:49Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-09-25T00:12:24Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-09-25T00:17:41Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","We can all agree this makes sense.","2024-09-24T19:56:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-25T10:23:42Z",false,"APPROVED"
"akien-mga","MEMBER","That's a pretty significant gain! Looks great.

Any hints of tradeoffs on performance, and build times?","2024-09-24T13:19:02Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","","2024-09-24T18:12:15Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-26T14:24:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-26T14:57:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-24T11:13:45Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-25T18:38:50Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-25T18:39:13Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-25T18:41:20Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-09-26T00:08:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-26T12:47:34Z",false,"COMMENTED"
"vignesh1507","NONE","Appreciate the work @BastiaanOlij, thx for cleaning up the map dialogs.","2024-09-24T04:45:12Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","","2024-09-24T11:22:18Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-09-24T14:54:49Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","","2024-09-24T18:13:35Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-09-25T07:44:05Z",false,"APPROVED"
"tetrapod00","CONTRIBUTOR","","2024-09-24T01:05:37Z",false,"COMMENTED"
"JoNax97","CONTRIBUTOR","","2024-09-24T12:29:04Z",false,"COMMENTED"
"Geometror","MEMBER","Originally, I wanted to suggest switching the computation based on the current renderer, but after looking at the referenced blog article, I think it would be fine to just use the compatibility version (since it's a very good approximation). Maybe it can be used for RD renderers as well. CC @clayjohn ","2024-09-24T15:27:48Z",false,"COMMENTED"
"bruvzg","MEMBER","Since it's RTL, it might be better to do in as a `u`/`s` tags, probably with other customizations options like color.","2024-09-25T07:34:40Z",false,"COMMENTED"
"HolonProduction","MEMBER","","2024-09-25T16:50:19Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-09-25T19:13:32Z",false,"COMMENTED"
"HolonProduction","MEMBER","","2024-09-25T19:31:33Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-09-25T20:07:14Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-09-26T14:32:42Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-09-26T19:15:09Z",false,"COMMENTED"
"HolonProduction","MEMBER","In general I'd probably add ""experimental"" somewhere to the editor setting name as well, because the end goal would be to remove it once we have something working.","2024-10-02T20:49:25Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-10-03T07:05:06Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-23T21:50:56Z",false,"COMMENTED"
"fire","MEMBER","","2024-09-23T22:22:59Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-23T22:45:08Z",false,"COMMENTED"
"fire","MEMBER","","2024-09-23T22:57:13Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-09-23T23:56:53Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-09-24T08:49:05Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-09-24T11:48:35Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-09-24T14:27:20Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-09-24T14:28:28Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-09-24T17:04:23Z",false,"APPROVED"
"fire","MEMBER","Not that familiar with thread_local, but the rest of the changes look ok.","2024-09-24T18:45:41Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-25T08:58:37Z",false,"APPROVED"
"akien-mga","MEMBER","I'm not clear on the implication of storing a `thread_local static Ref<T>`, and this feels pretty heavy handed for the purpose of running an equation to convert colors.

I'm not saying we _shouldn't_ do that but I'd like more opinions from e.g. @RandomShaper and @clayjohn.","2024-09-25T10:47:32Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-09-24T11:26:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-24T13:25:14Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks!

I can't comment on the backbuffer change, but regarding the `glDisable(GL_FRAMEBUFFER_SRGB)` change: I retested the issue that PR https://github.com/godotengine/godot/pull/95433 aimed to fix, and it's still fixed with these changes! The code looks good to me as well.

Given that PR https://github.com/godotengine/godot/pull/95433 was cherry-picked for Godot 4.3.1, this one should be cherry-picked too. Hopefully, that's OK for the backbuffer-related fix as well?","2024-09-23T21:03:11Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","","2024-09-24T11:30:15Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-23T17:25:44Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-09-23T17:31:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-23T17:33:25Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-09-23T15:49:14Z",false,"COMMENTED"
"AdriaandeJongh","CONTRIBUTOR","","2024-09-23T16:03:02Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I actually like the prior descriptions more, I feel out of the loop here. I do understand that `top_level`'s existence makes the statement misleading, though.","2024-09-23T16:13:08Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-09-23T17:13:46Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Sorry for a bit of delayed answer (if that was a concern).

The description can be compact, sure, but it also needs to be as meaningful and ""digestible"" as it can be with a few words. The previous description was **too** compact and didn't say anything much of substance, either.","2024-09-23T17:49:40Z",false,"COMMENTED"
"AdriaandeJongh","CONTRIBUTOR","","2024-09-23T18:12:19Z",false,"COMMENTED"
"AdriaandeJongh","CONTRIBUTOR","","2024-09-23T18:16:00Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Just one more thing and I think this is excellent in my eyes.
Edit: Forgot to send.","2024-09-23T18:31:41Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-23T18:32:25Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-09-23T18:39:23Z",false,"COMMENTED"
"AdriaandeJongh","CONTRIBUTOR","","2024-09-23T18:40:04Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-09-23T18:40:49Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-09-23T18:44:23Z",false,"COMMENTED"
"AdriaandeJongh","CONTRIBUTOR","","2024-09-23T18:51:29Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-09-23T19:00:29Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-23T19:32:09Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-23T19:41:15Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-23T19:44:45Z",false,"COMMENTED"
"AdriaandeJongh","CONTRIBUTOR","","2024-09-23T20:03:03Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-23T20:20:46Z",false,"APPROVED"
"kleonc","MEMBER","Added last small nitpick, otherwise it's fine to me. Thanks @AdriaandeJongh for the patience with us (me)! :slightly_smiling_face:","2024-09-23T21:01:52Z",false,"COMMENTED"
"AdriaandeJongh","CONTRIBUTOR","","2024-09-24T06:32:32Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-09-24T07:43:00Z",false,"APPROVED"
"adamscott","MEMBER","","2024-09-27T16:58:39Z",false,"COMMENTED"
"reduz","MEMBER","","2024-10-06T22:14:53Z",false,"COMMENTED"
"fire","MEMBER","","2024-10-06T22:40:25Z",false,"COMMENTED"
"reduz","MEMBER","","2024-10-07T07:51:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-23T13:26:43Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me, but there's a review comment that still needs to be assessed.","2024-10-04T09:50:21Z",false,"APPROVED"
"reduz","MEMBER","","2024-10-04T12:59:17Z",false,"COMMENTED"
"adamscott","MEMBER","Seems ok to me. I reviewed it without marking it reviewed a few days ago, as I told myself that I wanted to test the PR, but didn't do it unfortunately.","2024-10-04T15:19:52Z",false,"APPROVED"
"AThousandShips","MEMBER","Please remove the issue reference from the commit message ","2024-09-23T10:44:41Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-09-23T22:00:34Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-23T12:54:48Z",false,"COMMENTED"
"reduz","MEMBER","","2024-09-23T18:48:17Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-09-24T12:25:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-24T13:21:46Z",false,"COMMENTED"
"bruvzg","MEMBER","> This might just be an over-thinking. I'll change this to use Node::AutoTranslateMode if making AUTO_TRANSLATE_MODE_INHERIT mean ""the same as Tree"" is expected.

I would definitely use `AUTO_TRANSLATE_MODE_INHERIT`, a note in the `set_auto_translate_mode` description should be enough to clarify what it's doing.","2024-10-01T06:49:23Z",false,"COMMENTED"
"YeldhamDev","MEMBER","LGTM.","2024-10-01T13:36:27Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Very surface-level documentation notes.

Why do `_get_resource_uid` and `_has_custom_uid_support` have to be two separate methods? Would it not be possible to verify if only `_get_resource_uid` is overridden, and/or check if it returns `0`?","2024-09-23T12:54:58Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-23T12:56:34Z",false,"COMMENTED"
"reduz","MEMBER","","2024-09-23T12:59:38Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-09-23T14:18:15Z",false,"COMMENTED"
"reduz","MEMBER","","2024-09-23T18:49:02Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-23T19:50:24Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","Seems good overall to me. Is the list of formats with custom uid support complete?","2024-10-07T11:17:21Z",false,"COMMENTED"
"reduz","MEMBER","","2024-10-07T12:13:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-07T13:57:02Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-07T19:42:50Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-07T20:08:18Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-10-08T09:28:41Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally on Windows with [Truck Town](https://github.com/godotengine/godot-demo-projects/tree/master/3d/truck_town), it works as expected. I prefer this file-based approach as it ensures source files are never modified by Godot (which is a problem due to Windows file locking, or even file modification dates being changed without users expecting it).

For all my tests, I renamed `spedometer.gd` in the project root to something else (and also renamed the corresponding `spedometer.gd.uid` when renaming outside the editor).

Some feedback:

- Renaming a script while the editor is open works.
- Renaming a script while the editor is closed works, but an error about the script not being findable on the filesystem is sometimes printed the next time you open the editor. It may be related to the FileSystem dock status; I can't get this to happen consistently. The project will run correctly with no changes required anyway. It also works if you run `--import` then run the project directly.

- Renaming a script while the editor is closed breaks the running project if you run the project immediately afterwards (**Run** button in the project manager), without going through the editor beforehand. Run it from a terminal to see this error:

```
ERROR: Attempt to open script 'res://test2.gd' resulted in error 'File not found'.
   at: (modules\gdscript\gdscript.cpp:1102)
ERROR: Failed loading resource: res://test2.gd. Make sure resources have been imported by opening the project in the editor at least once.
   at: (core\io\resource_loader.cpp:318)
ERROR: res://town/town_scene.tscn:174 - Parse Error: [ext_resource] referenced non-existent resource at: res://test2.gd
   at: ResourceLoaderText::_printerr (scene\resources\resource_format_text.cpp:41)
```

And when you try to click a button in the menu:

```
SCRIPT ERROR: Invalid assignment of property or key 'car_body' with value of type 'VehicleBody3D (vehicle.gd)' on a base object of type 'Button'.
          at: _load_scene (res://car_select/car_select.gd:20)
```

This issue is probably not fixable directly (it's similar to when you try to run a project without importing it in the editor first), but I wonder if we can better signal this in console output and the project manager.

We could consider storing a checksum of the source file in the UID file (e.g. on the second line), so that the UID file can be moved automatically to the new location if the user only renames the source file and not the UID file (by checking the checksum of all UID files in the project and moving the one that matches, and with no source file associated anymore). This is quite complex to implement correctly so it'd be a topic for its own proposal.

Either way, I consider this to be in a good state to be mergeable.","2024-10-10T14:14:56Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Looks good, but I cannot say whether this is accurate information.","2024-09-23T09:17:19Z",false,"COMMENTED"
"DevPoodle","CONTRIBUTOR","","2024-09-23T12:37:25Z",false,"COMMENTED"
"Geometror","MEMBER","The shortcut doesn't work when the EditorFileDialog is opened from the project manager:

<img width=""344"" alt=""{68B68327-AD51-421B-B1DC-12138134DDD8}"" src=""https://github.com/user-attachments/assets/502608fd-a6c8-484d-9121-2c9c3b02b113"">
","2024-09-25T17:45:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-25T17:48:07Z",false,"COMMENTED"
"pafuent","CONTRIBUTOR","","2024-09-25T19:51:16Z",false,"COMMENTED"
"pafuent","CONTRIBUTOR","","2024-09-25T20:00:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-26T08:35:30Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-09-26T11:17:15Z",false,"COMMENTED"
"Geometror","MEMBER","Tested again and works as expected both in the editor and project manager :)
Great work!","2024-09-26T12:08:13Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-26T12:27:36Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-26T12:39:13Z",false,"COMMENTED"
"pafuent","CONTRIBUTOR","","2024-09-26T12:40:02Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-26T12:41:58Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-26T12:42:43Z",false,"COMMENTED"
"pafuent","CONTRIBUTOR","","2024-09-26T12:48:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-26T12:49:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-26T12:49:34Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-26T12:54:22Z",false,"COMMENTED"
"pafuent","CONTRIBUTOR","","2024-09-26T13:04:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-26T13:18:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-26T13:18:53Z",false,"COMMENTED"
"pafuent","CONTRIBUTOR","","2024-09-26T13:22:13Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-26T13:27:05Z",false,"COMMENTED"
"pafuent","CONTRIBUTOR","","2024-09-26T14:08:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-26T16:15:59Z",false,"APPROVED"
"Geometror","MEMBER","","2024-09-27T10:13:56Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-22T20:27:07Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-22T20:32:37Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/2d6af000e763b64967672bb8603c699eaef40949), there are rendering issues with this MRP from https://github.com/godotengine/godot/pull/92797#issuecomment-2309051165:

[MRP_text_batching.zip](https://github.com/user-attachments/files/16744518/MRP_text_batching.zip)

No text appears when `GODOT_2D_TEX_BATCHING_ENABLED=1` is used to run Godot, so the scene appears just gray. This occurs both with Vulkan and Direct3D 12 (but not OpenGL). The text and its shadow appear normally without this variable.

Performance figures I got so far (but note that the project doesn't render correctly with `GODOT_2D_TEX_BATCHING_ENABLED=1` yet):

&nbsp;| Vulkan | Direct3D 12 | OpenGL (Compatibility)[^1]
-|-|-|-
**Before** | 127 FPS (7.87 mspf) | 83 FPS (12.04 mspf) | 17 FPS (58.82 mspf)
**After** | 187 FPS (5.34 mspf) | 167 FPS (5.98 mspf) | 17 FPS (58.82 mspf)

[^1]: This PR does not modify OpenGL code.

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Windows 11 23H2 (MSVC 2022)
</details>","2024-09-23T00:56:27Z",false,"CHANGES_REQUESTED"
"clayjohn","MEMBER","","2024-09-23T01:04:52Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-25T21:24:12Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-25T21:26:42Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-25T21:28:58Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-25T21:29:22Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-25T21:40:41Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-26T03:14:50Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-26T06:09:31Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-26T08:51:53Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-26T15:50:48Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-26T20:00:02Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-26T22:51:40Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-26T22:53:17Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-28T00:42:12Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-28T20:40:51Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-28T20:42:06Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-28T20:43:35Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-29T19:32:43Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-30T21:39:09Z",false,"COMMENTED"
"clayjohn","MEMBER","The code looks great as-is now. I really like the new implementation. 

Just two final things before merging:
1. Conflicts need resolving (I think that was from the Ubershader PR, sorry about that)
2. I'd like to test this on Android with a scene that doesn't batch just to ensure that the extra indirection doesn't make a big difference","2024-10-03T17:12:31Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-03T17:15:37Z",false,"COMMENTED"
"Ansraer","CONTRIBUTOR","Had some time while riding the train yesterday and gave this PR a quick spin. While I really like the concept and the implementation itself looks fine to me, I was somewhat concerned that the overhead of this PR could result in a performance regression for scenes that were the theoretical worst case for batching (I think I briefly mentioned something along those lines to clay during the last rendering meeting).

So to kill some time during my train ride, I threw together a gdscript that would randomly populate the scene with various 2D objects based on a given seed. Using this very scientific testing approach, I compared a non debug build of this PR with a non debug build of the dev2 commit.
While I got a decent FPS boost most of the time in a handful of cases the opposite was the case, in the worst case scenario I lost around a third of my FPS.

I didn't have time to look deeper into it, but my guess right now is that either the cpu overhead and additional indirection step on the GPU have enough performance overhead that this PR performs poorly with scenes that are not suitable for batching. (right now my prime suspect is the CPU, but even the GPU looked a bit suspect with the limited tooling I had on my craptop)

I suppose some of that is unavoidable and might not necessarily be a problem in a real use case (though I wonder what would happen when someone makes er.g. a platformer that uses a lot of Shape2Ds for the terrain), but I would like to hear someone else's opinion on this before I approve the PR.","2024-10-04T17:11:47Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks good to me now. 

For posterity, this change is a performance optimization that significantly reduces the number of batches needed to render a scene. Fewer batches means fewer draw calls which generally means much  lower CPU cost. 

In all normal cases we have found that this is a huge performance win. Especially in cases that were tricky to batch previously (i.e. alternating textures like you would get when you have text with shadows). 

Previously, users had some responsibility to ensure that objects were grouped together in a way that would favour batching. In Godot 3.x, we had a code path that could reorder elements to improve batching. With this change, there are many more situations that can be batched without users having to think about batching. 

However, the worst-case scenario has become slower. The worst-case scenario is a scene with a high number of draw calls where the batching system can only manage one object per batch. This can happen if the scene rotates back and forth between two different draw commands. 

In our testing example we draw 10000 Sprites and 10000 lines for a total of 20000 batches. This creates a CPU bottleneck. With this PR, performance is approximately 2X worse on my i7-1165G7 CPU. That situation is, of course not realistic, but we will still work on improving performance in a follow up PR. 

Because all realistic situations are a vast improvement and this PR fixes a few outstanding bugs, I am happy to merge it and then nail down performance in a follow up PR","2024-10-04T22:54:10Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-08T17:27:18Z",false,"APPROVED"
"stuartcarnie","CONTRIBUTOR","The latest commit includes:

* `CTZ32` and `CTZ64` APIs to count trailing zeros using compiler intrinsics, if available, and a software fallback otherwise
* Added unit tests to test intrinsic and software fallback of `CTZ(32|64)` APIs
* Extended `LRUCach` in `lru.h` to support a `constexpr` template argument specifying a `BeforeEvict` callback, so clients can perform additional cleanup if an element is evicted from the cache. 2D needs this to free the uniform set RID. 
","2024-10-13T23:57:43Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","@AThousandShips Literally unusable how dare you make such a blunder","2024-09-22T19:29:12Z",false,"APPROVED"
"clayjohn","MEMBER","Nice catch!","2024-09-22T20:25:55Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","This seems okay. I'm not sure who else can take a look at `make_rst.py`, though, just to ensure it doesn't rarely behave weird occasionally.","2024-09-23T09:12:28Z",false,"APPROVED"
"dalexeev","MEMBER","Looks good to me. Thanks and sorry for the misunderstanding![^1]

[^1]: I missed the text ""With this PR,"" and that the pictures were in reverse order. To avoid such questions in the future, you could use ""Before"" and ""After"" captions. Please note that many contributors are not native English speakers.","2024-09-23T10:30:14Z",false,"APPROVED"
"bits-by-brandon","CONTRIBUTOR","","2024-09-22T17:53:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-22T17:55:58Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-22T19:47:13Z",false,"COMMENTED"
"bits-by-brandon","CONTRIBUTOR","","2024-09-22T19:53:26Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-22T20:26:00Z",false,"COMMENTED"
"bits-by-brandon","CONTRIBUTOR","","2024-09-22T20:48:48Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-23T08:47:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-23T09:00:28Z",false,"COMMENTED"
"bits-by-brandon","CONTRIBUTOR","","2024-09-23T12:04:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-23T12:12:04Z",false,"COMMENTED"
"bits-by-brandon","CONTRIBUTOR","","2024-09-23T12:44:30Z",false,"COMMENTED"
"bits-by-brandon","CONTRIBUTOR","","2024-09-23T12:56:02Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-23T13:45:48Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-23T13:49:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-23T13:51:02Z",false,"COMMENTED"
"bits-by-brandon","CONTRIBUTOR","","2024-09-23T13:54:32Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-23T14:12:49Z",false,"COMMENTED"
"bits-by-brandon","CONTRIBUTOR","","2024-09-23T15:05:37Z",false,"COMMENTED"
"bits-by-brandon","CONTRIBUTOR","","2024-09-23T15:13:25Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-27T20:13:51Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-27T20:14:16Z",false,"COMMENTED"
"KoBeWi","MEMBER","Looks good, though I think the new enum shouldn't be in DisplayServer, or at least be wrapped in TOOLS_ENABLED. It's editor-only.","2024-09-27T20:17:16Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-29T14:34:12Z",false,"COMMENTED"
"bits-by-brandon","CONTRIBUTOR","","2024-09-29T14:51:16Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-29T15:02:44Z",false,"COMMENTED"
"bits-by-brandon","CONTRIBUTOR","","2024-09-29T16:20:24Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-30T08:25:33Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-30T11:31:40Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-22T16:49:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","Simple code error","2024-09-22T15:36:57Z",false,"APPROVED"
"clayjohn","MEMBER","Oh wow. That was a bit dangerous. For context, almost all slices of a texture would have the same format override and swizzle. So this would have resulted in a lot of bad duplicate hashes. ","2024-09-22T20:33:13Z",false,"APPROVED"
"fire","MEMBER","","2024-09-22T22:21:01Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great to me! The performance results are really the cherry on top of the cake!","2024-09-27T21:43:29Z",false,"APPROVED"
"fire","MEMBER","Did not deeply review the code, but the design proposal is good.","2024-09-27T21:49:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-28T22:55:14Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM","2024-09-22T15:59:31Z",false,"APPROVED"
"timothyqiu","MEMBER","Implementation-wise, this is the right approach to get that add button style.","2024-09-22T10:25:53Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-23T10:56:47Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-23T07:11:38Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-23T08:22:43Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-09-23T09:55:29Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-09-22T05:47:03Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-22T18:13:20Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-22T18:19:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-22T18:21:09Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-09-24T12:03:44Z",false,"APPROVED"
"Calinou","MEMBER","","2024-09-24T16:32:22Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-24T16:32:32Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-24T16:32:39Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-24T16:32:43Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-24T16:32:48Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-24T16:32:58Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-24T16:33:02Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-24T16:33:08Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-24T16:33:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-24T16:35:59Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-09-29T14:00:55Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-10-01T14:08:57Z",false,"CHANGES_REQUESTED"
"stuartcarnie","CONTRIBUTOR","LGTM ‚Äì thanks!","2024-09-28T19:34:35Z",false,"APPROVED"
"adamscott","MEMBER","@stuartcarnie approved.","2024-10-07T13:37:48Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","I don't know much about Metal, in general, but lately I've been spending a bunch of time in this part of the `RenderingDevice` and `RenderingServer` API, and this seems about right to me.

However, it would be good for @stuartcarnie and the rendering team to take a look","2024-09-22T17:06:51Z",false,"APPROVED"
"kitbdev","CONTRIBUTOR","","2024-09-28T15:55:36Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-09-28T15:59:31Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-09-28T16:30:03Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-09-28T16:30:23Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","There is an issue with hovering and clicking on the minimap at the left and bottom sides:

![te_fix_visual_issues_minimap_issue](https://github.com/user-attachments/assets/346c5cb8-f099-429a-adc8-2e51b98c8178)","2024-10-03T16:12:01Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-10-03T22:45:02Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-21T21:46:39Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-21T22:15:49Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-21T22:17:31Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Approving in principle, see the proposal for reasoning.
If I may add, the localization contributors may appreciate this too, as translating ""the shader language"" or ""Godot shader language"" consistently is somewhat tricky.","2024-09-22T19:42:04Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-09-22T20:18:36Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-22T20:24:32Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-22T20:27:57Z",false,"COMMENTED"
"DeeJayLSP","CONTRIBUTOR","","2024-09-22T20:36:40Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great!","2024-10-12T08:13:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-04T17:03:04Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-04T17:08:02Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-04T20:20:33Z",false,"APPROVED"
"TokageItLab","MEMBER","It is fine as far as testing with MRP.

The pointing out that there is a precision problem (slight errors due to differences in algorithms) when truncating by int makes sense as the cause of the problem.","2024-09-22T01:28:23Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","I checked the source code and I can confirm the reasoning to be correct.

Note that for the related function `add_file`, the parameter is exposed as `pck_path`, and that internally the parameter is actually called `p_file`. If possible, we should be renaming the exposed parameter. It may have been an oversight.","2024-09-21T16:10:55Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-23T07:57:20Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-21T15:28:06Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-25T12:44:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-26T16:17:00Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Approving in advance because I recall this was discussed in RocketChat in the past. Showing the toggle but disabled during search is a nice touch.","2024-09-21T15:57:21Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-21T13:52:14Z",false,"COMMENTED"
"reptofrog","CONTRIBUTOR","","2024-09-21T15:10:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-21T15:13:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-21T15:25:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-21T15:26:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","Once those minor details are fixed this looks good to me!","2024-09-21T15:32:44Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","The reasoning for changing the default value, as discussed in the linked proposal, makes sense to me.

Can you please double check, if it would make sense to make additional adjustments to the following location in the code base:

https://github.com/godotengine/godot/blob/506d6e427a4eecfc1e5e5ee1180019a876119701/modules/gdscript/tests/scripts/project.godot#L15
","2024-09-26T21:14:56Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","From the input side, this looks good.","2024-10-01T16:46:47Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-21T13:05:09Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Whoops, sorry! I'm not sure how that snuck in there, because you are right that we don't need it. Thanks for catching it!","2024-09-21T13:48:06Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-09-21T15:34:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-21T15:37:20Z",false,"COMMENTED"
"timothyqiu","MEMBER","Compiles successfully","2024-09-21T15:46:33Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-24T09:45:05Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-09-21T12:50:23Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-23T07:57:13Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-21T08:54:19Z",false,"APPROVED"
"dalexeev","MEMBER","Makes sense to me. Yes, this doesn't fix the Visual Studio issue retroactively for existing projects, but it's probably better to let users decide whether they need `.editorconfig` or not.

Also please remove the following lines:

https://github.com/godotengine/godot/blob/5ccbf6e4c794a4e47456edd9434b75fcd6096a2f/modules/gdscript/tests/scripts/.editorconfig#L1-L2","2024-10-04T07:17:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-05T07:32:04Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-10-05T07:59:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-21T09:46:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-21T06:53:02Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-25T14:40:50Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-21T06:57:04Z",false,"APPROVED"
"fire","MEMBER","Looks ok to me. I had a preview implementation of this and it did the same steps.

https://github.com/godotengine/godot/pull/88336
","2024-09-21T07:06:51Z",false,"APPROVED"
"Faless","COLLABORATOR","","2024-09-29T14:01:18Z",false,"COMMENTED"
"pafuent","CONTRIBUTOR","","2024-09-30T01:32:57Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-09-30T11:46:38Z",false,"COMMENTED"
"pafuent","CONTRIBUTOR","","2024-09-30T14:51:12Z",false,"COMMENTED"
"markdibarry","CONTRIBUTOR","","2024-09-21T01:48:40Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-21T09:34:35Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks! Good catch :-)","2024-09-21T00:17:31Z",false,"APPROVED"
"kiswa","NONE","","2024-09-22T13:27:07Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-09-22T13:48:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-22T15:28:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-22T15:46:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-22T16:17:20Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-09-22T20:50:40Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-22T21:33:27Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-10T20:41:19Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-10-10T21:02:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-10T22:08:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-10T22:17:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-10T22:26:52Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-10-10T23:54:00Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-10-11T01:08:31Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T18:53:22Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-10-11T19:07:51Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T19:17:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T19:20:35Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T19:24:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T19:26:59Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T19:38:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T19:39:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T19:48:11Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T20:16:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T20:28:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T20:30:02Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T20:31:05Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T20:31:19Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-10-11T21:03:23Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-10-11T21:04:00Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-10-11T21:07:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T21:13:22Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-10-11T21:19:57Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T21:22:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T21:28:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T21:30:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T21:42:15Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T21:43:51Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-10-11T21:45:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-11T21:51:56Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-10-11T21:51:58Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-12T21:50:51Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-10-13T02:08:49Z",false,"COMMENTED"
"YeldhamDev","MEMBER","LGTM.","2024-10-03T20:46:28Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Looks great!","2024-09-22T04:40:14Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-09-21T00:28:20Z",false,"COMMENTED"
"SaracenOne","MEMBER","Good job, and congratulations on your first commit! I tested this and it does appear to work in regards to the issue I raised with 7zip. I'll approve this for now, but would you mind squashing the commits from this PR into a single commit? We generally prefer that convention when merging.","2024-10-09T22:24:40Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-10T10:52:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-11T09:48:31Z",false,"APPROVED"
"bruvzg","MEMBER","Seems to be working as expected.

> Use case described by @Maran23 in https://github.com/godotengine/godot/issues/97128#issuecomment-2357090873 still doesn't work. I can look into it later.

This likely requires handling [CFSTR_FILECONTENTS](https://learn.microsoft.com/en-us/windows/win32/shell/clipboard?redirectedfrom=MSDN#cfstr_filecontents) and [CFSTR_FILEDESCRIPTOR](https://learn.microsoft.com/en-us/windows/win32/shell/clipboard?redirectedfrom=MSDN#cfstr_filedescriptor) in addition to `CF_HDROP`.","2024-10-13T09:41:38Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-09-20T17:19:58Z",false,"COMMENTED"
"AThousandShips","MEMBER","Thank you for catching this, must have gotten stuck in some refactoring at some point!","2024-09-20T16:27:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-04T20:23:46Z",false,"APPROVED"
"adamscott","MEMBER","","2024-09-20T15:54:28Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-20T15:55:40Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-20T16:11:43Z",false,"COMMENTED"
"akien-mga","MEMBER","Works well on Fedora 40 KDE Wayland:

```
Godot v4.4.dev (9e2df27ed) - Fedora Linux 40 (KDE Plasma) on Wayland - X11 display driver, Multi-window, 1 monitor - Vulkan (Forward+) - dedicated AMD Radeon RX 7600M XT (RADV NAVI33) - AMD Ryzen 7 7840HS w/ Radeon 780M Graphics (16 threads)
```","2024-09-21T09:16:51Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-20T14:56:32Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-20T11:43:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-20T12:48:18Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-20T12:42:52Z",false,"COMMENTED"
"aryan-11825114","CONTRIBUTOR","","2024-09-20T12:48:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-20T12:53:22Z",false,"COMMENTED"
"Geometror","MEMBER","Looking good; tested and works as expected!
Last thing remaining: Please squash your commits into one as per https://docs.godotengine.org/en/stable/contributing/workflow/pr_workflow.html","2024-09-23T09:50:35Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-09-27T12:57:39Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-20T10:00:24Z",false,"DISMISSED"
"Calinou","MEMBER","","2024-10-01T13:58:16Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-10-01T13:58:24Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-10-01T13:58:30Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-10-01T13:58:37Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-10-01T13:58:43Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-10-01T13:59:01Z",false,"COMMENTED"
"rburing","MEMBER","Looks good to me, as it tests all that can be tested in isolation (using only this class). Please [squash the commits](https://docs.godotengine.org/en/latest/contributing/workflow/pr_workflow.html#the-interactive-rebase) as required by our workflow (and ideally, change the commit message to the current title of this PR).","2024-10-04T07:11:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-20T10:41:52Z",false,"APPROVED"
"HolonProduction","MEMBER","Makes sense to clarify this, but I think the ancestor formulation should be changed in some way that excludes Node3D and Ancestors that have a non CanvasItem Node in between. Can't really think of a concise way to say that though. Maybe ""CanvasItem ancestors"" is sufficient for now :shrug: ","2024-09-20T15:32:16Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-20T15:43:25Z",false,"COMMENTED"
"AdriaandeJongh","CONTRIBUTOR","","2024-09-22T12:33:30Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","> Thanks for the feedback! Replacing 'item' with 'node' while subsequently talking about the 'visibility' property is also a bit confusing, so I opted for spelling out `[CanvasItem]` instead.

I actually don't personally find that to be the case. I have a few notes written about why and how, but in short it makes the description harder to read and localise. I'll consider it a nitpick that I can adjust later, as a lot of the documentation already does this.
To make it less confusing you could've also said ""this node"", instead. ","2024-09-22T13:10:22Z",false,"APPROVED"
"kleonc","MEMBER","","2024-09-22T14:42:59Z",false,"COMMENTED"
"AdriaandeJongh","CONTRIBUTOR","","2024-09-22T15:13:51Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-09-22T15:47:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-22T15:49:06Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-22T16:22:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-22T16:31:03Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-22T17:48:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-22T17:49:32Z",false,"COMMENTED"
"HolonProduction","MEMBER","","2024-09-22T17:55:44Z",false,"COMMENTED"
"AdriaandeJongh","CONTRIBUTOR","","2024-09-23T08:54:24Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-23T09:06:27Z",false,"COMMENTED"
"AdriaandeJongh","CONTRIBUTOR","","2024-09-23T10:13:50Z",false,"COMMENTED"
"AdriaandeJongh","CONTRIBUTOR","","2024-09-23T10:14:29Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-23T14:13:38Z",false,"APPROVED"
"kleonc","MEMBER","","2024-09-23T14:23:19Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-09-23T14:24:34Z",false,"COMMENTED"
"AdriaandeJongh","CONTRIBUTOR","","2024-09-23T14:35:18Z",false,"COMMENTED"
"AdriaandeJongh","CONTRIBUTOR","","2024-09-23T14:38:04Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-09-23T14:56:54Z",false,"COMMENTED"
"AdriaandeJongh","CONTRIBUTOR","","2024-09-23T15:27:41Z",false,"COMMENTED"
"akien-mga","MEMBER","Seems good for now, but we really need to change the way we deal with CSV for translations to remove this and many other hacks.

For example `.csv` files are the only ""1 source to multiple Resources"" imported files, which also mean that the generated `.translation` files can't be put in `.godot/imported/`, because there's no way for `load(""res://translations.csv"")` to be remapped to a single resource (as seen in https://github.com/godotengine/godot/pull/42392#issuecomment-887370007).","2024-09-20T10:38:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-20T10:13:17Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-20T10:13:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-20T10:16:11Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-09-20T11:37:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-20T14:59:36Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-09-20T15:06:25Z",false,"COMMENTED"
"wenqiangwang","NONE","","2024-09-20T16:09:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-20T16:12:07Z",false,"COMMENTED"
"wenqiangwang","NONE","","2024-09-20T16:30:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-20T16:31:47Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-20T10:10:49Z",false,"APPROVED"
"Chaosus","MEMBER","LGTM, A minor compatibility breakage is acceptable in that case (I think)","2024-09-20T17:50:25Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-20T18:15:56Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected on Windows 11 23H2. This is a great start üôÇ 

Some feedback:

- I'd make the snapshot store the exact Godot version (including commit hash) that was used to generate it, so that you can compare it in diffs. Use something like this to generate the stored version string:

https://github.com/godotengine/godot/blob/c3e16cda00a9fbec4515142f4c59bc5134f1bfb0/editor/project_manager.cpp#L1463-L1467

- The **Snapshot Overview** line shouldn't have an underline, as people can mistake it for a clickable link. Just use a bold font to indicate it's a heading.

![image](https://github.com/user-attachments/assets/4548ca6e-b339-4485-915c-be6508c30d4a)

- I noticed timestamp files are named according to the UTC time, not local time. This is inconsistent with log file naming which always uses local time.

- It might be a good idea to compress ObjectDB snapshot files as they can get quite large in projects with lots of objects. If I put a 3.2 MB snapshot in a ZIP, it's only 224 KB once compressed, which is a more than 10x compression ratio. FileAccess has compression methods available for this, along with the Compression singleton.

- Whenever I save a snapshot, I see this in the terminal output (not the editor Output panel):

```
Starting to snapshot
WARNING: Property not found: ProjectSettings
     at: ProjectSettings::_get (core\config\project_settings.cpp:351)
snapshot length: 7089
```

The unknown setting warning should be fixed, and I suggest moving the snapshot-related prints to `print_verbose()` so that they only appear in verbose mode.

- I got a sporadic crash when clicking the **Filter objects** field in the ObjectDB debugger. I haven't been able to reproduce it again though:

```
CrashHandlerException: Program crashed
Engine version: Godot Engine v4.4.dev.custom_build (036846c0284c4176ace06ca38d466bfb167618a1)
Dumping the backtrace. Please include this when reporting the bug to the project developer.
[0] StringName::~StringName (C:\Users\Hugo\Documents\Git\godotengine\godot\core\string\string_name.h:187)
[1] StringName::~StringName (C:\Users\Hugo\Documents\Git\godotengine\godot\core\string\string_name.h:187)
[2] EditorStringNames::~EditorStringNames
[3] EditorStringNames::`scalar deleting destructor'
[4] memdelete<EditorStringNames> (C:\Users\Hugo\Documents\Git\godotengine\godot\core\os\memory.h:140)
[5] EditorStringNames::free (C:\Users\Hugo\Documents\Git\godotengine\godot\editor\editor_string_names.h:45)
[6] unregister_editor_types (C:\Users\Hugo\Documents\Git\godotengine\godot\editor\register_editor_types.cpp:310)
[7] Main::cleanup (C:\Users\Hugo\Documents\Git\godotengine\godot\main\main.cpp:4522)
[8] widechar_main (C:\Users\Hugo\Documents\Git\godotengine\godot\platform\windows\godot_windows.cpp:184)
[9] _main (C:\Users\Hugo\Documents\Git\godotengine\godot\platform\windows\godot_windows.cpp:206)
[10] main (C:\Users\Hugo\Documents\Git\godotengine\godot\platform\windows\godot_windows.cpp:220)
[11] WinMain (C:\Users\Hugo\Documents\Git\godotengine\godot\platform\windows\godot_windows.cpp:234)
[12] __scrt_common_main_seh (D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:288)
[13] <couldn't map PC to fn name>
-- END OF BACKTRACE --
```

- At the minimum bottom panel height, it's possible for the Objects panel to overlap the bottom of the editor:

![image](https://github.com/user-attachments/assets/2a78ff92-5355-4670-a233-e4a128a5916b)

- The **Diff against** dropdown should gray out the currently selected snapshot, as there's no point in comparing a snapshot against itself:

![image](https://github.com/user-attachments/assets/a79cd3b1-271e-44b4-b700-16c8ef25336b)

When selecting the snapshot that is currently being diffed against, the two should be swapped together (i.e. **Diff against** automatically changes).

- The JSON view should use the editor's code font, as this kind of data displays best with fixed-width fonts. See https://github.com/godotengine/godot/pull/89690 for an example of this, which also adds line numbers and syntax highlighting (there's a built-in JSON syntax highlighter available in the editor).

What does ""RC"" mean here? I'm guessing it means ""reference count"". I think we have the space to spell it out here:

![image](https://github.com/user-attachments/assets/6ab8c842-a2c6-4785-8311-a660eefd35e7)

- I wonder if tooltips can be added to each column in the **Objects** and **RefCounted** sections to explain some of the columns, especially **In**/**Out** in Objects and **Total Refs**/**User Refs**/**User Cycles** which are not obvious at a glance.","2024-09-24T23:15:49Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","","2024-09-24T23:16:32Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-24T23:17:08Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-24T23:17:34Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-24T23:17:43Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected. Keep up the good work :slightly_smiling_face: 

I've noticed a few remaining UI issues:

- The line spacing in the bullet point list at the right of the **RefCounted** tab should be increased for more comfortable reading:

![image](https://github.com/user-attachments/assets/f9a14b8e-df4b-493a-9f96-3ca260ee93e6)

This issue isn't present in bullet point lists found elsewhere, such as the Summary tab.

- The JSON tab doesn't use a fixed-width font correctly, it uses the default project font instead:

![image](https://github.com/user-attachments/assets/b0771987-134f-46f7-8ccd-f0f1be382dea)

Check where you are getting the editor's code font; it may be done too early and should be done in `NOTIFICATION_THEME_CHANGED` instead.

- Loading the JSON tab can take a long time (easily 10+ seconds on a high-end machine when comparing two snapshots on Truck Town), so I suggest displaying some kind of ""Generating JSON, this may take a while..."" text in the TextEdit(s) then actually putting the JSON text in place one or two frames later (`call_deferred()` can help here).

- In a future PR, we could add a keyboard shortcut that can be pressed in the running project to capture an ObjectDB snapshot (similar to how pressing <kbd>F8</kbd> quits the game when the project window is focused). This would make it easier to capture snapshots during gameplay.","2024-10-07T17:02:21Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","","2024-10-07T17:05:42Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-20T09:36:24Z",false,"APPROVED"
"kleonc","MEMBER","","2024-09-19T22:25:56Z",false,"COMMENTED"
"aaronfranke","MEMBER","This is correct. The confusing thing is that (as the PR description states) in Godot's C++ code, the `[]` operator uses rows, while in GDScript and C#, the `[]` operator uses columns. The rename of `p_axis` to `p_row` helps too.","2024-09-19T23:08:31Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally on both text and visual shaders, it works as expected.","2024-09-20T17:58:32Z",false,"APPROVED"
"Calinou","MEMBER","","2024-09-20T17:59:25Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-20T18:10:04Z",false,"COMMENTED"
"clayjohn","MEMBER","Seems fine to me!","2024-09-20T20:11:50Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-09-20T20:12:47Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-20T20:25:50Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-20T20:42:42Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-21T02:25:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-21T09:33:29Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-10-07T23:42:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-20T08:55:10Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-09-20T11:29:36Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-19T20:33:34Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-09-19T23:29:23Z",false,"APPROVED"
"WhalesState","CONTRIBUTOR","","2024-09-20T19:30:20Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-09-20T08:06:52Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-09-19T21:30:57Z",false,"COMMENTED"
"HolonProduction","MEMBER","","2024-09-20T10:01:01Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-20T10:33:55Z",false,"COMMENTED"
"HolonProduction","MEMBER","","2024-09-20T10:36:22Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-09-20T11:21:13Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-09-20T04:45:30Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-20T10:18:00Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-09-20T13:38:55Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-19T16:49:32Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-19T16:56:56Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-19T20:26:14Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","Seems to largely supersede #93313, the only real exception being `.clang-format` itself but that can just become its own PR","2024-09-19T20:28:41Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-19T15:03:58Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-19T14:32:56Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-19T14:04:16Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-19T14:31:27Z",false,"APPROVED"
"AThousandShips","MEMBER","Thank you for your contribution 

This can't be done without major compatibility breakage, there's no way to register compatibility methods for these methods, which makes this not possible to handle gracefully 

Renaming this serves little purpose, and breaks all existing code using it

The way to solve this would be to deprecate the old method and add a new one, if that is done this can move forward to be discussed ","2024-09-19T13:23:48Z",false,"DISMISSED"
"AThousandShips","MEMBER","","2024-09-19T13:30:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-19T14:16:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-19T14:20:23Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","Requires a squash before merging.","2024-09-20T04:54:22Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-19T11:30:43Z",false,"DISMISSED"
"npinsker","NONE","","2024-09-19T11:39:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-19T11:40:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","As commented above I'd say that this PR shouldn't mix renaming variables or moving code with surface level changes, so comment changes should be separate from reordering or renaming variables, as changes to the code itself, even while it *shouldn't* affect behavior is something we should make sure we track well

Further strictly changing comments is very different and would be discussed far more so it'd hold back any other style changes, and might be rejected entirely on their own, we can also hide the comment changes from the history to make this PR less bad for the git history","2024-09-19T11:45:44Z",false,"DISMISSED"
"timothyqiu","MEMBER","","2024-09-19T11:52:53Z",false,"COMMENTED"
"npinsker","NONE","","2024-09-19T12:01:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-19T12:05:37Z",false,"COMMENTED"
"npinsker","NONE","","2024-09-19T12:14:56Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I actually am not against this, assuming the terminology is correct. The code being shifted brings it closer to where it's actually used, which makes the intent clearer. It does not functionally break.","2024-09-20T10:58:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-19T09:32:30Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-19T11:27:47Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-19T09:37:11Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-09-20T18:39:11Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-19T10:48:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-19T12:17:51Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-19T13:29:24Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-19T22:13:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-20T09:49:31Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-20T12:33:45Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-20T14:09:45Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-20T14:47:13Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-20T18:25:56Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","I dont see any reason why it shouldn't be exposed","2024-09-20T04:51:27Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM and makes sense for parity","2024-09-20T10:35:28Z",false,"APPROVED"
"akien-mga","MEMBER","Makes sense to expose. I agree with keeping the names consistent with TextEdit.","2024-09-20T12:17:50Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-09-20T13:04:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-19T10:45:29Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-19T10:50:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-19T12:11:16Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-19T13:36:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-19T13:38:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-19T13:40:03Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Looks good to me!","2024-09-19T14:15:22Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","I see no reason not to, to be honest.","2024-09-18T21:16:44Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-09-19T02:36:09Z",false,"COMMENTED"
"noidexe","CONTRIBUTOR","","2024-09-19T16:29:14Z",false,"COMMENTED"
"aaronfranke","MEMBER","Needs a squash but otherwise looks good to me.","2024-09-19T21:40:26Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-20T14:24:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-18T19:57:04Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-19T09:43:24Z",false,"COMMENTED"
"ax-IO","NONE","","2024-09-20T17:05:16Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-09-20T19:40:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","Makes sense ","2024-09-18T13:24:48Z",false,"APPROVED"
"karaarslancagri","NONE","","2024-09-18T13:35:52Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-18T12:08:48Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-18T13:59:42Z",false,"COMMENTED"
"JayTropper","NONE","","2024-09-18T15:03:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-19T15:51:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-19T16:00:54Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-19T16:04:07Z",false,"COMMENTED"
"JayTropper","NONE","","2024-09-20T09:10:56Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great! The final step before merging is to squash all the commits together so that the whole PR only contains 1 big commit with all your changes. We like to merge one commit at a time to keep the git history clean and navigable. 

If you don't know how to do that, we have a helpful tutorial in the official documentation https://docs.godotengine.org/en/latest/community/contributing/pr_workflow.html#the-interactive-rebase","2024-09-19T15:12:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-19T15:14:08Z",false,"COMMENTED"
"clayjohn","MEMBER","Yep, looks great! Thank you","2024-09-19T22:15:51Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-18T11:18:37Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-18T09:53:33Z",false,"COMMENTED"
"karaarslancagri","NONE","","2024-09-18T13:36:55Z",false,"APPROVED"
"Calinou","MEMBER","","2024-09-18T14:11:58Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-18T14:12:08Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-18T14:12:22Z",false,"COMMENTED"
"Calinou","MEMBER","The approach makes sense to me and code looks good, but I can't vouch as for whether it's a clean way to achieve this.","2024-09-18T14:12:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-18T14:15:15Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-18T14:25:45Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-18T06:29:06Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-18T08:37:02Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-09-18T01:50:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-18T08:31:47Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-10-07T05:47:55Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-09-17T17:16:43Z",false,"COMMENTED"
"Cykyrios","CONTRIBUTOR","","2024-09-17T19:05:05Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","All this PR requires is some testing and it should be good to go.","2024-09-20T04:59:56Z",false,"APPROVED"
"theraot","CONTRIBUTOR","This PR needs test cases.

I'm not against the feature, but it is not up to me.","2024-10-04T04:48:03Z",false,"COMMENTED"
"Cykyrios","CONTRIBUTOR","","2024-10-04T10:58:38Z",false,"COMMENTED"
"theraot","CONTRIBUTOR","","2024-10-04T11:37:36Z",false,"COMMENTED"
"Cykyrios","CONTRIBUTOR","","2024-10-05T08:07:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-17T16:14:08Z",false,"APPROVED"
"Bromeon","CONTRIBUTOR","Docs look good now, thanks!","2024-10-04T13:31:03Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-09-18T12:10:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","Code looks good but haven't tested, might be able to later today, but looks good and makes sense","2024-09-18T12:15:37Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-09-19T14:52:02Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-09-19T14:52:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-19T14:53:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-19T14:56:42Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-09-19T16:21:04Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T17:51:35Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T17:51:55Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T18:02:57Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T18:32:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T18:48:13Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T18:50:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T18:50:29Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T18:52:07Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T18:58:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T19:00:33Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T19:01:53Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T19:04:08Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T19:04:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T19:06:11Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T19:06:37Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T19:09:40Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-09-25T12:20:36Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-09-25T12:22:43Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-09-25T12:24:06Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-09-25T12:27:11Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-09-25T12:28:51Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-09-25T12:30:05Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-25T13:05:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-25T13:13:33Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-25T13:14:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-25T13:15:46Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-09-25T15:03:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-25T15:13:53Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-09-25T15:50:48Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-25T17:59:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-25T21:23:27Z",false,"APPROVED"
"akien-mga","MEMBER","I haven't re-tested in depth but the changes done since my first review are good.

Let's merge and get some wider testing on both the functionality and the UX, so we can do further adjustments as needed before the 4.4 release.","2024-09-26T09:55:56Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-17T14:16:14Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","I see nothing wrong with this, then.","2024-09-17T15:09:59Z",false,"APPROVED"
"Calinou","MEMBER","Looks great!","2024-09-17T15:16:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-17T12:02:32Z",false,"APPROVED"
"SaracenOne","MEMBER","Yeah, this looks fine, thanks for fixing this! üëç ","2024-09-17T18:22:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-17T11:58:27Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-17T12:17:23Z",false,"APPROVED"
"adamscott","MEMBER","","2024-09-17T15:27:02Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-17T10:28:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","This looks good to me
Once you've fixed the last detail from me please squash your commits into one, see [here](https://docs.godotengine.org/en/latest/contributing/workflow/pr_workflow.html#the-interactive-rebase) ","2024-09-17T10:38:53Z",false,"APPROVED"
"SkylerGoh-dev","CONTRIBUTOR","","2024-09-17T10:39:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-17T10:40:17Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","The new description matches the implementation.","2024-09-17T11:01:19Z",false,"APPROVED"
"detomon","CONTRIBUTOR","","2024-09-17T09:49:01Z",false,"COMMENTED"
"adamscott","MEMBER","Seems ok!","2024-09-17T12:00:12Z",false,"APPROVED"
"Geometror","MEMBER","Works as expected, code looks fine (although I have a planned to refactor some parts of the profiler code soon, so it's not that important)
Most likely it was just an oversight from 3.x where this was the behavior of all profilers, but maybe it had a specific reason to be startable before running a scene/the project, so @Faless should give this a look too.","2024-09-19T16:34:30Z",false,"APPROVED"
"Faless","COLLABORATOR","LGTM","2024-09-25T10:37:49Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-17T06:50:12Z",false,"COMMENTED"
"pafuent","CONTRIBUTOR","","2024-09-17T12:39:00Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-17T14:09:05Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected in all rendering methods.

Linear | Reinhard | Filmic
-|-|-
![Screenshot_20240924_163806 png webp](https://github.com/user-attachments/assets/532290db-82d4-4eab-9a27-94a99a2c26cb) | ![Screenshot_20240924_163810 png webp](https://github.com/user-attachments/assets/00eb4e58-36a5-49af-b993-15627b0f05cf) | ![Screenshot_20240924_163815 png webp](https://github.com/user-attachments/assets/f7fb7b7a-4d73-4771-a7df-d18a70124e13)


ACES | Tony McMapface
-|-
![Screenshot_20240924_163820 png webp](https://github.com/user-attachments/assets/2d140274-3157-4213-a608-c3ff6af0d945) | ![Screenshot_20240924_163824 png webp](https://github.com/user-attachments/assets/f3274218-eb43-4451-8014-df0be98b579f)
","2024-09-24T14:40:21Z",false,"APPROVED"
"Calinou","MEMBER","","2024-09-24T14:40:56Z",false,"COMMENTED"
"jirisvd","CONTRIBUTOR","","2024-09-24T17:26:54Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-26T15:42:16Z",false,"COMMENTED"
"jirisvd","CONTRIBUTOR","","2024-09-26T19:54:49Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-17T08:14:30Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-17T08:14:48Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-10-04T11:18:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-17T08:20:06Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-16T21:12:33Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-09-16T21:14:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-16T21:15:17Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-17T14:24:58Z",false,"COMMENTED"
"groud","MEMBER","","2024-09-21T11:15:24Z",false,"CHANGES_REQUESTED"
"Nazarwadim","CONTRIBUTOR","","2024-09-21T14:50:49Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-19T22:23:40Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-19T22:36:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-19T22:51:09Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-19T23:06:28Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-19T23:07:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-20T21:32:39Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-21T02:00:31Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-10-01T21:17:38Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-10-01T21:20:55Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-04T14:14:02Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-04T14:15:02Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-10-04T16:09:45Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-09-16T20:39:13Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-09-16T18:29:12Z",false,"COMMENTED"
"dalexeev","MEMBER","Looks good to me.","2024-09-16T19:13:08Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-09-16T16:11:11Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-17T15:11:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-17T15:16:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-17T15:19:26Z",false,"COMMENTED"
"aXu-AP","CONTRIBUTOR","","2024-09-17T16:04:31Z",false,"COMMENTED"
"aXu-AP","CONTRIBUTOR","","2024-09-17T16:06:21Z",false,"COMMENTED"
"aXu-AP","CONTRIBUTOR","","2024-09-17T16:09:00Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-09-16T15:42:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-16T16:10:53Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-09-16T16:46:31Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","Great!!
Tested and works perfectly, as expected!","2024-09-19T10:40:47Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Good catch.","2024-09-16T13:03:51Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-16T12:21:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-16T13:15:23Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-16T13:16:44Z",false,"COMMENTED"
"RPicster","CONTRIBUTOR","","2024-09-16T13:53:53Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-16T14:00:38Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-16T14:19:47Z",false,"APPROVED"
"Nahid-Hassan","NONE","","2024-09-16T15:22:25Z",false,"APPROVED"
"AThousandShips","MEMBER","Makes sense to me, been thinking about the input event names for some time, I think it'd be worth investigating if we should make a `InputStringName` structure for these and check the performance as input events are used in pretty tight places and they are used pretty often","2024-09-16T12:07:11Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-09-16T20:06:42Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","Interesting typo. Seems to indeed make sense, if I recall correctly we're processing +1 once all the layers are filled and we need to create the final result. So in GLES we just ended up not doing that final step.","2024-09-16T23:09:27Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","I'm inclined to believe, that this change makes sense.

The idea of consolidating parameter validation for input events would probably be a discussion for a different PR/Issue.","2024-09-18T09:33:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-16T09:18:05Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-16T09:26:22Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` 99a7a9ccd60fbe4030e067b3c36d54b67737446d), it works as expected in Forward+ and Mobile.

When running in Compatibility, you get a shader compilation error like in 3D (as expected):

```
SHADER ERROR: Uniform instances are not supported in gl_compatibility shaders.
```

![image](https://github.com/user-attachments/assets/642a7ce9-7829-4b67-a3c6-7a9fd8b05e5d)

**Testing project:** [test_pr_97058.zip](https://github.com/user-attachments/files/17021089/test_pr_97058.zip)

PS: What is this checkbox for? It's present for both 3D and 3D per-instance uniforms. I can't uncheck it (nothing happens when I click it), regardless of whether the value is modified from its default or not.

![image](https://github.com/user-attachments/assets/bb56c791-e75e-4db4-ac36-4507bf81ae05)
","2024-09-16T23:21:17Z",false,"APPROVED"
"Calinou","MEMBER","","2024-09-16T23:23:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-17T08:57:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-17T13:36:47Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-26T01:06:17Z",false,"COMMENTED"
"huwpascoe","NONE","","2024-09-26T01:12:46Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-26T05:22:37Z",false,"COMMENTED"
"huwpascoe","NONE","","2024-09-26T09:22:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-26T18:25:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-26T18:27:04Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-26T18:27:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-27T09:19:09Z",false,"APPROVED"
"stuartcarnie","CONTRIBUTOR","","2024-09-29T19:35:59Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Sure. Not sure about cherry-picking though","2024-09-16T10:28:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-16T11:16:48Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-09-20T21:24:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-21T09:35:05Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I'd say yeah as is. It's either this, or the feature is stripped out of the codebase because it currently is not working.

I have a gut feeling that the highlight will miss _some_ scripts in the current scene, but we'll see. There's a huge desire to rework the script list someday, but that day is not as of writing this.","2024-09-21T16:00:36Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","**Node4D** when?","2024-09-16T10:31:42Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-09-15T08:59:41Z",false,"COMMENTED"
"sievaxx","CONTRIBUTOR","","2024-09-15T09:01:36Z",false,"COMMENTED"
"sievaxx","CONTRIBUTOR","","2024-09-15T09:11:21Z",false,"COMMENTED"
"sievaxx","CONTRIBUTOR","","2024-09-16T05:39:20Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally on Windows 11 23H2 (rebased on top of `master` https://github.com/godotengine/godot/commit/0a9d8f04c10870c0f9f7bbd2e0505edc8494e299), I noticed an issue where the last character of each file path is missing:

![image](https://github.com/user-attachments/assets/56f10168-dfa5-4037-96de-cf5d7ff33ef0)

This occurs regardless of the selected file/folder count.

UNC paths seem to work, at least with WSL2.

**Testing project:** [test-windows-clipboard.zip](https://github.com/user-attachments/files/17131775/test-windows-clipboard.zip)
","2024-09-25T13:38:51Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-09-15T15:18:13Z",false,"APPROVED"
"fire","MEMBER","","2024-09-15T13:15:58Z",false,"COMMENTED"
"lalitshankarchowdhury","CONTRIBUTOR","","2024-09-15T13:37:34Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-17T18:11:11Z",false,"COMMENTED"
"lalitshankarchowdhury","CONTRIBUTOR","","2024-09-17T18:14:29Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-17T18:16:40Z",false,"COMMENTED"
"lalitshankarchowdhury","CONTRIBUTOR","","2024-09-17T18:27:30Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-17T19:06:33Z",false,"APPROVED"
"tetrapod00","CONTRIBUTOR","","2024-09-15T04:54:08Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-15T20:55:06Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-15T20:57:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-15T21:02:20Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-15T21:04:58Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-15T21:07:20Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-15T21:09:31Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-15T21:53:43Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-15T21:56:15Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-15T21:59:13Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-15T22:04:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-15T22:06:29Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-18T20:46:44Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-18T20:50:21Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

My only concern is that the quad appears quite a bit smaller than the cube, even when you only look at a single face up front:

### Cube

![image](https://github.com/user-attachments/assets/d3e5e610-83b4-459e-9f77-d4a1df427abb)

### Quad

![image](https://github.com/user-attachments/assets/96b9022b-dc15-4fb0-8ee3-073b31052392)

I suggest making the quad cover the entire preview's height. Multiplying its size by roughly 1.5√ó on each axis should do the trick.","2024-09-18T21:38:57Z",false,"CHANGES_REQUESTED"
"akien-mga","MEMBER","","2024-09-18T08:40:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-16T14:28:40Z",false,"APPROVED"
"adamscott","MEMBER","","2024-09-17T15:38:32Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-15T07:53:47Z",false,"APPROVED"
"raulsntos","MEMBER","I tested these changes and they fix the linked issue. However, properties exported by overriding `_get_property_list` now appear under the base class properties:

| 4.3.0 | This PR |
|-|-|
| ![](https://github.com/user-attachments/assets/2929d742-3c60-40b7-8ff5-dd7045f36b23) | ![](https://github.com/user-attachments/assets/dcede796-ca61-4a3b-a95b-581ba0bca12a) |

But this was also introduced by https://github.com/godotengine/godot/pull/93779 and we missed it.","2024-09-15T15:07:00Z",false,"COMMENTED"
"raulsntos","MEMBER","Yes, I think this is an improvement over what we had before. Thanks!","2024-09-19T04:35:26Z",false,"COMMENTED"
"raulsntos","MEMBER","LGTM","2024-09-19T05:35:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-24T10:49:15Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-14T20:01:25Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-14T21:06:11Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-16T00:13:53Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-16T00:30:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T12:50:36Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T12:56:04Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-24T22:47:06Z",false,"COMMENTED"
"fire","MEMBER","","2024-09-18T18:46:28Z",false,"COMMENTED"
"rishikiram","NONE","","2024-09-19T21:39:32Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-16T15:39:55Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-14T17:17:28Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-14T17:18:33Z",false,"COMMENTED"
"Gaktan","CONTRIBUTOR","","2024-09-15T12:53:27Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great, thank you!","2024-09-17T20:16:07Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-09-14T18:04:53Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally on Windows 11 23H2, it works as expected.

This makes more sense as a configurable flag, since non-game applications (and the Godot editor itself) will generally want to keep rounded corners to better fit with other apps on the system.","2024-09-17T12:28:13Z",false,"APPROVED"
"Calinou","MEMBER","","2024-09-17T12:28:41Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-17T12:28:51Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-17T12:29:03Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-17T12:29:09Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-17T13:32:22Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-17T13:50:05Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-10-04T10:19:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-14T16:02:29Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-14T16:06:13Z",false,"COMMENTED"
"KoBeWi","MEMBER","The new default size makes the dialog much more usable. I tested and it works correctly with scaling enabled too.","2024-09-18T12:06:36Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Thanks for the fix!

This may be a useful pattern to propagate as not all logic need to run on start.","2024-09-14T14:44:50Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-14T13:48:36Z",false,"COMMENTED"
"KoBeWi","MEMBER","Seems to fix it, but I wonder why HSlider does not need rounding.","2024-09-14T17:32:19Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-14T11:44:30Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-14T18:53:13Z",false,"COMMENTED"
"L2750558108","CONTRIBUTOR","","2024-09-15T04:08:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-15T07:38:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-15T07:38:36Z",false,"COMMENTED"
"L2750558108","CONTRIBUTOR","","2024-09-15T07:39:38Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-15T08:50:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-14T11:45:52Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-09-19T13:10:13Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-19T18:13:19Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-09-19T18:21:05Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-09-19T18:21:26Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-09-19T18:27:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-19T18:31:01Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-09-19T18:33:40Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-21T12:55:16Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-13T22:03:54Z",false,"COMMENTED"
"fire","MEMBER","As an English speaker object `destructor` is the way I would describe this concept.","2024-09-14T02:11:17Z",false,"COMMENTED"
"fire","MEMBER","","2024-09-14T02:11:58Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-14T05:06:22Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-14T19:22:43Z",false,"COMMENTED"
"fire","MEMBER","","2024-09-14T20:23:59Z",false,"COMMENTED"
"fire","MEMBER","","2024-09-18T18:47:46Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-18T21:21:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-19T11:31:29Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-19T15:32:05Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-19T15:55:23Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-20T13:49:34Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks! I think this is a great idea :-)

I have just a couple notes","2024-09-18T15:31:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-18T15:32:54Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","The latest version looks great to me!","2024-09-30T00:51:29Z",false,"APPROVED"
"kleonc","MEMBER","","2024-09-13T21:15:30Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-13T21:23:21Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-13T21:23:55Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-09-13T21:27:44Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-13T21:51:05Z",false,"COMMENTED"
"kleonc","MEMBER","Fix for the https://github.com/godotengine/godot/issues/95574#issuecomment-2349128058 regression looks good to me.","2024-09-13T22:30:47Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-14T08:05:33Z",false,"APPROVED"
"clayjohn","MEMBER","Makes sense!

Usually the ""see also"" points to the scene-level version of the function (i.e. the Viewport method in this case). But Viewport doesn't expose this, so the intention must have been to highlight the CPU variant. ","2024-09-13T19:22:48Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-14T08:09:55Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-14T09:04:54Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-14T09:05:07Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Makes sense to me! The code looks good. I tested building both the Android and HorizonOS variants, and it seemed to work correctly","2024-09-13T16:29:54Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-14T09:06:08Z",false,"APPROVED"
"AThousandShips","MEMBER","Can confirm that this prevents that issue, can't speak to the exact contents of the files but this works","2024-09-13T15:41:32Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-09-13T16:04:56Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-13T16:20:37Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-09-13T17:13:27Z",false,"APPROVED"
"clayjohn","MEMBER","Tested locally and confirmed that it is working for the MT servers","2024-09-16T23:04:13Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-13T12:13:17Z",false,"COMMENTED"
"raulsntos","MEMBER","Thank you so much, this looks great! I haven't been able to test it very thoroughly yet, but so far it doesn't seem to break anything.","2024-09-15T15:56:09Z",false,"COMMENTED"
"Delsin-Yu","CONTRIBUTOR","","2024-09-15T23:32:21Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-09-19T02:50:15Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-09-19T04:00:34Z",false,"COMMENTED"
"raulsntos","MEMBER","Looks good to me and seems to work fine in my testing, although I'm always wary of changes to the script bridge so more testing is always welcome.
","2024-09-21T17:35:39Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-22T09:15:07Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-13T10:13:52Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-09-15T12:50:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-13T07:30:53Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-09-13T07:43:05Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-13T06:47:18Z",false,"COMMENTED"
"SleeeepyZhou","NONE","","2024-09-13T06:54:26Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-09-13T07:31:07Z",false,"COMMENTED"
"SleeeepyZhou","NONE","","2024-09-13T08:34:02Z",false,"COMMENTED"
"SleeeepyZhou","NONE","","2024-09-13T08:52:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-13T08:34:29Z",false,"COMMENTED"
"Dowsley","CONTRIBUTOR","","2024-09-13T12:55:14Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-13T12:58:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-13T13:05:36Z",false,"COMMENTED"
"Dowsley","CONTRIBUTOR","","2024-09-13T13:06:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-13T13:09:11Z",false,"COMMENTED"
"clayjohn","MEMBER","Makes sense to me. I wish there was an elegant way to expand this for all PrimitiveMeshes. But for now, it makes sense to do for PlaneMesh as that is the most common one to have a huge subdivision amount. ","2024-09-12T21:18:34Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","LGTM, as discussed already on rocketchat, this is a much better name to prevent confusion with Android external textures.","2024-09-18T23:39:42Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-09-19T00:22:53Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-19T10:53:24Z",false,"COMMENTED"
"devloglogan","CONTRIBUTOR","I think the rename you chose to go with is suitable. Code LGTM!","2024-09-19T13:51:55Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-09-19T14:05:58Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-09-12T18:08:19Z",false,"COMMENTED"
"SaNeOr","CONTRIBUTOR","","2024-09-12T18:22:37Z",false,"COMMENTED"
"SaNeOr","CONTRIBUTOR","","2024-09-12T19:35:36Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-09-15T17:01:53Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-09-12T17:12:13Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-12T17:19:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-25T14:48:56Z",false,"APPROVED"
"kleonc","MEMBER","","2024-09-12T18:02:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-12T18:04:50Z",false,"COMMENTED"
"lpenguin","CONTRIBUTOR","","2024-09-13T16:21:05Z",false,"COMMENTED"
"kleonc","MEMBER","LGTM!","2024-09-14T10:21:31Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-14T10:22:01Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-09-15T12:45:34Z",false,"APPROVED"
"lpenguin","CONTRIBUTOR","","2024-09-16T18:47:01Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-12T21:13:58Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-09-13T08:30:08Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-13T08:40:23Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-13T08:40:27Z",false,"APPROVED"
"Faless","COLLABORATOR","","2024-09-13T09:20:57Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-13T09:49:00Z",false,"APPROVED"
"clayjohn","MEMBER","Fantastic work! ","2024-09-12T15:50:20Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-12T15:51:14Z",false,"APPROVED"
"Calinou","MEMBER","The rationale makes sense to me, and code looks good.","2024-09-12T12:47:56Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-13T07:23:29Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-09-13T10:17:51Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-13T10:31:36Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-09-13T03:23:07Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-13T03:33:00Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-14T00:33:52Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-13T13:58:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-13T13:59:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-13T14:00:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-13T14:01:05Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-13T14:21:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-13T14:21:55Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-13T14:23:32Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-12T07:56:13Z",false,"APPROVED"
"clayjohn","MEMBER","This makes sense!","2024-09-12T17:19:13Z",false,"DISMISSED"
"clayjohn","MEMBER","I don't think this is correct anymore. I have a feeling this is only working by relying on behaviour of memdelete that is not guaranteed. 

With this PR when setting a new mesh, we do the following:
1. Clear `blend_shape_tracks` this frees the underlying memory (but does not zero it)
2. Call `mesh_changed`
3. Resize `blend_shape_tracks` this allocates memory (but does not zero it)
4. Reset the blend shape value to the value in `blend_shape_tracks`

But we freed that memory! This PR relies on the `blend_shape_tracks` re-allocating from the same chunk of memory that it had just deallocated from plus not clearing the memory during deletion or re-allocation. This is a classic use-after-free error. 
","2024-09-13T16:39:07Z",false,"CHANGES_REQUESTED"
"skyace65","CONTRIBUTOR","","2024-10-12T13:25:26Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-09-12T06:55:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-12T07:01:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM","2024-09-12T15:53:22Z",false,"APPROVED"
"clayjohn","MEMBER","Makes sense! Indeed creating a shadow mesh should be skipped anyway for points and line primitives, I can't see how it would be beneficial","2024-09-11T20:28:47Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-09-13T03:04:46Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-13T03:16:17Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-12T05:54:33Z",false,"APPROVED"
"stuartcarnie","CONTRIBUTOR","","2024-09-11T19:45:32Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-11T19:46:04Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-11T19:46:36Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-11T19:50:31Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-11T19:52:28Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-11T20:10:47Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-11T20:10:55Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-11T20:12:03Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-11T20:13:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-11T20:14:24Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-11T20:15:53Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-11T20:19:51Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-11T20:20:30Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-11T20:22:51Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks fine to me!","2024-09-11T20:32:22Z",false,"APPROVED"
"Jordyfel","CONTRIBUTOR","","2024-09-12T06:39:34Z",false,"COMMENTED"
"Jordyfel","CONTRIBUTOR","","2024-09-12T12:41:06Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/2be730a05b7ff221b89c967981f7caee6e164ef0), it works as expected.

**Testing project:** [test_pr_96871.zip](https://github.com/user-attachments/files/17078875/test_pr_96871.zip)

Note that RichTextLabel's **Scroll Active** property doesn't have similar functionality available, but it can be recreated using ScrollContainer with this PR.","2024-09-20T17:46:09Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","That's about right.","2024-09-11T18:20:48Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-09-11T19:39:01Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","","2024-09-11T21:41:15Z",false,"COMMENTED"
"L2750558108","CONTRIBUTOR","","2024-09-12T04:33:02Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-09-13T00:42:46Z",false,"COMMENTED"
"L2750558108","CONTRIBUTOR","","2024-09-13T01:38:18Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","I believe, that this simplification is beneficial and that the behavioral changes are very minor, so that nearly no user will not notice these changes.
Please have a look at my other comments, which seem to be easily resolvable.
Also make sure, to squash the commits together as mentioned in the docs: https://docs.godotengine.org/en/latest/contributing/workflow/pr_workflow.html#the-interactive-rebase","2024-09-13T12:15:20Z",false,"CHANGES_REQUESTED"
"L2750558108","CONTRIBUTOR","","2024-09-13T12:39:07Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","I did a code review and these changes make sense to me. I have not tested the PR though.

These changes are beneficial, because they consolidate the different behavior of `Viewport.set_input_as_handled()` and `Control.accept_event()`, which could be considered a bug.

While this is a change in behavior, I believe, that it is a minor change, that will not interfere with nearly all users.

Since it touches a core class, this PR would benefit from merging early in the dev cycle to get enough testing.
","2024-09-13T13:21:03Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-14T08:22:47Z",false,"DISMISSED"
"L2750558108","CONTRIBUTOR","","2024-09-14T08:38:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","You also need to add to the API validation file","2024-09-14T09:31:17Z",false,"DISMISSED"
"AThousandShips","MEMBER","","2024-09-14T09:36:11Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","The PR is again in its previous state, that I already had reviewed yesterday.","2024-09-14T13:39:45Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks! This seems good to me","2024-09-11T17:53:18Z",false,"APPROVED"
"fire","MEMBER","","2024-09-11T18:39:58Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-09-11T21:58:54Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","D'oh","2024-09-11T16:47:53Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-09-11T17:05:23Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-09-12T09:02:34Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-11T14:15:54Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-11T15:33:08Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-09-12T09:03:48Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-09-12T09:03:52Z",false,"APPROVED"
"kroketio","CONTRIBUTOR","","2024-09-12T15:16:22Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-11T14:21:19Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-09-11T14:32:37Z",false,"APPROVED"
"AThousandShips","MEMBER","Makes sense and looks good to me","2024-09-11T14:33:18Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-09-12T11:03:17Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-14T18:04:38Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-09-16T07:59:23Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-09-11T12:53:33Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-04T08:55:04Z",false,"APPROVED"
"aaronfranke","MEMBER","Note that this will add a `.editorconfig` into existing projects. In the event that this is desired only for new projects, this code could be moved to `editor/project_manager/project_dialog.cpp` inside `ProjectDialog::ok_pressed()`. However, I am not against retroactively adding this file personally, I'm all for it üëç ","2024-09-11T09:39:36Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-09-11T09:45:40Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-09-11T09:51:10Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-11T10:16:22Z",false,"APPROVED"
"groud","MEMBER","Haven't tested it, but it looks correct.","2024-09-11T09:29:20Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-10-05T23:01:34Z",false,"DISMISSED"
"bruvzg","MEMBER","","2024-09-11T06:49:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-11T07:21:46Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","Looks good to me!","2024-09-11T04:51:46Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","Static analysis of the code looking great!","2024-09-12T08:43:23Z",false,"APPROVED"
"TokageItLab","MEMBER","It's fine IMO. I don't see any particular reason to hide it from gdscript.","2024-09-26T14:24:31Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-09-11T07:12:36Z",false,"COMMENTED"
"KoBeWi","MEMBER","It's difficult to test it, because the bug happens randomly, but the individual dialogs still work correctly.

Note that #96798 was about errors at startup, the progress bug was only a byproduct. I don't think this fix fully resolves the issue.","2024-09-11T12:59:51Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-11T13:00:20Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-11T22:59:10Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-17T08:05:37Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-09-17T12:12:52Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-18T08:09:11Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great! Tested locally and confirm that it fixes the crash","2024-09-10T20:13:31Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-10-05T12:10:53Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-05T15:55:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-23T07:34:35Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-10T21:21:32Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-10T18:23:04Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-11T07:30:53Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-11T10:10:29Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-09-10T14:21:45Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-10T14:31:38Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-09-11T11:56:11Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-11T14:42:06Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-11T16:46:06Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-09-12T07:14:51Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-12T12:23:32Z",false,"COMMENTED"
"dalexeev","MEMBER","Looks good to me, but it would be nice to get a second review.","2024-09-12T12:58:20Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-09-12T14:24:20Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-12T15:08:53Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me.","2024-09-16T11:27:03Z",false,"APPROVED"
"fire","MEMBER","@TokageItLab may want a look","2024-09-11T02:47:35Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks! This is a great idea, and the code looks good to me","2024-09-10T13:55:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-10T08:24:05Z",false,"APPROVED"
"fire","MEMBER","","2024-10-02T23:40:59Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-10T07:33:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-10T07:34:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-10T18:56:44Z",false,"COMMENTED"
"aXu-AP","CONTRIBUTOR","","2024-09-10T19:08:20Z",false,"COMMENTED"
"aXu-AP","CONTRIBUTOR","","2024-09-10T19:27:31Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-13T21:28:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-12T06:47:24Z",false,"APPROVED"
"Calinou","MEMBER","Looks good to me. This circle is indeed meant to be drawn only when the rotato gizmo is visible, so it should be hidden during instant transform operations.","2024-09-19T00:21:59Z",false,"APPROVED"
"AThousandShips","MEMBER","Can confirm that this solves the problem, and I think the use of `_select_ray` is appropriate here, but needs some additional feedback on that part","2024-09-09T18:29:43Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-09T18:40:07Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-09T16:58:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-09T16:58:21Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","I also don't know if this is the right place to expose this, however, I have personally wanted the 2D version of this information in addons in the past, so I'm in support of adding it in general.

The code itself looks good to me.

Feedback from folks more involved in the editor would be good.","2024-09-10T15:44:04Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-18T09:11:19Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-18T15:42:19Z",false,"COMMENTED"
"akien-mga","MEMBER","This has been well tested and I trust @RandomShaper with the implementation.","2024-09-10T16:55:09Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-10T07:13:01Z",false,"COMMENTED"
"arkology","CONTRIBUTOR","","2024-09-10T07:32:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-10T15:03:36Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-10T15:03:59Z",false,"COMMENTED"
"KoBeWi","MEMBER","Looks alright, but my concern from https://github.com/godotengine/godot/pull/96759#issuecomment-2341161452 still stands.","2024-09-10T18:57:44Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-13T08:57:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-09T15:19:19Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-09-09T15:19:34Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-09-09T14:38:47Z",false,"APPROVED"
"SaracenOne","MEMBER","I would consider adding an update in `_change_selected_keys_handle_mode` too since right-clicking and changing the handle mode currently does not trigger an update of the property.","2024-09-10T11:08:54Z",false,"CHANGES_REQUESTED"
"SaracenOne","MEMBER","Actually, found two more instances where we would also want to trigger the update: cutting and pasting.

To fix pasting, I think you should change line 1923 from:
```
		undo_redo->commit_action();

		queue_redraw();
```
to:
```
		AnimationPlayerEditor *ape = AnimationPlayerEditor::get_singleton();
		if (ape) {
			undo_redo->add_do_method(ape, ""_animation_update_key_frame"");
			undo_redo->add_undo_method(ape, ""_animation_update_key_frame"");
		}
		undo_redo->add_do_method(this, ""queue_redraw"");
		undo_redo->add_undo_method(this, ""queue_redraw"");

		undo_redo->commit_action();
```

For cutting, add this below line 1845:
```
		AnimationPlayerEditor *ape = AnimationPlayerEditor::get_singleton();
		if (ape) {
			undo_redo->add_do_method(ape, ""_animation_update_key_frame"");
			undo_redo->add_undo_method(ape, ""_animation_update_key_frame"");
		}
		undo_redo->add_do_method(this, ""queue_redraw"");
		undo_redo->add_undo_method(this, ""queue_redraw"");
```

This should solve the remaining edge cases.","2024-09-11T08:14:13Z",false,"CHANGES_REQUESTED"
"SaracenOne","MEMBER","LGTM üëç ","2024-09-12T07:17:21Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-09T11:47:04Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-09T14:31:06Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","","2024-09-09T14:38:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-09T14:39:06Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me overall, I have a hard time wrapping my head around how the caching system works, so I'm happy to trust your judgement :D","2024-09-11T16:17:00Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-09-09T13:55:46Z",false,"COMMENTED"
"iscke","CONTRIBUTOR","","2024-09-10T01:11:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-09T10:23:30Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-09-12T08:47:28Z",false,"APPROVED"
"AdriaandeJongh","CONTRIBUTOR","","2024-09-12T08:55:47Z",false,"COMMENTED"
"fire","MEMBER","@aaronfranke what's a prose version of the algorithm for picking the coordinates?","2024-10-06T22:39:31Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-09T07:55:26Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-09T07:58:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-09T08:05:46Z",false,"APPROVED"
"mechalynx","NONE","","2024-09-09T08:47:31Z",false,"COMMENTED"
"akien-mga","MEMBER","Makes sense to me.","2024-09-09T07:30:56Z",false,"APPROVED"
"fire","MEMBER","","2024-09-09T08:12:03Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-09-09T14:05:20Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-09-09T07:11:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-09T07:19:12Z",false,"DISMISSED"
"AThousandShips","MEMBER","","2024-09-09T07:51:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-09T07:57:48Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-09-09T08:00:14Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-09-09T08:04:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-09T08:04:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-09T08:08:37Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-09-09T08:41:08Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-09-09T08:59:08Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","I just retested, and it's working as expected when the setting doesn't exist now!","2024-09-11T22:12:22Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","Looks good to me, makes typed collections be more directly used by Variant.","2024-09-11T05:10:16Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/f032af74536b317b23c7fca3bc7318ced5537344), it works as expected.

I miss a way to offset the object so that it appears outside the ground/wall though. The dragged object's collision shape AABB should be taken into account (if the dragged object is a PhysicsBody3D or CollisionShape3D). Without having this feature in place, you either have to drag a parent node that is offset compared to its child (which can break center of mass with physics nodes) or have to reposition the object manually later on, which kind of defeats the point of the feature for most objects.

Additionally, using the mouse wheel could work to offset the position in local space (i.e. relative to the current view direction)? Something like this (from Cube 2: Sauerbraten's editor):

https://user-images.githubusercontent.com/180032/136942243-c6045a02-b293-4da1-b365-682655cbeab3.mp4

There could also be automatic rotation support according to the collision normal, but this can be left for a future PR.

> Currently does not have a key binding by default:

I suggest binding <kbd>Shift + G</kbd> by default to match https://github.com/godotengine/godot/pull/78148.","2024-10-04T15:20:32Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","","2024-10-04T22:13:36Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","Static analysis looking great.","2024-09-12T08:51:12Z",false,"APPROVED"
"KoBeWi","MEMBER","The code looks fine.

Usability improvements can be done later as well, empty editor is not the only problem tbh.","2024-09-15T16:57:36Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-09T11:36:43Z",false,"COMMENTED"
"tracefree","CONTRIBUTOR","","2024-09-09T11:42:22Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-13T15:43:37Z",false,"APPROVED"
"aXu-AP","CONTRIBUTOR","","2024-09-08T18:28:32Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-08T17:29:03Z",false,"APPROVED"
"fire","MEMBER","I believe you did performance testing. Don't see anything obviously bad.","2024-10-11T17:36:56Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","Good catch!","2024-09-08T17:22:04Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-09-08T18:34:51Z",false,"COMMENTED"
"shahriarlabib000","CONTRIBUTOR","","2024-09-08T18:54:10Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","Looks good enough to me to address the described issue.

Reiterating I'm not very familiar with the logic in `project_dialog.cpp`, but from https://github.com/godotengine/godot/pull/95086 and this fix, it seems we may need to revisit how its path validation is done.","2024-09-08T19:03:12Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-09T19:40:29Z",false,"COMMENTED"
"shahriarlabib000","CONTRIBUTOR","","2024-09-09T19:47:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-09T19:50:55Z",false,"COMMENTED"
"shahriarlabib000","CONTRIBUTOR","","2024-09-09T20:30:05Z",false,"COMMENTED"
"KoBeWi","MEMBER","I can't reproduce the problem (didn't test on Android though), but the fix seems harmless.","2024-09-10T13:02:36Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-12T08:26:32Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-08T11:50:09Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-08T14:58:56Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-09-08T15:02:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-08T15:06:28Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-09-09T20:15:52Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-09-09T20:26:14Z",false,"COMMENTED"
"elmajime","NONE","","2024-09-10T08:20:37Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-09-10T11:40:41Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks! I haven't tested, but for the most part the code looks good to me :-)

There's just a handful of changes that I don't think are needed.","2024-10-05T11:58:05Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-10-05T12:10:43Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","This is looking really good. Few small nitpicking cleanup things David and myself noted, once those are cleaned up this can be merged IMHO.","2024-10-05T12:20:39Z",false,"APPROVED"
"elmajime","NONE","","2024-10-06T09:19:33Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-10-06T12:03:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-08T10:11:29Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks! The code looks good to me after the latest changes. The PR is currently failing CI due to minor code formatting issues, but once those are resolved and this is passing tests, then I think it's ready to go :-)","2024-10-08T13:14:08Z",false,"APPROVED"
"AThousandShips","MEMBER","And the fix for the comma","2024-10-12T16:39:27Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-13T08:00:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-13T08:01:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-13T09:06:26Z",false,"APPROVED"
"elmajime","NONE","","2024-10-13T11:16:32Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-13T11:18:40Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-08T11:00:11Z",false,"APPROVED"
"fire","MEMBER","I was confused for a moment but is a 2d node ""canvas"" rotation pivot.","2024-09-08T16:52:49Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-09-07T22:59:28Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-09-07T23:45:07Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-09-07T23:45:14Z",false,"APPROVED"
"devloglogan","CONTRIBUTOR","","2024-09-08T12:22:20Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","I just test the latest version of this on Quest 3 - it's working great!","2024-09-08T15:19:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-08T21:17:48Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-08T21:17:58Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-10-02T12:07:12Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-07T19:27:46Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-09-07T20:22:51Z",false,"APPROVED"
"WhalesState","CONTRIBUTOR","","2024-09-07T15:27:01Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-09-07T15:52:44Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-09-09T15:44:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-09T15:51:34Z",false,"DISMISSED"
"AThousandShips","MEMBER","","2024-09-09T15:53:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-09T15:54:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-09T15:56:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-09T15:56:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-09T15:59:16Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-09T18:17:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-14T18:19:15Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-14T18:21:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-14T18:24:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-14T19:27:22Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-14T19:28:32Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-14T19:28:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-14T19:31:16Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-15T17:42:07Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-16T11:49:53Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/84dcdde9088d512efebb0033fb881d8f7fd9c107), it works as expected.

Code looks good to me.

While testing this PR, I noticed that hovering icons with the mouse doesn't provide much of a visible highlight. This is an issue shared with other icons in the find/replace bar (and even CheckBoxes in general), so it should be addressed separately. Ideally, all icons should have the same hover feedback as the one used by icons at the top of the 2D/3D editor viewports.","2024-09-18T15:12:52Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-18T15:14:41Z",false,"APPROVED"
"SaracenOne","MEMBER","Tested, LGTM üëç ","2024-09-09T17:41:08Z",false,"APPROVED"
"adamscott","MEMBER","Tested the PR. I confirm the sound not shutting off when moving outside the distance.

I tested also that this PR doesn't shut off other `AudioStream3D` playing when moving. Here's the MRP:
[audiostreamplayer3d-range-bug-local.zip](https://github.com/user-attachments/files/17031793/audiostreamplayer3d-range-bug-local.zip)","2024-09-17T16:10:40Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/694d3c2930bdfb43fd93e1e6641f66c4f19a5c77), it works as expected.

~~However, there's now an object leak that occurs on exit with the MRP:~~

## `master`

```
$ bin/godot.linuxbsd.editor.x86_64.master --path /tmp/audiostreamplayer3d-range-bug --quit
Godot Engine v4.4.dev.custom_build.694d3c293 (2024-09-18 15:41:12 UTC) - https://godotengine.org
Vulkan 1.3.280 - Forward+ - Using Device #0: NVIDIA - NVIDIA GeForce RTX 4090
Requested V-Sync mode: Disabled

```

### This PR

```
$ bin/godot.linuxbsd.editor.x86_64 --path /tmp/audiostreamplayer3d-range-bug --quit                                                 
Godot Engine v4.4.dev.custom_build.6819c26b1 (2024-09-19 12:31:25 UTC) - https://godotengine.org
Vulkan 1.3.280 - Forward+ - Using Device #0: NVIDIA - NVIDIA GeForce RTX 4090
Requested V-Sync mode: Disabled

WARNING: ObjectDB instances leaked at exit (run with --verbose for details).
     at: cleanup (./core/object/object.cpp:2329)
ERROR: 1 resources still in use at exit (run with --verbose for details).
   at: clear (./core/io/resource.cpp:592)
```

**Edit:** Nevermind, it happens with `master` too and is sporadic.","2024-09-19T13:24:40Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","Profiling when outside the range (with the project running for ~7 seconds each time):

### Before

![image](https://github.com/user-attachments/assets/c9a33766-9183-42ec-ac01-e581362a1bb2)

![image](https://github.com/user-attachments/assets/5f44e700-b0b1-498d-8a1e-2768732a104d)

### After

![image](https://github.com/user-attachments/assets/573b67b6-0b64-4210-a4d8-f660e05bbc69)

![image](https://github.com/user-attachments/assets/84d4a164-dde0-494a-8fae-e88d5bacf65e)

I'm not sure why audio resampling is still being called though.","2024-09-19T13:30:53Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-10-03T07:56:48Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-06T21:51:16Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-07T20:21:32Z",false,"APPROVED"
"HolonProduction","MEMBER","LGTM ~(still needs an official review though)~","2024-09-07T15:11:31Z",false,"APPROVED"
"fire","MEMBER","I'll try the test cases from @antimundo https://github.com/godotengine/godot/issues/96491 as a basic check.

- [X] The pr is a good bug fix from a conceptual point of view
- [X] Technical review was done upstream and doesn't modify godot engine code
- [X] Since it doesn't modify godot engine code, we'll defer to upstream style review
- [ ] Needs to follow a test plan of loading the test cases and checking if it's ok. There's the test Godot Engine project from @antimundo and the Omigroup logo from @aaronfranke","2024-09-06T19:28:43Z",false,"COMMENTED"
"fire","MEMBER","I'll approve for now, but need help with the test plan.","2024-09-06T19:29:42Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-06T16:04:56Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-06T20:05:19Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-10-03T19:27:13Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-09-06T15:08:02Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-09-06T16:29:58Z",false,"APPROVED"
"fire","MEMBER","Skimmed the code and didn't see anything worse.","2024-09-07T06:50:42Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-06T13:57:19Z",false,"COMMENTED"
"Flynsarmy","CONTRIBUTOR","","2024-09-06T14:11:05Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-10-07T02:46:24Z",false,"CHANGES_REQUESTED"
"Flynsarmy","CONTRIBUTOR","","2024-10-08T23:14:29Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-09-06T11:20:49Z",false,"APPROVED"
"Maran23","CONTRIBUTOR","","2024-09-06T09:03:41Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-09-06T09:38:25Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-12T08:27:30Z",false,"APPROVED"
"tetrapod00","CONTRIBUTOR","","2024-09-06T07:24:44Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-09-06T11:25:04Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-09-06T11:29:10Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-06T17:52:14Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-06T17:59:23Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-09-06T18:18:06Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-06T18:33:48Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-06T18:51:44Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-06T18:56:04Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-06T22:05:59Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-06T22:08:10Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-06T22:12:19Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-06T22:14:08Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-06T22:23:18Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-06T08:32:48Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-06T08:32:52Z",false,"APPROVED"
"himanshurajora","NONE","","2024-09-06T04:54:06Z",false,"APPROVED"
"JekSun97","NONE","","2024-09-06T06:02:51Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-06T06:49:50Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-06T19:14:53Z",false,"APPROVED"
"kleonc","MEMBER","Makes sense!","2024-09-06T07:22:15Z",false,"APPROVED"
"Calinou","MEMBER","Looks good to me.

One concern however is that there's compatibility breakage for custom HTML shells, since `$GODOT_SPLASH` was renamed to `$GODOT_SPLASH_IMAGE`. It's probably not a dealbreaker and is unavoidable here, but it should be highlighted in the release notes and the upgrade guide.","2024-09-06T00:01:19Z",false,"COMMENTED"
"adamscott","MEMBER","Even if I like up-to-date code, it doesn't warrant breaking compatibility, really.

> Both can work, but keeping `$GODOT_SPLASH` the way it is requires a specific order in the `replaces` HashMap for it not to break the `$GODOT_SPLASH_COLOR` placeholder.

I don't understand how it could break.

> Has there been any decision yet as to how we should proceed regarding compatibility?

Sorry for the delay! Don't hesitate to join the [developers' chat](https://chat.godotengine.org/) [\#Web channel](https://chat.godotengine.org/channel/web) in order to discuss topics.","2024-10-07T16:33:46Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","I just tested on the Meta Quest 3, both with a flatscreen app and an immersive XR app. Everything seems to be working great!

The code looks good to me too.","2024-09-05T20:25:22Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","Very cool, you weren't kidding, I was expecting much more invasive changes. This creates a really nice platform to expand upon.","2024-09-05T23:15:16Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-06T07:18:16Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-06T07:19:45Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-06T07:20:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-06T07:22:41Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-09-06T07:23:18Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-06T07:23:46Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-09-06T07:24:07Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-06T07:25:30Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-06T07:26:23Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-09-06T07:26:57Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-06T07:28:04Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-06T07:28:57Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-09-06T07:29:32Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-09-06T07:32:28Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-06T07:32:48Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks really clean and the refactor makes sense to properly support multiple flavors of the Android editor.

Can't test it for now as I believe my dusty Quest 1 doesn't have a recent enough OS version for this :D","2024-09-06T07:34:59Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-09-06T07:40:00Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-09-06T07:40:09Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-09-06T07:40:42Z",false,"COMMENTED"
"devloglogan","CONTRIBUTOR","LGTM, working great on my Quest 3!","2024-09-06T13:19:26Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-29T20:42:01Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-09-05T22:41:34Z",false,"COMMENTED"
"ajreckof","MEMBER","","2024-09-06T11:39:32Z",false,"COMMENTED"
"kleonc","MEMBER","Fixes the issue.","2024-09-06T12:05:08Z",false,"APPROVED"
"dalexeev","MEMBER","Looks right to me.","2024-09-08T20:18:14Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-05T18:26:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","Haven't tested but code looks good and makes sense","2024-09-05T18:27:32Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-06T15:39:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-06T09:09:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-05T17:27:19Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-04T20:24:16Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-05T18:23:23Z",false,"COMMENTED"
"graydoubt","CONTRIBUTOR","","2024-09-05T18:49:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-05T19:32:45Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-06T15:34:22Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-05T15:38:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-05T15:39:30Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-05T17:32:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-05T17:33:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-05T17:33:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-05T17:37:14Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-05T18:24:46Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-09-06T08:54:14Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","![image](https://github.com/user-attachments/assets/80d19e70-9fab-429f-8adf-719822bc774e)
Works mostly as expected apart from a nullable action string. We should have it require an action key depending on the string hint.

For example if the string hint is `""default_empty""`, we should allow the empty option only in that case.","2024-09-16T13:15:39Z",false,"CHANGES_REQUESTED"
"RadiantUwU","CONTRIBUTOR","Works as expected on 4.3.1 branch
![image](https://github.com/user-attachments/assets/1a5ad40a-7a35-4016-b167-998e70d5607b)
","2024-09-16T16:37:33Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-09-20T08:35:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-23T17:17:59Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-09-30T18:33:43Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-05T14:33:27Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-05T14:33:50Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-09-05T14:34:26Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-05T14:35:12Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-24T14:46:39Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-09-24T15:32:53Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-09-24T16:16:28Z",false,"COMMENTED"
"Faless","COLLABORATOR","LGTM","2024-09-25T16:37:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-25T16:54:36Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-25T16:55:42Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-09-26T12:25:31Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-09-26T12:26:03Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-26T12:36:40Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-09-26T14:20:09Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-26T15:21:12Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-09-05T14:28:16Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-05T15:22:36Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-05T14:22:20Z",false,"APPROVED"
"Maran23","CONTRIBUTOR","","2024-09-05T10:10:36Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-09-05T15:16:56Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-09-05T15:25:50Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-09-05T15:28:03Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally on Linux, it works as expected.

![image](https://github.com/user-attachments/assets/c744f57f-cf9d-40a4-8bdb-eea35a81d62f)

Folder colors are correctly preserved across restarts. Folders and files can be renamed within the FileSystem dock, even if they are within a symbolic link that points outside the project folder (as expected).

Note that Godot is unable to rename symbolic link folders themselves from the FileSystem dock (here, `res://symlink_target/` points to `/tmp/symlink_target/` which I have write access to):

![image](https://github.com/user-attachments/assets/dff1021c-6eb5-491a-be87-772bfac75f96)

Perhaps this could be handled, or at least specifically detected so that a dedicated error message is shown. Renaming symbolic link *files* works though.

There's still the question of whether we should have a temporary toggle to display *all* files in the project folder, regardless of the editor setting that determines which file extensions are shown.

PS: In a future PR, we should see if symlinks can have their text be displayed in italic to mimic how KDE's Dolphin displays them.","2024-09-05T21:07:32Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-06T07:49:53Z",false,"APPROVED"
"MileyHollenberg","CONTRIBUTOR","","2024-09-05T10:05:16Z",false,"COMMENTED"
"MileyHollenberg","CONTRIBUTOR","","2024-09-05T10:06:40Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-06T21:13:16Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-09-05T09:23:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-08T20:33:11Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-05T14:03:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-05T14:05:26Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-09-05T15:29:30Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-06T09:09:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-05T15:27:20Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally on Fedora 40 KDE X11, there are some issues when you use <kbd>Shift + home row keys</kbd> to enter numbers on a French AZERTY (fr-oss) keyboard layout. It remains stuck after you press other keys such as arrow keys:

https://github.com/user-attachments/assets/a0658839-5ff6-492d-827a-77f248749a17

*Using [screenkey](https://gitlab.com/screenkey/screenkey) to show pressed keys.*

This does not occur when using the numpad to enter numbers, as seen at the end of the video above.
","2024-09-05T23:27:34Z",false,"COMMENTED"
"akien-mga","MEMBER","Needs rebase, and should be good to merge.","2024-09-12T08:27:59Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-05T11:47:22Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-05T11:47:58Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-05T11:48:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-07T10:26:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-07T10:27:19Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-07T10:35:19Z",false,"APPROVED"
"reduz","MEMBER","","2024-10-07T12:10:36Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-07T12:47:17Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-06T21:31:15Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","LGTM, will help people recognise this change and prevent some frustration.","2024-09-05T04:22:40Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","It's not ideal having something OpenXR-specific in `XRHandModifier3D` which is meant to be general to any XR interface, however, I think this is an important enough warning that it's worth doing. (And it's checking if OpenXR is enabled first, so it shouldn't confuse folks using only WebXR.)","2024-09-05T13:03:16Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","From the perspective of GDExtension compatibility, this looks good to me! I didn't evaluate its potential impact on anything else.","2024-09-10T14:11:17Z",false,"APPROVED"
"raulsntos","MEMBER","I found no issues regarding C# compatibility either.","2024-09-10T14:54:59Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-11T07:39:34Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-05T08:46:15Z",false,"APPROVED"
"kleonc","MEMBER","","2024-09-05T10:16:44Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected (Fedora 40 KDE X11), with and without single window mode.

https://github.com/user-attachments/assets/4d3985b5-3c70-4df3-a825-9e63ee2bd73e

https://github.com/user-attachments/assets/8f828160-80e1-4a04-b6ac-ad0c82bdbdd8


","2024-09-05T01:49:57Z",false,"APPROVED"
"Calinou","MEMBER","","2024-09-05T01:50:58Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-05T20:51:26Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-04T23:27:23Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-04T22:18:02Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-09-05T00:03:32Z",false,"APPROVED"
"rune-scape","CONTRIBUTOR","this .. shouldn't be the case, dictionaries use a hashmap defined with `StringLikeVariantComparator`, so
converting a String key to StringName, then getting the value for that StringName should always work like expected in GDScript.
id like to find the root bug, but it seems to fix the issue","2024-09-05T02:31:46Z",false,"APPROVED"
"frkntlr","NONE","Appears without rounded corners in Windows 10.","2024-09-04T21:53:10Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","Note that Dolphin only applies the sharp corners for the game window; all other windows still retain the default, rounded style:
![24-09-05 07-39-51 explorer](https://github.com/user-attachments/assets/be48c869-0993-434e-b127-d05af2a29091)","2024-09-05T13:00:21Z",false,"CHANGES_REQUESTED"
"Repiteo","CONTRIBUTOR","","2024-09-05T14:45:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-05T14:52:54Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-09-05T15:09:30Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-05T15:20:44Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-04T15:48:51Z",false,"APPROVED"
"akien-mga","MEMBER","Makes sense to me. I'm not too familiar with C# buildsystem stuff though so I'll let @raulsntos double check.","2024-09-04T16:44:32Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-04T16:45:05Z",false,"COMMENTED"
"Drako","CONTRIBUTOR","","2024-09-04T16:54:17Z",false,"COMMENTED"
"raulsntos","MEMBER","Makes sense to me, but we'd want to disable the entire `Compat.cs` and also do the same in the `GodotSharpEditor` assembly.","2024-09-05T00:36:15Z",false,"CHANGES_REQUESTED"
"raulsntos","MEMBER","Looks good to me, thanks!","2024-09-05T12:33:10Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","Sounds good to me!!","2024-09-05T00:02:15Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-09-04T14:27:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-04T14:32:54Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-04T14:31:13Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-04T10:11:05Z",false,"APPROVED"
"lawnjelly","MEMBER","Seems to work for me.","2024-09-04T11:13:24Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-04T13:34:46Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-09-04T14:13:53Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-09-04T14:30:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-04T14:32:59Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-09-04T14:50:03Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-04T16:00:25Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-04T16:01:40Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-04T07:55:02Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","That should solve the problem. Sounds good to me. Thanks!","2024-09-04T09:47:40Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Good changes, but these descriptions smell old. If we really want to change them for the better they could be reworded outright, for example by saying ""Emitted"", not ""Triggered"".","2024-09-27T07:45:46Z",false,"APPROVED"
"DeeJayLSP","CONTRIBUTOR","","2024-09-04T00:48:08Z",false,"COMMENTED"
"fire","MEMBER","","2024-09-04T03:33:13Z",false,"COMMENTED"
"DeeJayLSP","CONTRIBUTOR","","2024-09-09T03:57:08Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-04T09:41:28Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-28T22:25:34Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","Hi, thank you for your contribution! The primary clipboard is different form the regular clipboard, so aliasing it to the regular one is not an acceptable solution unfortunately.

Instead, the proper fix would be to fix the primary clipboard logic itself.

Calling `DisplayServer.clipboard_get_primary` from GDScript (with a random string in my primary clipboard) returns this in a verbose log:
```
Selecting media type ""text/plain;charset=utf-8"" from offered types.
Read chunk of 15 bytes.
Done reading 15 bytes.
```

So it's clearly trying to read something, although in the end it returns an empty string. The regular and the primary clipboard work in a very similar way, so perhaps there's some difference between their handling? I can see a flush instead of a roundtrip but it seems to make no difference once swapped in.

The part from the above log is printed from `_read_fd` in `platforms/linuxbsd/wayland/wayland_thread.cpp`, you could take a look there.

I hope this is a good starting point and thank you again for contributing!","2024-09-03T23:53:54Z",false,"CHANGES_REQUESTED"
"Riteo","CONTRIBUTOR","Looks perfect! One small nitpick, please rename the commit and title to match the new change, prefixing it with `Wayland:` (e.g. `Wayland: Fix primary clipboard handling`)","2024-09-04T02:03:33Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-10T22:09:16Z",false,"APPROVED"
"fire","MEMBER","","2024-09-03T17:42:49Z",false,"APPROVED"
"AThousandShips","MEMBER","Haven't tested but code looks good","2024-09-03T17:43:27Z",false,"APPROVED"
"Jordyfel","CONTRIBUTOR","","2024-09-04T15:17:30Z",false,"COMMENTED"
"sievaxx","CONTRIBUTOR","","2024-09-04T20:55:41Z",false,"COMMENTED"
"sievaxx","CONTRIBUTOR","","2024-09-04T20:56:52Z",false,"COMMENTED"
"Jordyfel","CONTRIBUTOR","","2024-09-04T21:00:42Z",false,"COMMENTED"
"Jordyfel","CONTRIBUTOR","","2024-09-04T21:04:10Z",false,"COMMENTED"
"sievaxx","CONTRIBUTOR","","2024-09-04T21:24:04Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","I think it's fine to also have `DISABLE_DEPRECATED` forbid the comparison, though I'm not sure if that's better handled in SCons or cpp. Either way, this implementation makes sense and the name is reasonable as-is.","2024-09-03T20:39:36Z",false,"APPROVED"
"fire","MEMBER","","2024-09-03T21:02:13Z",false,"COMMENTED"
"fire","MEMBER","","2024-09-03T21:02:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-04T10:07:08Z",false,"COMMENTED"
"fire","MEMBER","","2024-09-05T00:55:09Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-12T06:54:48Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-13T07:13:18Z",false,"APPROVED"
"ryevdokimov","CONTRIBUTOR","Holding down the keys probably shouldn't repeatedly commit the transform. 

https://github.com/user-attachments/assets/821d1dcc-8f3f-4ddf-86c8-10f57dc32e92

","2024-09-03T20:34:03Z",false,"CHANGES_REQUESTED"
"ryevdokimov","CONTRIBUTOR","Looks good.","2024-09-05T15:13:42Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-05T15:30:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-04T16:43:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-03T13:00:09Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-09-03T13:07:57Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-03T13:09:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-03T13:12:50Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-09-04T08:10:48Z",false,"APPROVED"
"KoBeWi","MEMBER","No idea what it does, but it fixes the problem.","2024-09-03T12:20:30Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-03T11:43:31Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-28T19:32:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-28T20:02:25Z",false,"COMMENTED"
"KoBeWi","MEMBER","Tested some popups and they visually look fine with default settings. The border is an improvement.","2024-09-28T20:03:21Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-03T08:32:37Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-03T07:28:15Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/05d985496c73577fb0b44291345da5f2dbe09844) using the MRP from https://github.com/godotengine/godot/issues/92091, it works as expected.","2024-09-06T20:56:43Z",false,"APPROVED"
"clayjohn","MEMBER","This makes sense to me, so I think we should merge it. But I don't understand why we don't see the same issue in the other renderers because the logic for them is the same. ","2024-09-06T22:37:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-06T08:34:43Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-06T08:35:32Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-06T08:35:40Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-04T16:43:10Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks!

I'm really surprised that this was all that's required on the Godot side. In order to test it, I needed to make some changes to godot-cpp (see PR https://github.com/godotengine/godot-cpp/pull/1574). But with that, it worked fine in my testing!","2024-09-06T22:27:02Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-09-03T06:53:55Z",false,"COMMENTED"
"beev1s","NONE","","2024-09-07T08:17:00Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-09-09T09:13:35Z",false,"COMMENTED"
"beev1s","NONE","","2024-10-01T18:10:00Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-10-07T08:06:25Z",false,"COMMENTED"
"dalexeev","MEMBER","Looks reasonable to me. I tested it, this PR fixes the linked issue.

@beev1s Note that GitHub will **not** count this as your contribution. See [GitHub Docs](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/managing-contribution-settings-on-your-profile/why-are-my-contributions-not-showing-up-on-my-profile) for details.

![](https://github.com/user-attachments/assets/5ed9765a-c09c-46cc-91d2-5d9c94157776)
","2024-10-10T07:52:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-03T13:15:33Z",false,"COMMENTED"
"aXu-AP","CONTRIBUTOR","","2024-09-03T13:30:14Z",false,"COMMENTED"
"aXu-AP","CONTRIBUTOR","","2024-09-03T13:44:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-03T13:45:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-03T13:49:37Z",false,"COMMENTED"
"fire","MEMBER","Your arguments to add Transform2d and Transforms3d makes sense for usability.","2024-09-03T15:58:30Z",false,"APPROVED"
"akien-mga","MEMBER","Makes sense to me.","2024-09-05T15:08:46Z",false,"APPROVED"
"clayjohn","MEMBER","Looks good. It is very strange that we ever freed the material here. ","2024-09-02T19:32:10Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-02T13:11:10Z",false,"DISMISSED"
"LunaTheFoxgirl","CONTRIBUTOR","","2024-09-02T13:12:05Z",false,"COMMENTED"
"AThousandShips","MEMBER","Approving for consistency with `lerp_angle` which also specifices `(in radians)`","2024-09-02T13:23:34Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-09-02T22:06:12Z",false,"APPROVED"
"fire","MEMBER","","2024-09-03T02:25:37Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-09-03T02:27:33Z",false,"COMMENTED"
"fire","MEMBER","Looks good to me.

In a separate pr, I would appreciate to see how much can be done to FBXDocument, but I understand it's not directly here. We are trying to restore FBXDocumentExtensions.","2024-09-13T19:53:52Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-09-02T16:38:07Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-02T16:39:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-02T16:46:49Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-09-02T18:07:13Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-09-02T18:17:48Z",false,"CHANGES_REQUESTED"
"m4gr3d","CONTRIBUTOR","","2024-09-02T19:40:53Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-09-02T19:43:19Z",false,"CHANGES_REQUESTED"
"m4gr3d","CONTRIBUTOR","","2024-09-05T13:18:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-17T11:45:49Z",false,"APPROVED"
"KoBeWi","MEMBER","I find it weird that only this editor is affected. Also the fix isn't really correct, because `make_visible()` should be called automatically together with `edit()`.

Then again, seems like every editor handles this differently, so we should standardize it somehow. For now it's probably fine like this.","2024-09-12T14:28:30Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-03T15:55:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-03T15:55:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-03T15:55:47Z",false,"COMMENTED"
"fire","MEMBER","","2024-09-17T18:09:53Z",false,"APPROVED"
"Withaust","CONTRIBUTOR","","2024-09-02T13:44:20Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM and matches code above","2024-09-02T14:35:04Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-02T09:27:02Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-03T06:16:43Z",false,"APPROVED"
"clayjohn","MEMBER","Thank you!","2024-09-02T01:35:35Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-09-02T01:01:50Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","I can reproduce #96448, and this fixes it for me.","2024-09-27T19:42:54Z",false,"APPROVED"
"SaracenOne","MEMBER","LGTM üëç ","2024-09-02T01:31:29Z",false,"APPROVED"
"aaronfranke","MEMBER","Didn't test but makes sense to me.","2024-09-02T02:22:54Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-04T16:41:23Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-09-01T17:44:57Z",false,"CHANGES_REQUESTED"
"darksylinc","CONTRIBUTOR","","2024-09-01T18:52:02Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-09-01T18:52:32Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-09-01T18:55:09Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-09-01T19:00:42Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-09-01T19:24:54Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-09-02T13:34:22Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-09-10T16:15:31Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-09-10T16:26:50Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-09-10T17:52:03Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-09-15T19:46:17Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-09-15T19:46:39Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-09-22T00:28:48Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-09-22T23:43:04Z",false,"COMMENTED"
"raulsntos","MEMBER","This doesn't fix https://github.com/godotengine/godot/issues/95312, it still includes the .NET DLLs when the issue's author explicitly only includes textures or other non-C# resources in the PCK.","2024-09-01T17:12:49Z",false,"CHANGES_REQUESTED"
"scgm0","CONTRIBUTOR","","2024-09-01T17:48:15Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great!","2024-09-01T19:04:45Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-01T13:50:50Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","LGTM","2024-09-03T02:47:10Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","I'm not sure that's the proper way to fix this problem. With the mutex lock move, that only changes the racing condition that causes the issue.

Debugging a bit, the problem is in fact that the `current.from` property of the `playback` refers to an `AnimationData` that is invalid because it was removed just above in your script while calling `remove_animation`. In `AnimationPlayer::_play`, `c.current.from` is accessed and it crashes since `c.current.from` is invalid.

The issue seems that the AnimationPlayer does not manage the removal of current playing animation. If you add a `animation_player.stop()` in your script before the animation removal, the problem does not occur.

I suggest adding a call to `_stop_internal` in `AnimationPlayer::_animation_removed` when the current animation is the one that is being removed and reverting the modifications in `string_name.cpp`.

Be careful, I just found another problem in `AnimationPlayer::_animation_removed`, the following condition can never be true since `AnimationMixer::_animation_removed` removed it from the `animation_set`  couple lines before. I think this condition should be removed.
```c++
if (!animation_set.has(name)) {
	return; // No need to update because not the one from the library being used.
}
``` ","2024-09-01T12:22:57Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","I believe there is no need to handle the display on each track. It would be better to have one option and allow shortcuts to be registered.

Also, since that place is the zone for track properties basically, so it would be more appropriate to put editor-only options in the following places:

![image](https://github.com/user-attachments/assets/4f3f8863-369b-4eda-98fd-0f16d55d5033)


","2024-09-01T08:19:48Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","","2024-09-02T03:15:33Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","","2024-09-02T03:18:27Z",false,"COMMENTED"
"SatLess","NONE","","2024-09-02T03:36:47Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-09-02T06:30:52Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-09-03T02:15:09Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","","2024-09-03T02:22:27Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","BezierTrack is checked because the BezierEditor cannot display it without BezierTrack. But in the case of MethodTrack, the check should be removed because there is no need to tie the presence of MethodTrack to the drawing options of the MethodTrack string.","2024-09-03T02:28:12Z",false,"CHANGES_REQUESTED"
"SatLess","NONE","","2024-09-03T02:50:30Z",false,"COMMENTED"
"SatLess","NONE","","2024-09-03T02:57:09Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-09-03T06:59:29Z",false,"COMMENTED"
"SatLess","NONE","","2024-09-03T10:36:24Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-09-03T11:16:22Z",false,"APPROVED"
"clayjohn","MEMBER","Oh well. This approach is a few more instructions than we had before which is not ideal, but it is more correct and handles more edge cases.

I looked into my precision theory deeper and I am not sure, in theory all unspecified floats and ints should be high precision. So it may be something else in the driver code gen causing the issue. 

Since you have confirmed that this works using many of the prior bug reports I think it makes sense to go with this.

The final thing is the licensing issue. There were concerns expressed about the licence previously. Since the code is basically a one-liner, I don't think a licence can be attached to it. The FSF considers any chunk of code fewer than 15 lines to be too trivial to copyright. ","2024-09-02T02:45:10Z",false,"APPROVED"
"kleonc","MEMBER","Makes sense!","2024-09-01T08:56:45Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Looks good to me! But it would be good for folks who are more engaged with the build/CI stuff to advise if this is a good place to put it in the GitHub workflows.

The CI failed before PR https://github.com/godotengine/godot/pull/96406 was merged in the expected way. I've just clicked the button for that job to re-run, so we can ensure it passes now that that has been fixed.

**UPDATE:** Ah, nevermind, it'll need to be rebased before it'll actually pass.","2024-09-02T11:27:26Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-02T21:46:45Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-09-01T21:02:37Z",false,"APPROVED"
"Faless","COLLABORATOR","","2024-09-02T21:21:20Z",false,"COMMENTED"
"alvinhochun","CONTRIBUTOR","","2024-09-02T21:49:42Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-09-02T22:01:13Z",false,"COMMENTED"
"alvinhochun","CONTRIBUTOR","","2024-09-03T13:12:42Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/02b16d2f544e323b7b7f57e6e992b0b8e5d8b954), it works as expected on Windows 11 23H2 + MSVC 2022 (17.10.0).","2024-09-17T12:35:57Z",false,"APPROVED"
"Faless","COLLABORATOR","","2024-09-17T16:06:52Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-08-31T22:15:28Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-08-31T22:47:19Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-13T11:10:51Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-08-31T21:20:06Z",false,"APPROVED"
"KoBeWi","MEMBER","VisualShader editor changes might use another check, as they are bigger and I'm not familiar with this area, but otherwise looks good.

Seeing all this duplicated code for handling navigation, I wonder if we should have a custom DialogLineEdit class that does it automatically for assigned Control.","2024-09-12T20:26:36Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-13T09:20:21Z",false,"APPROVED"
"akien-mga","MEMBER","The change to `fchmod` seems correct to me.

I'm not familiar enough with Unix pipes to assess the `mkfifo` one, would be great if @bruvzg could have a look.","2024-09-19T14:29:42Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-10-04T09:53:35Z",false,"COMMENTED"
"andyprice","NONE","","2024-10-04T11:21:27Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-09-01T09:27:20Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-09-01T15:16:08Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-09-01T21:04:23Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-24T10:48:42Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-10-04T00:10:22Z",false,"COMMENTED"
"fire","MEMBER","I expect small tests to work but I don‚Äôt think anyone in the godot developer community would be able to test the obscure browser combinations.

My vote is to send the branch into to a pre-release asap.

Edited:

Since @Faless is the web maintainer I don‚Äôt know who else can really review it.","2024-09-25T22:03:16Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-26T13:13:30Z",false,"COMMENTED"
"akien-mga","MEMBER","Tested on Linux, seems to work for me:
```
TLS 1.3 supported :)
```","2024-09-26T13:15:10Z",false,"APPROVED"
"akien-mga","MEMBER","Good catch to update the docs too.","2024-09-26T15:48:29Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-08T20:11:45Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-08T20:13:50Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-08T20:52:19Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-08T21:00:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-08T21:04:33Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-09T12:02:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-09T12:12:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","Looks fine.
I noticed some potential improvements that could be done in a follow-up, e.g. merging `buttons` and `editor_table` by using a struct.","2024-09-09T12:16:01Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-09T12:19:00Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-08-31T15:10:30Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-12T13:59:25Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-12T13:59:58Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-12T14:00:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-31T17:55:59Z",false,"APPROVED"
"mihe","CONTRIBUTOR","","2024-08-31T12:37:08Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-08-31T12:45:47Z",false,"COMMENTED"
"ryevdokimov","CONTRIBUTOR","Works for me.

After https://github.com/godotengine/godot/pull/93972, https://github.com/godotengine/godot/pull/92667, and this PR I can finally gitignore the .godot folder and have my project startup without errors or having to restart!","2024-08-31T13:09:10Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","Sounds good to me! Thanks!","2024-08-31T22:31:35Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-04T20:24:42Z",false,"APPROVED"
"clayjohn","MEMBER","Looks good to me, but would be nice to have @darksylinc take a look as well before merging","2024-09-01T04:15:18Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-09-02T07:45:04Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-02T08:35:54Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","No functional change, it's just much cleaner code.","2024-09-03T11:05:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-31T07:53:46Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-31T10:53:22Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-31T10:57:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-31T10:58:26Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-08-31T12:48:06Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-09-03T13:44:02Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-09-03T13:44:52Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-09-03T13:52:47Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-09-03T14:12:38Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-09-03T14:12:49Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-09-03T14:54:23Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-08-31T18:34:00Z",false,"CHANGES_REQUESTED"
"smix8","CONTRIBUTOR","","2024-08-31T18:56:02Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-08-31T18:56:47Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-08-31T18:59:14Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-08-31T18:59:38Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-31T19:00:45Z",false,"APPROVED"
"smix8","CONTRIBUTOR","","2024-08-31T19:13:16Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-08-31T19:13:20Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-08-31T19:13:24Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-30T21:28:33Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-08-30T21:30:36Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-08-30T21:33:57Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-08-30T21:37:24Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks good to me. Indeed the RD creation code is only run if the current rendering method is compatibility (i.e. create_local_rendering_device returns `null`). 
","2024-08-31T17:54:12Z",false,"APPROVED"
"stuartcarnie","CONTRIBUTOR","Ahh great find ‚Äì thank you!","2024-08-30T21:25:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-30T21:37:18Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-30T21:33:06Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-08T18:00:32Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-31T11:02:29Z",false,"COMMENTED"
"huwpascoe","NONE","looks good to me","2024-09-06T21:12:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-04T16:40:44Z",false,"APPROVED"
"paulloz","MEMBER","","2024-08-30T15:45:45Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-08-30T16:07:58Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-08-30T16:14:10Z",false,"COMMENTED"
"paulloz","MEMBER","üëç ","2024-08-30T17:34:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-30T15:07:25Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-30T14:34:40Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-04T16:39:56Z",false,"APPROVED"
"raulsntos","MEMBER","This is a massive compatibility break, so it's not acceptable. We could do it as long as it's only adding span overloads while keeping the array overloads, but only for non-virtual methods and spans should never be returned either.","2024-08-30T14:56:01Z",false,"CHANGES_REQUESTED"
"raulsntos","MEMBER","","2024-10-01T23:16:02Z",false,"COMMENTED"
"Delsin-Yu","CONTRIBUTOR","","2024-10-02T06:57:43Z",false,"COMMENTED"
"Delsin-Yu","CONTRIBUTOR","","2024-10-02T07:09:45Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-10-04T19:04:03Z",false,"COMMENTED"
"Delsin-Yu","CONTRIBUTOR","","2024-10-05T18:23:36Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-10-05T19:05:56Z",false,"COMMENTED"
"Delsin-Yu","CONTRIBUTOR","","2024-10-05T19:37:23Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-10-07T02:36:33Z",false,"COMMENTED"
"Delsin-Yu","CONTRIBUTOR","","2024-10-07T09:39:07Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-10-07T18:14:36Z",false,"COMMENTED"
"raulsntos","MEMBER","Looks good to me, thanks.

I have compared the generated bindings with the ones we were generating before this PR, and the changes look good. It also doesn't look like it breaks compatibility, I double-checked with APICompat.","2024-10-08T05:09:55Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-08T10:09:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-09T14:28:27Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-09T15:09:38Z",false,"COMMENTED"
"Delsin-Yu","CONTRIBUTOR","","2024-10-09T15:12:17Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-08-30T14:34:52Z",false,"COMMENTED"
"object71","CONTRIBUTOR","","2024-08-30T14:45:41Z",false,"COMMENTED"
"TokageItLab","MEMBER","We may be able to add `modf()` to GlobalScope as a follow up later. But for now, we would like to merge this PR separately to fix the regression.","2024-08-30T14:54:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-04T16:39:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-30T10:24:31Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-30T11:44:14Z",false,"APPROVED"
"aaronfranke","MEMBER","Confirmed fixes the problem, but may be better to wait a few hours or days before merging in case upstream has a better fix for us.","2024-08-30T08:51:13Z",false,"APPROVED"
"fire","MEMBER","","2024-08-30T22:16:13Z",false,"APPROVED"
"fire","MEMBER","","2024-09-02T10:11:50Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-08-30T16:38:23Z",false,"CHANGES_REQUESTED"
"RandomShaper","MEMBER","","2024-08-30T09:21:09Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-08-30T04:55:41Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally on Windows 11 23H2, it works as expected.
This is a great start; it makes the editor feel a lot more polished already üôÇ 

Some feedback:

- I find the minimize/maximize/close buttons a bit tall compared to other buttons on Windows 11 (each button has a 36x36 clickable area):

![image](https://github.com/user-attachments/assets/3bca3bb3-204c-49c4-b023-be932e1ac120)

Compare to VS Code's, which are also client-side decorations (each button has a 45x32 clickable area):

![image](https://github.com/user-attachments/assets/a28d0646-7e39-4876-86a0-e75695e0a615)

- When a window is maximized or fullscreen (and only when maximized), the minimize/maximize/close buttons should be placed **exactly** in the window corner with no vertical or horizontal margin, so that when the window is maximized, you can fly your cursor to the top-right corner and left-click to close the window. No need for precise aiming. This behavior also works in VS Code, for instance.
  - In the editor, the top menu buttons can't be clicked right away if you fly your mouse to the top due to similar margins:

![image](https://github.com/user-attachments/assets/c79e44aa-2798-4fc6-941c-ca0cc80c0145)

When the window is made fullscreen, the minimize/maximize/close buttons disappear entirely, but they still take invisible space, which looks odd:

![image](https://github.com/user-attachments/assets/323de7f5-b8ee-4573-b9c9-0b011d54dbef)

In comparison, the space is reclaimed by the buttons next to it in VS Code.

- Pressing the <kbd>Shift + F11</kbd> shortcut or using **Editor > Toggle Fullscreen** does not make the minimize/maximize/close buttons reappear, even though you can still click the area they previously occupied for the usual effect.

- Window borders are momentarily visible during the project manager splash screen. To avoid this visual discrepancy, we should make the splash screen borderless if **Expand to Title** is enabled in the Editor Settings.","2024-09-17T12:57:57Z",false,"CHANGES_REQUESTED"
"Geometror","MEMBER","While the project manager is working for me, opening a project results in a fully transparent window on Win11.

![BlnztpsSOk](https://github.com/user-attachments/assets/3a53d56e-610e-49e2-a247-663bcdd641cc)","2024-10-04T15:41:46Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I was waiting for the implementation to settle in.","2024-10-04T17:58:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-30T09:26:42Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-30T09:44:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-30T09:46:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-30T09:51:35Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-08-30T12:11:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","Haven't tested but this makes sense to me","2024-10-01T14:46:32Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","This makes the imported scenes consistent with the default ""reset on save"" behavior of AnimationPlayer.

I do want to note that RESET animations are created from bone rest, but not the initial bone pose, which may be different.
Godot's BoneMap system by default resets the skeleton to bone rest, since the option to do so is enabled by default for compatibility reasons.

This PR will change the initial pose if there is a RESET animation, and if the user is not using a BoneMap or has deselected the reset option.

I think it is good because any scene with RESET will be reset on save anyway.
If anyone has a problem with losing the initial pose in the 2 cases I mentioned above, we could add an option to disable ""Reset on Save"" on imported AnimationPlayer (and also disable this behavior as a result). But I would wait and see if someone asks for this.","2024-08-30T02:22:40Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-10T13:52:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-10T14:05:52Z",false,"COMMENTED"
"Jordyfel","CONTRIBUTOR","","2024-09-10T14:11:04Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-10T14:21:36Z",false,"APPROVED"
"aaronfranke","MEMBER","This looks like a good change. We should never be including x86_64 assembly when not on x86_64, so that architecture check really should be there. In fact, it is surprising that non-x86_64 architectures work at all with the existing code, I wonder why?","2024-08-29T21:36:42Z",false,"APPROVED"
"fire","MEMBER","","2024-08-29T21:55:27Z",false,"APPROVED"
"bruvzg","MEMBER","The ASM file seems to have a stub for the ARM to allow keeping it included, but the actual code is x86-64 only.","2024-08-30T05:28:43Z",false,"APPROVED"
"adamscott","MEMBER","","2024-08-29T20:31:55Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-08-29T22:11:09Z",false,"COMMENTED"
"raulsntos","MEMBER","Thanks for the contribution. At a first glance this seems reasonable, but I'm a bit hesitant to deleting directories without some kind of confirmation. It may not be obvious to the user that this data directory is specific to each export and may be overridden, thus breaking the previous export.

We've had similar issues reported in the past about exporting to different platforms/architectures, which is why now the data directory name contains the name of the target platform and architecture. And there's even some users that are not aware that this directory is important and forget to include it when distributing the exported game.

So I'm thinking this may be a documentation issue, and maybe we should recommend that C# projects are always exported to an empty directory.","2024-08-30T00:26:08Z",false,"COMMENTED"
"scgm0","CONTRIBUTOR","","2024-08-30T02:28:07Z",false,"COMMENTED"
"raulsntos","MEMBER","Looks good, thanks!","2024-09-12T01:03:29Z",false,"APPROVED"
"forkercat","NONE","","2024-09-09T07:13:25Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-29T18:38:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-29T18:40:32Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-29T18:41:26Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-08-29T18:44:33Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-29T18:45:30Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-08-29T19:00:18Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-08-29T19:00:27Z",false,"COMMENTED"
"raulsntos","MEMBER","Looks good. Thanks!","2024-08-29T19:11:50Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-29T17:24:50Z",false,"COMMENTED"
"lucasnlm","CONTRIBUTOR","","2024-08-29T18:23:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-29T18:25:26Z",false,"COMMENTED"
"lucasnlm","CONTRIBUTOR","","2024-08-29T19:08:08Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","That should be very useful!! Everything looks good.","2024-08-31T13:00:24Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-09-02T07:39:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-02T09:47:32Z",false,"APPROVED"
"fire","MEMBER","The tests look reasonable and they pass cicd.","2024-08-29T23:24:20Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-29T20:11:53Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-29T20:12:32Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-29T20:13:48Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-29T20:14:32Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-29T20:31:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-29T20:39:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-29T20:40:11Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-29T20:45:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-29T20:45:57Z",false,"COMMENTED"
"Macksaur","CONTRIBUTOR","","2024-08-29T20:49:45Z",false,"COMMENTED"
"Macksaur","CONTRIBUTOR","","2024-08-29T22:02:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-29T22:26:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-30T08:14:33Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-30T08:18:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","Some minor details left, otherwise looks good on the editor side.","2024-08-30T08:19:25Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-30T08:58:54Z",false,"COMMENTED"
"Macksaur","CONTRIBUTOR","","2024-08-30T15:10:45Z",false,"COMMENTED"
"Macksaur","CONTRIBUTOR","","2024-08-30T15:13:03Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-30T15:14:47Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-02T15:32:49Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-09-02T16:26:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-02T16:32:26Z",false,"COMMENTED"
"Macksaur","CONTRIBUTOR","","2024-09-02T18:40:18Z",false,"COMMENTED"
"fire","MEMBER","Looks good to me.

Did a paper technical review, did not test by compiling or running test project.","2024-09-03T17:37:22Z",false,"APPROVED"
"fire","MEMBER","","2024-09-03T17:37:53Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-05T16:14:06Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it mostly works as expected.

**Testing project:** [test_pr_96290.zip](https://github.com/user-attachments/files/16897518/test_pr_96290.zip)

The main issue I noticed is that if you change the function name and save the scene (and the script alongside it), the button breaks until you use **Scene > Reload Saved Scene**:

https://github.com/user-attachments/assets/3e2e5e59-6f51-4302-8666-8c3a7b2f3770

It works if you rename the function but didn't save yet.

Also, using an empty string as an icon results in a broken image:

![image](https://github.com/user-attachments/assets/74b780c5-51e4-4f77-a76e-441519d8dbd2)

I suggest not having any icon instead in this particular situation. Using a non-empty unknown icon string could print an error instead.

PS: I noticed using EditorUndoRedoManager without `create_action()` causes the editor to print an empty line (and undo-redo won't work). No error is printed in this case. You can try this in the MRP by commenting out `create_action()` but leaving the other lines intact.","2024-09-05T16:18:51Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-09-20T14:53:37Z",false,"COMMENTED"
"Macksaur","CONTRIBUTOR","","2024-09-20T18:16:34Z",false,"COMMENTED"
"Macksaur","CONTRIBUTOR","","2024-09-20T18:18:23Z",false,"COMMENTED"
"Macksaur","CONTRIBUTOR","","2024-09-20T20:52:04Z",false,"COMMENTED"
"Macksaur","CONTRIBUTOR","","2024-09-20T20:54:11Z",false,"COMMENTED"
"Macksaur","CONTRIBUTOR","","2024-09-20T21:02:42Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-09-23T09:03:51Z",false,"COMMENTED"
"fire","MEMBER","","2024-09-23T20:41:10Z",false,"COMMENTED"
"Macksaur","CONTRIBUTOR","","2024-09-23T20:43:40Z",false,"COMMENTED"
"dalexeev","MEMBER","I made these changes but found a bug, see the review comment below.

<details>
<summary>Patch</summary>

```diff
diff --git a/modules/gdscript/gdscript.cpp b/modules/gdscript/gdscript.cpp
index 3e70bab0b9..ec42992aec 100644
--- a/modules/gdscript/gdscript.cpp
+++ b/modules/gdscript/gdscript.cpp
@@ -567,8 +567,7 @@ bool GDScript::_update_exports(bool *r_err, bool p_recursive_call, PlaceHolderSc
 					case GDScriptParser::ClassNode::Member::SIGNAL: {
 						_signals[member.signal->identifier->name] = member.signal->method_info;
 					} break;
-					case GDScriptParser::ClassNode::Member::GROUP:
-					case GDScriptParser::ClassNode::Member::TOOL_BUTTON: {
+					case GDScriptParser::ClassNode::Member::META: {
 						members_cache.push_back(member.annotation->export_info);
 					} break;
 					default:
diff --git a/modules/gdscript/gdscript_analyzer.cpp b/modules/gdscript/gdscript_analyzer.cpp
index 58feb98f6b..9b07c7d4a0 100644
--- a/modules/gdscript/gdscript_analyzer.cpp
+++ b/modules/gdscript/gdscript_analyzer.cpp
@@ -1203,8 +1203,7 @@ void GDScriptAnalyzer::resolve_class_member(GDScriptParser::ClassNode *p_class,
 					resolve_class_inheritance(member.m_class, p_source);
 				}
 				break;
-			case GDScriptParser::ClassNode::Member::GROUP:
-			case GDScriptParser::ClassNode::Member::TOOL_BUTTON:
+			case GDScriptParser::ClassNode::Member::META:
 				// No-op, but needed to silence warnings.
 				break;
 			case GDScriptParser::ClassNode::Member::UNDEFINED:
@@ -1381,8 +1380,8 @@ void GDScriptAnalyzer::resolve_class_body(GDScriptParser::ClassNode *p_class, co
 					resolve_function_body(member.variable->setter);
 				}
 			}
-		} else if (member.type == GDScriptParser::ClassNode::Member::GROUP) {
-			// Apply annotation (`@export_{category,group,subgroup}`).
+		} else if (member.type == GDScriptParser::ClassNode::Member::META) {
+			// Apply annotation (`@export_{category,group,subgroup}`, `@tool_button`).
 			resolve_annotation(member.annotation);
 			member.annotation->apply(parser, nullptr, p_class);
 		}
diff --git a/modules/gdscript/gdscript_compiler.cpp b/modules/gdscript/gdscript_compiler.cpp
index b6503aad92..9d152dd194 100644
--- a/modules/gdscript/gdscript_compiler.cpp
+++ b/modules/gdscript/gdscript_compiler.cpp
@@ -2859,11 +2859,10 @@ Error GDScriptCompiler::_prepare_compilation(GDScript *p_script, const GDScriptP
 				p_script->constants.insert(name, enum_n->dictionary);
 			} break;
 
-			case GDScriptParser::ClassNode::Member::GROUP:
-			case GDScriptParser::ClassNode::Member::TOOL_BUTTON: {
+			case GDScriptParser::ClassNode::Member::META: {
 				const GDScriptParser::AnnotationNode *annotation = member.annotation;
 				// Avoid name conflict. See GH-78252.
-				StringName name = vformat(""@group_%d_%s"", p_script->members.size(), annotation->export_info.name);
+				StringName name = vformat(""@meta_%d_%s"", p_script->members.size(), annotation->export_info.name);
 
 				// This is not a normal member, but we need this to keep indices in order.
 				GDScript::MemberInfo minfo;
diff --git a/modules/gdscript/gdscript_editor.cpp b/modules/gdscript/gdscript_editor.cpp
index 3ee76b2451..fb169ce50d 100644
--- a/modules/gdscript/gdscript_editor.cpp
+++ b/modules/gdscript/gdscript_editor.cpp
@@ -1126,8 +1126,7 @@ static void _find_identifiers_in_class(const GDScriptParser::ClassNode *p_class,
 						}
 						option = ScriptLanguage::CodeCompletionOption(member.signal->identifier->name, ScriptLanguage::CODE_COMPLETION_KIND_SIGNAL, location);
 						break;
-					case GDScriptParser::ClassNode::Member::GROUP:
-					case GDScriptParser::ClassNode::Member::TOOL_BUTTON:
+					case GDScriptParser::ClassNode::Member::META:
 						break; // No-op, but silences warnings.
 					case GDScriptParser::ClassNode::Member::UNDEFINED:
 						break;
@@ -2428,8 +2427,7 @@ static bool _guess_identifier_type_from_base(GDScriptParser::CompletionContext &
 							r_type.type.class_type = member.m_class;
 							r_type.type.is_meta_type = true;
 							return true;
-						case GDScriptParser::ClassNode::Member::GROUP:
-						case GDScriptParser::ClassNode::Member::TOOL_BUTTON:
+						case GDScriptParser::ClassNode::Member::META:
 							return false; // No-op, but silences warnings.
 						case GDScriptParser::ClassNode::Member::UNDEFINED:
 							return false; // Unreachable.
diff --git a/modules/gdscript/gdscript_parser.cpp b/modules/gdscript/gdscript_parser.cpp
index e50d249347..e4e2f1ff08 100644
--- a/modules/gdscript/gdscript_parser.cpp
+++ b/modules/gdscript/gdscript_parser.cpp
@@ -632,7 +632,7 @@ void GDScriptParser::parse_program() {
 						push_error(R""(Expected newline after a standalone annotation.)"");
 					}
 					if (annotation->name == SNAME(""@export_category"") || annotation->name == SNAME(""@export_group"") || annotation->name == SNAME(""@export_subgroup"")) {
-						head->add_member_group(annotation);
+						head->add_meta_member(annotation);
 						// This annotation must appear after script-level annotations and `class_name`/`extends`,
 						// so we stop looking for script-level stuff.
 						can_have_class_or_extends = false;
@@ -1026,7 +1026,7 @@ void GDScriptParser::parse_class_body(bool p_is_multiline) {
 							push_error(R""(Expected newline after a standalone annotation.)"");
 						}
 						if (annotation->name == SNAME(""@export_category"") || annotation->name == SNAME(""@export_group"") || annotation->name == SNAME(""@export_subgroup"")) {
-							current_class->add_member_group(annotation);
+							current_class->add_meta_member(annotation);
 						} else {
 							// For potential non-group standalone annotations.
 							push_error(R""(Unexpected standalone annotation.)"");
@@ -4180,7 +4180,7 @@ bool GDScriptParser::tool_button_annotation(AnnotationNode *p_annotation, Node *
 	FunctionNode *func = static_cast<FunctionNode *>(p_target);
 
 	if (!is_tool()) {
-		push_error(""Tool buttons can only be used in tool scripts (add `@tool` to the top of the script)."", p_annotation);
+		push_error(""Tool buttons can only be used in tool scripts (add \""@tool\"" to the top of the script)."", p_annotation);
 		return false;
 	}
 
@@ -4193,12 +4193,15 @@ bool GDScriptParser::tool_button_annotation(AnnotationNode *p_annotation, Node *
 	p_annotation->export_info.type = Variant::Type::CALLABLE;
 	p_annotation->export_info.usage = PROPERTY_USAGE_EDITOR | PROPERTY_USAGE_INTERNAL;
 
-	if (func->parameters.size() >= 1 && func->parameters[0]->datatype_specifier != nullptr && func->parameters[0]->datatype_specifier->type_chain[0]->name != ""EditorUndoRedoManager"") {
-		push_error(""Tool button methods should have their first argument typed as an EditorUndoRedoManager."", func);
-		return false;
+	if (!func->parameters.is_empty() && func->parameters[0]->datatype_specifier != nullptr) {
+		const DataType arg_type = func->parameters[0]->get_datatype();
+		if (!arg_type.is_variant() && (arg_type.kind != DataType::NATIVE || arg_type.native_type != ""EditorUndoRedoManager"")) {
+			push_error(""Tool button function must have first argument of type \""EditorUndoRedoManager\""."", p_annotation);
+			return false;
+		}
 	}
 
-	// Build the hint string (format: ""<method>"",""<text>"",""[icon]"")
+	// Build the hint string (format: `<method>[,<text>[,<icon>]]`).
 	String hint_string = func->identifier->name;
 	if (p_annotation->resolved_arguments.size() > 0) {
 		hint_string += "","" + p_annotation->resolved_arguments[0].operator String(); // Button text.
@@ -4208,7 +4211,7 @@ bool GDScriptParser::tool_button_annotation(AnnotationNode *p_annotation, Node *
 	}
 	p_annotation->export_info.hint_string = hint_string;
 
-	current_class->add_tool_button_member(p_annotation);
+	current_class->add_meta_member(p_annotation);
 	func->has_tool_button = true;
 #endif // TOOLS_ENABLED
 
@@ -5544,9 +5547,8 @@ void GDScriptParser::TreePrinter::print_class(ClassNode *p_class) {
 				break;
 			case ClassNode::Member::ENUM_VALUE:
 				break; // Nothing. Will be printed by enum.
-			case ClassNode::Member::GROUP:
-			case ClassNode::Member::TOOL_BUTTON:
-				break; // Nothing. Groups are only used by inspector.
+			case ClassNode::Member::META:
+				break; // Nothing. Meta properties are only used by inspector.
 			case ClassNode::Member::UNDEFINED:
 				push_line(""<unknown member>"");
 				break;
diff --git a/modules/gdscript/gdscript_parser.h b/modules/gdscript/gdscript_parser.h
index 657aa09d2a..ebcaef20e9 100644
--- a/modules/gdscript/gdscript_parser.h
+++ b/modules/gdscript/gdscript_parser.h
@@ -563,8 +563,7 @@ public:
 				VARIABLE,
 				ENUM,
 				ENUM_VALUE, // For unnamed enums.
-				GROUP, // For member grouping.
-				TOOL_BUTTON,
+				META, // For exporting groups and tool buttons.
 			};
 
 			Type type = UNDEFINED;
@@ -600,8 +599,7 @@ public:
 						return m_enum->identifier->name;
 					case ENUM_VALUE:
 						return enum_value.identifier->name;
-					case GROUP:
-					case TOOL_BUTTON:
+					case META:
 						return annotation->export_info.name;
 				}
 				return """";
@@ -625,10 +623,8 @@ public:
 						return ""enum"";
 					case ENUM_VALUE:
 						return ""enum value"";
-					case GROUP:
-						return ""group"";
-					case TOOL_BUTTON:
-						return ""tool button"";
+					case META:
+						return ""meta property"";
 				}
 				return """";
 			}
@@ -649,8 +645,7 @@ public:
 						return m_enum->start_line;
 					case SIGNAL:
 						return signal->start_line;
-					case GROUP:
-					case TOOL_BUTTON:
+					case META:
 						return annotation->start_line;
 					case UNDEFINED:
 						ERR_FAIL_V_MSG(-1, ""Reaching undefined member type."");
@@ -674,8 +669,7 @@ public:
 						return enum_value.identifier->get_datatype();
 					case SIGNAL:
 						return signal->get_datatype();
-					case GROUP:
-					case TOOL_BUTTON:
+					case META:
 						return DataType();
 					case UNDEFINED:
 						return DataType();
@@ -699,8 +693,7 @@ public:
 						return enum_value.identifier;
 					case SIGNAL:
 						return signal;
-					case GROUP:
-					case TOOL_BUTTON:
+					case META:
 						return annotation;
 					case UNDEFINED:
 						return nullptr;
@@ -793,15 +786,11 @@ public:
 			members_indices[p_enum_value.identifier->name] = members.size();
 			members.push_back(Member(p_enum_value));
 		}
-		void add_member_group(AnnotationNode *p_annotation_node) {
+		void add_meta_member(AnnotationNode *p_annotation_node) {
 			// Avoid name conflict. See GH-78252.
-			StringName name = vformat(""@group_%d_%s"", members.size(), p_annotation_node->export_info.name);
+			StringName name = vformat(""@meta_%d_%s"", members.size(), p_annotation_node->export_info.name);
 			members_indices[name] = members.size();
-			members.push_back(Member(p_annotation_node, Member::Type::GROUP));
-		}
-		void add_tool_button_member(AnnotationNode *p_annotation_node) {
-			members_indices[p_annotation_node->export_info.name] = members.size();
-			members.push_back(Member(p_annotation_node, Member::Type::TOOL_BUTTON));
+			members.push_back(Member(p_annotation_node, Member::Type::META));
 		}
 
 		ClassNode() {
diff --git a/modules/gdscript/language_server/gdscript_extend_parser.cpp b/modules/gdscript/language_server/gdscript_extend_parser.cpp
index 88f0816e4d..25f87b70cd 100644
--- a/modules/gdscript/language_server/gdscript_extend_parser.cpp
+++ b/modules/gdscript/language_server/gdscript_extend_parser.cpp
@@ -454,8 +454,7 @@ void ExtendGDScriptParser::parse_class_symbol(const GDScriptParser::ClassNode *p
 				parse_class_symbol(m.m_class, symbol);
 				r_symbol.children.push_back(symbol);
 			} break;
-			case ClassNode::Member::GROUP:
-			case ClassNode::Member::TOOL_BUTTON:
+			case ClassNode::Member::META:
 				break; // No-op, but silences warnings.
 			case ClassNode::Member::UNDEFINED:
 				break; // Unreachable.
@@ -989,8 +988,7 @@ Dictionary ExtendGDScriptParser::dump_class_api(const GDScriptParser::ClassNode
 					methods.append(dump_function_api(m.function));
 				}
 			} break;
-			case ClassNode::Member::GROUP:
-			case ClassNode::Member::TOOL_BUTTON:
+			case ClassNode::Member::META:
 				break; // No-op, but silences warnings.
 			case ClassNode::Member::UNDEFINED:
 				break; // Unreachable.
```

</details>","2024-09-25T20:26:47Z",false,"CHANGES_REQUESTED"
"dalexeev","MEMBER","","2024-09-25T20:29:08Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-09-25T20:32:08Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-09-25T20:34:00Z",false,"COMMENTED"
"Macksaur","CONTRIBUTOR","","2024-09-26T02:28:00Z",false,"COMMENTED"
"dalexeev","MEMBER","GDScript changes look good to me. But I have a question about the core/editor part. Why is it implemented as `EditorInspectorPlugin` and not a new `PROPERTY_HINT_TOOL_BUTTON` handled in `editor_properties.cpp`? In my opinion, an explicit property hint is better than implicit handling of properties with `Callable` type and empty value. It would allow to document hint format properly, for example for dynamic addition of tool buttons via `_get_property_list()`.

Also, we could not limit tool buttons to GDScript, but add them to core, GDExtension and C# as well. Yes, it is possible with implicit `Callable` handling, but explicit and documented property hint looks better.

```c++
#define ADD_TOOL_BUTTON(m_method, m_label, m_icon) ::ClassDB::add_property(get_class_static(), PropertyInfo(Variant::NIL, """", PROPERTY_HINT_TOOL_BUTTON, String(m_method) + String(m_label) + String(m_icon), PROPERTY_USAGE_EDITOR | PROPERTY_USAGE_INTERNAL), StringName(), StringName())
```

Note that to fully dynamically add tool buttons we would need to be able to pass an argument from hint string to the function, since there is no `_call()` to dynamically dispatch calls.

Alternatively, we could implement this as a more verbose option:

```gdscript
@export_tool_button(""Click me"") var click_button: Callable = click_action

func click_action():
    print(""Clicked!"")
```

This would allow you to use lambdas:

```gdscript
@export_tool_button(""Click me"") var click_button: Callable = func ():
    print(""Clicked!"")
```","2024-09-26T08:01:19Z",false,"COMMENTED"
"dalexeev","MEMBER","Looks good to me. @Macksaur Thanks again for your work and patience!","2024-09-27T21:15:43Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-08-29T15:20:18Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-29T15:33:24Z",false,"COMMENTED"
"LRJiao","NONE","","2024-08-29T15:36:01Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","Curious if you've considered having a split bottom radius and top radius, to allow tapered cones (cylinder with different top and bottom).

also curious if it would be easier to add this functionality to the existing cylinder type rather than make a whole new type.

(Note for context that I had a discussion last year with some industry people e.g. Pixar who mentioned that their application requires capsules with different top and bottom radius, and this language exists in the KHR_physics_shape draft. Though cylinder/cone are not considered there due to ease of emulation with a convex hull, it might make sense to model cylinder in the same way.)","2024-08-30T12:26:57Z",false,"COMMENTED"
"LRJiao","NONE","","2024-09-19T05:21:31Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-09-19T06:06:26Z",false,"COMMENTED"
"raulsntos","MEMBER","Tested exporting to Linux and works as expected.","2024-08-29T15:30:49Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-09-02T23:12:03Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I have no problems with this documentation-wise.","2024-09-04T18:32:41Z",false,"APPROVED"
"Faless","COLLABORATOR","","2024-09-04T18:51:43Z",false,"COMMENTED"
"Faless","COLLABORATOR","Looking good :trophy: !

I added some some style comments about naming conventions but not super important (not user facing).

I like the method being called `js_buffer_to_packed_byte_array`, because I believe there could be requests in the future to have a more generic `js_buffer_to_packed_array` returning the most appropriate godot type as a `Variant` (Int32/Int64/Float32/Float64) to avoid extra copies on the godot side for those cases (you can't ""convert"" a PackedByteArray to a Int32Array without copying memory).

Anyway, I think the current method is perfect for now, great job :rocket: !","2024-09-07T11:54:22Z",false,"APPROVED"
"Faless","COLLABORATOR","","2024-09-07T11:54:56Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-09-07T11:55:08Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.","2024-09-06T00:40:56Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-29T19:45:53Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-29T12:51:53Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-29T11:03:41Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","@dalexeev What's up with Theme Items not supporting deprecated messages?","2024-08-29T11:12:37Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-05T20:11:56Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-06T07:53:39Z",false,"APPROVED"
"fire","MEMBER","","2024-09-03T02:57:49Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-30T20:39:05Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-06T08:35:55Z",false,"APPROVED"
"lawnjelly","MEMBER","Read through the comments on the master PR, my only concern was how often this is called, but looks like it's not called from the engine, just user code.

As said elsewhere, a buffer underrun is preferable to a crash, and it seems unlikely to cause a stall for likely uncontended mutex.","2024-10-02T07:09:18Z",false,"APPROVED"
"kleonc","MEMBER","","2024-08-29T09:40:24Z",false,"COMMENTED"
"kleonc","MEMBER","The behavior matches the documentation now indeed. :+1:

https://github.com/godotengine/godot/blob/fd7239cfab228c50777cd54a8bf6eb279a02ef81/doc/classes/EditorResourcePreviewGenerator.xml#L26

Not fully sure whether we indeed want to prevent zero-size previews though. cc @KoBeWi","2024-08-29T20:30:25Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-08-29T04:49:11Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-08-29T03:59:42Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","Perfect! Exactly what I was looking for! Thanks @aaronfranke ","2024-08-29T01:43:37Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","","2024-08-29T05:38:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-06T08:36:42Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","There's a good chunk of ""offsets"" to think about with Parallax2D, and this PR removes one of them, which was previously only available internally.
Seeing the `scroll_offset` changing in the Remote Tree instead of some arbitrary internal value is considerably more intuitive. It helps implementing custom scrolling behavior, as well.

This breaks compatibility but that's exactly why Parallax2D is experimental.","2024-08-28T21:44:27Z",false,"APPROVED"
"adamscott","MEMBER","","2024-09-05T15:11:59Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-05T15:55:04Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-09-05T16:33:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-05T16:37:29Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-05T17:24:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-28T20:49:43Z",false,"APPROVED"
"reduz","MEMBER","Its very little space for the stack, so I dont really think it matters much, but always welcome change.","2024-08-29T17:14:45Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-03T10:55:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-30T09:37:41Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-08-28T17:15:49Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-28T17:33:43Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-08T15:42:36Z",false,"APPROVED"
"KoBeWi","MEMBER","Aside from the issues mentioned above, it works correctly.","2024-09-20T19:53:31Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-21T09:32:32Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-10-04T09:05:01Z",false,"APPROVED"
"kleonc","MEMBER","LGTM! :+1: The changes look trivial.

The only potential concerns:
- Any reason why `const Utils = preload(""../../utils.notest.gd"")` was used before over `class_name Utils`?
- Any reason why `push_error` was used before over `printerr`?","2024-08-28T17:41:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-28T13:43:30Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-28T13:35:04Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-29T14:21:58Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","This is good enough by me documentation-wise","2024-08-29T19:07:56Z",false,"APPROVED"
"KoBeWi","MEMBER","I think the code should use `ui_up`/`ui_down` etc.
But CreateDialog would need to be changed too.","2024-08-29T11:30:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-28T10:46:40Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-28T10:50:32Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","[Gut feeling](https://github.com/godotengine/godot/pull/94954#issuecomment-2258926318)","2024-08-28T10:31:00Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-28T10:41:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-28T11:11:55Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-29T19:09:01Z",false,"APPROVED"
"fire","MEMBER","I'm curious how this handles the infamous turkish i.","2024-08-29T19:30:18Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-28T07:41:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-28T06:50:54Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","I see, so `AudioStreamPlaybackMP3` will check `looping` and decide whether to override it. A bit counter inituitive but make sense now :

![image](https://github.com/user-attachments/assets/6f337d5a-9cb0-42b1-8586-b1c15effbb40)

But I do think can we merge these to one checkbox for AudioStreamPlaybackMP3? it can override anyway. It's strange that user want to play a mp3 that has loop unchecked but imported as loop.","2024-08-29T03:14:13Z",false,"COMMENTED"
"fire","MEMBER","does owner == null means scene root?","2024-08-28T04:59:07Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-28T06:55:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-28T07:06:53Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-28T07:07:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-28T07:08:31Z",false,"COMMENTED"
"DeeJayLSP","CONTRIBUTOR","","2024-08-28T10:58:06Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-28T11:01:40Z",false,"COMMENTED"
"DeeJayLSP","CONTRIBUTOR","","2024-08-28T11:05:41Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-28T11:09:30Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-28T11:09:58Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-08-28T03:48:53Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-08-29T02:48:05Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-08-29T02:58:07Z",false,"APPROVED"
"kleonc","MEMBER","","2024-08-29T09:18:53Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-08-30T02:15:38Z",false,"COMMENTED"
"fire","MEMBER","I did not test this, but multiple people have mentioned they tested it, and being able to revert is a huge usability improvement.","2024-08-28T18:01:30Z",false,"APPROVED"
"fire","MEMBER","","2024-08-28T18:03:16Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-28T18:05:04Z",false,"COMMENTED"
"SaracenOne","MEMBER","","2024-08-28T18:52:18Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-28T06:42:32Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-28T06:37:18Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-08T14:53:37Z",false,"APPROVED"
"groud","MEMBER","","2024-08-28T07:54:04Z",false,"COMMENTED"
"groud","MEMBER","","2024-08-28T07:57:44Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Documentation is okay, it's consistent with what groud wrote in the past.","2024-08-28T11:18:38Z",false,"COMMENTED"
"groud","MEMBER","","2024-08-28T11:24:31Z",false,"CHANGES_REQUESTED"
"Mickeon","CONTRIBUTOR","","2024-08-28T11:28:42Z",false,"COMMENTED"
"groud","MEMBER","","2024-08-28T11:32:18Z",false,"COMMENTED"
"Khusheete","NONE","","2024-08-28T16:52:32Z",false,"COMMENTED"
"Khusheete","NONE","","2024-08-28T18:22:35Z",false,"COMMENTED"
"groud","MEMBER","","2024-08-29T09:00:50Z",false,"COMMENTED"
"groud","MEMBER","","2024-08-29T09:17:15Z",false,"COMMENTED"
"Khusheete","NONE","","2024-08-29T18:51:37Z",false,"COMMENTED"
"groud","MEMBER","","2024-10-07T11:58:36Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-07T11:59:38Z",false,"COMMENTED"
"devloglogan","CONTRIBUTOR","Tested and seems to be working well! Code looks good to me, just have some extremely minor nits.","2024-09-10T21:11:44Z",false,"APPROVED"
"devloglogan","CONTRIBUTOR","","2024-09-10T21:16:54Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-09-12T00:37:12Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-09-12T01:23:42Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","Look great!","2024-09-12T01:51:05Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-09-12T02:08:01Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-09-12T02:15:15Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-08-28T08:09:06Z",false,"COMMENTED"
"biswas08433","CONTRIBUTOR","","2024-09-10T01:56:28Z",false,"COMMENTED"
"kleonc","MEMBER","LGTM","2024-09-18T10:21:38Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-09-23T19:52:44Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-09-23T20:54:39Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-25T23:31:20Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-25T23:31:30Z",false,"APPROVED"
"devloglogan","CONTRIBUTOR","Have not been able to test this yet, but the code looks good to me!","2024-08-30T19:38:29Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-08-30T20:02:37Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-08-30T20:51:13Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-09-01T18:48:25Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-09-01T19:01:08Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-09-01T19:12:06Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-09-02T13:53:59Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-09-02T13:54:33Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-08-31T15:09:42Z",false,"APPROVED"
"AThousandShips","MEMBER","Not sure these need compat methods necessarily, while they are exposed to modules I don't know that we guarantee any compatibility with those and these are only used internally

Otherwise this looks good","2024-08-27T16:47:54Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","How","2024-08-27T17:09:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-27T19:36:13Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-08-27T16:10:27Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-27T16:28:23Z",false,"COMMENTED"
"DeeJayLSP","CONTRIBUTOR","","2024-08-27T16:29:15Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-27T16:35:41Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-27T16:36:49Z",false,"COMMENTED"
"DeeJayLSP","CONTRIBUTOR","","2024-08-27T17:02:10Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-29T18:27:47Z",false,"COMMENTED"
"DeeJayLSP","CONTRIBUTOR","","2024-08-29T18:43:29Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-29T19:04:49Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-29T19:05:23Z",false,"APPROVED"
"DeeJayLSP","CONTRIBUTOR","","2024-08-29T19:10:33Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-30T07:18:39Z",false,"COMMENTED"
"DeeJayLSP","CONTRIBUTOR","","2024-08-30T19:33:08Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-30T21:35:51Z",false,"APPROVED"
"AThousandShips","MEMBER","Beat me to it! Thank you `godot-prs-by-file` for saving me opening a duplicate PR","2024-08-27T15:50:17Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-27T15:51:18Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-27T15:19:30Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-08-27T14:45:07Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` 61598c5c88d95b96811d386cb20d714c35f4c6d7), there's an issue with the node not being created if it's searched with an alias. Here, pressing <kbd>Enter</kbd> or double-clicking the selected entry will close the dialog and do nothing:

![image](https://github.com/user-attachments/assets/1e137be1-b910-46eb-a40c-88b62e09097e)

This is also printed to the console:

```
ERROR: Cannot get class 'ReflectionProbe      - Matches the ""envmap"" keyword.'.
   at: _instantiate_internal (./core/object/class_db.cpp:554)
ERROR: Parameter ""p_object"" is null.
   at: instantiate_object_properties (./editor/editor_data.cpp:597)
ERROR: Parameter ""child"" is null.
   at: _do_create (./editor/scene_tree_dock.cpp:2779)
```

It works if you search for the original node name instead.","2024-08-31T04:18:16Z",false,"CHANGES_REQUESTED"
"stijn-h","CONTRIBUTOR","I think this would be a great addition, especially for non-english users if these keywords can be translated. Still need to verify that all custom/script type use cases still work, and the impact on performance.","2024-10-05T23:03:46Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-10-05T23:48:15Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-10-05T23:57:58Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-10-05T23:58:49Z",false,"COMMENTED"
"stijn-h","CONTRIBUTOR","","2024-10-06T09:47:50Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-10-06T13:07:21Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me.","2024-08-27T14:41:27Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-27T13:36:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-27T13:37:20Z",false,"COMMENTED"
"RandomShaper","MEMBER","Looks great now! I added some suggestions, but I'm leaving an approval already.

Aside, if the commit structure is not meant to be squashed, I'd also suggest rewording the messages so they look very similar and it's obvious they part of the same endeavor.","2024-08-29T08:34:38Z",false,"APPROVED"
"KoBeWi","MEMBER","I'm not sure what the removed styles were for, I don't see any problems after removing them.
The dialog's override was added in #60478. It was supposed to align the top LineEdits, but doesn't seem necessary anymore.","2024-09-07T17:39:01Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-27T14:25:57Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-27T14:17:08Z",false,"APPROVED"
"bruvzg","MEMBER","It should be at least not set as default driver for Intel macs, since most of them do not have Metal 3 capabilities.","2024-08-27T10:58:59Z",false,"COMMENTED"
"Ozomahtli","NONE","","2024-08-27T12:21:59Z",false,"COMMENTED"
"Ozomahtli","NONE","","2024-08-27T12:22:01Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","I love the enthusiasm for wanting to add x86 support!

From the outset, I approached the development of the Metal driver for Apple TBDR GPUs, with a unified memory architecture. This covers all M-series laptops, iPhones, iPads and AppleTVs. This code makes a number of assumptions that are incorrect for non-Apple GPUs, which could lead to memory corruption, or just not work on non-Apple GPUs.

Per [this comment](https://github.com/godotengine/godot/pull/88199#discussion_r1485660012), my assumption is that MoltenVK, and their vast experience and presumable hardware access, would support non-Apple silicon (x86 laptops). ","2024-08-27T20:20:04Z",false,"COMMENTED"
"Ozomahtli","NONE","","2024-08-28T21:28:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-27T13:57:58Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","Real nice works! Another edge case solved for the scene reloading!! Tested it with success.
I added this situation in the MRP I used to test scene reloading. I created the scene `container_editable` containing the blender asset, activated editable children and added this scene into `simple_inherited` without this PR, the modifications in `ContainerEditable` where lost in `simple_inherited` on reload and the foldable were resetted in `ContainerEditable`.
[test-godot-blender-reimport-missing-node-v7.zip](https://github.com/user-attachments/files/16840964/test-godot-blender-reimport-missing-node-v7.zip)


Note: If you test the MRP from #91122, it's still broken because the skeleton is now considered modified in the scene. But if you create another scene exactly like 'actor_x', I was not able to reproduce the problem where the skeleton get broken when I modify it in blender and reexport the gltf.","2024-09-02T20:01:22Z",false,"CHANGES_REQUESTED"
"SaracenOne","MEMBER","","2024-09-07T01:02:23Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","Sound good!! Nice work!","2024-09-07T02:30:30Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-07T09:14:40Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-02T10:20:49Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-27T13:50:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-27T13:47:08Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-04T16:34:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-10T08:55:22Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-09-10T09:02:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-10T09:11:51Z",false,"APPROVED"
"adamscott","MEMBER","","2024-09-11T01:33:57Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-27T13:58:25Z",false,"APPROVED"
"lawnjelly","MEMBER","Looks straightforward enough (limitation on using the operators, so needs set / get if I understand correctly).","2024-10-02T07:15:17Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-08-26T22:34:03Z",false,"COMMENTED"
"fire","MEMBER","The reasoning in the previous posts explains why the move of initialization.

Edited:

That said, we probably want to test earlier so any unintended breakage is in first part of the 4.4 cycle and not in a beta.","2024-09-03T18:42:00Z",false,"APPROVED"
"fire","MEMBER","","2024-08-26T23:57:39Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-27T08:53:59Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-08-27T04:09:47Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-08-27T14:28:34Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-01T05:23:01Z",false,"COMMENTED"
"BlueCube3310","CONTRIBUTOR","","2024-09-01T08:49:33Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great! Thank you for taking a look at this. The VRAM profiler is something that I really want to improve in this release","2024-09-01T20:01:19Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-09-01T20:01:37Z",false,"COMMENTED"
"raulsntos","MEMBER","Thanks! This is the warning that I get with your MRP:

> (0,0): warning FodyPackageReference: Fody: The package reference for PropertyChanged.Fody does not contain PrivateAssets='All'

The error has no associated file, so `e.File` is null. The changes to handle a null `e.File` in the logger look good to me, the other changes should not be needed.

The issue is also present in Godot 4, so this change needs to be applied to `master`. If you are unable to open a PR against the `master` branch, I can do it for you.","2024-08-29T14:57:59Z",false,"CHANGES_REQUESTED"
"raulsntos","MEMBER","","2024-08-29T16:32:55Z",false,"COMMENTED"
"raulsntos","MEMBER","Looks good to me, thanks!

By the way, it seems your commit is not linked to your GitHub account. See: [Why are my commits linked to the wrong user?](https://docs.github.com/en/pull-requests/committing-changes-to-your-project/troubleshooting-commits/why-are-my-commits-linked-to-the-wrong-user) for more info.","2024-08-29T16:56:09Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-30T14:18:54Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-26T19:34:57Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-26T15:20:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-26T14:43:28Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-08-26T14:58:27Z",false,"APPROVED"
"fire","MEMBER","","2024-08-26T17:59:44Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-08-31T22:29:25Z",false,"COMMENTED"
"BlueCube3310","CONTRIBUTOR","","2024-09-01T08:56:02Z",false,"COMMENTED"
"BlueCube3310","CONTRIBUTOR","","2024-09-01T08:57:51Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-01T20:04:23Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-01T20:10:11Z",false,"COMMENTED"
"BlueCube3310","CONTRIBUTOR","","2024-09-01T20:43:15Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-02T04:20:19Z",false,"COMMENTED"
"Zireael07","CONTRIBUTOR","","2024-09-02T08:59:48Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-02T14:20:22Z",false,"COMMENTED"
"Zireael07","CONTRIBUTOR","","2024-09-02T14:56:36Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-02T19:28:56Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` b6223c0df0300ba2db17b5742c349f13c33f8884), it works as expected in all rendering methods. This allows using VRAM compressed directional lightmaps with any rendering method, whereas you'd get error spam previously (and a black screen).

**Testing project:** [test_lightmap_directional_compress.zip](https://github.com/user-attachments/files/16882023/test_lightmap_directional_compress.zip)

## Preview

### VRAM Uncompressed

![VRAM Uncompressed](https://github.com/user-attachments/assets/1fcedb4d-1d5f-44c5-991e-58240414ba0e)

### VRAM Compressed *(this PR)*

![VRAM Compressed](https://github.com/user-attachments/assets/144ec219-4986-4c82-8531-4e917f6a7ae7)

PS: I noticed directional lightmaps generally represent light direction in a more faint manner compared to real-time lights, even when there is only a single clear light direction at a given texel, no indirect light involved and when lightmap bounces are set to 0. Is there a way we could get the directional lightmapping appearance to make normal mapped surfaces closer to how they'd look like with real-time lighting? This isn't an issue specific to this PR, but I thought it'd be worth pointing out.","2024-09-04T23:32:35Z",false,"APPROVED"
"Calinou","MEMBER","","2024-09-04T23:55:46Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-05T15:13:58Z",false,"COMMENTED"
"jcostello","CONTRIBUTOR","","2024-09-05T15:17:44Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-05T18:53:25Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-05T19:13:55Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-06T15:35:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-26T11:39:47Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-26T11:36:16Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-26T10:43:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-26T11:37:01Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-26T06:46:51Z",false,"COMMENTED"
"NotWearingPants","CONTRIBUTOR","","2024-08-26T09:46:22Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-03T02:17:47Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-03T09:38:09Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-26T07:02:48Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-26T07:03:01Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-26T07:06:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-26T07:28:01Z",false,"COMMENTED"
"Wierdox","CONTRIBUTOR","","2024-08-26T10:28:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-26T10:29:34Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-03T01:46:01Z",false,"APPROVED"
"fire","MEMBER","ok!","2024-08-26T01:04:25Z",false,"APPROVED"
"fire","MEMBER","Looks ok to me.

* Did an online review
* Did not compile godot engine
* Did not run a test project","2024-09-03T17:45:46Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-03T17:49:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-07T09:06:30Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks! This looks good to me :-)","2024-08-26T15:30:22Z",false,"APPROVED"
"fire","MEMBER","Looks ok. Hopefully XRHandTracker::HAND_JOINT_MAX is the same as joints.size() or we'll invalid access the property.","2024-08-26T18:10:07Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","As always I recommend adding few test cases to cover new functions :)","2024-08-26T20:16:23Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-09-09T18:40:48Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-09T18:42:53Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-26T20:09:37Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-25T19:57:00Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-25T20:01:26Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-25T17:35:13Z",false,"APPROVED"
"adamscott","MEMBER","","2024-08-25T19:40:06Z",false,"APPROVED"
"SaracenOne","MEMBER","Good catch, straightforward and sensible additionüëç","2024-08-25T17:35:50Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","A bit prickly so it already needs a rebase","2024-08-26T22:03:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-27T06:43:56Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I noticed this inconsistency as well and I looked forward to see it tweaked.","2024-08-27T12:18:06Z",false,"APPROVED"
"fire","MEMBER","I wonder if headless imports are ok, but looks good to me.

That code reminds me of the contortions we do where we import out of scenetree. like get_parent transforms and calculating (emulating) get_global_transform","2024-08-25T16:00:29Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Saying ""target"" for both is potentially more confusing because there's no `get_target`, it's `get_object`. That's one thing I can say right off the bat.","2024-08-25T10:40:21Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-08-25T12:14:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-25T12:22:14Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-08-25T12:27:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-25T12:28:55Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-08-25T12:34:35Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-08-25T19:00:50Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-08-25T19:11:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-25T08:17:04Z",false,"COMMENTED"
"Naming-things-is-hard-btw","NONE","","2024-08-25T13:05:45Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-26T17:56:02Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-26T17:57:32Z",false,"COMMENTED"
"Naming-things-is-hard-btw","NONE","","2024-08-26T21:05:02Z",false,"COMMENTED"
"Naming-things-is-hard-btw","NONE","","2024-08-27T01:34:19Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-27T08:10:57Z",false,"COMMENTED"
"Naming-things-is-hard-btw","NONE","","2024-08-27T12:41:01Z",false,"COMMENTED"
"Naming-things-is-hard-btw","NONE","","2024-08-27T12:47:33Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-27T17:11:31Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-27T17:12:20Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-27T17:13:45Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-27T17:14:24Z",false,"COMMENTED"
"Naming-things-is-hard-btw","NONE","","2024-08-27T17:38:31Z",false,"COMMENTED"
"Naming-things-is-hard-btw","NONE","","2024-08-27T17:41:07Z",false,"COMMENTED"
"Naming-things-is-hard-btw","NONE","","2024-08-27T17:42:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-27T17:58:11Z",false,"COMMENTED"
"Naming-things-is-hard-btw","NONE","","2024-08-28T06:00:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-28T08:45:58Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-28T08:47:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-28T08:48:52Z",false,"COMMENTED"
"Naming-things-is-hard-btw","NONE","","2024-08-28T09:16:28Z",false,"COMMENTED"
"Naming-things-is-hard-btw","NONE","","2024-08-28T09:17:09Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-28T18:08:27Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-28T22:30:16Z",false,"COMMENTED"
"Naming-things-is-hard-btw","NONE","","2024-08-29T12:01:43Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-29T18:17:12Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-29T18:19:19Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-29T18:20:26Z",false,"COMMENTED"
"Naming-things-is-hard-btw","NONE","","2024-08-30T11:39:41Z",false,"COMMENTED"
"Naming-things-is-hard-btw","NONE","","2024-08-30T12:29:59Z",false,"COMMENTED"
"fire","MEMBER","","2024-09-02T10:40:11Z",false,"COMMENTED"
"fire","MEMBER","","2024-09-03T16:03:30Z",false,"COMMENTED"
"fire","MEMBER","","2024-09-03T16:04:11Z",false,"COMMENTED"
"Naming-things-is-hard-btw","NONE","","2024-09-05T16:33:07Z",false,"COMMENTED"
"Naming-things-is-hard-btw","NONE","","2024-09-05T16:44:14Z",false,"COMMENTED"
"fire","MEMBER","","2024-09-05T17:12:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-25T08:26:24Z",false,"COMMENTED"
"HolonProduction","MEMBER","","2024-08-25T11:32:48Z",false,"COMMENTED"
"enetheru","CONTRIBUTOR","","2024-08-25T11:48:55Z",false,"COMMENTED"
"enetheru","CONTRIBUTOR","","2024-08-25T12:20:05Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-31T18:55:26Z",false,"APPROVED"
"stuartcarnie","CONTRIBUTOR","","2024-08-25T11:02:09Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-08-25T12:26:05Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-08-25T20:13:41Z",false,"COMMENTED"
"akien-mga","MEMBER","Only did a cursory check, but it's well scoped to the Metal driver so I think I can defer to Stuart and merge (Clay is away for a week). This will be good to have in the imminent 4.4.dev1 snapshot to give testers a better first impression of the new Metal driver.","2024-08-25T20:22:09Z",false,"APPROVED"
"zeux","CONTRIBUTOR","","2024-08-26T06:04:29Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-08-26T06:25:49Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-26T08:56:38Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-08-26T19:48:57Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-08-26T19:49:19Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-31T18:14:20Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-24T23:06:26Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-24T23:07:53Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-24T23:08:09Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-24T23:11:39Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-24T23:12:33Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-08-24T23:54:53Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-08-25T00:02:13Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-08-25T00:06:02Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-25T00:17:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-25T18:02:04Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-04T14:52:23Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-24T14:55:08Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-24T22:54:12Z",false,"COMMENTED"
"akien-mga","MEMBER","Seems ok to me, didn't review in depth.","2024-09-03T15:24:11Z",false,"APPROVED"
"Faless","COLLABORATOR","LGTM! Good job :trophy: !","2024-09-04T05:50:12Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-09-04T16:15:14Z",false,"COMMENTED"
"dog-on-moon","CONTRIBUTOR","","2024-09-04T17:03:09Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Documentation is fine","2024-09-15T12:54:31Z",false,"APPROVED"
"raulsntos","MEMBER","Nice catch. Thanks for contributing to the .NET documentation!","2024-08-24T01:15:26Z",false,"COMMENTED"
"jwodicka","CONTRIBUTOR","","2024-08-26T03:05:29Z",false,"COMMENTED"
"raulsntos","MEMBER","Looks good, thanks! You'll need to squash the commits before this PR can be merged. The [contributing documentation](https://docs.godotengine.org/en/latest/contributing/workflow/pr_workflow.html#the-interactive-rebase) contains information about squashing in case you need it.

Feel free to reach out in the [development chat](https://chat.godotengine.org) if you need help.","2024-08-26T13:51:51Z",false,"APPROVED"
"reduz","MEMBER","","2024-08-29T17:41:03Z",false,"CHANGES_REQUESTED"
"DeeJayLSP","CONTRIBUTOR","","2024-08-29T17:47:50Z",false,"COMMENTED"
"reduz","MEMBER","","2024-09-07T07:35:53Z",false,"CHANGES_REQUESTED"
"reduz","MEMBER","","2024-09-07T15:44:58Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-08-24T16:43:55Z",false,"COMMENTED"
"TokageItLab","MEMBER","> Not against this in the slightest but I'm severely concerned about the sheer amount of play buttons present. 5 is already many as is and... somewhat hard to distinguish in their current state.

I agree with @Mickeon. Although I can agree only with the addition of pull-down menus (or right-click menus) and the addition of shortcuts, but I do not agree with the addition of buttons.

There are other methods to move the timeline cursor besides keyframes, such as moving to the snap position, but it is not made a button. Also, since we are planning to add markers in https://github.com/godotengine/godot/pull/91765, there is a possibility of moving to markers, but I don't think that all of them should be made into buttons for moving the timeline cursor in the same line with playback button. So I do not think that keyframes should be treated specially.

The play button should only be for the playback (`play()` or `stop()`) API, and if you want to add a button for movement, I believe it should be on a separate line or Somewhere completely recognizable as different from the playback API, like:

![image](https://github.com/user-attachments/assets/ead8b7ce-1fd7-4e1c-8d1c-a2e82e99f9e9)

Personally, I think this PR can be approvable if the buttons are removed.","2024-08-31T21:39:52Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","I think it works well.

However, I think it is weird that the tooltip description for playback from the end is exactly the same for backward and forward playback, so I think some different wording is needed. Any one of the three suggestions below would be sufficient. If you have any other good ideas, feel free to suggest it.","2024-09-01T00:44:42Z",false,"APPROVED"
"passivestar","CONTRIBUTOR","","2024-09-01T01:01:22Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-08-23T21:26:44Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-27T14:36:02Z",false,"APPROVED"
"kitbdev","CONTRIBUTOR","","2024-08-23T21:22:41Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-23T21:58:07Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-08-23T23:06:03Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-26T10:30:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-13T15:48:10Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-13T20:41:08Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-14T11:59:58Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-14T12:30:47Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-14T12:38:52Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-14T14:57:17Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-14T15:10:31Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-14T16:35:12Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-14T18:00:49Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-14T18:00:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-14T18:35:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","I can't reproduce the bug, but this doesn't seem to break anything and the code looks ok.","2024-09-14T18:42:40Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-09-14T19:08:09Z",false,"COMMENTED"
"anniryynanen","CONTRIBUTOR","I reproduced the bug in v4.4.dev1.official [28a72fa43] and confirm that this PR fixes it. As far as I can tell, the code changes look good.","2024-09-02T17:29:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-03T09:19:44Z",false,"APPROVED"
"reduz","MEMBER","","2024-08-29T17:11:20Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected. Code looks good to me.","2024-08-25T01:41:54Z",false,"APPROVED"
"clayjohn","MEMBER","I don't think this is the correct fix for two reasons:
1. `material_get_data()` isn't thread safe. So this change introduces a race condition when using multithreaded rendering
2. This is hardcoded to only work with the Forward+ and Mobile rendering methods. It will fail when using Compatibility. 

I think the correct fix is to not fall back to the realtime mode when the radiance size is not 256. I.e. check for radiance size here:
https://github.com/godotengine/godot/blob/61598c5c88d95b96811d386cb20d714c35f4c6d7/servers/rendering/renderer_rd/environment/sky.cpp#L1253-L1256

and here:

https://github.com/godotengine/godot/blob/61598c5c88d95b96811d386cb20d714c35f4c6d7/drivers/gles3/rasterizer_scene_gles3.cpp#L914-L917

e.g. `if ((shader_data->uses_time || shader_data->uses_position) && sky->radiance_size == 256)`","2024-08-31T18:53:12Z",false,"CHANGES_REQUESTED"
"clayjohn","MEMBER","Looks great!

Note for maintainers, this should be good for cherry picking ","2024-09-04T11:55:58Z",false,"APPROVED"
"Calinou","MEMBER","This change makes sense to me. I've been wondering how to check for a valid Unicode identifier recently from a script, in fact :slightly_smiling_face: ","2024-08-25T01:05:15Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-25T08:12:01Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","The first line of the new method's description could be a bit more detailed to entail what a ""valid Unicode identifier"" means, at least roughly.

The examples could also be more distinct than `is_valid_identifier`'s, such as using accented letters and similar.","2024-08-25T09:51:42Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-08-25T11:01:38Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-25T12:02:47Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-08-26T21:10:17Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-08-27T03:31:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-04T14:17:33Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-23T22:59:53Z",false,"APPROVED"
"anniryynanen","CONTRIBUTOR","I reproduced the bug in v4.4.dev1.official [28a72fa43] on Windows and confirm that this PR fixes it. The code change is clean and local.","2024-09-02T17:48:17Z",false,"COMMENTED"
"anvilfolk","CONTRIBUTOR","The code makes sense to me. I'd like to see an added comment but it isn't critical! :)

Thanks for putting this together so fast!","2024-08-23T15:07:44Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-08-23T15:13:24Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-23T16:18:45Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-23T16:19:29Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-03T09:53:19Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-03T09:53:55Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-03T15:53:32Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-04T10:12:51Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-04T10:12:58Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-22T22:39:42Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-08-22T23:17:12Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-25T18:10:48Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-08-23T00:05:55Z",false,"COMMENTED"
"clayjohn","MEMBER","I think this is fine as a stopgap solution for now. I have suggested a language change for the error message to fix the english grammar. 

Ultimately, this only pushes back the issue by one level of recursion as the problem could still be reproduced with the following:
1. MeshA has shadow mesh set to MeshB
2. MeshB has shadow mesh set to MeshA

I think this is fine to merge as-is though as it fixes the reported issue and comes with very little cost. Ultimately, the problem lies in the editor itself not handling recursion as pointed out here: https://github.com/godotengine/godot/issues/93486#issuecomment-2187348151 That is a much larger problem that I don't think is worth tackling yet","2024-08-31T18:41:36Z",false,"CHANGES_REQUESTED"
"clayjohn","MEMBER","","2024-08-31T19:40:58Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-08-22T18:45:59Z",false,"APPROVED"
"devloglogan","CONTRIBUTOR","LGTM!","2024-08-22T19:02:06Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","I believe I've seen many, many more translatable strings like these. This is a good start.","2024-08-22T23:25:58Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-22T23:26:14Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-08-25T05:54:29Z",false,"APPROVED"
"AThousandShips","MEMBER","These are correct based on the bound methods which use `int64_t` in c++","2024-08-22T16:58:26Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-08-22T17:46:42Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-08-22T23:14:12Z",false,"COMMENTED"
"Cronos87","NONE","","2024-08-23T06:40:12Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","Some tests in `tests\scene\test_code_edit.h` for testing the newline functionality would be nice too.","2024-08-26T16:05:27Z",false,"COMMENTED"
"Cronos87","NONE","","2024-08-27T07:04:52Z",false,"COMMENTED"
"Cronos87","NONE","","2024-08-27T07:49:25Z",false,"COMMENTED"
"Cronos87","NONE","","2024-08-27T11:48:17Z",false,"COMMENTED"
"Cronos87","NONE","","2024-08-27T11:58:50Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-08-27T15:59:55Z",false,"COMMENTED"
"Cronos87","NONE","","2024-08-27T16:03:16Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-08-27T16:04:47Z",false,"COMMENTED"
"Cronos87","NONE","","2024-08-27T16:11:00Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-08-29T18:22:00Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-02T11:58:54Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-02T12:08:55Z",false,"COMMENTED"
"Cronos87","NONE","","2024-09-02T12:19:17Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-09-02T12:29:38Z",false,"COMMENTED"
"Cronos87","NONE","","2024-09-02T13:32:35Z",false,"COMMENTED"
"Cronos87","NONE","","2024-09-02T13:33:07Z",false,"COMMENTED"
"Cronos87","NONE","","2024-09-03T15:58:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-03T16:40:47Z",false,"COMMENTED"
"Cronos87","NONE","","2024-09-03T16:54:15Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","My thoughts on `new_line_inserted` are the same as prior. That is, perhaps this signal shouldn't exist in order for this feature to exist.","2024-09-24T18:24:01Z",false,"COMMENTED"
"Cronos87","NONE","","2024-09-24T19:05:23Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-24T19:13:45Z",false,"COMMENTED"
"Cronos87","NONE","","2024-09-24T19:29:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","Will try to test this soon","2024-10-02T09:20:26Z",false,"COMMENTED"
"Cronos87","NONE","","2024-10-02T09:30:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-02T09:33:44Z",false,"COMMENTED"
"Cronos87","NONE","","2024-10-02T09:38:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","Can confirm that this works as intended, and I think it's best to keep it to just doc comments at least to start with

If I would suggest any changes (for future improvement IMO) I'd have pressing enter twice remove the empty line and that above (so you don't get ""caught"" entering new lines), but that might be a bit finicky, and is easily resolved by pressing `Ctrl+Backspace`, but otherwise the editor side works well (haven't dug into any of the custom use)","2024-10-03T13:21:11Z",false,"DISMISSED"
"KoBeWi","MEMBER","","2024-08-22T17:35:31Z",false,"COMMENTED"
"rakkarage","CONTRIBUTOR","","2024-08-22T18:48:57Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-22T20:03:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-23T08:48:34Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

Before | After
-|-
![image](https://github.com/user-attachments/assets/48c58a0e-4efb-4c42-916f-9c42c926c557) | ![image](https://github.com/user-attachments/assets/081027de-a02b-46b7-97f7-8d8ec86aeeb5)

PS: In a future PR, we should see if we can hide options in the Next Pass dropdown that don't match the `shader_type` used in the shader. Same for BaseMaterial3D (it should only allow BaseMaterial3D and ShaderMaterial):

![image](https://github.com/user-attachments/assets/ce70593a-a4bd-4079-bd83-e4c7767cae81)

Perhaps the inspector hint should be modified dynamically based on the shader type property that is loaded in the **Shader** property.
","2024-08-25T01:48:25Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-08-22T18:40:04Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-22T22:51:28Z",false,"APPROVED"
"Flarkk","NONE","No, there is no impact on shaders.
In fact, the only thing this PR changes is how the frustum planes (and specifically the far plane) are extracted from the projection matrix. The matrix itself is passed through unchanged as before to the rest of the pipeline, including the GPU parts.
Frustum planes are extracted and used in a handful of culling operations, on the CPU, mainly geometry culling and light culling.
You can find them back by searching calls to `Projection::get_projection_planes()` throughout the code.
This is really the only function affected by the PR, speaking of the core computational logic.","2024-08-22T18:31:16Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-17T13:00:22Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-17T13:20:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","Thank you for your contribution, however this isn't a valid change, the documentation doesn't support these values and is generated, so this will just be reset

Also the default value isn't mutable, `Vector3(0, 1, 0)` is a literal, not a variable ","2024-08-22T07:53:58Z",false,"CHANGES_REQUESTED"
"akien-mga","MEMBER","","2024-08-25T18:06:18Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-25T18:09:41Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-08-25T18:18:48Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-25T20:51:17Z",false,"APPROVED"
"Calinou","MEMBER","","2024-09-04T15:58:02Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-09-04T15:59:29Z",false,"DISMISSED"
"Geometror","MEMBER","","2024-09-23T17:26:35Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-10-01T14:09:41Z",false,"APPROVED"
"Faless","COLLABORATOR","","2024-10-01T15:11:29Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-01T15:12:17Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","This change makes sense to me!

> For the case of Packed*Array [] Set in engine: The only value returned by `[]` is const so it can't be used for setting. I'm not sure if I should change this so I've left it as-is in this PR.

This is an interesting case. The current pattern in Godot is to use `vector.write[i] = x;` to make it very explicit when we're doing copy-on-write. Is this really needed? And, if so, perhaps we should be replicating this pattern in godot-cpp? I don't know we've been accidentally triggering CoW when getting items out of a packed array in godot-cpp?
","2024-08-22T20:26:38Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks, this change makes sense to me!

I tested it a bit on Quest 3 with the `Show When Tracked` property both on and off, and everything seemed to work sensibly.

(In my testing, I ended up discovering a crash fixed by this PR #95959)","2024-08-22T18:14:47Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-08-22T18:46:50Z",false,"APPROVED"
"Calinou","MEMBER","Since there is a permission request involved, this should be documented in `doc/classes/InputEventMIDI.xml`'s class description. Something like this:

```
[b]Note:[/b] On the Web platform, using MIDI input requires a browser permission to be granted first. This permission request is performed when calling [method OS.open_midi_inputs]. MIDI input will not work until the user accepts the permission request.
```

I would copy the same note at the end of OS' `open_midi_inputs` description.

`doc/classes/OS.xml` should have its `open_midi_inputs` and `close_midi_inputs` method descriptions modified to mention Web platform support.

PS: It seems `OS.get_connected_midi_inputs()` will not work on the Web platform if I'm reading the code right. It might be worth documenting this explicitly in its description as well.","2024-08-22T01:29:33Z",false,"COMMENTED"
"ryanbraganza","NONE","","2024-08-22T01:38:36Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","The extra note is very good, particularly in line with what I would've written myself.","2024-08-22T14:00:53Z",false,"COMMENTED"
"ryanbraganza","NONE","","2024-08-22T19:30:21Z",false,"COMMENTED"
"adamscott","MEMBER","Good work! I have a few comments, but it's on the right track.","2024-08-23T15:05:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-27T10:37:17Z",false,"COMMENTED"
"ryanbraganza","NONE","","2024-08-27T10:48:14Z",false,"COMMENTED"
"ryanbraganza","NONE","","2024-08-27T10:50:18Z",false,"COMMENTED"
"ryanbraganza","NONE","","2024-08-27T10:52:56Z",false,"COMMENTED"
"ryanbraganza","NONE","","2024-08-27T10:53:18Z",false,"COMMENTED"
"ryanbraganza","NONE","","2024-08-27T10:54:41Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","This is fine. In hindsight I should've added it in https://github.com/godotengine/godot/pull/68560 .

It could be nice to squash these commits, see [the Pull Request Workflow](https://docs.godotengine.org/en/stable/contributing/workflow/pr_workflow.html#the-interactive-rebase).","2024-08-22T12:12:36Z",false,"APPROVED"
"clayjohn","MEMBER","Looks good to me","2024-08-21T21:17:38Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-08-21T21:27:42Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-21T19:51:41Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-21T20:08:52Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-09-15T22:30:11Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","I am a bit doubtful on whether steps of `0.01` within the interval are necessary. Feels needlessly precise, personally. Perhaps there's a magical number that ensures all corresponding zoom values look good enough... Or `0.06`-ish, or `0.1`.","2024-08-22T14:35:25Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected. The new zoom sensitivity feels a lot nicer on the mouse wheel :slightly_smiling_face: 

Regarding the mouse wheel no longer going through integer values by default, I think it's not too much of an issue. You can still use keyboard shortcuts to quickly go to a zoom level preset (<kbd>1-5</kbd> and <kbd>Shift + 1-5</kbd>), along with holding <kbd>Alt</kbd> while using the mouse wheel to zoom through integer zoom levels only.","2024-08-23T00:38:09Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-26T21:02:35Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-26T22:00:15Z",false,"COMMENTED"
"larspet","CONTRIBUTOR","","2024-08-27T13:40:32Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-03T13:58:20Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-09-03T15:08:37Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-03T15:13:17Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-08-21T15:25:08Z",false,"COMMENTED"
"GustJc","CONTRIBUTOR","","2024-08-21T16:29:07Z",false,"COMMENTED"
"GustJc","CONTRIBUTOR","","2024-08-21T16:31:13Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-08-21T11:43:41Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-21T11:49:14Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-08-21T11:56:28Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-08-21T14:32:54Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-08-21T15:48:34Z",false,"APPROVED"
"geekley","NONE","","2024-08-27T00:32:16Z",false,"COMMENTED"
"SomeRanDev","CONTRIBUTOR","","2024-08-27T05:47:39Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-08-21T16:10:17Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-04T20:27:07Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected. Great work :slightly_smiling_face: 

Using the MRP from https://github.com/godotengine/godot/issues/81556:

Before | After
-|-
![Before](https://github.com/user-attachments/assets/b92a3c50-4e6f-44a2-a14d-362a91891b3b) | ![After](https://github.com/user-attachments/assets/8308cec5-6b86-4b49-85d5-342739d1eab8)

","2024-08-21T22:01:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-01T13:53:30Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-01T13:54:15Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-09-01T14:03:07Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-09-01T14:52:51Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-22T00:17:28Z",false,"COMMENTED"
"jadoc","CONTRIBUTOR","","2024-08-22T05:08:14Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-22T12:54:34Z",false,"COMMENTED"
"jadoc","CONTRIBUTOR","","2024-08-23T02:41:35Z",false,"COMMENTED"
"jadoc","CONTRIBUTOR","","2024-08-23T02:46:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-23T09:19:25Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-24T23:21:47Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-06T08:38:29Z",false,"APPROVED"
"kleonc","MEMBER","","2024-08-21T08:56:39Z",false,"APPROVED"
"Calinou","MEMBER","This note should also be added to the GDScript code block just above, since Godot 4.2 and later supports `static var` in GDScript.","2024-08-21T01:18:05Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","Tested locally (with one or several viewports visible at once), it works as expected.","2024-08-20T23:30:21Z",false,"APPROVED"
"ryevdokimov","CONTRIBUTOR","Good catch, code makes sense. ","2024-08-21T16:37:19Z",false,"APPROVED"
"TokageItLab","MEMBER","Same as https://github.com/godotengine/godot/pull/92642, this PR looks like the wrong place to fix.

The problem is that AudioStreamPolyphonic ignores the properties of AudioStreamPlayer, so the fix should be in the AudioStreamPolyphonic or AudioStreamPlayer class.","2024-08-20T17:34:01Z",false,"CHANGES_REQUESTED"
"bruvzg","MEMBER","","2024-08-20T17:02:43Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-25T20:05:06Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-20T11:57:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-22T07:59:08Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-08-22T14:10:36Z",false,"APPROVED"
"kleonc","MEMBER","Fixes the issue.","2024-08-20T14:10:42Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-08-20T10:05:17Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-20T09:45:51Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-20T10:18:22Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-20T09:02:39Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-08-20T09:08:32Z",false,"COMMENTED"
"Zireael07","CONTRIBUTOR","","2024-08-20T10:09:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-20T10:16:00Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-20T20:25:42Z",false,"COMMENTED"
"alvinhochun","CONTRIBUTOR","","2024-08-23T20:57:05Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-20T07:50:00Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-20T09:26:36Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-20T11:44:30Z",false,"COMMENTED"
"jadoc","CONTRIBUTOR","","2024-08-20T13:49:18Z",false,"COMMENTED"
"jadoc","CONTRIBUTOR","","2024-08-21T04:53:23Z",false,"COMMENTED"
"bruvzg","MEMBER","Seems OK, but it probably should have some threshold not just zero, like `&& mm->get_relative().length() > 5.0` (5 px distance is used for double-click detection on some platforms).","2024-08-21T08:16:39Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-08-22T13:39:45Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-22T14:49:12Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-08-20T05:49:19Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-20T10:30:11Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-20T06:52:28Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Yay, CI is passing now! These changes look good to me","2024-09-12T02:19:03Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-20T10:01:07Z",false,"COMMENTED"
"GustJc","CONTRIBUTOR","","2024-08-20T10:21:36Z",false,"COMMENTED"
"clayjohn","MEMBER","Good catch!","2024-08-20T02:24:24Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-20T06:59:11Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Looks great to me!

I just tested on Quest 3, and the visibility checks seem to be working correctly.","2024-08-29T16:49:01Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-20T06:29:34Z",false,"APPROVED"
"fire","MEMBER","","2024-08-20T07:34:03Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

**Testing project:** [test_pr_95828.zip](https://github.com/user-attachments/files/16682928/test_pr_95828.zip)

## Preview

*Bake quality is set to Ultra and denoising is disabled.*

### Standard lightmaps

#### Bicubic filter disabled

Before | After
-|-
![Screenshot_20240821_002229 png webp](https://github.com/user-attachments/assets/cad0bfb4-0de6-4232-a2ed-43f1c705ab7b) | ![Screenshot_20240821_001945 png webp](https://github.com/user-attachments/assets/ba9856c4-cc4b-4984-bd4c-5a93aaf0f513)

#### Bicubic filter enabled

Before | After
-|-
![Screenshot_20240821_002217 png webp](https://github.com/user-attachments/assets/69343244-ee60-4b15-adb6-a582dfa23c5e) | ![Screenshot_20240821_001934 png webp](https://github.com/user-attachments/assets/d942c65a-6011-4a99-83a8-04d0aa042ce4)

### Directional lightmaps

#### Bicubic filter disabled

Before | After
-|-
![Screenshot_20240821_004257 png webp](https://github.com/user-attachments/assets/f28fecda-952e-42b8-9ffb-6ff597eb98a4) | ![Screenshot_20240821_004040 png webp](https://github.com/user-attachments/assets/8673bbef-0b45-47ca-a3c7-f8ff50c443c3)

#### Bicubic filter enabled

Before | After
-|-
![Screenshot_20240821_004247 png webp](https://github.com/user-attachments/assets/a8dfc7af-5d5e-4dd7-b0b3-4d03a4135caa) | ![Screenshot_20240821_004030 png webp](https://github.com/user-attachments/assets/2e9952c7-89f6-4f62-b273-fa75b3366b19)","2024-08-20T22:46:02Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-20T08:51:23Z",false,"COMMENTED"
"Alex2782","CONTRIBUTOR","","2024-08-20T21:02:11Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","Added some feedback in https://github.com/godotengine/godot/pull/95827#issuecomment-2309016402","2024-08-25T22:21:37Z",false,"CHANGES_REQUESTED"
"KoBeWi","MEMBER","","2024-08-20T10:20:50Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-20T10:21:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-20T10:22:03Z",false,"COMMENTED"
"NicoCobb","NONE","","2024-08-20T20:27:13Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-08T13:30:14Z",false,"COMMENTED"
"NicoCobb","NONE","","2024-10-08T18:44:03Z",false,"COMMENTED"
"anvilfolk","CONTRIBUTOR","","2024-08-22T01:04:57Z",false,"COMMENTED"
"anvilfolk","CONTRIBUTOR","","2024-08-22T03:43:39Z",false,"COMMENTED"
"anvilfolk","CONTRIBUTOR","","2024-08-23T18:33:07Z",false,"COMMENTED"
"anvilfolk","CONTRIBUTOR","","2024-08-23T19:04:30Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-23T20:37:42Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-23T20:39:45Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-23T20:40:07Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-23T20:47:03Z",false,"COMMENTED"
"anvilfolk","CONTRIBUTOR","","2024-08-24T21:41:33Z",false,"COMMENTED"
"anvilfolk","CONTRIBUTOR","","2024-08-24T21:41:55Z",false,"COMMENTED"
"anvilfolk","CONTRIBUTOR","","2024-08-24T21:46:15Z",false,"COMMENTED"
"anvilfolk","CONTRIBUTOR","","2024-08-25T03:24:37Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","That seems to work very well, even on large project!! The loading and saving of the cache is quick and seems efficient. I did not encounter any thread problem on my side.","2024-08-26T22:30:37Z",false,"CHANGES_REQUESTED"
"anvilfolk","CONTRIBUTOR","","2024-08-28T20:28:28Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-28T22:24:21Z",false,"COMMENTED"
"anvilfolk","CONTRIBUTOR","","2024-08-30T18:10:36Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-30T20:22:50Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-30T20:25:14Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-30T20:34:18Z",false,"COMMENTED"
"anvilfolk","CONTRIBUTOR","","2024-09-06T01:28:51Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-13T13:28:59Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-13T13:37:42Z",false,"COMMENTED"
"anvilfolk","CONTRIBUTOR","","2024-09-17T19:26:02Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-20T00:22:19Z",false,"COMMENTED"
"anvilfolk","CONTRIBUTOR","","2024-09-20T01:32:02Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","Great work!! This PR will solve a lot of questions/issues with the script documentation not present after restarting the editor.

The author and me were was not able to reproduce to issue where the documentation was not updated in some situations. Maybe someone else while testing can reproduce.","2024-09-20T13:24:57Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-23T15:25:25Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-23T17:57:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-23T18:31:36Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-23T19:36:58Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-23T19:38:40Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-23T19:43:16Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-23T19:44:14Z",false,"COMMENTED"
"anvilfolk","CONTRIBUTOR","","2024-09-23T19:52:55Z",false,"COMMENTED"
"huwpascoe","NONE","","2024-09-27T14:17:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-27T14:23:04Z",false,"COMMENTED"
"huwpascoe","NONE","","2024-09-27T14:31:36Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-27T14:33:23Z",false,"COMMENTED"
"huwpascoe","NONE","","2024-09-27T14:56:12Z",false,"COMMENTED"
"anvilfolk","CONTRIBUTOR","","2024-10-07T19:35:13Z",false,"COMMENTED"
"anvilfolk","CONTRIBUTOR","","2024-10-07T19:36:15Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-20T07:24:05Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-20T07:16:11Z",false,"COMMENTED"
"akien-mga","MEMBER","IMO this is worth a try now. IIRC we discussed doing this back when reviewing #91014, and opted to make it opt-in initially for 4.3, and consider making it default later. Later can be now :) and we have the whole 4.4 cycle to find whether this causes issues for some users and reconsider if need be.

Could be good to have some metrics on how this actually affects project size and playback latency and quality on a WAV heavy project.","2024-08-20T07:19:33Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-08-20T10:48:01Z",false,"COMMENTED"
"raulsntos","MEMBER","Tested and fixes the issue as expected. It also matches the GDScript implementation:

https://github.com/godotengine/godot/blob/f4d6aff64a89dfc1e296518a4f9cec2dd6638c36/modules/gdscript/gdscript_parser.cpp#L4096-L4104","2024-08-19T16:33:54Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-19T16:13:27Z",false,"COMMENTED"
"reduz","MEMBER","","2024-09-05T17:47:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-19T13:04:14Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-19T23:21:09Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-19T09:53:55Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-19T09:55:57Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-19T10:20:24Z",false,"APPROVED"
"kleonc","MEMBER","","2024-08-19T09:49:46Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-08-19T20:41:09Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-20T03:47:11Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-20T03:50:32Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-08-20T06:52:21Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks good to me. I ran the AABB variants through Godbolt last night just to assure myself that the old code wasn't like that for some arcane optimization. 

I am not very skilled at reading the output, but it was clear that the number of instructions roughly matched what you would expect (the old version had way more instructions and memory moving around than the new version). ","2024-08-20T21:19:25Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-19T09:24:28Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-08-19T09:42:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-19T09:53:54Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-19T10:47:56Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-19T10:49:22Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-08-19T11:27:15Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-08-19T11:54:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-19T19:00:55Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-19T19:02:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-19T19:05:37Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-19T19:19:32Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-19T19:22:35Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-19T19:26:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-19T19:26:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-19T19:34:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-19T19:35:16Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-08-20T02:50:45Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-08-20T03:34:02Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-08-20T03:37:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-20T08:28:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-20T08:36:52Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-08-20T09:04:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-20T09:08:59Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-08-20T09:28:22Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-20T09:29:47Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-08-20T09:35:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-20T09:58:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-20T13:22:15Z",false,"COMMENTED"
"akien-mga","MEMBER","I read through the proposals and the PR discussion, it makes sense to me.

I haven't checked the implementation in depth nor tested but overall the exposed API seems pretty good.","2024-09-20T13:22:50Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-09-20T13:56:25Z",false,"COMMENTED"
"Geometror","MEMBER","To be honest, I wasn't sure about the separation of the StreamPeer and StreemPeerBuffer tests, but after looking into this a bit longer I now think it makes sense. Maybe adding a StreamPeerDummy/Mock would be the most correct way to test them apart, but I'd leave it up to you if you want to do that.

Either way, needs to be squashed into one commit.","2024-09-23T16:50:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-23T16:53:22Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-10-01T15:07:56Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-01T15:09:36Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-19T08:42:37Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-19T09:15:03Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-19T10:34:04Z",false,"COMMENTED"
"andrei-g99","CONTRIBUTOR","","2024-08-19T11:16:07Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Looks good now. It would be nice to [squash your commits](https://docs.godotengine.org/en/stable/contributing/workflow/pr_workflow.html#the-interactive-rebase), although I feel like you have been using the online editor for these.","2024-08-28T07:35:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-19T12:16:51Z",false,"APPROVED"
"fire","MEMBER","","2024-08-19T05:22:35Z",false,"APPROVED"
"clayjohn","MEMBER","Makes sense. The output looks much better now","2024-08-20T04:39:54Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-20T07:55:46Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-18T21:17:37Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-18T21:20:10Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-18T21:12:20Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-20T04:35:05Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-08-20T04:46:20Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-11T18:09:29Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Oh goodness me, that's so many unfilled descriptions. It hurts my soul.","2024-08-18T21:23:56Z",false,"APPROVED"
"fire","MEMBER","","2024-08-19T06:45:03Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-19T08:27:54Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-08-18T19:39:33Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-19T09:35:12Z",false,"COMMENTED"
"dalexeev","MEMBER","It would be nice to add `text_edit` checks before exposing the class. It's unlikely that anyone will call `get_line_syntax_highlighting()` directly, but still.

https://github.com/godotengine/godot/blob/7a4a6fbc039fefbccbb23a66285722ad20bf418a/modules/gdscript/editor/gdscript_highlighter.cpp#L96

https://github.com/godotengine/godot/blob/7a4a6fbc039fefbccbb23a66285722ad20bf418a/modules/gdscript/editor/gdscript_highlighter.cpp#L693","2024-08-19T11:50:28Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-08-19T13:47:40Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-18T19:50:15Z",false,"APPROVED"
"coppolaemilio","MEMBER","","2024-08-19T12:40:19Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-08-18T18:40:23Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-18T16:53:35Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-08-18T16:58:20Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-12T13:42:58Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-12T13:43:16Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-12T13:44:02Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-18T16:03:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-18T16:25:41Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-18T16:25:57Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-18T19:13:44Z",false,"APPROVED"
"clayjohn","MEMBER","Looks good. Its worth noting that full float textures will get converted to half float before compression. Later we can investigate if it is possible to compress full float textures directly to save on the conversion step","2024-08-19T22:23:31Z",false,"APPROVED"
"Calinou","MEMBER","The rationale makes sense to me. This helps make the class reference more compact.","2024-08-18T15:19:17Z",false,"APPROVED"
"akien-mga","MEMBER","I have no strong feeling either way, IMO it's fine to introduce examples with a heading of some sort, but I'm fine removing it. It does imply that we need to make sure the examples are so self-explanatory that they don't seem jarring coming in the middle of a description without introduction.

This should also be documented in https://docs.godotengine.org/en/stable/contributing/documentation/class_reference_primer.html if we go this route.","2024-08-20T07:35:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","I agree with this change, while adding descriptions to these empty headers I think they don't add anything in themselves as code is formatted distinctly they don't add any discoverability IMO, to me they mainly make sense and help if they clarify ""this description is specific to the example""","2024-08-20T12:56:57Z",false,"APPROVED"
"raulsntos","MEMBER","Thanks for salvaging this PR.","2024-08-18T17:30:10Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-08-25T14:42:09Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-25T18:25:11Z",false,"COMMENTED"
"tehKaiN","NONE","","2024-09-14T19:17:03Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-15T08:00:09Z",false,"COMMENTED"
"esainane","CONTRIBUTOR","","2024-09-17T04:03:00Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected. Code looks good to me. Great work :slightly_smiling_face: 

https://github.com/user-attachments/assets/b54a1941-986e-4683-9b97-ab093879feb8

It might be worth adding ""Close Tabs Below"" in a future PR, but it's not essential for now.","2024-08-25T00:17:02Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-19T14:50:37Z",false,"COMMENTED"
"KoBeWi","MEMBER","While I'm not 100% convinced about the feature, the implementation is correct.","2024-08-19T14:50:58Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-19T10:08:04Z",false,"APPROVED"
"SaracenOne","MEMBER","LGTM üëç ","2024-08-31T21:44:21Z",false,"APPROVED"
"fire","MEMBER","","2024-09-02T07:28:05Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-08-18T20:33:35Z",false,"COMMENTED"
"VincentShao32","NONE","","2024-08-18T20:40:37Z",false,"COMMENTED"
"VincentShao32","NONE","","2024-08-18T20:41:00Z",false,"COMMENTED"
"VincentShao32","NONE","","2024-08-19T17:07:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-19T17:12:30Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-19T17:21:19Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Documentation is fine, if there was any doubt.

I can personally see the benefit, although it's a bit niche.
For more complex behaviours, writing your own code is not just necessary but encouraged.
""Rotation smoothing was accepted, so why not this?"". I suppose one must argue where to draw the line. ","2024-08-22T14:27:43Z",false,"COMMENTED"
"fire","MEMBER","","2024-10-05T18:07:39Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-18T16:12:51Z",false,"COMMENTED"
"Meorge","CONTRIBUTOR","","2024-09-18T16:20:21Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-17T18:07:13Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

FSR2 Ultra Performance on 1080p:

### 120 FPS

#### Before

https://github.com/user-attachments/assets/0153f929-ae2c-4b29-a224-1ff9c5414f53

#### After

https://github.com/user-attachments/assets/dc2c7ce2-8a6e-4cf7-b35a-911b707d81b7

### 60 FPS

#### Before

https://github.com/user-attachments/assets/10e2f653-fa84-4203-897f-3bd6363dc0d4

#### After

https://github.com/user-attachments/assets/f618bbe2-457e-4782-86a3-0b7a6aefe7f4

TAA also benefits from similar improvements, although they are less drastic since it does not perform upscaling.
","2024-08-17T18:06:51Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-17T18:08:18Z",false,"COMMENTED"
"zeux","CONTRIBUTOR","","2024-08-17T18:11:08Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-18T03:37:05Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-17T17:42:51Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-28T08:44:25Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-28T08:45:14Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-08-28T10:19:32Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-18T16:11:25Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-20T09:23:23Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-19T08:04:19Z",false,"APPROVED"
"Geometror","MEMBER","","2024-08-19T13:39:13Z",false,"APPROVED"
"clayjohn","MEMBER","Thanks! Indeed, pipelines are cleaned up when a shader is freed. So there is little use in freeing them manually in destructors. ","2024-08-18T03:51:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-20T13:25:38Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-20T15:50:58Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-20T16:21:54Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected. Code looks good to me.

Benchmark on the TPS demo:

```
Benchmark 1: bin/godot.linuxbsd.editor.x86_64 ~/Documents/Godot/tps-demo/project.godot --quit      <-------- This PR
  Time (mean ¬± œÉ):      3.464 s ¬±  0.534 s    [User: 2.220 s, System: 0.723 s]
  Range (min ‚Ä¶ max):    2.971 s ‚Ä¶  4.253 s    10 runs
 
Benchmark 2: bin/godot.linuxbsd.editor.x86_64.master ~/Documents/Godot/tps-demo/project.godot --quit
  Time (mean ¬± œÉ):      3.943 s ¬±  0.224 s    [User: 2.198 s, System: 0.731 s]
  Range (min ‚Ä¶ max):    3.310 s ‚Ä¶  4.045 s    10 runs

Summary
  bin/godot.linuxbsd.editor.x86_64 ~/Documents/Godot/tps-demo/project.godot --quit ran
    1.14 ¬± 0.19 times faster than bin/godot.linuxbsd.editor.x86_64.master ~/Documents/Godot/tps-demo/project.godot --quit
```","2024-09-24T16:39:56Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-24T16:42:22Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-24T22:33:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-25T19:45:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-25T19:53:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-25T20:26:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-25T20:56:11Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-25T21:02:50Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-25T21:07:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-25T21:08:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-25T21:18:44Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-25T21:22:38Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-25T21:23:08Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-25T21:23:15Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-25T21:23:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-25T21:27:19Z",false,"COMMENTED"
"KoBeWi","MEMBER","I get 4s speedup for my project load, but most of the startup time is outside scanning the filesystem. The scanning itself is noticeably faster though.

Did some testing and didn't find bugs.","2024-09-25T21:28:58Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-09-25T21:36:59Z",false,"COMMENTED"
"paulloz","MEMBER","Looks good to me.","2024-08-17T18:02:19Z",false,"APPROVED"
"kleonc","MEMBER","","2024-08-16T23:15:38Z",false,"COMMENTED"
"markdibarry","CONTRIBUTOR","","2024-08-16T23:28:55Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-08-16T23:38:49Z",false,"COMMENTED"
"markdibarry","CONTRIBUTOR","","2024-08-18T15:10:06Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-08-18T17:19:25Z",false,"COMMENTED"
"markdibarry","CONTRIBUTOR","","2024-08-18T17:46:34Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","If @markdibarry approves I approve.","2024-08-18T20:37:29Z",false,"APPROVED"
"kleonc","MEMBER","","2024-08-19T09:45:09Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-08-19T10:33:28Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-08-16T22:31:13Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally with https://github.com/godotengine/godot/issues/66456's MRP, it mostly works as expected. There seems to be a sRGB/linear color conversion issue though:

Forward+ | Mobile | Compatibility 
-|-|-
![Screenshot_20240817_194256](https://github.com/user-attachments/assets/1529950b-e900-44ba-9016-176e4606674b) | ![Screenshot_20240817_194242](https://github.com/user-attachments/assets/ea3f0caa-537f-4362-ab18-e21cfdc06ee0) | ![Screenshot_20240817_194228](https://github.com/user-attachments/assets/d021f28c-614e-47d6-882e-b786088cde17)

With tonemapping set to Linear in the MRP:

Forward+ | Mobile | Compatibility 
-|-|-
![Screenshot_20240817_194456](https://github.com/user-attachments/assets/2d9d4b0d-4db8-45db-9421-cbd8f9312ad9) | ![Screenshot_20240817_194510](https://github.com/user-attachments/assets/ad078c5d-9498-4bf1-9a2b-c13d0ccbcc65) | ![Screenshot_20240817_194523](https://github.com/user-attachments/assets/92817196-8c3e-4889-ae20-c055ef1aeaed)

With tonemapping set to Linear in the MRP and fog density set to 1 (so you can compare the actual fog color):

Forward+ | Mobile | Compatibility 
-|-|-
![Screenshot_20240817_194720](https://github.com/user-attachments/assets/ce3be9fa-19bf-476a-9648-00e7d78ffe82) | ![Screenshot_20240817_194705](https://github.com/user-attachments/assets/6e9763dd-b65c-4929-b05a-5355a7922d1b) | ![Screenshot_20240817_194651](https://github.com/user-attachments/assets/425c9feb-b777-402d-9df5-bb4684b206a3)

Sky colors with Linear tonemapping:

Forward+ | Mobile | Compatibility
-|-|-
`#858c9c` | `#b5c1d3` | `#3b4354`

The Mobile rendering method has a similar issue, but the sky color is too bright instead of being too dark.","2024-08-17T17:44:29Z",false,"COMMENTED"
"Calinou","MEMBER","Works great now :slightly_smiling_face: 

### Fog Density = 0.05

Forward+ | Mobile | Compatibility
-|-|-
![Screenshot_20240818_184214 png webp](https://github.com/user-attachments/assets/29bc8089-f5c0-45a3-a44d-5f506b7234c3) | ![Screenshot_20240818_184228 png webp](https://github.com/user-attachments/assets/60b0189a-d009-422b-9437-e651446e373f) | ![Screenshot_20240818_184239 png webp](https://github.com/user-attachments/assets/04e6ec77-4090-4a1e-9177-e47f5b68ab9f)

### Fog Density = 1.0

Forward+ | Mobile | Compatibility
-|-|-
![Screenshot_20240818_184418 png webp](https://github.com/user-attachments/assets/5ee1d5ae-3068-4f6c-8443-44fe2d20f47d) | ![Screenshot_20240818_184432 png webp](https://github.com/user-attachments/assets/b06248d9-e1b3-45ab-96ea-bb94926a24a5) | ![Screenshot_20240818_184440 png webp](https://github.com/user-attachments/assets/394a2a54-434d-42db-b7d0-ff9d87f87b19)","2024-08-18T16:45:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-16T21:15:45Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","lgtm","2024-08-16T23:09:23Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-16T22:23:57Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-16T20:11:31Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-16T18:33:12Z",false,"COMMENTED"
"yahkr","CONTRIBUTOR","","2024-08-16T18:39:21Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","Code looks good to me. But this only works when the shader is at material override, not when the shader is set to the mesh instance itself.","2024-08-21T04:25:47Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","Tested locally, works as expected.","2024-08-21T07:24:36Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-16T17:00:03Z",false,"COMMENTED"
"markdibarry","CONTRIBUTOR","","2024-09-05T12:22:38Z",false,"APPROVED"
"AThousandShips","MEMBER","Style looks good otherwise","2024-09-05T18:03:46Z",false,"APPROVED"
"Calinou","MEMBER","","2024-09-05T22:05:24Z",false,"COMMENTED"
"Summersay415","CONTRIBUTOR","","2024-08-16T16:31:40Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-08-17T19:10:48Z",false,"APPROVED"
"fire","MEMBER","","2024-08-17T23:48:59Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-08-16T18:22:36Z",false,"APPROVED"
"TokageItLab","MEMBER","The tooltip explanation needs some consideration, but I see that the icons and the behavior are fine.","2024-08-26T11:14:10Z",false,"APPROVED"
"mihe","CONTRIBUTOR","","2024-08-26T21:11:33Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-08-26T21:12:24Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-27T09:53:19Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-09-02T13:49:04Z",false,"CHANGES_REQUESTED"
"Arnklit","CONTRIBUTOR","","2024-09-02T13:58:11Z",false,"COMMENTED"
"Arnklit","CONTRIBUTOR","","2024-09-02T13:58:17Z",false,"COMMENTED"
"Arnklit","CONTRIBUTOR","","2024-09-02T13:58:23Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-09-02T13:59:18Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-16T12:00:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-16T14:23:00Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-16T10:45:20Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-08-16T11:27:08Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-08-16T11:34:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-16T09:23:17Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-16T09:23:53Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-16T09:24:05Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-16T09:24:15Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-08-26T03:04:53Z",false,"CHANGES_REQUESTED"
"KurtBliss","CONTRIBUTOR","","2024-08-26T16:37:12Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-08-27T04:37:50Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-08-16T02:14:56Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good. I confirmed that none of these strings are localized (`TTR`), so this won't break translations.","2024-08-16T11:18:50Z",false,"APPROVED"
"Calinou","MEMBER","**Edit Now** should be a CheckBox, not a CheckButton, as it doesn't have an immediate effect on the form itself (the effect only applies when confirming the dialog).

I also suggest moving it so that it's centered, as it can be hard to spot currently.","2024-08-15T23:43:34Z",false,"CHANGES_REQUESTED"
"dsnopek","CONTRIBUTOR","Thanks! Seems like a good change to me, now that we aren't going to be adding anything more to these files.","2024-08-22T20:58:56Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-25T20:11:12Z",false,"APPROVED"
"Geometror","MEMBER","Looks fine to me!
What remains is squashing your commits into one.
Regarding the behavior when the port range is invalid: I'm fine with either way, but I think for now we should leave it.  The user should check the returned Error anyways, not the port value.
","2024-09-23T16:31:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-23T16:48:33Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-09-30T10:56:57Z",false,"APPROVED"
"Calinou","MEMBER","","2024-10-01T15:09:18Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-08-15T19:29:19Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-15T19:47:51Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-15T18:46:10Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-08-15T22:22:46Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-15T18:04:31Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-15T18:05:53Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-15T18:06:45Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-17T18:22:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-17T18:40:09Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-08-15T22:20:59Z",false,"APPROVED"
"skyace65","CONTRIBUTOR","","2024-08-16T00:59:42Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-15T17:53:49Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-15T17:54:32Z",false,"COMMENTED"
"TokageItLab","MEMBER","Need to fix docs line. You can use the command `godot.exe --doctool` to make document template.","2024-08-26T06:41:18Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","","2024-09-04T09:43:19Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/906a4e9db91c2c6b17a0cb1cddf2a96f64114646), it mostly works as expected.

However, if you hold <kbd>Ctrl</kbd> and drag the mouse to create a new point, the tangents won't update automatically after the initial click (i.e. during the drag motion):

https://github.com/user-attachments/assets/cb56dd04-2ed4-446e-b221-072fb66989cd

https://github.com/user-attachments/assets/94f96a87-0018-4576-863d-a7d4f3d58307

This should probably be changed to perform tangent changes continuously during the *initial* dragging motion (but not after, unless we add new settings to use Auto Tangent as a default). Also, double-check that undo-redo works correctly in this case: pressing <kbd>Ctrl + Z</kbd> should undo the key addition, whereas it currently only works correctly if you haven't performed any dragging at all.
","2024-09-04T09:45:27Z",false,"COMMENTED"
"Arnklit","CONTRIBUTOR","","2024-09-17T15:15:33Z",false,"COMMENTED"
"Arnklit","CONTRIBUTOR","","2024-09-17T15:15:37Z",false,"COMMENTED"
"Arnklit","CONTRIBUTOR","","2024-09-17T15:16:18Z",false,"COMMENTED"
"Arnklit","CONTRIBUTOR","","2024-09-17T15:16:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-15T12:44:51Z",false,"APPROVED"
"paddy-exe","CONTRIBUTOR","","2024-08-15T12:45:57Z",false,"APPROVED"
"kleonc","MEMBER","> PropertySelector allows picking properties of an Object, but I sometimes missed being able to pick a sub-property, e.g. `position:x`. They had to be specified manually, which is rather cumbersome.

Indeed that's currently cumbersome. Moreover, I've seen plently of users being not even aware that you can reference subproperties like that. So this PR also increases discoverability. :+1:

---

Checked the types, if anything is missing etc. Only spotted that for `Color` its integer properties `r8`, `g8`, `b8`, `a8` are not exposed. So that's to potentially reconsider before merging.

Overall LGTM!","2024-08-15T12:40:52Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-15T12:43:53Z",false,"APPROVED"
"akien-mga","MEMBER","Didn't test, but the feature makes sense to me.","2024-08-16T11:56:45Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-15T08:02:24Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-15T13:00:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-15T07:57:50Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-15T11:51:46Z",false,"APPROVED"
"fire","MEMBER","","2024-08-15T13:19:06Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

This now compiles correctly:

```glsl
shader_type canvas_item;

void fragment() {
	for (;false;) {}
}
```

Previously, I would have gotten a compilation error:

![image](https://github.com/user-attachments/assets/81ee1033-9b34-420d-8803-92ed724fc43b)
","2024-08-15T16:44:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-15T07:21:55Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-15T07:42:00Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-15T11:51:34Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-15T07:38:23Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-15T07:40:12Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-10-04T20:27:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-15T07:40:48Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-15T11:50:28Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-18T15:37:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-15T11:36:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-15T12:19:54Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, this fixes the shader compilation error.

**Testing project:** [Non-Overlapping Transprancy 2.zip](https://github.com/user-attachments/files/16627725/Non-Overlapping.Transprancy.2.zip)

However, in terms of visuals, it still doesn't look as I'd expect it to. I would expect the shadow opacity to affect the alpha scissor threshold (and ideally not force alpha transparency if alpha scissor transparency is chosen, so you can avoid transparency sorting issues inherent to alpha transparency).

The same goes for alpha hash, although I don't expect this one to be needed as often in this scenario.

### Transparency = Alpha (or Disabled, as alpha is forced here)

![image](https://github.com/user-attachments/assets/4ba929c0-1524-454d-aa80-60f5e5bae604)

### Transparency = Alpha Scissor

![image](https://github.com/user-attachments/assets/d747d633-e2f1-437d-ba68-d2f7898e56ae)

### Transparency = Alpha Hash

![image](https://github.com/user-attachments/assets/75bf49fa-c8fc-42a1-a816-dcdb4201f58b)

### Transparency = Depth Prepass

![image](https://github.com/user-attachments/assets/a226a1b1-392f-4e85-b4cd-d27cdd283771)

With an alpha albedo texture applied:

### Transparency = Alpha

![image](https://github.com/user-attachments/assets/e9759bfe-bbee-41a1-b6b4-f7a3b121742e)

### Transparency = Alpha Scissor (threshold = 0.2)

![image](https://github.com/user-attachments/assets/0528f232-8bb5-45c0-9175-e6317513df8c)

### Transparency = Alpha Hash

![image](https://github.com/user-attachments/assets/69a351e3-f483-4891-b238-41ed4daee8a4)

### Transparency = Depth Prepass

![image](https://github.com/user-attachments/assets/58244c66-1e15-45ae-a54e-0da3e67738b1)
","2024-08-15T16:54:54Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-15T20:44:00Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-16T00:23:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-14T22:53:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-14T21:31:15Z",false,"APPROVED"
"bruvzg","MEMBER","Not sure how it's related to #95068, this should not have any impact on GL.","2024-08-14T21:23:41Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-08-15T20:15:33Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-16T08:06:31Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-14T16:30:38Z",false,"COMMENTED"
"vgezer","CONTRIBUTOR","","2024-08-14T18:49:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-17T15:20:42Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-08-19T15:54:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-19T17:41:54Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-14T10:08:35Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-14T09:03:44Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

### Before

https://github.com/user-attachments/assets/00e8a8b7-31c0-4991-b858-623fb30ee876

### After

https://github.com/user-attachments/assets/6108c2da-4cf8-4b8e-beb4-7f2d013bc720

","2024-08-14T20:26:33Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-08-19T10:35:16Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-14T07:07:43Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","","2024-08-17T03:55:36Z",false,"APPROVED"
"jsjtxietian","CONTRIBUTOR","LGTM. My pr is just a hack anyway.","2024-08-14T02:27:37Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","LGTM, make perfect sense, there is no point adding this to either BVH as there is no data so I wonder why we added it originally.","2024-09-03T02:46:25Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-03T05:05:06Z",false,"APPROVED"
"raulsntos","MEMBER","I don't think this is related to https://github.com/godotengine/godot/pull/94680 since I can reproduce the missing `.cs` filter in v4.2.2.stable.mono.official [15073afe3]. But I can confirm this PR fixes the issue.","2024-08-14T02:06:54Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-16T12:12:13Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-15T01:28:03Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-15T01:28:21Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-15T01:28:32Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-15T01:29:33Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-15T01:29:48Z",false,"COMMENTED"
"KoBeWi","MEMBER","Overall it's better functionality-wise. Can't say much about the code, as it's rather complex .-.","2024-08-30T09:47:52Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM","2024-08-30T09:48:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-03T08:49:38Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-03T18:51:04Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-03T19:44:19Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-09-07T01:13:59Z",false,"COMMENTED"
"bruvzg","MEMBER","That's fine for `.dylib`s but probably should be applied to `.framework`s as well (same issue is likely relevant for GDExtensions).

Something like:
```diff
diff --git a/platform/macos/export/export_plugin.cpp b/platform/macos/export/export_plugin.cpp
index 2ff02d2e74..de145d431f 100644
--- a/platform/macos/export/export_plugin.cpp
+++ b/platform/macos/export/export_plugin.cpp
@@ -1092,7 +1092,7 @@ void EditorExportPlatformMacOS::_code_sign(const Ref<EditorExportPreset> &p_pres
 			List<String> args;
 			args.push_back(""sign"");
 
-			if (p_path.get_extension() != ""dmg"") {
+			if (!p_ent_path.is_empty()) {
 				args.push_back(""--entitlements-xml-path"");
 				args.push_back(p_ent_path);
 			}
@@ -1153,7 +1153,7 @@ void EditorExportPlatformMacOS::_code_sign(const Ref<EditorExportPreset> &p_pres
 				args.push_back(""runtime"");
 			}
 
-			if (p_path.get_extension() != ""dmg"") {
+			if (!p_ent_path.is_empty()) {
 				args.push_back(""--entitlements"");
 				args.push_back(p_ent_path);
 			}
@@ -1237,7 +1237,7 @@ void EditorExportPlatformMacOS::_code_sign_directory(const Ref<EditorExportPrese
 		}
 
 		if (extensions_to_sign.has(current_file.get_extension())) {
-			String ent_path = p_ent_path;
+			String ent_path;
 			bool set_bundle_id = false;
 			if (sandbox && FileAccess::exists(current_file_path)) {
 				int ftype = MachO::get_filetype(current_file_path);
@@ -1357,7 +1357,7 @@ Error EditorExportPlatformMacOS::_copy_and_sign_files(Ref<DirAccess> &dir_access
 			_code_sign_directory(p_preset, p_in_app_path, p_ent_path, p_helper_ent_path, p_should_error_on_non_code_sign);
 		} else {
 			if (extensions_to_sign.has(p_in_app_path.get_extension())) {
-				String ent_path = p_ent_path;
+				String ent_path;
 				bool set_bundle_id = false;
 				if (p_sandbox && FileAccess::exists(p_in_app_path)) {
 					int ftype = MachO::get_filetype(p_in_app_path);
@@ -2210,7 +2210,7 @@ Error EditorExportPlatformMacOS::export_project(const Ref<EditorExportPreset> &p
 				if (ep.step(TTR(""Code signing DMG""), 3)) {
 					return ERR_SKIP;
 				}
-				_code_sign(p_preset, p_path, ent_path, false, false);
+				_code_sign(p_preset, p_path, String(), false, false);
 			}
 		} else if (export_format == ""pkg"") {
 			// Create a Installer.

```
This will also ensure the same is done with built-in ad-hoc signer (which is irrelevant for the issue, but is good for consistency).
","2024-08-13T19:20:38Z",false,"COMMENTED"
"bruvzg","MEMBER","Seems to be working fine for out of App Store exports.

Please squash the commits into one, see [pull request workflow](https://docs.godotengine.org/en/latest/contributing/workflow/pr_workflow.html#the-interactive-rebase).","2024-08-13T19:49:10Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-08-13T18:41:03Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-13T19:11:56Z",false,"COMMENTED"
"MewPurPur","CONTRIBUTOR","","2024-08-13T15:37:44Z",false,"COMMENTED"
"MewPurPur","CONTRIBUTOR","","2024-08-13T15:41:28Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-13T15:42:33Z",false,"COMMENTED"
"MewPurPur","CONTRIBUTOR","","2024-08-13T15:43:32Z",false,"COMMENTED"
"aaronp64","CONTRIBUTOR","","2024-08-14T17:22:01Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-14T20:23:46Z",false,"COMMENTED"
"MewPurPur","CONTRIBUTOR","","2024-08-15T10:54:43Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I checked the code and it's true.

###### I wish I caught that sooner in hindsight","2024-08-13T13:57:44Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-13T14:28:16Z",false,"APPROVED"
"AThousandShips","MEMBER","There's at least one place that needs to be adjusted with this change or it will bread existing behaviour:
https://github.com/godotengine/godot/blob/e25f3c0d38d457b15a63720240736f564ce0501b/scene/2d/path_2d.cpp#L211-L212","2024-08-13T13:02:58Z",false,"CHANGES_REQUESTED"
"SaracenOne","MEMBER","Good job extending this, LGTM üëç ","2024-09-20T01:40:00Z",false,"APPROVED"
"TokageItLab","MEMBER","I think the two signals should have different names to avoid confusion, and after then fix the incorrect bindings.","2024-08-13T12:26:56Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-08-13T12:28:50Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-08-13T13:02:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-13T13:05:35Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-08-13T13:12:58Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-13T13:44:35Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-13T11:03:28Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-13T15:29:06Z",false,"APPROVED"
"akien-mga","MEMBER","I confirm this solves the issue.","2024-08-13T10:56:44Z",false,"APPROVED"
"bruvzg","MEMBER","Tested locally, seems to fix the issue.","2024-08-13T11:29:19Z",false,"APPROVED"
"kleonc","MEMBER","","2024-08-23T12:32:49Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-08-23T13:21:57Z",false,"COMMENTED"
"kleonc","MEMBER","Overall looks good to me, that's definitely a usability improvement! :+1:

For a worst case scenario of like a fully transparent-ish 16k texture the calculations can take some time, so ideally they would be offloaded to a background thread, with some indicator of the progress added + possibility to abort.
But that might be quite a degenerate case. Even if for a 4k texture it would take 2 seconds, it's still an improvement compared to the current state. And for probably most use cases it's quite instantaneous already.

So I consider this good as is, left some nitpicks.

(I've tested only with https://engvee.itch.io/animated-isometric-prototyping-hero, worked just fine)","2024-08-26T18:26:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-26T18:28:12Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-08-26T19:07:49Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-08-26T19:07:56Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-08-26T19:09:34Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-08-26T19:09:47Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-08-26T19:16:22Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-08-26T19:39:44Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-08-26T19:42:01Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-08-26T19:56:41Z",false,"APPROVED"
"clayjohn","MEMBER","Seems fine!","2024-09-11T18:07:11Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-08-13T17:15:42Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-13T17:17:36Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-13T12:12:05Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-13T06:50:13Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-08-13T17:18:21Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-13T06:54:27Z",false,"COMMENTED"
"DeeJayLSP","CONTRIBUTOR","","2024-08-13T17:40:21Z",false,"COMMENTED"
"reduz","MEMBER","","2024-08-29T17:11:51Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-27T14:35:09Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-08-27T15:01:25Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-27T16:08:57Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-08-27T16:36:35Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-28T14:30:53Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-08-31T06:31:06Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-04T16:21:52Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-04T16:29:51Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-04T16:36:12Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-04T16:37:45Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-09-05T13:41:36Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-08-13T10:45:23Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-13T15:38:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","Docs look good","2024-08-13T15:39:21Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-08-13T05:32:33Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-13T11:51:51Z",false,"APPROVED"
"DarioSamo","CONTRIBUTOR","","2024-08-13T15:37:18Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-13T08:13:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-13T08:21:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-13T08:22:19Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-13T15:18:55Z",false,"COMMENTED"
"SlashScreen","CONTRIBUTOR","","2024-08-13T15:19:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-13T15:21:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","This should fix CI","2024-08-13T15:24:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","Approving on principle, though I'm not 100% sure these are needed, but I think they are useful even if they can be implemented in a straightforward way in scripting it's useful to avoid boilerplate 

But will defer to others for the final go-ahead or rejection, but I think they might be good to add

(You also need to remove the test for `count_custom`)","2024-08-28T16:57:02Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-28T17:06:16Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I have more suggestions but the PR is getting updated as I speak

Especially after https://github.com/godotengine/godot/pull/69451 has been in limbo for so long, I want to make sure this one is squeaky clean","2024-08-28T17:11:08Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-28T17:13:21Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I know it's correct wording but saying ""satisfy a condition"" is not something I see often in the class reference, I will think of something later.","2024-08-28T17:14:35Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-28T17:15:38Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-28T17:24:39Z",false,"COMMENTED"
"SlashScreen","CONTRIBUTOR","","2024-08-28T17:44:42Z",false,"COMMENTED"
"SlashScreen","CONTRIBUTOR","","2024-08-28T17:52:30Z",false,"COMMENTED"
"SlashScreen","CONTRIBUTOR","","2024-08-28T18:23:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-28T18:24:36Z",false,"COMMENTED"
"SlashScreen","CONTRIBUTOR","","2024-08-28T18:26:27Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-28T18:28:14Z",false,"COMMENTED"
"SlashScreen","CONTRIBUTOR","","2024-08-28T18:29:48Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-09-06T14:17:56Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-07T12:48:59Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-07T12:49:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-07T12:50:53Z",false,"COMMENTED"
"KoBeWi","MEMBER","The implementation looks fine overall.","2024-09-07T13:02:22Z",false,"APPROVED"
"Nazarwadim","CONTRIBUTOR","","2024-09-10T11:55:29Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-09-10T11:56:15Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-09-10T11:57:06Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-09-12T11:17:15Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-09-12T11:34:20Z",false,"COMMENTED"
"akien-mga","MEMBER","This seems to have significant demand as there's been already at least 3 PRs attempting to implement this, and the linked proposal is somewhat consensual.

The proposed API seems fine to me. I didn't review implementation details but others did, so I think this is good to go.","2024-09-20T13:52:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-12T21:18:31Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-08-13T14:33:14Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-13T14:34:05Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected with all antialiasing methods.","2024-08-12T19:50:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-12T17:04:54Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-08-12T17:24:15Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-08-12T17:46:57Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great to me!","2024-08-12T18:45:36Z",false,"APPROVED"
"devloglogan","CONTRIBUTOR","Tested this out by making a few changes/comparisons in the meta composition layer sample, looks good to me!","2024-08-13T12:16:56Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected on:

Godot v4.3.rc (39fc116c5) - Fedora Linux 40 (KDE Plasma) - X11 - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 4090 (nvidia; 555.58.02) - 13th Gen Intel(R) Core(TM) i9-13900K (32 Threads)

Single-window mode is disabled in the editor settings.

On the other hand, I can't reproduce the [original issue](https://github.com/godotengine/godot/issues/95430), but at least there's no regression in behavior.","2024-08-12T16:51:03Z",false,"APPROVED"
"KoBeWi","MEMBER","I can reproduce the bug and confirm that this fixes it.","2024-08-12T19:28:16Z",false,"APPROVED"
"raulsntos","MEMBER","Looks good to me. Thanks for contributing to the .NET module!","2024-08-12T16:17:26Z",false,"APPROVED"
"erickmanaroulas","NONE","","2024-08-13T14:34:14Z",false,"APPROVED"
"skyace65","CONTRIBUTOR","","2024-08-16T01:38:56Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-12T11:24:33Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-12T12:06:28Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-12T12:07:41Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-08-12T14:31:24Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-08-12T14:35:12Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-12T14:37:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-12T19:38:50Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-12T19:38:55Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-12T11:07:02Z",false,"APPROVED"
"Chaosus","MEMBER","","2024-08-12T08:59:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-12T09:01:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-12T11:58:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-12T12:25:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-12T11:20:19Z",false,"APPROVED"
"akien-mga","MEMBER","Looks correct, I didn't find other accesses to these outside `DEBUG_ENABLED`.","2024-08-12T11:27:40Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-12T15:21:29Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-12T15:34:03Z",false,"COMMENTED"
"clayjohn","MEMBER","Makes sense! It's great to see someone giving some attention to 3D editor usability!","2024-08-12T06:07:47Z",false,"APPROVED"
"TokageItLab","MEMBER","Looking at the changes in the code, it seems to be a quite safe fix since it just changes the axis.","2024-08-12T14:20:14Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-08-11T21:42:09Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-17T18:10:16Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-30T12:20:55Z",false,"COMMENTED"
"KoBeWi","MEMBER","Fixes the issue, but I'm not very familiar with GraphEdit.
CC @Geometror ","2024-09-30T12:21:23Z",false,"APPROVED"
"Gaktan","CONTRIBUTOR","","2024-09-30T17:12:37Z",false,"COMMENTED"
"Geometror","MEMBER","Works as expected!","2024-10-03T10:22:34Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-12T13:32:51Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-11T16:51:25Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-08-11T17:47:44Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-08-11T22:07:13Z",false,"COMMENTED"
"tetrapod00","CONTRIBUTOR","","2024-08-11T22:21:07Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-12T17:02:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-16T12:08:13Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-16T17:55:31Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected in all rendering methods.","2024-08-12T20:59:52Z",false,"COMMENTED"
"clayjohn","MEMBER","The change to renderer_scene_cull looks great!

You will need to remove your accidental commit before this is ready to merge though","2024-08-12T21:46:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-11T06:05:08Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-08-11T10:25:38Z",false,"APPROVED"
"akien-mga","MEMBER","Seems fine to me. I guess this technically `breaks compat` as this could be accessed from script before?","2024-08-12T10:27:14Z",false,"APPROVED"
"KoBeWi","MEMBER","Needs rebase.","2024-08-30T14:11:28Z",false,"APPROVED"
"rburing","MEMBER","Since the (read-only) property was already exposed, the getter should be too.

In fact the read-only property could be removed in favor of the getter, but in any case this is a good uncontroversial first step.","2024-08-12T08:36:19Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","> Ah, yes, you'd be correct. Would ""begin""/""end"" be better phrasing, then?

Sorry for not answering sooner. In my opinion, yes. It _could_ be more explicit and mention the LTR layout, but it would be harder to read with the way the descriptions are currently.","2024-09-07T12:51:43Z",false,"APPROVED"
"kleonc","MEMBER","Tested a little, couldn't make it break / seems to work.

Looking at the code I'm not fully sure what/when updates though, e.g. why `object->set_dict(dict)` (added for adding/removing key-value pair) is not needed when changing value type of an existing key-value pair. So yeah, TIWAGOS. :upside_down_face:","2024-08-12T17:13:20Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

![image](https://github.com/user-attachments/assets/97720442-d744-4096-b0bf-bcb92f6613de)

In `master`, I get a core shader compilation error and the editor freezes instead.","2024-08-15T16:24:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-12T20:40:47Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, there's an issue on light theme (**Interface > Theme > Preset**) where the icon's color fails to be converted. This makes the icon hard to see:

![image](https://github.com/user-attachments/assets/905fdff2-0af3-4874-8b2a-b9870c2039b4)

You likely need to double-check the fill color and make sure it matches the hexadecimal code used in the original icons **exactly** (`#e0e0e0`). You can commit the suggestions I made below to apply these changes to your fork, then [rebase](https://docs.godotengine.org/en/stable/contributing/workflow/pr_workflow.html#the-interactive-rebase) to squash the commits together into a single commit (so that our merge history is clean).

While we're at it, you can change the commit message during the rebase process to something more descriptive:

> Make editor panel icons more discreet

Other than that, it looks good in the dark theme:

1 | 2 | 3
-|-|-
![image](https://github.com/user-attachments/assets/a7ede257-41f8-4638-95c4-4074c07415ea) | ![image](https://github.com/user-attachments/assets/df9aaacc-7d97-4c10-9636-16a02725d9a4) | ![image](https://github.com/user-attachments/assets/2ed82a51-6805-47c8-bc4e-6bd7769d7909)","2024-08-10T02:18:17Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","","2024-08-10T02:19:30Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-10T02:19:39Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-10T02:19:47Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-10T02:19:53Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-10T02:20:01Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-10T02:20:07Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-11T17:00:25Z",false,"APPROVED"
"MewPurPur","CONTRIBUTOR","","2024-08-12T18:48:57Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","","2024-08-10T02:26:22Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-10T02:26:32Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-10T02:33:02Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

The rationale behind the feature makes sense to me, especially since I've run into this issue in the past (where I clicked the **%** button without realizing it).","2024-08-10T02:34:41Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-12T10:41:57Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-12T11:49:59Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-12T11:52:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-12T11:52:48Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-03T12:10:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-03T13:02:19Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-03T13:02:50Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-03T13:25:07Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-03T13:25:22Z",false,"COMMENTED"
"Giganzo","CONTRIBUTOR","","2024-09-03T13:36:04Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-03T13:56:38Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-04T09:56:38Z",false,"COMMENTED"
"Giganzo","CONTRIBUTOR","","2024-09-04T10:03:55Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-04T15:10:40Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-09T21:36:26Z",false,"APPROVED"
"raulsntos","MEMBER","Nice catch, thanks!","2024-08-09T23:21:47Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/02b16d2f544e323b7b7f57e6e992b0b8e5d8b954) on Windows 11 23H2, it works as expected. An easy way to test this PR is to create a desktop shortcut, then editing it to have `--force-console` at the end of the **Target** line.

This makes sense to provide as an alternative to the `.console.exe` executable that doesn't spawn a child process (and is always helpful in case you lose that executable).","2024-09-17T13:29:57Z",false,"APPROVED"
"Calinou","MEMBER","","2024-09-17T13:30:25Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-09T20:44:55Z",false,"COMMENTED"
"hakro","CONTRIBUTOR","","2024-08-09T21:38:55Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-09T21:41:20Z",false,"APPROVED"
"groud","MEMBER","","2024-08-12T09:19:20Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-09T17:15:50Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-08-09T23:08:31Z",false,"APPROVED"
"raulsntos","MEMBER","Looks good to me, thanks!","2024-08-09T17:30:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-09T13:52:56Z",false,"APPROVED"
"rune-scape","CONTRIBUTOR","","2024-08-10T23:40:24Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-12T15:17:06Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

![image](https://github.com/user-attachments/assets/59ef2898-691e-412d-bfa6-2bbe9bfd165e)
","2024-08-10T01:56:02Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-12T15:27:36Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-09T21:25:06Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

Note that I still find the copy/paste UX in the GridMap editor to be suboptimal (I'd expect to be able to press <kbd>Ctrl + V</kbd> to confirm copying or cutting and be able to do it multiple times), but this will do for now.","2024-08-12T21:13:43Z",false,"APPROVED"
"adamscott","MEMBER","Seems good enough! Thanks for your investigation, @akien-mga.","2024-08-09T12:15:20Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Oh, wow, good catch! The intention of the ptrcall encoding is that all integer types get encoded as `int64_t`, so I think your change is essentially correct.

Although, I do wonder if this should be moved to `method_ptrcall.h` and done with the macros there like all the other integer types? It would just be:

```
MAKE_PTRARGCONV(char32_t, int64_t);
```

If that works, I think it would be better to put it in there with the other integer types - I didn't even know this one was hiding over in `binder_common.h`.","2024-08-10T13:01:47Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-09T07:57:53Z",false,"APPROVED"
"AThousandShips","MEMBER","Thank you for your contribution, however this does nothing, the documentation just displays the value, you need to change the declaration, which are here:
https://github.com/godotengine/godot/blob/739019e4e4a6e4763e37adfd9883a1c85d5f6249/servers/physics_server_2d.cpp#L898
https://github.com/godotengine/godot/blob/739019e4e4a6e4763e37adfd9883a1c85d5f6249/servers/physics_server_3d.cpp#L1128

Note that this, while minor, still breaks compatibility, and should be discussed, the difference is tiny so changing it is of limited necessity, while also being of limited negative impact ","2024-08-09T07:40:02Z",false,"DISMISSED"
"akien-mga","MEMBER","","2024-08-09T07:20:09Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

![image](https://github.com/user-attachments/assets/81de46c2-ab0e-42fd-b7b6-580617dfbf4a)","2024-08-09T01:06:13Z",false,"APPROVED"
"bruvzg","MEMBER","This will immediately break for any file dialog with more than one option, it's using Grid container and should have the same number of child controls in every row.

<img width=""361"" alt=""Screenshot 2024-08-12 at 18 45 25"" src=""https://github.com/user-attachments/assets/6c7b9063-acf5-4633-a705-f754760ca924"">
","2024-08-12T15:45:44Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-08-09T18:12:42Z",false,"COMMENTED"
"EIREXE","CONTRIBUTOR","","2024-08-09T20:09:14Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-09T20:48:36Z",false,"COMMENTED"
"EIREXE","CONTRIBUTOR","","2024-08-09T20:50:32Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-09T20:56:22Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-10-01T09:44:13Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-10-03T00:32:37Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-10-03T07:56:56Z",false,"COMMENTED"
"Calinou","MEMBER","I wouldn't make the empty string marker string configurable. By making it configurable, it means the empty string marker is no longer standard, which limits reusability of translation files across projects. It also makes it harder to document the setup process for users new to Godot's localization system.

I'd try to figure out a standard value that is used by other translation systems out there. If there isn't any standard in place for this, I suggest something like `#empty#` that is *very* unlikely to be used in existing translations (to avoid breaking existing projects).","2024-08-09T14:58:31Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-09T07:53:23Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-16T11:45:57Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-16T11:57:54Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-16T12:44:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-16T12:45:50Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-16T12:53:49Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-09T07:52:56Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-08-09T07:55:34Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-09T08:08:55Z",false,"COMMENTED"
"clayjohn","MEMBER","Rendering and shader changes look good to me","2024-08-09T19:02:43Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-10T08:20:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-08T20:54:42Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks! This looks good to me :-)","2024-09-10T15:14:43Z",false,"APPROVED"
"clayjohn","MEMBER","The code looks great and the performance improvements are very exciting. I assume most of the performance benefit comes from not reading 8 bits at a time?","2024-08-09T18:53:07Z",false,"COMMENTED"
"BlueCube3310","CONTRIBUTOR","","2024-08-09T20:16:39Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-09T20:26:35Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-08-09T20:27:33Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-09T20:28:29Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-10T21:26:37Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected. The imported HDR panoramas look pretty much identical to before (I can't tell a difference with ACES tonemapping and whitepoint set to 6 in Forward+).

## Benchmark

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 40)
</details>

Using an optimized editor build (`optimize=speed lto=full`). `.godot/` folder is removed between each iteration.

Here's the time taken to open the editor, import the 4 HDRIs linked in OP with lossless compression and exit the editor. The times shown here include editor startup and shutdown, so the import process is actually more than 1.45√ó faster compared to before (probably at least 3√ó faster in practice).

```
Benchmark 1: bin/godot.linuxbsd.editor.x86_64.master ~/Documents/Godot/test_hdri_import/project.godot --import
  Time (mean ¬± œÉ):      7.856 s ¬±  0.402 s    [User: 11.515 s, System: 1.181 s]
  Range (min ‚Ä¶ max):    7.326 s ‚Ä¶  8.333 s    10 runs
 
Benchmark 2: bin/godot.linuxbsd.editor.x86_64 ~/Documents/Godot/test_hdri_import/project.godot --import
  Time (mean ¬± œÉ):      5.399 s ¬±  0.203 s    [User: 5.504 s, System: 1.076 s]
  Range (min ‚Ä¶ max):    5.121 s ‚Ä¶  5.698 s    10 runs
 
Summary
  bin/godot.linuxbsd.editor.x86_64 ~/Documents/Godot/test_hdri_import/project.godot --import ran
    1.45 ¬± 0.09 times faster than bin/godot.linuxbsd.editor.x86_64.master ~/Documents/Godot/test_hdri_import/project.godot --import
```

Stripped binary size is 8 KB smaller with this PR compared to `master`.","2024-08-13T20:55:54Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-08T18:41:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-08T18:43:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-08T18:43:53Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-08T12:27:27Z",false,"COMMENTED"
"Lunarisnia","CONTRIBUTOR","","2024-08-08T13:12:53Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-08T13:20:24Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-08T13:25:53Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-08T13:26:17Z",false,"APPROVED"
"Lunarisnia","CONTRIBUTOR","","2024-08-08T13:27:52Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-08T13:31:22Z",false,"COMMENTED"
"Lunarisnia","CONTRIBUTOR","","2024-08-08T13:32:14Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-08T10:55:54Z",false,"APPROVED"
"akien-mga","MEMBER","Checked with Google Translate, seems good.","2024-08-08T08:40:40Z",false,"APPROVED"
"H3XAGON3ST","NONE","I confirm that the translation is correct","2024-08-08T09:24:16Z",false,"APPROVED"
"dalexeev","MEMBER","The translation and spelling are correct.","2024-08-08T10:22:05Z",false,"APPROVED"
"jsjtxietian","CONTRIBUTOR","Same as my superseded pr https://github.com/godotengine/godot/pull/95314 , works as intended.","2024-08-23T03:55:25Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/e3550cb20f5d6a61befaafb7d9cbdb57b24870e4), it works as expected.

![image](https://github.com/user-attachments/assets/988a78d4-9450-4909-a934-6773e0ca21e6)","2024-08-25T01:01:59Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-08-08T08:11:02Z",false,"APPROVED"
"DarioSamo","CONTRIBUTOR","Change looks good to me and makes sense. I haven't personally tested it but I discussed the change with @Lssikkes and we agreed this seemed like a good way to fix the issue.

I'll wait for someone else to verify and make sure it doesn't cause regressions. This could make it either for 4.3 or wait to be cherry-picked for 4.3.1.
","2024-08-08T12:01:19Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-08T12:03:44Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-08T16:17:57Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-08-08T17:09:46Z",false,"COMMENTED"
"Lssikkes","CONTRIBUTOR","","2024-08-08T19:16:28Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-09T01:17:25Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-09T01:17:37Z",false,"APPROVED"
"paulloz","MEMBER","Looks like it matches the GDS implementation üëç ","2024-08-19T18:43:04Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-08-08T05:33:33Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-08-08T07:48:00Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it mostly works as expected.

**Testing project:** [test_pr_95263.zip](https://github.com/user-attachments/files/16553653/test_pr_95263.zip)

There's an issue where `update_image()` with `key` types other than String don't seem to work. If I use `key=123` (without quotes), I need to use `""123""` (String) as a key type in `update_image()`; `123` as an integer doesn't work.

```gdscript
update_image(123, RichTextLabel.UPDATE_COLOR, null, 0, 0, Color(1.0, 0.2, 1.0, 0.4))
# This works:
#update_image(""123"", RichTextLabel.UPDATE_COLOR, null, 0, 0, Color(1.0, 0.2, 1.0, 0.4))
```

This also applies to other types such as Vector2i and so on.

This may be expected given how BBCode parsing works, but it can catch people off-guard so I suggest documenting this at least.","2024-08-08T21:48:40Z",false,"COMMENTED"
"Grublady","CONTRIBUTOR","These changes allow the user to edit the suffix","2024-08-11T15:11:09Z",false,"CHANGES_REQUESTED"
"akien-mga","MEMBER","","2024-08-07T21:07:58Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-17T18:55:23Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-17T18:55:46Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-17T18:57:20Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-20T18:23:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-20T18:25:51Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-26T21:16:28Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-08-27T15:04:23Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-08-09T02:31:05Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","LGTM, should squash the commits into a single commit first though.","2024-08-07T22:45:19Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-07T15:52:08Z",false,"COMMENTED"
"rburing","MEMBER","","2024-08-07T17:29:54Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

When compiling the editor with `module_godot_physics_3d_enabled=no`, the project settings dialog is correctly updated to remove the mention of the GodotPhysics server:

![image](https://github.com/user-attachments/assets/20348450-c9d6-4953-9bd0-5351b2519133)

All 3D demo projects run when no physics server is enabled (with correct visuals), although you can't move, which is expected.

Some remarks (which also apply to the 2D counterpart of this PR, I assume):

- A warning is also printed on startup of an empty project with just a Node, both in the editor stdout (not visible in the Output panel as it's too early) and in the running project:

```
WARNING: No PhysicsServer3D implementation was found; 3D physics functionality will be disabled.
     at: initialize_physics (main/main.cpp:326)
```

- There should probably be a `Dummy` option you can select in the project settings for two reasons:
  - Silence the warning when you don't compile any physics engines. This is useful when compiling a binary with no physics engines to reduce the binary size of non-game applications, or games that write their own physics without using PhysicsServer.
  - Simulate what happens when physics are disabled at build-time, without needing to compile a separate binary.

","2024-08-08T00:23:11Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-17T13:51:49Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-17T14:48:48Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-17T15:34:43Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-07T13:39:02Z",false,"APPROVED"
"akien-mga","MEMBER","I confirm this fixes the bug.

I really don't understand how this code works though, how does resetting a String remove a ""Create dialog"" checkbox... that really seems brittle :sweat_smile: ","2024-08-07T11:29:02Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-07T09:46:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-07T09:05:02Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-07T08:42:06Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-08-07T09:06:26Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-07T09:36:59Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-07T08:47:31Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-08-07T08:56:01Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

![image](https://github.com/user-attachments/assets/32d6bd0f-dc02-4c85-aec9-62f0d1bfbe9d)
","2024-08-07T14:57:13Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-07T14:58:10Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-08-07T15:38:53Z",false,"APPROVED"
"akien-mga","MEMBER","Approving based on my above test and quick review.

Clay also mentioned having very good results with the MRP and an optimized build.","2024-08-07T21:44:18Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-07T08:12:35Z",false,"COMMENTED"
"pafuent","CONTRIBUTOR","","2024-08-07T10:25:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-07T10:28:04Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-08-07T10:46:07Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-13T08:26:11Z",false,"DISMISSED"
"Calinou","MEMBER","","2024-08-06T23:20:50Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-06T23:21:01Z",false,"COMMENTED"
"Calinou","MEMBER","Code looks good to me (aside of the suggestions I posted above).","2024-08-06T23:21:48Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-07T08:09:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-07T18:23:02Z",false,"COMMENTED"
"Faless","COLLABORATOR","LGTM, see my suggestion about the doc, nice work :rocket: ","2024-09-29T13:29:43Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-06T21:02:24Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-07T08:39:54Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-08T06:20:15Z",false,"COMMENTED"
"bruvzg","MEMBER","Current Label shadow is a bit hacky instead of adding more narrow use properties on top of it, it might be better to make it more universal (it will be breaking change anyway):

Something like an arbitrary size array of draw steps, each defining `color`, `offset`, and `outline size`.","2024-08-08T07:42:56Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-06T20:03:08Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-06T20:03:53Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally on https://github.com/godotengine/godot-demo-projects/tree/master/gui/regex (by editing the `compile()` call to have `false` as a second parameter), it works as expected.","2024-08-06T20:24:22Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-07T07:56:04Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-27T20:15:38Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-28T13:03:21Z",false,"APPROVED"
"HolonProduction","MEMBER","This breaks lookup for builtin enums. It isn't directly obvious, since we try to lookup the symbol as class constant before doing anything with the base (this seems questionable and will probably lead to some edge case bugs, but that's a different issue).

Here is a minimal example script:
```gdscript
extends Node

func _init():
    Control.SizeFlags.SIZE_EXPAND
```

With this PR looking up SIZE_EXPAND will fail. Solution should be falling back to the old behaviour if the class type ~or script path~ isn't set.","2024-10-08T17:41:44Z",false,"CHANGES_REQUESTED"
"HolonProduction","MEMBER","","2024-10-08T19:15:32Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-10-08T19:45:54Z",false,"COMMENTED"
"HolonProduction","MEMBER","- tested all edge cases that I could think of
- code content makes sense
- not well versed enough in C++ to give a thorough review on code quality but since it's in line with other stuff in this file it should be fine

Overall LGTM","2024-10-09T18:39:00Z",false,"APPROVED"
"adamscott","MEMBER","","2024-08-08T13:14:33Z",false,"COMMENTED"
"adamscott","MEMBER","Great work! Didn't test it yet, I'm doing this right now.
If it works well, I'll try to push the fix for 4.3.

There's only a few renames and nitpicks, but globally, it's a great implementation. Thanks!","2024-08-08T13:38:47Z",false,"COMMENTED"
"adamscott","MEMBER","Good idea, but I have a few changes to make to your code.","2024-08-08T15:52:45Z",false,"COMMENTED"
"yahkr","CONTRIBUTOR","","2024-08-08T15:55:06Z",false,"COMMENTED"
"yahkr","CONTRIBUTOR","","2024-08-08T15:55:32Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-08-08T16:00:32Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-08-08T16:01:31Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-08-08T16:50:29Z",false,"COMMENTED"
"yahkr","CONTRIBUTOR","","2024-08-08T16:53:03Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-08-08T19:40:54Z",false,"COMMENTED"
"adamscott","MEMBER","Last changes that I can see.","2024-08-08T19:52:23Z",false,"CHANGES_REQUESTED"
"adamscott","MEMBER","Works for me! Thank you, @yahkr, for your time and effort. Very appreciated.","2024-08-09T11:56:17Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-08T08:02:18Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

Example at 200% editor scale:

![image](https://github.com/user-attachments/assets/309d21df-c88c-40a7-b953-7ceab7b9c405)

Spacious at 100% editor scale still looks good in terms of CheckBox spacing:

![image](https://github.com/user-attachments/assets/627863c1-9827-4513-985b-4c1d0b096474)","2024-08-06T15:52:42Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-06T10:13:40Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-06T09:52:02Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-06T09:36:44Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-06T08:46:49Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-08-06T12:40:49Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-08-17T05:24:52Z",false,"COMMENTED"
"elmajime","NONE","","2024-09-07T05:11:47Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-06T09:49:04Z",false,"APPROVED"
"AThousandShips","MEMBER","Makes sense, probably needs a more thorough safety analysis but this should be a sufficient fix for now","2024-08-06T09:52:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-07T08:56:24Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-08-07T11:54:08Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-07T13:18:46Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-07T13:32:37Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-08-08T03:49:03Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-08-08T03:59:37Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-08T06:08:10Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-06T15:29:07Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-06T15:29:13Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-06T15:29:21Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks good to me! Improvements to the visual profiler are very welcome","2024-09-04T01:14:41Z",false,"APPROVED"
"akien-mga","MEMBER","Needs rebase, then should be fine to merge.","2024-10-04T20:33:10Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-08-07T19:33:07Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-08-08T07:32:04Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-05T20:32:29Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-20T20:18:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-20T20:19:06Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-26T21:10:29Z",false,"DISMISSED"
"akien-mga","MEMBER","I'm not familiar with the internals there so I'm not sure what this assignment of `left` to `r_ret` means, but if it fixes the issue, overall the change seems sane to me.","2024-09-19T14:28:10Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-19T15:11:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-06T10:30:13Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-05T10:07:50Z",false,"COMMENTED"
"Sch1nken","CONTRIBUTOR","","2024-08-05T10:10:40Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-05T15:26:00Z",false,"COMMENTED"
"clayjohn","MEMBER","I'm not sure if version number should be included. AFAIK anything that would affect the cache should already be hashed on its own (i.e. if an input changes, then the cache will be broken anyway). So including engine version just means we will sometimes break the cache unnecessarily. ","2024-08-06T02:14:30Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-08-05T14:55:30Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-08-05T14:56:04Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-08-05T14:57:19Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-08-06T00:49:57Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-08-06T00:59:57Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-08-06T02:32:47Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-08-06T02:33:10Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-08-06T16:07:30Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-08-06T16:16:44Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-08-06T16:18:05Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-08-07T23:01:40Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-08-07T23:55:12Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-08-07T23:57:33Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-08-08T00:07:00Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-08-08T00:13:07Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-08-12T11:44:53Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-08-12T11:48:52Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","","2024-08-15T06:30:48Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-22T08:18:48Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","I haven't had a chance to test this, but skimming through the code it looks great to me! (Aside from the couple of small language things that ATS pointed out.)","2024-08-22T19:56:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-06T09:29:30Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-05T08:13:56Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-06T14:41:35Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-08-07T03:06:52Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.","2024-08-08T00:40:51Z",false,"APPROVED"
"Kimau","CONTRIBUTOR","Looks great, nice handling of the data source issue.
Might want to call out the off by default in the headline.
As a lot of people skimming commits will only see the headline and
Hand tracking default now off is the headline change.","2024-08-05T08:48:20Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-08-05T15:13:09Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-05T15:34:39Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","This PR seemed to work in my testing on Meta Quest! Skimming the code, it looks good to me. :-)

The breaking changes here probably mean this PR is only for Godot 4.4, without cherry-picking to 4.3.

But this bug fix sounds like it should be cherry-picked to 4.3:

> * A minor fix in `XRNode3D` which wasn't always hiding the node in runtime when no tracking was available.

Perhaps that one should be split out to a separate PR in order to facilitate that? Or, I guess we could make a Godot 4.3 specific PR too?","2024-08-06T21:42:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-19T12:30:56Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-10-04T20:33:24Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-04T18:59:04Z",false,"DISMISSED"
"AThousandShips","MEMBER","","2024-08-04T19:00:27Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-04T19:00:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-04T19:20:02Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks!

This looks good to me. I tested on Windows and it seems to be working just fine: creation and clean-up of the temporary copy looks good, and a quick test of reload worked fine. I also tested on Linux, just to ensure there wasn't any regression there.

It's probably too late to get this into Godot 4.3-stable, but this is something we should definitely cherry-pick for Godot 4.3.1-stable.","2024-08-07T21:05:52Z",false,"APPROVED"
"Scony","CONTRIBUTOR","LGTM","2024-08-18T14:17:29Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-18T15:05:49Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-04T16:09:26Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-08-07T12:42:13Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-04T14:42:40Z",false,"COMMENTED"
"LeonStansfield","CONTRIBUTOR","","2024-08-04T14:45:53Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-04T14:47:23Z",false,"COMMENTED"
"LeonStansfield","CONTRIBUTOR","","2024-08-04T14:49:51Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me overall.

My only concern is with moving `process_material` at the end of an already long list of settings. I guess that's how it is in 3D but I always found it's hard to find even though it's such an important (the most important probably) property for GPU particles.

CC @QbieShay @paddy-exe ","2024-09-26T15:59:14Z",false,"APPROVED"
"paddy-exe","CONTRIBUTOR","LGTM. There could be people complaining that the order will be confusing but I guess it makes sense to make them consistent.
Regarding loosing the overview: Wasn't there a proposal/discussion to have a default `ParticleProcessMaterial` when adding a GPU/CPU Particles Node to the SceneTree?","2024-09-27T17:35:44Z",false,"APPROVED"
"Bromeon","CONTRIBUTOR","","2024-08-04T15:01:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-04T15:47:40Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-04T15:48:14Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-04T15:56:25Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-08-04T16:32:55Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-08-04T16:33:25Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

**Testing project:** [test_cubemap_shader.zip](https://github.com/user-attachments/files/16488345/test_cubemap_shader.zip)
","2024-08-04T17:04:23Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-27T09:47:42Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-04T19:21:18Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-04T10:35:50Z",false,"COMMENTED"
"LeonStansfield","CONTRIBUTOR","","2024-08-04T10:39:32Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-04T14:15:47Z",false,"COMMENTED"
"LeonStansfield","CONTRIBUTOR","","2024-08-04T15:05:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-04T15:06:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-04T15:18:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-04T15:18:53Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM","2024-09-05T10:51:35Z",false,"APPROVED"
"kleonc","MEMBER","","2024-09-05T13:04:21Z",false,"COMMENTED"
"YeldhamDev","MEMBER","This fixes the issue.","2024-08-04T17:42:03Z",false,"APPROVED"
"fire","MEMBER","","2024-08-04T21:50:32Z",false,"APPROVED"
"vnen","MEMBER","LGTM","2024-08-05T13:37:41Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great!","2024-08-07T01:18:01Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-07T08:01:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-03T14:11:34Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-06T21:43:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-06T21:15:29Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.","2024-08-03T00:47:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-06T09:24:45Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-08T08:02:51Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-02T15:47:21Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-02T15:54:36Z",false,"COMMENTED"
"groud","MEMBER","","2024-08-02T14:25:37Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-08-04T15:02:08Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-04T15:03:51Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-02T14:27:02Z",false,"APPROVED"
"adamscott","MEMBER","","2024-08-02T14:27:36Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Looks good to me!","2024-08-02T14:47:49Z",false,"APPROVED"
"clayjohn","MEMBER","Seems good!","2024-08-02T15:22:35Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-02T12:30:24Z",false,"COMMENTED"
"Arecher","NONE","","2024-08-02T13:08:22Z",false,"COMMENTED"
"Arecher","NONE","","2024-08-02T13:25:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-02T13:39:53Z",false,"COMMENTED"
"ze2j","CONTRIBUTOR","","2024-08-03T10:39:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-02T12:03:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","Can confirm this works","2024-08-02T12:11:37Z",false,"APPROVED"
"jsjtxietian","CONTRIBUTOR","","2024-08-05T02:37:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-05T12:27:54Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-06T09:27:31Z",false,"APPROVED"
"paddy-exe","CONTRIBUTOR","Looks good to me.
Works as expected and shown

https://github.com/user-attachments/assets/f559a2af-671f-4f13-b605-943d15754be9

MRP:
[visualshader-nodesizetest.zip](https://github.com/user-attachments/files/16530832/visualshader-nodesizetest.zip)


","2024-08-07T15:33:49Z",false,"APPROVED"
"Naros","CONTRIBUTOR","Seems to work quite well for me, great fix @Geometror ","2024-08-03T00:07:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-05T20:39:18Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-08-02T15:53:40Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-04T21:20:27Z",false,"APPROVED"
"bruvzg","MEMBER","At least on macOS, this won't fully solve the issue, Project Manager will still prevent Mac from sleeping since it's initializing the audio driver, which is constantly outputting ""empty"" sound.

Adding something like this on top of it (this change by itself seems fine and is necessary to allow sleeping) will do it:
```diff
diff --git a/main/main.cpp b/main/main.cpp
index e42469b51b..fcace48686 100644
--- a/main/main.cpp
+++ b/main/main.cpp
@@ -2355,6 +2355,10 @@ Error Main::setup(const char *execpath, int argc, char *argv[], bool p_second_ph
 		// If all else failed it would be the dummy driver (no sound).
 		audio_driver_idx = 0;
 	}
+	if (project_manager) {
+		audio_driver = NULL_AUDIO_DRIVER;
+		audio_driver_idx = AudioDriverManager::get_driver_count() - 1;
+	}
 
 	if (Engine::get_singleton()->get_write_movie_path() != String()) {
 		// Always use dummy driver for audio driver (which is last), also in no threaded mode.
```
I do not think project manager is using audio at all, so it should not have any negative effects. Won't help with the editor, we probably gonna need some sort of ""low priority"" audio driver mode, where it's starting on demand and shutting down after few seconds of silence.","2024-08-02T05:30:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-06T21:47:33Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-02T01:19:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-02T06:38:15Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-02T09:02:59Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Fine, me too","2024-08-02T09:42:06Z",false,"APPROVED"
"Jordyfel","CONTRIBUTOR","","2024-08-03T14:53:08Z",false,"COMMENTED"
"Jordyfel","CONTRIBUTOR","","2024-08-03T14:56:32Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-03T18:35:09Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-08-02T13:44:47Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-02T13:47:45Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-02T15:23:52Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-02T15:24:17Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-02T15:32:56Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-02T15:33:16Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-02T15:39:33Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-02T07:07:05Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-02T09:02:05Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-08-02T17:27:32Z",false,"APPROVED"
"groud","MEMBER","","2024-08-02T08:19:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-02T09:28:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-02T09:47:29Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-10-04T20:34:04Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-13T14:10:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-01T15:07:53Z",false,"APPROVED"
"fire","MEMBER","","2024-08-03T19:20:36Z",false,"APPROVED"
"Scony","CONTRIBUTOR","","2024-08-18T14:18:29Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-01T14:19:24Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-01T14:20:54Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-21T18:37:17Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-08-22T02:40:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-03T14:45:37Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-09-04T03:14:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-04T10:31:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-04T10:31:59Z",false,"APPROVED"
"jsjtxietian","CONTRIBUTOR","","2024-09-05T03:26:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-05T09:32:00Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-09-05T09:34:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-05T09:54:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-01T05:00:47Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-08-01T01:52:09Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-01T01:58:39Z",false,"COMMENTED"
"permelin","CONTRIBUTOR","","2024-08-01T11:08:42Z",false,"COMMENTED"
"permelin","CONTRIBUTOR","","2024-08-01T11:32:54Z",false,"COMMENTED"
"permelin","CONTRIBUTOR","","2024-08-01T12:40:17Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-01T17:03:05Z",false,"COMMENTED"
"permelin","CONTRIBUTOR","","2024-08-01T18:36:53Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-01T19:26:35Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-05T00:41:39Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-05T04:18:35Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-05T16:00:17Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great! ","2024-08-06T01:26:56Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-31T22:15:01Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

Note that while the generated source files are smaller, the resulting binary size is mostly unaffected (-32 bytes for an optimized stripped Linux x86_64 editor build with this PR).","2024-08-01T01:28:58Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-27T21:11:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-31T22:02:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-31T21:08:48Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","The change makes perfect sense. `get_mouse_position()` returns the position in viewport coordinates.
This was an oversight in #58995.
","2024-07-31T20:24:11Z",false,"APPROVED"
"akien-mga","MEMBER","I confirm this fully fixes the bug, both the ""regression"" which I bisected, and the previously also broken behavior in 4.2-stable.","2024-07-31T20:45:12Z",false,"APPROVED"
"clayjohn","MEMBER","Looks good, just a small typo fix","2024-07-31T18:03:53Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-07-31T18:19:32Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-31T20:29:49Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/3978628c6cc1227250fc6ed45c8d854d24c30c30), it works as expected in all rendering methods.

**Testing project:** [test_pr_94981.zip](https://github.com/user-attachments/files/16448410/test_pr_94981.zip)

One concern though is that this increases the number of shader versions compiled whenever the feature is used, which didn't occur with the workaround described in https://github.com/godotengine/godot-proposals/issues/10222. This has a performance impact.","2024-08-01T00:53:43Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-31T15:25:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-31T13:29:55Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-31T13:30:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-31T12:23:18Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-31T12:32:02Z",false,"APPROVED"
"KeyboardDanni","CONTRIBUTOR","","2024-07-31T23:17:40Z",false,"COMMENTED"
"alvinhochun","CONTRIBUTOR","","2024-08-01T11:26:06Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks good to me. As far as I can tell, in 4.x, we only validate indices at import time. I think it is fine to only add the check in places that are impacted by the specific bug report. ","2024-08-19T16:36:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-16T11:46:40Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-31T08:15:04Z",false,"COMMENTED"
"milkiq","CONTRIBUTOR","","2024-07-31T08:15:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-31T08:18:01Z",false,"COMMENTED"
"clayjohn","MEMBER","The normal and tangent validation branch needs to be moved as well as it can change `mesh_flags`","2024-07-31T06:37:17Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-12T15:35:47Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it mostly works as expected. The JNLM denoiser works as well.

**Testing project:** [lightmapruntimebakingtest-bake-always.zip](https://github.com/user-attachments/files/16517257/lightmapruntimebakingtest-bake-always.zip)
This is the testing project from OP, but modified to bake every frame for use with Movie Maker mode. With this, you can almost[^1] make Godot a pathtraced video renderer:

https://github.com/user-attachments/assets/eba29da8-a66b-4563-9c8b-3e4247d30b88

[^1]: No pathtraced reflections, unfortunately ‚Äì¬†only diffuse light.

___

I get an error printed every time lightmaps are baked in a project:

```
ERROR: Condition ""!EditorSettings::get_singleton() || !EditorSettings::get_singleton()->has_setting(p_setting)"" is true. Returning: Variant()
   at: _EDITOR_GET (./editor/editor_settings.cpp:1289)
```

My guess is that it's trying to access editor settings where some preferences are defined, but you can't access them in a running project. There should be equivalent project settings created for these properties instead (these would only be used at runtime, not in the editor).

For the reasons described above, OIDN can't be used as the editor setting that defines the path to OIDN can't be read. Runtime baking falls back to JNLM in this case. While using OIDN would be challenging in an exported project (since you'd need to package it with your game), I think it should be feasible when running a project from the editor. This means a project setting to define the OIDN path should likely be added.

___

When trying to bake from a release export template compiled with `module_lightmapper_rd_enabled=yes module_xatlas_unwrap_enabled=yes`, I get a crash. Backtrace from gdb (as Godot's crash handler isn't working here for some reason):

```cpp
#0  RenderingDevice::_uniform_set_update_shared (this=this@entry=0x504d980, p_uniform_set=p_uniform_set@entry=0x0)
    at servers/rendering/rendering_device.cpp:2786
#1  0x000000000252e225 in RenderingDevice::draw_list_draw (this=0x504d980, p_list=<optimized out>, p_use_indices=true, p_instances=1, 
    p_procedural_vertices=0) at servers/rendering/rendering_device.cpp:4114
#2  0x00000000033a03f5 in RendererSceneRenderImplementation::RenderForwardClustered::_render_list_template<(RendererSceneRenderImplementation::RenderForwardClustered::PassMode)6, 0u> (this=0x4440000000b, p_draw_list=<optimized out>, p_framebuffer_Format=<optimized out>, 
    p_params=0x7fffffffaf90, p_from_element=0, p_to_element=<optimized out>)
    at servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.cpp:518
#3  RendererSceneRenderImplementation::RenderForwardClustered::_render_list(long, long, RendererSceneRenderImplementation::RenderForwardClustered::RenderListParameters*, unsigned int, unsigned int) [clone .constprop.0] (this=this@entry=0x6ccfba0, 
    p_draw_list=p_draw_list@entry=576460752303423488, p_framebuffer_Format=<optimized out>, p_params=p_params@entry=0x7fffffffaf90, 
    p_to_element=p_to_element@entry=1, p_from_element=0)
    at servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.cpp:573
#4  0x000000000270c819 in RendererSceneRenderImplementation::RenderForwardClustered::_render_uv2 (this=<optimized out>, p_instances=..., 
    p_framebuffer=..., p_region=...) at servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.cpp:2822
#5  0x0000000002689841 in RendererSceneRenderRD::bake_render_uv2 (this=0x6ccfba0, p_base=..., p_material_overrides=..., p_image_size=...)
    at ./core/math/vector2i.h:148
#6  0x00000000025f3a6a in RendererSceneCull::bake_render_uv2 (this=<optimized out>, p_base=..., p_material_overrides=..., p_image_size=...)
    at servers/rendering/renderer_scene_cull.cpp:4205
#7  RenderingServerDefault::bake_render_uv2 (this=this@entry=0x4ede8e0, p1=..., p2=..., p3=...)
    at servers/rendering/rendering_server_default.h:838
#8  0x00000000033deab0 in LightmapGI::_bake(Node*, String, bool (*)(float, String const&, void*, bool), void*) [clone .constprop.0] (
    this=this@entry=0x96c2ee0, p_from_node=p_from_node@entry=0x96382b0, p_image_data_path=..., p_bake_userdata=0x0, 
    p_bake_step=<optimized out>) at scene/3d/lightmap_gi.cpp:806
#9  0x000000000182338a in LightmapGI::bake (this=0x96c2ee0, p_from_node=0x96382b0, p_image_data_path=...) at scene/3d/lightmap_gi.cpp:740
#10 0x000000000181e0e1 in call_with_variant_args_ret_helper<__UnexistingClass, LightmapGI::BakeError, Node*, String, 0ul, 1ul> (
    p_instance=<optimized out>, p_method=<optimized out>, p_args=<synthetic pointer>, r_ret=..., r_error=...)
    at ./core/variant/binder_common.h:758
#11 call_with_variant_args_ret_dv<__UnexistingClass, LightmapGI::BakeError, Node*, String> (p_instance=<optimized out>, 
    p_method=<optimized out>, p_args=<optimized out>, p_argcount=<optimized out>, r_ret=..., r_error=..., default_values=...)
    at ./core/variant/binder_common.h:535
#12 MethodBindTR<LightmapGI::BakeError, Node*, String>::call (this=<optimized out>, p_object=<optimized out>, p_args=<optimized out>, 
    p_arg_count=<optimized out>, r_error=...) at ./core/object/method_bind.h:524
#13 0x00000000030abdb1 in Object::callp (this=0x96c2ee0, p_method=..., p_args=0x7fffffffbe28, p_argcount=2, r_error=...)
    at core/object/object.cpp:808
#14 0x0000000002e8c811 in Variant::callp (this=<optimized out>, p_method=..., p_args=0x7fffffffbe28, p_argcount=2, r_ret=..., r_error=...)
    at core/variant/variant_call.cpp:1211
#15 Variant::callp (this=<optimized out>, p_method=..., p_args=0x7fffffffbe28, p_argcount=2, r_ret=..., r_error=...)
--Type <RET> for more, q to quit, c to continue without paging--
    at core/variant/variant_call.cpp:1196
#16 0x00000000007a50ad in GDScriptFunction::call (this=<optimized out>, p_instance=<optimized out>, p_args=<optimized out>, 
    p_argcount=<optimized out>, r_err=..., p_state=<optimized out>) at modules/gdscript/gdscript_vm.cpp:1750
#17 0x0000000000656296 in GDScriptInstance::callp (this=0x965ac00, p_method=..., p_args=0x7fffffffc1e8, p_argcount=1, r_error=...)
    at modules/gdscript/gdscript.cpp:2032
#18 0x0000000001325742 in Node::_gdvirtual__process_call<false> (this=0x96382b0, arg1=0.0083333333333333332)
    at core/variant/variant.cpp:2474
#19 Node::_notification (this=0x96382b0, p_notification=<optimized out>) at scene/main/node.cpp:55
#20 0x000000000058683d in Node::_notificationv (this=<optimized out>, p_notification=<optimized out>, p_reversed=<optimized out>, 
    this=<optimized out>, p_notification=<optimized out>, p_reversed=<optimized out>) at ./scene/main/node.h:50
#21 Node3D::_notificationv (this=0x96382b0, p_notification=17, p_reversed=<optimized out>) at ./scene/3d/node_3d.h:52
#22 0x00000000035b8773 in Object::notification(int, bool) [clone .constprop.0] (this=0x96382b0, p_notification=17, p_reversed=false)
    at core/object/object.cpp:870
#23 0x0000000001378bf7 in SceneTree::_process_group (this=0x95cab60, p_group=<optimized out>, p_physics=false)
    at scene/main/scene_tree.cpp:962
#24 0x0000000001392ac6 in SceneTree::_process (this=this@entry=0x95cab60, p_physics=p_physics@entry=false)
    at scene/main/scene_tree.cpp:1039
#25 0x0000000001393562 in SceneTree::process (this=0x95cab60, p_time=0.0083333333333333332) at scene/main/scene_tree.cpp:526
#26 0x00000000004fa505 in Main::iteration () at main/main.cpp:4111
#27 0x0000000000478cc1 in OS_LinuxBSD::run (this=0x7fffffffc140) at platform/linuxbsd/os_linuxbsd.cpp:962
#28 OS_LinuxBSD::run (this=this@entry=0x7fffffffc730) at platform/linuxbsd/os_linuxbsd.cpp:945
#29 0x0000000000443582 in main (argc=<optimized out>, argv=0x7fffffffcd78) at platform/linuxbsd/godot_linuxbsd.cpp:85
```","2024-08-07T01:48:49Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-30T20:07:51Z",false,"APPROVED"
"AThousandShips","MEMBER","These cases make sense to me, and I trust the C# side with respect to any possible compatibility, unsure how these are handled there (as this doesn't affect GDScript in any major way, beyond hiding it)

How does this affect extensions? Does the flag affect anything or is the `_` already the controlling factor?

CC @dsnopek ","2024-07-30T17:59:51Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-27T21:12:24Z",false,"APPROVED"
"paulloz","MEMBER","","2024-09-22T09:43:45Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-08-28T10:25:40Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-10-07T23:24:46Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-31T22:55:08Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-08-26T03:10:53Z",false,"COMMENTED"
"ArshPanesar","CONTRIBUTOR","","2024-08-29T01:17:39Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-08-29T01:41:40Z",false,"COMMENTED"
"ArshPanesar","CONTRIBUTOR","","2024-08-30T16:41:47Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-09-02T03:20:22Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-02T08:32:24Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-30T08:24:04Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-31T17:12:04Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-08-01T04:11:25Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-01T08:17:54Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-08-01T08:19:33Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","This is nice as is, but I still stand by:

> Also may be worth documenting in more places other than this one setter (such as the corresponding getter, but there are likely more)","2024-08-01T09:35:47Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-08-06T02:19:01Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-30T10:35:47Z",false,"COMMENTED"
"floriansimon1","NONE","","2024-07-30T11:30:22Z",false,"COMMENTED"
"floriansimon1","NONE","","2024-07-30T11:31:11Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-30T09:12:10Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-07-30T21:33:24Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me, though I haven't tested yet.

It doesn't seem critical for 4.3 as it's not a regression in the end (and it's not trivial for users to run into it), so let's keep it for 4.4.","2024-07-31T13:51:59Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-30T09:04:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-30T11:06:53Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-07-30T21:36:22Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-31T08:11:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-31T21:12:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-30T08:25:15Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-07-30T09:39:16Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-29T13:03:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-29T13:05:55Z",false,"COMMENTED"
"ChrisBase","CONTRIBUTOR","","2024-07-29T13:22:57Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-19T08:37:08Z",false,"APPROVED"
"AThousandShips","MEMBER","This makes sense to me though TIWAGOS, ~to me especially the `load_task.cond_var->notify_all();` is a strong indicator that it should be unlocked at that point based on how condition variables work~ (realized this wasn't necessarily relevant either way, as there's nothing wrong with notifying while still locked, or while not locked, just affects some timing)

But my TIWAGOS would mainly apply to if there aren't any critical sections at all in that part, that much I can't speak to ","2024-07-29T13:33:49Z",false,"DISMISSED"
"akien-mga","MEMBER","Cautiously approving as I don't really understand that code, but know RandomShaper does. More eyes welcome on this, would probably merge soon to include this in 4.3 RC2.","2024-07-30T16:05:40Z",false,"APPROVED"
"AThousandShips","MEMBER","Not familiar with the details in this section but nothing looks obviously weird here, and these parts don't necessarily look like a critical section so should be safe, but TIWAGOS","2024-07-30T16:08:10Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-29T09:32:04Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-29T08:59:45Z",false,"APPROVED"
"fire","MEMBER","","2024-07-29T20:33:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-30T09:17:43Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-07-30T09:21:19Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-30T09:26:54Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-30T09:30:06Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","LGTM, and resolves the issue we had with triplannar UVs in XR tools","2024-07-30T00:01:44Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-29T17:44:25Z",false,"COMMENTED"
"Chaosus","MEMBER","LGTM","2024-07-29T15:31:43Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-29T05:00:04Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-07-29T13:23:38Z",false,"APPROVED"
"clayjohn","MEMBER","Looks fine to me. 

Thank you for the clarification!","2024-09-09T15:53:06Z",false,"APPROVED"
"dalexeev","MEMBER","Looks good to me.","2024-07-29T13:14:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-29T09:25:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-29T13:44:26Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-29T13:44:38Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-29T08:36:12Z",false,"COMMENTED"
"gturri","CONTRIBUTOR","","2024-07-29T09:30:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-29T09:34:20Z",false,"COMMENTED"
"KoBeWi","MEMBER","I wonder if `get_progress_ratio()` should also have similar error. Technically this will fail silently too:
```GDScript
myPathFollow2D.progress = 100
print(myPathFollow2D.progress_ratio) # 0
```","2024-08-05T12:14:43Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-08-30T11:33:05Z",false,"COMMENTED"
"gturri","CONTRIBUTOR","","2024-08-30T12:30:45Z",false,"COMMENTED"
"akien-mga","MEMBER","Makes sense to me.

I force pushed an amend of the commit to make it match the PR title, which is more informative.","2024-09-04T16:06:50Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-28T18:33:47Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-10-04T20:32:04Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-28T16:08:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-29T12:59:13Z",false,"APPROVED"
"HolonProduction","MEMBER","","2024-09-13T09:15:42Z",false,"COMMENTED"
"fire","MEMBER","looks ok.","2024-07-29T20:41:01Z",false,"COMMENTED"
"aaronfranke","MEMBER","Makes sense to me. I did not test it.","2024-10-10T04:26:52Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-11T17:03:39Z",false,"COMMENTED"
"fire","MEMBER","","2024-10-11T18:09:27Z",false,"APPROVED"
"vnen","MEMBER","Looks okay to me. Tested with the repro project and it works. Also nice to have some tests.","2024-07-29T18:09:21Z",false,"DISMISSED"
"akien-mga","MEMBER","Thanks @rune-scape for the quick turnaround and everyone involved in testing!

Let's give this another spin for 4.3.rc2 :)","2024-07-31T20:32:03Z",false,"APPROVED"
"adamscott","MEMBER","I think we can handle this case more gracefully than a try/catch. I'll try something in the following hour.","2024-07-29T13:42:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-29T14:04:46Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-07-29T16:40:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-29T16:42:19Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-07-29T17:56:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-29T17:58:57Z",false,"COMMENTED"
"adamscott","MEMBER","Great work @AThousandShips. I didn't know that it was the WebAudio gain node that was complaining about `Infinity`.

So, everything's good, I'll add a warning later, that I must implement in the JS stack.","2024-07-29T18:58:16Z",false,"APPROVED"
"RandomShaper","MEMBER","LGTM. TIWAGOS, though.","2024-09-25T11:06:49Z",false,"APPROVED"
"KoBeWi","MEMBER","Doesn't seem to break anything.
Note that it uses some `std` stuff though.","2024-09-25T12:00:02Z",false,"APPROVED"
"vlandemart","NONE","Tiny changes, seem correct","2024-07-28T14:16:58Z",false,"APPROVED"
"Calinou","MEMBER","Looks good to me.","2024-09-16T23:56:17Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-17T11:46:19Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-28T08:43:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-28T08:02:12Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-13T19:13:46Z",false,"APPROVED"
"raulsntos","MEMBER","Nice catch, thanks!","2024-07-28T01:51:20Z",false,"APPROVED"
"adamscott","MEMBER","","2024-07-27T21:27:04Z",false,"APPROVED"
"mostafa4443","NONE","","2024-07-27T21:52:34Z",false,"APPROVED"
"bruvzg","MEMBER","Not sure if README is up-to-date, but seems like sanitizers have some limitations:

> - Address Sanitizer doesn't produce working backtraces for i686.
> - The sanitizers are only supported on x86.

So we probably should have `env[""arch""]` checks when enabling it.","2024-07-27T20:47:05Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-07-31T06:53:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-27T21:14:08Z",false,"APPROVED"
"raulsntos","MEMBER","Nice catch, thanks!

The typo was introduced by https://github.com/godotengine/godot/pull/69451 which was merged recently so no need to cherry-pick.","2024-07-28T03:51:16Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-07-28T10:10:29Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/02b16d2f544e323b7b7f57e6e992b0b8e5d8b954) on Windows 11 23H2 with VS Code's integrated terminal, it works as expected.","2024-09-17T14:12:19Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-27T14:38:01Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-30T16:37:59Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-27T14:43:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-27T13:59:18Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-07-29T10:47:55Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks! This makes sense to me :-)","2024-08-07T20:48:06Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-16T07:27:58Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-27T08:23:30Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-27T18:30:19Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-27T20:06:41Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","Nice improvement! Looks good to me :)","2024-07-27T01:40:42Z",false,"APPROVED"
"Geometror","MEMBER","","2024-07-30T10:25:08Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-07-26T22:34:29Z",false,"COMMENTED"
"ChrisBase","CONTRIBUTOR","","2024-07-26T22:48:30Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-07-26T23:00:08Z",false,"COMMENTED"
"ChrisBase","CONTRIBUTOR","","2024-07-26T23:27:42Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","Looks good, thanks for the fix!","2024-07-26T23:56:27Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM!","2024-07-26T17:04:40Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-26T16:03:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-26T16:31:41Z",false,"COMMENTED"
"dbnicholson","NONE","","2024-07-26T16:40:20Z",false,"COMMENTED"
"dbnicholson","NONE","","2024-07-26T16:42:03Z",false,"COMMENTED"
"dbnicholson","NONE","","2024-07-26T16:47:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-26T16:48:35Z",false,"COMMENTED"
"dbnicholson","NONE","","2024-07-26T16:54:55Z",false,"COMMENTED"
"akien-mga","MEMBER","Seems fine to me if it works.

I checked the blame and this call was added deferred in 2018 by @vnen in 55b4b30ab29a85e4af7c2f10494cfdd0e7bccc46, I don't know if you remember why it had to be deferred or if this was done just in case.","2024-08-12T10:25:57Z",false,"APPROVED"
"RandomShaper","MEMBER","Looks great. Just little style changes and we're good to go.","2024-07-30T10:54:47Z",false,"CHANGES_REQUESTED"
"RandomShaper","MEMBER","","2024-08-02T07:07:30Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-26T14:13:54Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-26T13:42:35Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-08-06T02:34:49Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-16T08:11:25Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-08-16T16:34:10Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-16T21:02:23Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-26T13:28:29Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-26T14:08:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-10T12:59:01Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-07-27T08:01:32Z",false,"APPROVED"
"kus04e4ek","CONTRIBUTOR","","2024-07-27T08:19:05Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-29T13:13:03Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM, internal and unused","2024-07-26T11:22:16Z",false,"APPROVED"
"adamscott","MEMBER","The builds and tests passed. Looks good to me.","2024-07-28T18:15:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-26T10:41:41Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-26T10:21:33Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/88d9325065a3e00e9e168ffad4ff93e12455a357), it works as expected.

Example with a new StandardMaterial3D converted to ShaderMaterial:

Before | After
-|-
![image](https://github.com/user-attachments/assets/4aee3c52-f5ae-431f-b681-c4aa21a9ecba) | ![image](https://github.com/user-attachments/assets/302ebe0d-af80-4714-b70c-58504554ecbf)","2024-07-28T21:13:30Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-28T21:14:01Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-07-29T06:19:27Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-07-26T08:27:58Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-07-26T09:00:53Z",false,"COMMENTED"
"aaronfranke","MEMBER","Looks good to me. I did not test it but the code makes sense and is quite straightforward. The new `validate_blend_shape_name` is nearly identical to `AnimationLibrary::validate_library_name`.","2024-09-06T23:06:20Z",false,"APPROVED"
"fire","MEMBER","","2024-09-11T18:39:18Z",false,"APPROVED"
"akien-mga","MEMBER","This code is really hacky, we'll need to refactor this and do it more properly in the future.

But for now this seems fine to solve the regression.","2024-07-26T09:54:01Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-17T09:44:25Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-17T09:46:39Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-08-17T10:33:30Z",false,"COMMENTED"
"raulsntos","MEMBER","Thanks for contributing to the .NET module! The changes look good to me, just a minor nit-pick.","2024-07-26T11:52:49Z",false,"COMMENTED"
"Z0rb14n","CONTRIBUTOR","","2024-07-26T16:06:31Z",false,"COMMENTED"
"raulsntos","MEMBER","Looks good to me, thanks!","2024-07-28T04:29:42Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-25T22:38:07Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-10-10T03:16:15Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

**Testing project:** [test-tree.zip](https://github.com/user-attachments/files/16385321/test-tree.zip)

## Benchmark

Using an optimized editor build (MSVC 2022 `optimize=speed`). Running the MRP above which contains the first code sample from OP.

Before | After
-|-
745 ms | 38 ms

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Windows 11 23H2
</details>","2024-07-26T01:02:03Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-26T07:56:55Z",false,"COMMENTED"
"aaronp64","CONTRIBUTOR","","2024-07-27T14:03:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-03T14:33:39Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected (Windows 11 23H2, LLVM 17.0.6 from https://github.com/mstorsjo/llvm-mingw/releases/tag/20231128). The resulting binary runs correctly.","2024-07-25T23:25:57Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-08-28T09:47:38Z",false,"COMMENTED"
"alvinhochun","CONTRIBUTOR","","2024-08-28T09:56:59Z",false,"COMMENTED"
"alvinhochun","CONTRIBUTOR","","2024-08-28T10:19:29Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-08-28T10:26:55Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","","2024-07-25T20:50:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-26T08:04:07Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","The changes fix the previously outdated statement.","2024-07-26T14:58:52Z",false,"APPROVED"
"rune-scape","CONTRIBUTOR","","2024-07-28T08:21:36Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-26T13:10:55Z",false,"APPROVED"
"Giganzo","CONTRIBUTOR","I did see EDSCALE (stands for editor scale?) is used on borders and such thing in the editor. Should that be applied here?

And should vertical and horizontal_padding be change to a Size2?","2024-07-26T08:20:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-27T09:13:23Z",false,"COMMENTED"
"Giganzo","CONTRIBUTOR","","2024-07-27T09:20:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-27T09:23:05Z",false,"COMMENTED"
"Giganzo","CONTRIBUTOR","","2024-07-27T09:24:05Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-25T14:18:15Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-25T14:29:58Z",false,"COMMENTED"
"fire","MEMBER","Can be cherry picked when we've tested more.","2024-07-25T16:22:25Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-07-25T12:21:09Z",false,"COMMENTED"
"aitorciki","CONTRIBUTOR","","2024-07-25T12:28:34Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-07-25T12:32:39Z",false,"COMMENTED"
"aitorciki","CONTRIBUTOR","","2024-07-25T12:35:45Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-25T12:53:29Z",false,"APPROVED"
"DarioSamo","CONTRIBUTOR","","2024-07-25T12:59:05Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-07-25T13:03:16Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-07-25T13:04:09Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-07-25T13:05:18Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","Looks fine to me, it'd just be nice to have the comment about the specification quirk regarding the all subresources value stated directly in the code itself.","2024-07-25T13:08:19Z",false,"APPROVED"
"DarioSamo","CONTRIBUTOR","Looks good to me!","2024-07-25T13:12:58Z",false,"APPROVED"
"vnen","MEMBER","LGTM","2024-07-25T18:56:19Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-29T15:21:51Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-25T21:32:07Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-07-25T21:43:21Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-07-26T03:59:12Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

https://github.com/user-attachments/assets/4c769a8b-7aba-4808-a2dd-dcd503827c46

I've also opened a proposal which relates to this PR a bit: https://github.com/godotengine/godot-proposals/issues/10311","2024-07-29T10:45:54Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-08-16T00:20:53Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-25T07:25:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-25T06:56:47Z",false,"COMMENTED"
"Geometror","MEMBER","In which cases does the regression appear? Could you upload an minimal reproduction project?","2024-07-27T08:13:28Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-25T06:54:12Z",false,"COMMENTED"
"noidexe","CONTRIBUTOR","","2024-07-25T07:42:50Z",false,"COMMENTED"
"noidexe","CONTRIBUTOR","","2024-07-25T17:03:53Z",false,"COMMENTED"
"Faless","COLLABORATOR","Thank you for looking into this!

I believe the fix is correct, and I've tested it successfully with Chrome on Linux.

Other mapping are not affected since the changes only apply to gamepads with a ""standard"" mapping (according to the W3C spec).

One thing to note, is that almost all my controllers had an incorrect ""standard"" mapping reported by Firefox on Linux. This seems to be a Firefox issues, since after [testing here](https://hardwaretester.com/gamepad) the mapping is indeed reported as ""standard"" while not being standard-complaint (bindings are all over the place).

We might want to report that to upstream Firefox but there are quite a few reports already: https://bugzilla.mozilla.org/buglist.cgi?quicksearch=gamepad .","2024-08-09T12:37:11Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-07-25T06:27:15Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-25T10:52:35Z",false,"COMMENTED"
"thadguidry","CONTRIBUTOR","","2024-07-25T12:05:42Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-07-25T21:34:07Z",false,"COMMENTED"
"thadguidry","CONTRIBUTOR","","2024-07-26T00:52:20Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-07-26T01:34:57Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-26T07:18:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-25T06:45:07Z",false,"APPROVED"
"clayjohn","MEMBER","Great! Thank you","2024-07-24T19:46:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-24T19:13:07Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-07-25T08:49:58Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-24T16:13:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-24T17:06:30Z",false,"COMMENTED"
"fstxz","CONTRIBUTOR","","2024-07-24T17:10:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","I've confirmed the bug and confirmed that this PR works correctly in both modes (i.e. doesn't regress with the single tree mode selected)

I'd say the expected behavior is that the list of files is returned, but the option of including the folder as well might be considered, though I think we can go with this and see what we might want later as well (we could add a note to the documentation clarifying what exactly is returned, elaborating that it returns just the files selected in split mode)

Approving on that this works and the code looks good, might be a more elegant solution but I'm not familiar with the code here so can't speak to that","2024-07-25T13:41:25Z",false,"APPROVED"
"KoBeWi","MEMBER","Seems like it's possible to multi-select in tree in split view, so maybe all selected directories should be returned ü§î
But this way it's fine too.","2024-08-17T16:13:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-24T16:11:52Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-08-17T23:39:28Z",false,"COMMENTED"
"aaronp64","CONTRIBUTOR","","2024-08-18T14:29:44Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-18T16:23:23Z",false,"COMMENTED"
"aaronp64","CONTRIBUTOR","","2024-08-18T23:53:47Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-22T09:46:03Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","Everything sounds good to me.","2024-08-31T01:09:45Z",false,"APPROVED"
"akien-mga","MEMBER","Code changes make sense to me.","2024-08-31T08:56:15Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM","2024-07-24T14:35:20Z",false,"DISMISSED"
"AThousandShips","MEMBER","","2024-07-24T13:24:14Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-07-24T13:56:02Z",false,"COMMENTED"
"jonatanrojderd","CONTRIBUTOR","","2024-07-24T15:43:30Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-26T16:23:10Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-07-26T16:29:17Z",false,"COMMENTED"
"jonatanrojderd","CONTRIBUTOR","","2024-07-26T16:41:36Z",false,"COMMENTED"
"raulsntos","MEMBER","Looks good to me, thanks!

You'll need to squash the commits before this PR can be merged. The [contributing documentation](https://docs.godotengine.org/en/latest/contributing/workflow/pr_workflow.html#the-interactive-rebase) contains information about squashing in case you need it.

Feel free to reach out in the [development chat](https://chat.godotengine.org) if you need help.","2024-08-11T16:45:59Z",false,"APPROVED"
"AThousandShips","MEMBER","Looks good code wise otherwise, but not my area so can't speak for functionality ","2024-07-25T08:30:29Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-25T08:37:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-25T13:48:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","Approving on code fundamentals, still need a team review for the functionality as this isn't my area","2024-07-25T13:51:25Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-02T08:36:48Z",false,"COMMENTED"
"Musicgun47","CONTRIBUTOR","","2024-09-02T12:37:51Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-16T09:39:19Z",false,"COMMENTED"
"Musicgun47","CONTRIBUTOR","","2024-09-16T11:26:22Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-16T11:36:22Z",false,"COMMENTED"
"Musicgun47","CONTRIBUTOR","","2024-09-16T11:58:23Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-16T13:23:26Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-07-29T09:38:24Z",false,"APPROVED"
"fire","MEMBER","Wow thanks for looking into this bug from so many years ago!","2024-07-24T05:20:26Z",false,"COMMENTED"
"fire","MEMBER","","2024-07-24T06:10:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-23T22:31:28Z",false,"APPROVED"
"raulsntos","MEMBER","I didn't realize we were using the `GodotSharp` singleton for these checks. Why are we checking .NET support like this, instead of something like `#ifdef MODULE_MONO_ENABLED`?

Also, in the macOS export plugin we probably should only enable the required entitlements when exporting a project with C#, since .NET builds can also export projects that don't use C# at all. Is it possible to set the preset options from an `EditorExportPlugin`[^1]? If so, we can just do that in [`ExportPlugin.cs`](https://github.com/godotengine/godot/blob/master/modules/mono/editor/GodotTools/GodotTools/Export/ExportPlugin.cs) after we check that the project contains C#.

Anyway this would be follow-up work. For the 4.3 release, checking the `CSharpScript` class should work to fix the immediate regression.

[^1]: Maybe this requires https://github.com/godotengine/godot/pull/90782","2024-07-24T05:01:19Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-23T22:38:37Z",false,"APPROVED"
"akien-mga","MEMBER","I'm no GDScript expert but it looks simple enough, and as it's a regression fix I'd like it included in the imminent 4.3 RC 1 build.

Post-merge review from the GDScript team would still be welcome.","2024-07-24T07:55:59Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-23T22:41:00Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-07-23T20:51:17Z",false,"APPROVED"
"akien-mga","MEMBER","This looks fairly clean to me and there's a thorough test case, so I'll go ahead and merge as I'm preparing a 4.3.rc1 build.

Still worth a check by @vnen post-merge though.","2024-07-24T08:17:39Z",false,"APPROVED"
"vnen","MEMBER","Makes sense to me","2024-07-24T14:04:24Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-24T09:05:27Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-07-24T12:25:46Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-23T22:44:26Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-23T17:58:47Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-07-23T20:49:45Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-19T10:44:58Z",false,"APPROVED"
"HolonProduction","MEMBER","Have tested it locally and it indeed fixes the issue. Code makes sense as well.

The usage of `get_constructor_string` also fixes quotes around reduced string values not showing properly. Though I doubt there is an issue about it, since we only show the reduced value in the subscript case, speaking of which, maybe you could copy this `is_constant && reduced` condition to the `IDENTIFIER` case, to avoid a one line PR for that in the future.

Also I think it would be nice to have some unit tests for this, the completion test runner can check the argument hint. But given that there aren't any tests at all for argument hints, we could also just merge the fix as is and I'll work on a complete set of tests for argument hints.","2024-07-23T18:14:19Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-24T07:41:14Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-07-23T15:56:55Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-24T20:56:59Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-23T13:11:35Z",false,"APPROVED"
"adamscott","MEMBER","","2024-07-23T12:13:51Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-23T12:32:20Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good.

You can also update the docs for the GDExtension equivalent:
```diff
diff --git a/doc/classes/PhysicsServer2DExtension.xml b/doc/classes/PhysicsServer2DExtension.xml
index 41826ea7c2..07c65915c6 100644
--- a/doc/classes/PhysicsServer2DExtension.xml
+++ b/doc/classes/PhysicsServer2DExtension.xml
@@ -713,7 +713,7 @@
 			<param index=""1"" name=""callable"" type=""Callable"" />
 			<description>
 				Assigns the [param body] to call the given [param callable] during the synchronization phase of the loop, before [method _step] is called. See also [method _sync].
-				Overridable version of [PhysicsServer2D]'s internal [code]body_set_state_sync_callback[/code] method.
+				Overridable version of [method PhysicsServer2D.body_set_state_sync_callback].
 			</description>
 		</method>
 		<method name=""_body_test_motion"" qualifiers=""virtual const"">
```
(there's no docs for `PhysicsServer3DExtension` yet)","2024-07-23T11:23:39Z",false,"APPROVED"
"rburing","MEMBER","","2024-07-23T11:28:25Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","","2024-07-23T13:59:35Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-07-23T10:25:43Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me.

As pointed out on RC, according to https://github.com/llvm/llvm-project/issues/91224#issuecomment-2097883777, this might also be relevant for modern x86 architectures (possibly conditional to explicitly setting a modern target).

At least this quick test seems to confirm that clang trunk by default behaves like `-ffp-contract=on` on x86-64: https://clang.godbolt.org/z/GjfzrM1Yo

So maybe we should disable it unconditionally for all arches?","2024-07-23T11:15:29Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-23T11:39:04Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-23T13:15:57Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM save for a small nitpick","2024-07-23T08:27:49Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-22T18:52:38Z",false,"APPROVED"
"aaronfranke","MEMBER","Tested, this fixes the bug.","2024-07-22T22:31:11Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-22T19:49:33Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-07-23T07:03:22Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-07-23T17:33:43Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-22T16:48:30Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-22T16:48:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","Makes sense","2024-07-22T17:07:47Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-22T19:43:57Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-22T13:54:09Z",false,"APPROVED"
"bypie5","NONE","","2024-07-23T05:03:36Z",false,"COMMENTED"
"Giganzo","CONTRIBUTOR","","2024-07-23T08:34:58Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-07-24T11:30:35Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-22T12:48:06Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-22T12:43:52Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-22T13:30:41Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-07-23T07:53:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-23T08:31:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-23T09:23:29Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-07-23T11:50:38Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-23T12:37:26Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-23T14:26:47Z",false,"COMMENTED"
"akien-mga","MEMBER","Approving as I tested it fixes the bug, and I need it for 4.3 RC 1.
Discussion can continue post-merge on implementation details.","2024-07-24T07:53:34Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-22T10:25:04Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-07-22T10:31:21Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-22T11:28:18Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-07-22T11:29:01Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-07-22T12:41:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-22T08:29:20Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-22T19:04:42Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-07-22T12:53:25Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-22T17:09:13Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

**Testing project:** [test_pr_94609.zip](https://github.com/user-attachments/files/16350922/test_pr_94609.zip)

Fonts detected as pixel art within the project:

Font file | Is pixel art?
-|-
bedstead-condensed | Non-pixel
bedstead-extended | Non-pixel
bedstead-extracondensed | Non-pixel
bedstead-semicondensed | Non-pixel
bedstead-ultracondensed | Non-pixel
CommitMono-400-Italic | Non-pixel
CommitMono-400-Regular | Non-pixel
CommitMono-700-Italic | Non-pixel
CommitMono-700-Regular | Non-pixel
Kenney Pixel Square | **Pixel**
Kenney Pixel | **Pixel**
PixelOperator | **Pixel**
PixelOperator-Bold | **Pixel**
PixelOperator8 | **Pixel**
PixelOperator8-Bold | **Pixel**
PixelOperatorHB | **Pixel**
PixelOperatorHB8 | **Pixel**
PixelOperatorHBSC | **Pixel**
PixelOperatorMono | **Pixel**
PixelOperatorMono-Bold | **Pixel**
PixelOperatorMono8 | **Pixel**
PixelOperatorMono8-Bold | **Pixel**
PixelOperatorMonoHB | **Pixel**
PixelOperatorMonoHB8 | **Pixel**
PixelOperatorSC | **Pixel**
PixelOperatorSC-Bold | **Pixel**
TerminusTTF-4.49.3 | **Pixel**
TerminusTTF-Bold-4.49.3 | **Pixel**
TerminusTTF-Bold-Italic-4.49.3 | **Pixel**
TerminusTTF-Italic-4.49.3 | **Pixel**
spleen-12x24 | **Pixel**
spleen-16x32 | **Pixel**
spleen-32x64 | **Pixel**
spleen-6x12 | **Pixel**
spleen-8x16 | **Pixel**
terminal-grotesque | **Pixel**

All detections are OK.","2024-07-23T15:19:10Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-23T15:22:55Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-22T07:26:42Z",false,"APPROVED"
"Jordyfel","CONTRIBUTOR","","2024-07-21T22:34:23Z",false,"COMMENTED"
"Jordyfel","CONTRIBUTOR","","2024-07-21T22:39:10Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-07-22T07:11:03Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-10T09:38:09Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-07-23T17:13:25Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-07-24T05:01:45Z",false,"COMMENTED"
"juanjp600","CONTRIBUTOR","","2024-07-24T05:21:08Z",false,"COMMENTED"
"raulsntos","MEMBER","Looks good to me, thanks!","2024-07-25T17:10:48Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-21T19:48:14Z",false,"APPROVED"
"fire","MEMBER","","2024-07-22T03:28:12Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-21T20:01:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-21T19:49:43Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good. Thanks for tracking this down!","2024-07-22T13:00:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-16T11:47:30Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-16T11:57:17Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-21T14:49:21Z",false,"APPROVED"
"akien-mga","MEMBER","Looks correct, `setup2` has its own benchmark.","2024-07-22T12:04:32Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-21T09:24:09Z",false,"COMMENTED"
"citizenll","CONTRIBUTOR","","2024-07-21T11:22:16Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-01T13:29:48Z",false,"COMMENTED"
"citizenll","CONTRIBUTOR","","2024-08-01T13:59:21Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-01T14:26:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-02T13:02:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-02T13:03:25Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-02T13:13:25Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-02T13:52:15Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-02T13:54:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-02T13:56:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-02T13:57:25Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-02T14:08:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-02T14:09:58Z",false,"COMMENTED"
"citizenll","CONTRIBUTOR","","2024-08-02T14:17:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-20T14:15:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-20T14:49:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-20T14:50:51Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-20T14:51:53Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-20T14:52:27Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-20T14:53:08Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-01T20:03:35Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-01T20:37:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-01T20:54:16Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-01T20:54:29Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-01T20:55:59Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-01T21:05:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","I think functionality-wise it's ok now and the implementation is good enough. It can be merged once you address some last comments.","2024-09-01T21:07:21Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-02T08:30:45Z",false,"APPROVED"
"citizenll","CONTRIBUTOR","","2024-09-02T09:52:54Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","Left some comments for reviewers.","2024-07-21T08:35:48Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-07-21T08:38:40Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-07-21T08:39:17Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-21T20:00:09Z",false,"APPROVED"
"kitbdev","CONTRIBUTOR","","2024-07-22T00:27:36Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-20T13:46:03Z",false,"APPROVED"
"tomfull123","NONE","Looks good to me","2024-07-21T00:33:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-22T07:53:31Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

While testing, I found another bug: https://github.com/godotengine/godot/issues/94567","2024-07-21T03:09:14Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great!","2024-07-22T19:58:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-20T13:49:33Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

**Testing project:** [test_pr_94558.zip](https://github.com/user-attachments/files/16368402/test_pr_94558.zip)

## Benchmark

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 40)
</details>

Using an `optimize=speed lto=full` editor build.

Time taken to format the string 1 million times from GDScript (as a standalone expression):

```gdscript
""%d FPS (%.2f mspf)"" % [Engine.get_frames_per_second(), 1000.0 / Engine.get_frames_per_second()]
```

Before | After
-|-
1.009s | 0.679s","2024-07-24T23:40:08Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-24T23:48:23Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-20T14:03:52Z",false,"APPROVED"
"clayjohn","MEMBER","Looks amazing! Thank you very much","2024-07-22T19:51:24Z",false,"APPROVED"
"fire","MEMBER","","2024-07-19T23:45:10Z",false,"COMMENTED"
"fire","MEMBER","","2024-07-19T23:45:37Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-07-20T00:07:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-20T08:26:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-20T08:26:54Z",false,"COMMENTED"
"fire","MEMBER","Given floating point error, ""an approximation is always needed when comparing"" time values.

I am not sure the approx object idea is developed enough to use and it would require extra bindings, probably need to separately implement with a design proposal.","2024-07-22T19:19:31Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-22T19:47:21Z",false,"COMMENTED"
"fire","MEMBER","","2024-07-23T20:39:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-24T07:40:21Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

I made a complete MRP from #68935 for easier testing: [gizmo_selection_issue.zip](https://github.com/user-attachments/files/16323095/gizmo_selection_issue.zip)
","2024-07-21T07:15:21Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-21T08:50:50Z",false,"APPROVED"
"juanjp600","CONTRIBUTOR","","2024-07-21T16:36:38Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-07-19T22:23:23Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-07-20T00:05:17Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","lgtm","2024-07-20T04:45:44Z",false,"APPROVED"
"jamie-pate","CONTRIBUTOR","It looks like we should use `reserve()` ~~instead~~ as well as `resize()` here..
`reserve()` with the padding, after `resize()` without padding.

~~Also, upon further inspection I suspect this buffer may cause [this error](https://github.com/RenderKit/embree/blob/5730b150471602d6dc02d9b7d8a4a6ce9ceffe16/kernels/common/scene_points.cpp#L47C1-L48C83):
`throw_RTCError(RTC_ERROR_INVALID_OPERATION, ""data must be 4 bytes aligned"");`
on 32 bit systems that don't align their malloc to 16 bytes!!!~~

~~Even worse: this would only fail on release builds since debug builds automatically add padding to align to `sizeof(uint64_t)`~~ (it's fine, see my next comment)","2024-07-22T19:33:42Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-20T14:05:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-19T18:54:58Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-07-19T19:37:49Z",false,"APPROVED"
"clayjohn","MEMBER","Great work tracking this down. 

It seems that  `sdfgi_update_data` is often nullptr when drawing with canvas background enabled. In those cases, we can't use SDFGI anyway, so as much of the work from SDFGI should be skipped as possible","2024-07-19T16:12:04Z",false,"COMMENTED"
"Garteal","CONTRIBUTOR","","2024-07-19T16:29:50Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-07-19T18:07:38Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great! Thank you for your quick response and for catching this one","2024-07-19T19:55:52Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.","2024-07-19T20:24:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-19T11:53:57Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-19T09:43:28Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected. I can't reproduce the issue originally reported in https://github.com/godotengine/godot/issues/94185 though, even when using the same window size and editor settings.

Note that the increased character margin for drag scrolling can make it harder to select text that is close to the end of line:

https://github.com/user-attachments/assets/f2d2b860-7af8-4347-aa0d-4711db196f8a

Not that this operation is straightforward in any editor I've used, but some people may find this more frustrating than the current situation where the drag margin is less wide by 1 character. (This is why I'd advocate for having soft wrapping enabled by default :slightly_smiling_face:)
","2024-07-21T02:47:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-19T08:37:33Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-19T08:46:10Z",false,"APPROVED"
"akien-mga","MEMBER","TIWAGOSu[^1]!

[^1]: Taking It With A Grain Of Sugar, sweet sweet safe subset :relieved: ","2024-07-19T08:24:01Z",false,"APPROVED"
"AThousandShips","MEMBER","These look reasonable","2024-07-19T08:29:33Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-19T09:45:53Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Not against this, actually. Due of all Variants being allowed, there's no real ""most common option"" that could be argued should appear at the top. Makes removing items a breeze, too.

Only concern is how this PR will interact with https://github.com/godotengine/godot/pull/78656.","2024-08-27T22:57:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-28T06:40:41Z",false,"APPROVED"
"clayjohn","MEMBER","Well, I don't know anything about physics, but I feel comfortable approving this one...","2024-07-19T04:57:41Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good, this was clearly a typo. The 2D physics code is already correct and exactly the same as what this PR changes 3D to.

Now I wonder what other open issues this might fix.","2024-07-19T08:33:13Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-18T21:57:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-22T08:36:35Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-28T12:40:10Z",false,"APPROVED"
"vnen","MEMBER","","2024-07-24T17:34:16Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-07-24T19:39:46Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-27T14:16:11Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-18T13:04:18Z",false,"APPROVED"
"akien-mga","MEMBER","Seems like an easy win worth having for the sake of complex projects.","2024-07-18T12:48:02Z",false,"APPROVED"
"adamscott","MEMBER","","2024-07-18T12:57:02Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, I get a crash on startup with the message `Segmentation fault` when the project manager starts (the crash handler doesn't run). The window is created, but it only ever renders black before crashing a second later.

Vulkan-based rendering methods work fine with the same binary I compiled. I used MSVC 2022 to compile Godot.

WinDbg says:

```
(3bf0.175c): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
nvwgf2umx!NVAPI_DirectMethods+0x6594d:
00007fff`a77254ed 488b12          mov     rdx,qword ptr [rdx] ds:feeefeee`feeefeee=????????????????
```

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090 (driver 555.85)
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Windows 11 23H2
</details>","2024-07-18T23:50:22Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally again, it mostly works as expected.

The main issue I noticed is that saving scenes will crash the editor when using the Compatibility rendering method. I couldn't consistently reproduce this though - it only happened once.

I tested this on the [Material Testers demo](https://github.com/godotengine/godot-demo-projects/tree/master/3d/material_testers) after switching it to use the Compatibility rendering method:

```
ERROR: Wait for frame latency waitable failed, WaitForSingleObject returned 0x00000102
   at: GLManagerNative_Windows::DxgiSwapChain::present (platform\windows\gl_manager_windows_native.cpp:1623)
ERROR: Wait for frame latency waitable failed, WaitForSingleObject returned 0x00000102
   at: GLManagerNative_Windows::DxgiSwapChain::present (platform\windows\gl_manager_windows_native.cpp:1623)
ERROR: Present failed, HRESULT: 0x887A0005
   at: GLManagerNative_Windows::DxgiSwapChain::present (platform\windows\gl_manager_windows_native.cpp:1631)
ERROR: Failed to connect D3D11 color buffer to WGL for interop. Error: Error 3221684334:
   at: GLManagerNative_Windows::DxgiSwapChain::setup_render_target (platform\windows\gl_manager_windows_native.cpp:1467)

================================================================
CrashHandlerException: Program crashed
Engine version: Godot Engine v4.3.beta.custom_build (0d88147bdb5e4b3e74505c9318e3e9d0a830b111)
Dumping the backtrace. Please include this when reporting the bug to the project developer.
[0] <couldn't map PC to fn name>
[1] <couldn't map PC to fn name>
[2] <couldn't map PC to fn name>
[3] GLManagerNative_Windows::DxgiSwapChain::lock_for_opengl (C:\Users\Hugo\Documents\Git\godotengine\godot\platform\windows\gl_manager_windows_native.cpp:1526)
[4] GLManagerNative_Windows::DxgiSwapChain::present (C:\Users\Hugo\Documents\Git\godotengine\godot\platform\windows\gl_manager_windows_native.cpp:1637)
[5] GLManagerNative_Windows::swap_buffers (C:\Users\Hugo\Documents\Git\godotengine\godot\platform\windows\gl_manager_windows_native.cpp:856)
[6] DisplayServerWindows::swap_buffers (C:\Users\Hugo\Documents\Git\godotengine\godot\platform\windows\display_server_windows.cpp:3049)
[7] RasterizerGLES3::end_viewport (C:\Users\Hugo\Documents\Git\godotengine\godot\drivers\gles3\rasterizer_gles3.cpp:116)
[8] RendererViewport::draw_viewports (C:\Users\Hugo\Documents\Git\godotengine\godot\servers\rendering\renderer_viewport.cpp:832)
[9] RenderingServerDefault::_draw (C:\Users\Hugo\Documents\Git\godotengine\godot\servers\rendering\rendering_server_default.cpp:88)
[10] RenderingServerDefault::draw (C:\Users\Hugo\Documents\Git\godotengine\godot\servers\rendering\rendering_server_default.cpp:410)
[11] Main::iteration (C:\Users\Hugo\Documents\Git\godotengine\godot\main\main.cpp:4118)
[12] ProgressDialog::_update_ui (C:\Users\Hugo\Documents\Git\godotengine\godot\editor\progress_dialog.cpp:134)
[13] ProgressDialog::task_step (C:\Users\Hugo\Documents\Git\godotengine\godot\editor\progress_dialog.cpp:225)
[14] EditorNode::progress_task_step (C:\Users\Hugo\Documents\Git\godotengine\godot\editor\editor_node.cpp:4876)
[15] EditorProgress::step (C:\Users\Hugo\Documents\Git\godotengine\godot\editor\editor_node.h:949)
[16] EditorNode::_save_scene_with_preview (C:\Users\Hugo\Documents\Git\godotengine\godot\editor\editor_node.cpp:1657)
[17] EditorNode::_menu_option_confirm (C:\Users\Hugo\Documents\Git\godotengine\godot\editor\editor_node.cpp:2723)
[18] EditorNode::_menu_option (C:\Users\Hugo\Documents\Git\godotengine\godot\editor\editor_node.cpp:1438)
[19] call_with_variant_args_helper<EditorNode,int,0> (C:\Users\Hugo\Documents\Git\godotengine\godot\core\variant\binder_common.h:304)
[20] call_with_variant_args<EditorNode,int> (C:\Users\Hugo\Documents\Git\godotengine\godot\core\variant\binder_common.h:418)
[21] CallableCustomMethodPointer<EditorNode,int>::call (C:\Users\Hugo\Documents\Git\godotengine\godot\core\object\callable_method_pointer.h:103)
[22] Callable::callp (C:\Users\Hugo\Documents\Git\godotengine\godot\core\variant\callable.cpp:57)
[23] Object::emit_signalp (C:\Users\Hugo\Documents\Git\godotengine\godot\core\object\object.cpp:1188)
[24] Node::emit_signalp (C:\Users\Hugo\Documents\Git\godotengine\godot\scene\main\node.cpp:3896)
[25] Object::emit_signal<int> (C:\Users\Hugo\Documents\Git\godotengine\godot\core\object\object.h:936)
[26] PopupMenu::activate_item (C:\Users\Hugo\Documents\Git\godotengine\godot\scene\gui\popup_menu.cpp:2435)
[27] PopupMenu::activate_item_by_event (C:\Users\Hugo\Documents\Git\godotengine\godot\scene\gui\popup_menu.cpp:2357)
[28] MenuBar::shortcut_input (C:\Users\Hugo\Documents\Git\godotengine\godot\scene\gui\menu_bar.cpp:166)
[29] Node::_call_shortcut_input (C:\Users\Hugo\Documents\Git\godotengine\godot\scene\main\node.cpp:3361)
[30] SceneTree::_call_input_pause (C:\Users\Hugo\Documents\Git\godotengine\godot\scene\main\scene_tree.cpp:1242)
[31] Viewport::_push_unhandled_input_internal (C:\Users\Hugo\Documents\Git\godotengine\godot\scene\main\viewport.cpp:3303)
[32] Viewport::push_input (C:\Users\Hugo\Documents\Git\godotengine\godot\scene\main\viewport.cpp:3265)
[33] Window::_window_input (C:\Users\Hugo\Documents\Git\godotengine\godot\scene\main\window.cpp:1690)
[34] call_with_variant_args_helper<Window,Ref<InputEvent> const &,0> (C:\Users\Hugo\Documents\Git\godotengine\godot\core\variant\binder_common.h:304)
[35] call_with_variant_args<Window,Ref<InputEvent> const &> (C:\Users\Hugo\Documents\Git\godotengine\godot\core\variant\binder_common.h:418)
[36] CallableCustomMethodPointer<Window,Ref<InputEvent> const &>::call (C:\Users\Hugo\Documents\Git\godotengine\godot\core\object\callable_method_pointer.h:103)
[37] Callable::callp (C:\Users\Hugo\Documents\Git\godotengine\godot\core\variant\callable.cpp:57)
[38] Callable::call<Ref<InputEvent> > (C:\Users\Hugo\Documents\Git\godotengine\godot\core\variant\variant.h:876)
[39] DisplayServerWindows::_dispatch_input_event (C:\Users\Hugo\Documents\Git\godotengine\godot\platform\windows\display_server_windows.cpp:3554)
[40] DisplayServerWindows::_dispatch_input_events (C:\Users\Hugo\Documents\Git\godotengine\godot\platform\windows\display_server_windows.cpp:3524)
[41] Input::_parse_input_event_impl (C:\Users\Hugo\Documents\Git\godotengine\godot\core\input\input.cpp:775)
[42] Input::flush_buffered_events (C:\Users\Hugo\Documents\Git\godotengine\godot\core\input\input.cpp:1056)
[43] DisplayServerWindows::process_events (C:\Users\Hugo\Documents\Git\godotengine\godot\platform\windows\display_server_windows.cpp:3020)
[44] OS_Windows::run (C:\Users\Hugo\Documents\Git\godotengine\godot\platform\windows\os_windows.cpp:1665)
[45] widechar_main (C:\Users\Hugo\Documents\Git\godotengine\godot\platform\windows\godot_windows.cpp:180)
[46] _main (C:\Users\Hugo\Documents\Git\godotengine\godot\platform\windows\godot_windows.cpp:206)
[47] main (C:\Users\Hugo\Documents\Git\godotengine\godot\platform\windows\godot_windows.cpp:220)
[48] WinMain (C:\Users\Hugo\Documents\Git\godotengine\godot\platform\windows\godot_windows.cpp:234)
[49] __scrt_common_main_seh (D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:288)
[50] <couldn't map PC to fn name>
-- END OF BACKTRACE --
================================================================
```

PS: An indirect consequence of this PR is that it makes RTX HDR work out of the box with the Compatibility rendering method, whereas you previously had to go to NVIDIA Control Panel and set the present method to **Prefer layered over DXGI swapchain**. This is nice to see üôÇ ","2024-07-22T21:19:16Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-18T08:45:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-18T07:56:42Z",false,"APPROVED"
"paddy-exe","CONTRIBUTOR","","2024-07-18T11:20:01Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-19T01:37:07Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-19T01:37:43Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-19T01:37:55Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-19T01:39:29Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-19T01:39:34Z",false,"COMMENTED"
"DarkKilauea","CONTRIBUTOR","","2024-07-19T06:22:27Z",false,"COMMENTED"
"DarkKilauea","CONTRIBUTOR","","2024-07-19T06:23:37Z",false,"COMMENTED"
"DarkKilauea","CONTRIBUTOR","","2024-07-19T06:26:42Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-19T16:38:51Z",false,"COMMENTED"
"alvinhochun","CONTRIBUTOR","","2024-08-29T13:11:31Z",false,"COMMENTED"
"alvinhochun","CONTRIBUTOR","","2024-08-29T16:38:29Z",false,"COMMENTED"
"alvinhochun","CONTRIBUTOR","","2024-08-30T18:02:49Z",false,"COMMENTED"
"DarkKilauea","CONTRIBUTOR","","2024-08-31T01:36:11Z",false,"COMMENTED"
"DarkKilauea","CONTRIBUTOR","","2024-08-31T01:44:39Z",false,"COMMENTED"
"DarkKilauea","CONTRIBUTOR","","2024-08-31T02:29:52Z",false,"COMMENTED"
"DarkKilauea","CONTRIBUTOR","","2024-08-31T02:30:02Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-09-02T11:58:44Z",false,"COMMENTED"
"DarkKilauea","CONTRIBUTOR","","2024-09-26T05:16:31Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-18T08:05:58Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-18T05:10:49Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-18T08:00:27Z",false,"APPROVED"
"akien-mga","MEMBER","Makes sense.","2024-07-18T08:11:30Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-07-18T08:30:58Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-07-18T08:33:07Z",false,"COMMENTED"
"Alex2782","CONTRIBUTOR","","2024-07-18T21:39:24Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-17T20:30:42Z",false,"COMMENTED"
"aaronfranke","MEMBER","Reviewed. It makes sense to me. However, this is different from the code in master. So two comments:
* What does master do to solve the same problem? Which is better?
* The commits need to be squashed.","2024-07-17T21:43:58Z",false,"COMMENTED"
"lawnjelly","MEMBER","I'm not an expert in this area but @LunaticInAHat seems to be giving an approval (without a review approval) and it looks fine to me.

The major danger here (as I see it) is duplicate textures being loaded in the case of embedded GLTFs but am trusting the contributors that this should not happen.

I'll try and double check this with Akien before merging.","2024-07-23T11:53:40Z",false,"APPROVED"
"LunaticInAHat","CONTRIBUTOR","","2024-07-23T12:03:04Z",false,"APPROVED"
"aaronfranke","MEMBER","I'm actually not sure what the difference is between now and when the PR first opened, but regardless looks good to me. It provides a 3.x alternative to a similar system in 4.x. Note: I have not tested running this, I just looked over the code.","2024-07-23T21:49:09Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me.","2024-07-24T07:39:09Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-24T13:08:36Z",false,"COMMENTED"
"wjt","CONTRIBUTOR","","2024-07-24T20:52:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-26T15:10:18Z",false,"COMMENTED"
"juanjp600","CONTRIBUTOR","","2024-07-26T15:38:11Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

https://github.com/user-attachments/assets/a86f59e8-d92a-48ac-af4a-7b9f3de21e20

","2024-07-26T21:07:21Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-26T21:07:38Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-26T21:07:43Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-26T21:08:05Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-26T21:08:30Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-26T21:08:36Z",false,"COMMENTED"
"juanjp600","CONTRIBUTOR","","2024-07-27T04:29:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-17T16:48:24Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-07-17T16:48:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-17T16:49:52Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-07-17T16:51:37Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-07-17T18:17:30Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Should be fine","2024-07-26T20:19:53Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-27T21:18:59Z",false,"APPROVED"
"vnen","MEMBER","That's not the way to do it. This would only change the message in one specific case (an extra identifier), when there could be other things causing the same problem.

The current message is technically correct, it's just not clear where the `:` should be. That's what should be fixed.","2024-07-24T17:41:38Z",false,"CHANGES_REQUESTED"
"akien-mga","MEMBER","","2024-07-17T15:57:23Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T12:26:03Z",false,"COMMENTED"
"akien-mga","MEMBER","One case was missed, but otherwise the fix is correct.","2024-07-17T12:26:33Z",false,"APPROVED"
"nvlled","CONTRIBUTOR","","2024-07-17T14:34:55Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-17T14:43:11Z",false,"COMMENTED"
"nvlled","CONTRIBUTOR","","2024-07-17T14:56:45Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-17T15:00:38Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-07-18T05:03:49Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T10:18:55Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T10:18:48Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T09:59:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-18T08:44:17Z",false,"APPROVED"
"Chaosus","MEMBER","","2024-07-17T08:02:34Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-07-17T08:15:57Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-07-17T08:19:23Z",false,"CHANGES_REQUESTED"
"jsjtxietian","CONTRIBUTOR","","2024-07-17T08:42:05Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-07-17T08:46:46Z",false,"CHANGES_REQUESTED"
"Chaosus","MEMBER","","2024-07-17T08:53:35Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T10:52:19Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-08-16T18:20:43Z",false,"COMMENTED"
"GlyphTheWolf","NONE","","2024-08-16T19:03:45Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-17T13:07:52Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-18T17:05:51Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-18T18:21:38Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-18T18:23:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-22T08:40:40Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-22T14:07:37Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-07-16T17:50:14Z",false,"COMMENTED"
"wjt","CONTRIBUTOR","","2024-07-16T20:14:01Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-31T21:16:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-22T08:35:58Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-23T12:20:08Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-16T14:21:23Z",false,"COMMENTED"
"Flavelius","CONTRIBUTOR","","2024-07-16T14:27:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-16T14:30:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM","2024-07-16T12:51:37Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-07-16T12:53:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-17T08:59:57Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-07-23T02:54:25Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-07-23T18:40:58Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-06T08:39:41Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-06T08:39:47Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-16T12:32:04Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/e343dbbcc1030f04dc5833f1c19d267a17332ca9), it works as expected. All rendering drivers and methods work OK, although only Vulkan was improved by this PR.

That said, Vulkan is still slow to resize compared to D3D12; it's just that the temporary stretching is gone. Therefore, I don't think https://github.com/godotengine/godot/issues/84565 is fully addressed by this PR.

### Vulkan (Forward+)

https://github.com/user-attachments/assets/1ba6565d-1def-4c57-82b4-c3c9daf9c3c3

### Direct3D 12 (Forward+)

https://github.com/user-attachments/assets/e6fada54-7037-4a77-b19f-45b0765a88cf

### OpenGL

https://github.com/user-attachments/assets/99b048c7-0180-4430-8c89-b3ef1c939036

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Windows 11 23H2
</details>","2024-07-25T21:56:04Z",false,"COMMENTED"
"TokageItLab","MEMBER","I think this behavior confusing. If there are two animations in the animation library with the same reference, won't editing the copied animation change the other one too?

I assume that this would be an undesirable behavior in the most cases. It require the user to uniquify the animation each time it is copied, which would be a waste of time and effort. If this behavior is needed, it should be an option such as Shift+Click.","2024-07-25T05:58:57Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","Approve from reduz's comment","2024-08-26T03:15:22Z",false,"APPROVED"
"clayjohn","MEMBER","Seems fine to me. 

Would be good if @bruvzg took a look as well","2024-07-24T15:39:24Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-07-25T06:29:55Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","","2024-07-25T05:04:07Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-07-25T05:05:27Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/20f4d265105cac7c06ceb7e72f57c05f4a39fbd3), it works as expected.

Some feedback:

- There is no shader compilation error when the shader template file doesn't exist:

![image](https://github.com/user-attachments/assets/beaf2c5a-cf38-4f39-9573-e2520d5d2507)

You do get this message in the editor Output panel `Resource file not found: res://notfound.gdtemplate (expected type: )`, but no error highlighting in the shader editor due to this.

- The `.gdtemplate` file extension is pretty generic. It could be a script template, a project template, anything ‚Äì¬†it's not very descriptive. I suggest using `.gdshadertpl` which would make it more consistent with the existing `.gdshaderinc` extension.

As a reminder, we'll need to contact KDE/Dolphin developers to add an icon for the new file extension we choose to use:

![image](https://github.com/user-attachments/assets/80db439f-937f-4d02-8151-1e44fa16e174)

- I've gotten this error message from making a change in a `.gdtemplate` file then reloading the project:

```
  Unknown shader type in shader template.
```

Could more context be added to this message (such as the type that was specified, and the line of the error)? The change was on https://github.com/BastiaanOlij/test-custom-shader-templates/blob/master/test.gdtemplate#L323, where I replaced the line with:

```glsl
	albedo_output_buffer = vec4(albedo * vec3(1.0, 0.0, 0.0), alpha);
```

(I'm not sure why that caused an error too, either way. It seems to be valid GLSL.)

I also tried reverting my change and reloading the project again, but I still get the error message and the material is no longer using the custom shader template:

![image](https://github.com/user-attachments/assets/4f422108-a987-487f-b1d9-13c56b6bbacc)

The cube on the right should appear unshaded, but it appears shaded.","2024-07-31T14:59:11Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-07-16T10:51:24Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/607b230ffe120b2757c56bd3d52a7a0d4e502cfe), it works as expected.

**Testing project:** [test-richtextlabel-default-align.zip](https://github.com/user-attachments/files/16401879/test-richtextlabel-default-align.zip)

| BBCode surrounding the whole text on the left, default horizontal alignment properties on the right |
|:-:|
| ![image](https://github.com/user-attachments/assets/c07b8d78-3926-4d0e-900f-c5bf7ae5847e) |

This is a more general comment that would need to be addressed in a separate PR for nodes such as Label as well, but the inspector is now quite long when all sections are collapsed. It might be worth moving **Justification Flags** (and perhaps **Tab Size** and **Tab Stops**) to its own section that could be collapsed (since it doesn't need to be tweaked often):

![image](https://github.com/user-attachments/assets/e82c6674-3c96-45cd-87a7-87eec66749ff)
","2024-07-28T01:06:31Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-28T01:08:05Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks!

This fixes the issue in my testing. And, it doesn't cause the return of https://github.com/godotengine/godot/issues/91981 which is what PR https://github.com/godotengine/godot/pull/92032 was meant to fix.

The code looks good to me too :-)","2024-07-16T16:19:51Z",false,"APPROVED"
"akien-mga","MEMBER","Seems reasonable to me.","2024-07-18T09:59:00Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-18T10:12:36Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-18T10:10:13Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-18T10:13:30Z",false,"APPROVED"
"rburing","MEMBER","","2024-07-16T07:30:15Z",false,"APPROVED"
"fire","MEMBER","I am having trouble thinking through the consequences of this pr. Is there test cases? Approving because it's your expertise.

Edited:

Should we use the testing system to encode our current preferences into test cases?","2024-07-22T19:16:29Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-07-16T06:05:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T08:56:22Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-15T22:55:57Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-07-15T23:01:19Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-07-16T02:28:41Z",false,"CHANGES_REQUESTED"
"BastiaanOlij","CONTRIBUTOR","lgtm, it's worth having the discussion if passing Object is indeed the best way or if we simplify this to increasing/decreasing a counter","2024-07-16T23:23:16Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-07-17T01:52:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T09:04:52Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-17T09:05:31Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-07-17T13:19:53Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me.","2024-07-18T13:19:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T10:42:30Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-15T21:16:52Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-15T21:16:58Z",false,"COMMENTED"
"clayjohn","MEMBER","Makes sense to me. 

It seems like the `[params]` section is ignored when the config is loaded because it never contains any items. 

Additionally, the only other place that `config->erase_section(""params"");` is called, checks for the existence of ""params"" first","2024-07-15T21:26:48Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-15T21:28:04Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","Looks good! Thanks for tracking down the issue!","2024-07-16T00:14:33Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T10:43:20Z",false,"APPROVED"
"AThousandShips","MEMBER","Some initial feedback ","2024-07-22T08:36:54Z",false,"COMMENTED"
"HolonProduction","MEMBER","Overall I'm not convinced of the GDScript syntax `{A, B, C}`. It adds unnecessary complexity when parsing. Also I don't think it is very readable. I would prefer to constructs sets like packed arrays:
`Set()`.","2024-07-22T11:34:55Z",false,"COMMENTED"
"bruvzg","MEMBER","Unlikely will have any effect (GL ignores size completely, Vulkan and DX only use it when actually drawing).","2024-07-15T20:28:54Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-15T19:10:26Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-16T23:09:48Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected. There's a small but consistently reproducible performance improvement, which may be more significant on slower devices.

**Testing project:** [test_node2d_high_amounts.zip](https://github.com/user-attachments/files/16257443/test_node2d_high_amounts.zip)

## Benchmark

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 39)
</details>

Using an optimized editor build (`optimize=speed lto=full`). The editor is *not* running in the background when running the benchmark.

### 10,000 Node2D

Before | After
-|-
2627 FPS | 2747 FPS

### 100,000 Node2D

Before | After
-|-
226 FPS | 229 FPS","2024-07-16T23:13:59Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-17T10:59:18Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-07-15T19:11:05Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-15T11:41:07Z",false,"COMMENTED"
"clayjohn","MEMBER","Seems fine to me. Bumping to 4.4 since we want to release RC1 soon","2024-07-15T22:58:26Z",false,"APPROVED"
"akien-mga","MEMBER","Seems fine to me as an exception to feature freeze, it's only exposing existing methods, and there's a confirmed use case for them in 4.3.","2024-07-19T08:29:31Z",false,"APPROVED"
"akien-mga","MEMBER","I already started a build for 4.3.rc1 so this will be for rc2.","2024-07-25T11:23:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T10:29:41Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-07-15T07:29:38Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-07-15T08:02:46Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-07-15T08:09:34Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-07-15T08:25:22Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-07-15T09:07:01Z",false,"COMMENTED"
"dalexeev","MEMBER","Makes sense to me, thanks! Note that this creates some inconsistency: with `p_full_objects = false` pathless scripts are supported, but with `p_full_objects = true` they are not. However, it's less controversial than #90990, so we can fix it in the future if necessary.","2024-07-17T13:34:39Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-07-15T16:41:59Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-21T22:58:12Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-22T10:42:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-22T10:44:42Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-22T18:27:12Z",false,"COMMENTED"
"QbieShay","CONTRIBUTOR","","2024-08-08T10:09:05Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-08T10:12:19Z",false,"COMMENTED"
"akien-mga","MEMBER","Needs rebase, but then I'd say yolo?","2024-10-04T20:31:12Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T13:16:33Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-17T13:25:20Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-18T13:34:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T12:47:05Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T08:23:53Z",false,"APPROVED"
"bruvzg","MEMBER","That's gonna break all pan events (no longer possible to pan 2D view and rotate 3D view, for example - pan gesture will zoom instead, which is wrong, you zoom with pinch gesture). I do not think it should emulate mouse in this case, probably should be fixed in the `PopupMenu` (or whatever control is used for autocompletion) instead (other controls do handle scroll with the trackpad without issues).","2024-07-14T20:00:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-15T08:02:02Z",false,"COMMENTED"
"akien-mga","MEMBER","Nice! This has been such a pain point for years.","2024-07-17T13:18:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T13:18:37Z",false,"APPROVED"
"RandomShaper","MEMBER","Looks good, but let me suggest that while you're at it, you also avoid calling `size()` twice.","2024-07-15T06:56:42Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-07-15T18:18:59Z",false,"COMMENTED"
"aaronp64","CONTRIBUTOR","","2024-07-15T18:39:58Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-07-15T19:09:07Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-07-15T19:09:19Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-07-17T07:43:49Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` 0918fd2a213021e7bba4765c6398359c729d3fb4), it works as expected.

```glsl
shader_type spatial;

void fragment() {
	vec3 n = false ? vec3(0.0) : vec3(1.0);
	ivec3 ma = (n.x>n.y && n.x>n.z) ? ivec3(0,1,2) :
               (n.y>n.z)            ? ivec3(1,2,0) :
                                      ivec3(2,0,1) ;
	ALBEDO.r = float(ma.x);
	ALBEDO.g = float(ma.y);
	ALBEDO.b = float(ma.z);
}
```

Previously, this would have failed shader compilation:

```
  Shader compilation failed.
  res://test.gdshader:7 - Invalid argument to ternary operator: 'bool, ivec3, bool'.
```

Code looks good to me.","2024-07-17T15:58:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T10:51:23Z",false,"COMMENTED"
"matheusmdx","CONTRIBUTOR","","2024-07-17T12:55:54Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-17T13:10:37Z",false,"COMMENTED"
"matheusmdx","CONTRIBUTOR","","2024-07-17T13:19:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-17T13:21:24Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-17T13:27:08Z",false,"APPROVED"
"matheusmdx","CONTRIBUTOR","","2024-07-17T13:27:25Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-13T22:55:12Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-13T23:16:47Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Ya","2024-07-13T23:18:09Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-13T21:22:18Z",false,"COMMENTED"
"MitchellTR","NONE","","2024-07-13T21:51:08Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-31T21:18:43Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-31T21:19:51Z",false,"DISMISSED"
"MitchellTR","NONE","","2024-07-31T21:37:21Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-31T21:58:44Z",false,"COMMENTED"
"MitchellTR","NONE","","2024-07-31T22:15:26Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-31T22:18:30Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-13T22:31:45Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-07-14T04:02:09Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-17T13:19:10Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-07-15T07:50:00Z",false,"APPROVED"
"HolonProduction","MEMBER","","2024-07-15T08:09:30Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-14T00:00:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-14T08:39:45Z",false,"COMMENTED"
"akien-mga","MEMBER","Seems fine to me.","2024-07-17T13:20:22Z",false,"APPROVED"
"Chaosus","MEMBER","Tested locally, works as expected.","2024-07-24T06:41:50Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-13T19:13:16Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-13T19:13:24Z",false,"COMMENTED"
"Naros","CONTRIBUTOR","","2024-07-13T19:50:59Z",false,"COMMENTED"
"Naros","CONTRIBUTOR","","2024-07-13T19:51:03Z",false,"COMMENTED"
"AThousandShips","MEMBER","Not familiar with the internals so a second eye on this would be good but the code looks good to me and the existing interface is just employed ","2024-07-18T18:14:12Z",false,"DISMISSED"
"akien-mga","MEMBER","","2024-07-19T09:03:17Z",false,"COMMENTED"
"Naros","CONTRIBUTOR","","2024-07-19T13:01:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-01T19:56:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-01T19:58:55Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-01T20:01:27Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-01T20:01:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-01T20:02:14Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-01T20:56:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-02T08:24:07Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-09-02T08:24:30Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-02T08:25:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-02T08:25:21Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-03T07:56:15Z",false,"APPROVED"
"fire","MEMBER","","2024-07-21T02:12:51Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

Performance-wise, I can't really notice a difference when dragging around child CSG nodes (or the Path3D node in the racetrack at the end) in the [3D CSG](https://github.com/godotengine/godot-demo-projects/tree/master/3d/csg) demo.

Binary size comparison:

```
123,260,560 godot.linuxbsd.editor.x86_64
123,448,976 godot.linuxbsd.editor.x86_64.master
```

Once again, I'm surprised that the binary of this PR is 188 KB **smaller** (Linux x86_64 editor build with `optimize=speed lto=full`). I would expect it to be larger since several third-party libraries were added.","2024-07-23T21:29:58Z",false,"COMMENTED"
"fire","MEMBER","","2024-07-24T06:15:38Z",false,"COMMENTED"
"fire","MEMBER","","2024-07-24T17:18:19Z",false,"COMMENTED"
"31","CONTRIBUTOR","","2024-07-25T02:20:32Z",false,"COMMENTED"
"31","CONTRIBUTOR","","2024-07-25T02:27:30Z",false,"COMMENTED"
"fire","MEMBER","","2024-07-25T16:34:51Z",false,"COMMENTED"
"bruvzg","MEMBER","I can't reproduce the issue.

But setting the parent of the top-level window to `NULL` (desktop) should be fine, since it already is `NULL`.

Note: despite the name, `GWLP_HWNDPARENT` is setting owner of the window (which is different from parent), so it's not undoing the previous call in any way.
","2024-07-15T07:47:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-13T14:11:45Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","Great catch! Rebasing in larger PRs will always be tedious to a certain extent, but this will absolutely make minor tweaks less of a headache","2024-07-13T15:16:45Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T08:46:41Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks! Looks good to me :-)","2024-07-16T14:56:16Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T08:57:07Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-13T10:53:03Z",false,"COMMENTED"
"fire","MEMBER","This makes sense. Need to watch we're only creating / setting the stringname rarely.","2024-07-22T19:14:20Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-20T18:04:30Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-31T21:26:48Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I do not understand this, either.

Also dedicating 3 lines to the same topic is excessive. Keep in mind each new line is separated into paragraphs in the class reference, that is, one more new line is added in the middle of these. This means each line tends to be roughly self-contained. 
I don't like this behavior personally, as it conflicts with how GitHub Flavored Markdown does it, but it is what it is, 

It should all be one line (maybe with well-placed `[br]` tags if it's okay to).
But still, watch out. This is an overwhelming amount of information to be seeing about a seemingly simple property in the class reference, let alone on the Inspector's tooltip.","2024-08-01T00:14:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-01T08:30:05Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-01T10:37:40Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-01T10:44:33Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-07-13T19:33:02Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-07-13T23:26:31Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-07-13T23:28:27Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-07-14T03:57:46Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-07-14T05:05:39Z",false,"COMMENTED"
"raulsntos","MEMBER","The reasoning for not re-adding `bone_pose_changed` makes sense to me, hopefully it won't be too disruptive. I'll make a note to document the change in https://github.com/godotengine/godot-docs/pull/9250.","2024-07-14T19:08:31Z",false,"APPROVED"
"MarianoGnu","CONTRIBUTOR","","2024-07-15T15:41:15Z",false,"COMMENTED"
"RevoluPowered","CONTRIBUTOR","This has been tested with The Mirror and resolves the flickering problem with the Quest 3.

I tested this using shaders, the mobile renderer and a large scene with a large terrain. 

I was present when the fix was being developed and this was the best way forward for 4.3. 

My performance felt good in the standalone headset, which is great.","2024-07-15T17:27:06Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","I can also confirm that this fixes the fickering issue on Quest 3 in my testing!","2024-07-15T17:29:27Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-15T18:35:06Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected (including the drag distance threshold behavior).

This mimics behavior found in Inkscape (also using <kbd>Shift</kbd>), which makes sense.","2024-07-13T01:58:09Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-13T09:00:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-20T15:57:21Z",false,"COMMENTED"
"aaronp64","CONTRIBUTOR","","2024-07-21T17:12:40Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-21T23:59:31Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Have you tested how immersive mode behaves on tablet when the editor window is opened side-by-side with the running project window?","2024-07-12T21:25:39Z",false,"CHANGES_REQUESTED"
"20kdc","CONTRIBUTOR","","2024-07-13T17:11:51Z",false,"COMMENTED"
"20kdc","CONTRIBUTOR","","2024-07-13T18:18:36Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","@20kdc Sorry for the delay - I've tested the changes and they look pretty good! This will be a good feature to include for the Godot 4.4 release!

A couple of feedback on the PR:

```
EDITOR_SETTING_USAGE(Variant::BOOL, PROPERTY_HINT_NONE, ""interface/editor/android/editor_immersive_mode"", false, """", PROPERTY_USAGE_DEFAULT | PROPERTY_USAGE_RESTART_IF_CHANGED)
EDITOR_SETTING_USAGE(Variant::BOOL, PROPERTY_HINT_NONE, ""interface/editor/android/game_immersive_mode"", false, """", PROPERTY_USAGE_DEFAULT)
```

- Instead of having two editor settings, let's use a single `interface/editor/android/immersive_mode` to control immersive mode for both the editor and the play/game window
  - Also let's remove the `ANDROID_ENABLED` guards around the setting. The fact it's under the `android` section should be sufficient to point out the setting is only active on Android.

 > This option uses the --use_immersive functionality that already existed.

I like the approach of re-using the `--use_immersive` functionality and I think we can update the PR logic to only use that approach for both the editor and the play/game window. In order to do so
- The logic in `editor_run` should be moved to [`GodotEditor#onNewGodotInstanceRequested(...)`](https://github.com/godotengine/godot/blob/db76de5de8a415b29be4c7dd84b99bd0fe260822/platform/android/java/editor/src/main/java/org/godotengine/editor/GodotEditor.kt#L192). 
- As done in `editor_run`, the logic should check if `immersive_mode` is enabled, and if so add the immersive flag in the `args` parameter if it doesn't contain it already.
  - With this approach, the PR should only require changes in `editor_settings` to introduce the setting, and in `GodotEditor` to update the launch parameters as needed
  - This also means that the project settings will not launch in immersive mode when launch from the library, but I think that's fine as the primary use case is to have the editor window in immersive mode. ","2024-08-27T14:17:31Z",false,"CHANGES_REQUESTED"
"clayjohn","MEMBER","You are on a roll :)

Thank you!","2024-07-12T19:47:43Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

### Before

![Before](https://github.com/user-attachments/assets/2e50269c-86bd-412e-bff8-d1ac945ab4a7)

### After

![After](https://github.com/user-attachments/assets/e8f8b6f0-c2a3-4ba7-b36a-b6c05be74a33)","2024-07-13T02:19:33Z",false,"APPROVED"
"rburing","MEMBER","Since a proper fix won't arrive in time for 4.3, I agree this is the way to go in the meantime (and the issue stays open).","2024-07-14T09:30:50Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-12T17:45:20Z",false,"COMMENTED"
"bruvzg","MEMBER","> MinGW crash handler is changed to use SetUnhandledExceptionFilter, which can catch all unhandled exceptions (except fail-fast exceptions).

MinGW use SEH only in 64-bit version, 32-bit version use SJLJ. So `SetUnhandledExceptionFilter` probably won't do anything in 32-bit builds if exception is triggered inside Godot code, `signal` handlers should work everywhere. But I guess we can set both.

*Edit:* This might be relevant only for exceptions raised by third-party libs (Godot is not using exception).","2024-07-12T17:49:41Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-12T21:25:00Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-07-14T10:58:57Z",false,"APPROVED"
"paddy-exe","CONTRIBUTOR","","2024-07-14T11:06:53Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","This makes sense to me!

When stored in a `Variant`, a bit field will be stored as `int64_t`, but there's no reason that `BitField<T>` can't use a `uint64_t`, which is the more natural data type for a bit field.

Code looks good too.","2024-07-12T18:44:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T10:21:57Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T10:22:27Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-07-17T14:47:19Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-07-15T21:13:05Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-03T11:30:53Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

**Testing project:** [test_shadow_blur_distance.zip](https://github.com/user-attachments/files/16199915/test_shadow_blur_distance.zip)

## Preview

### Before

https://github.com/user-attachments/assets/ec9c75d4-d250-4d42-812f-557311d78e96

### After

https://github.com/user-attachments/assets/43ebd31c-fde7-4068-9998-0e8ee7fec518

","2024-07-12T23:14:07Z",false,"APPROVED"
"clayjohn","MEMBER","This is getting way too hacky and I'm not even sure the logic makes sense. 

When blending is enabled this clamps `soft_shadow_scale` between `soft_shadow_scale` and 100 (why 100?).

When blending is disabled, this clamps `soft_shadow_scale` between 0 and 100 (is there a risk of it going outside that range?)

Effectively, it seems like what you want to do is just ignore `blur_factor` when blending splits?","2024-09-02T16:43:20Z",false,"COMMENTED"
"fire","MEMBER","","2024-07-12T12:49:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T08:40:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-31T21:27:56Z",false,"APPROVED"
"kus04e4ek","CONTRIBUTOR","","2024-07-12T09:18:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-12T08:17:13Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-12T16:29:22Z",false,"COMMENTED"
"theashtronaut","CONTRIBUTOR","","2024-07-12T18:53:54Z",false,"COMMENTED"
"Chaosus","MEMBER","It makes sense, I guess","2024-09-13T12:07:52Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-07-12T07:36:46Z",false,"APPROVED"
"akien-mga","MEMBER","Looks great!

There are some tests that need adjustments too (see diff view) and a compat method needs to be registered for `get_mipmap_offset`.","2024-07-12T07:53:57Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-19T12:05:13Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-07-19T12:13:52Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-19T12:25:15Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-07-19T12:52:31Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-19T12:59:42Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-07-19T13:08:06Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-07-19T13:17:34Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-19T13:17:48Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-07-19T13:24:35Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-07-19T13:53:07Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-19T13:58:00Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-07-19T14:01:48Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-19T14:03:01Z",false,"COMMENTED"
"akien-mga","MEMBER","Changes look good to me, and I confirmed it fixes the linked issue.","2024-07-19T14:06:37Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-07-19T14:57:07Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great! I'm glad to see that the performance benefits are so tangible","2024-07-12T06:56:14Z",false,"APPROVED"
"Geometror","MEMBER","","2024-09-29T20:31:09Z",false,"COMMENTED"
"Geometror","MEMBER","Haven't benchmarked myself, but I believe you :) Great work!
While some aspects slightly impact readability, the performance boost is significant enough to justify the trade-off I think. I've played around with `StyleBoxFlat`s for quite a bit and haven't observed any regressions.","2024-09-29T20:39:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-30T08:27:07Z",false,"APPROVED"
"RandomShaper","MEMBER","Good idea, but let me suggest a different scaffold:
```
private:
    template<bool REVERSED>
    void _notification_fast(int p_notification);
```","2024-07-12T07:46:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-12T08:54:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-12T13:11:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-12T13:11:42Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-07-12T14:19:20Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-07-12T14:22:03Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/a0943acda1232ee9efd2fae9a6f3138603b95979), it works as expected.

## Benchmark

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 40)
</details>

Average FPS over 10 seconds with 5,000 cubes in the MRP, using the default window size:

Before | After
-|-
346 FPS (2.89 mspf) | 357 FPS (2.80 mspf)","2024-07-19T23:44:16Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-20T08:47:55Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-07-12T00:01:26Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-07-12T15:12:34Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-07-15T07:07:15Z",false,"COMMENTED"
"Calinou","MEMBER","I can't reproduce the issue in https://github.com/godotengine/godot/issues/63423's MRP as of 97b8ad1af0f2b4a216f6f1263bef4fbc69e56c7b, but this PR works fine on the MRP too. Either way, adding this safeguard makes sense.","2024-07-13T02:10:41Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-13T08:50:25Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-17T21:46:03Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-11T22:26:51Z",false,"APPROVED"
"clayjohn","MEMBER","Makes sense!","2024-07-12T16:40:05Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great! Thank you","2024-07-17T21:47:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-11T21:01:59Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-07-12T14:23:04Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM","2024-07-12T14:25:37Z",false,"APPROVED"
"bruvzg","MEMBER","On Windows 11 it seems to use `16` and `24` for 100% DPI and higher sizes for higher DPI, so it seems to work. And I do not see any issues with Project Manager.","2024-07-15T07:24:55Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Looks about right.","2024-07-11T16:14:20Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-11T18:52:29Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-12T12:30:02Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

I wonder if the preview should be enabled by default to improve discoverability. Right now, it's hidden behind an icon in the toolbar which may be missed by some.

One issue I noticed is that once you enable the preview, you can drag its size to the point the main window becomes completely hidden. This can be confusing:

![image](https://github.com/user-attachments/assets/b6a5e34c-248e-4abe-b9b0-370595034be0)

There should be a minimum width assigned to the main view, so you can't hide it completely:

![image](https://github.com/user-attachments/assets/58653163-8f79-4d17-8d2e-3a3351641726)

The minimum width can be set to a value similar to the one used for the file list on the left.

Also, the preview does not update in real-time when changing a color parameter:

https://github.com/user-attachments/assets/f862130a-d082-466c-8deb-cb154b326b60

My guess is that the wrong signal is used in ColorPickerButton to update the preview (one of them only updates when exiting the color picker).

In contrast, this works in the BaseMaterial3D inspector preview:

https://github.com/user-attachments/assets/6c76e84f-6540-4154-b35a-fd3b5697e580","2024-07-15T17:50:18Z",false,"COMMENTED"
"Calinou","MEMBER","Works great now :slightly_smiling_face:

Documentation should be added for the newly exposed methods in the class reference.","2024-07-16T17:30:38Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-24T18:01:41Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-24T18:04:25Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-24T18:09:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-24T18:09:57Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-07-25T09:33:48Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-25T11:53:20Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-28T14:33:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-28T14:35:05Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-07-28T16:10:16Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-16T18:02:48Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-11T14:27:28Z",false,"COMMENTED"
"akien-mga","MEMBER","Didn't test, but code looks good to me.","2024-07-11T14:27:56Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-07-11T15:57:19Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-11T08:25:09Z",false,"DISMISSED"
"AThousandShips","MEMBER","","2024-07-11T09:08:01Z",false,"COMMENTED"
"ayanchavand","CONTRIBUTOR","","2024-07-11T09:22:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-11T09:43:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-11T08:29:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-11T08:52:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-11T10:11:59Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-07-11T08:30:30Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-12T16:53:43Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great! Thank you for the quick fix","2024-07-12T18:58:14Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

### Before

https://github.com/user-attachments/assets/95610d00-14ef-49bd-868a-13f0a07da433

### After

https://github.com/user-attachments/assets/7ca6783b-1465-43e3-99ae-be55c251ff0d","2024-07-13T02:17:33Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally on all rendering methods, it works as expected.

![image](https://github.com/godotengine/godot/assets/180032/d9a94601-2556-4caa-ace7-9d502cc749d5)

```glsl
shader_type canvas_item;

void fragment() {
	float number = 0.1 + 0.2 + 0.3;
	if (number > 0.6 - EPSILON) {
		COLOR.gb = vec2(0.0);
	}
}
```

One possible concern is that this epsilon value may not be high enough when dealing with `lowp` or `mediump` floats, particularly if their value is in the hundreds or thousands. `float` can implicitly become lower-precision on mobile platforms automatically unless the user adds a `highp` hint. cc @clayjohn 

How do other programs generally deal with this? Do they expose `LOWP_EPSILON` and `MEDIUMP_EPSILON`, with the default assumed to be intended for `highp` usage?","2024-07-10T18:23:29Z",false,"COMMENTED"
"Calinou","MEMBER","Code looks good to me.","2024-07-10T20:58:35Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-10T11:37:19Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-07-11T08:35:53Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-19T13:38:02Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-18T11:39:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-18T11:40:28Z",false,"APPROVED"
"AThousandShips","MEMBER","Can't speak to the broader changes but the `SafeBinaryMutex` make sense to me","2024-07-18T15:58:41Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-31T21:29:04Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","There are currently several cases involving TYPE_VALUE tracks for :scale, :rotation, :quaternion, :position and :transform that I think do not work for cubic interpolation.

I think these cases were also broken before, so I do not want fixing this to block this PR. Just making a note of where the issues are.","2024-10-04T05:21:46Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-10-04T05:38:32Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-10-04T06:30:51Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-10-04T06:40:21Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-10-04T06:40:36Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","Reviewed together in a call with @fire and @aaronfranke (took 3 hours!)

This seems great! No major issues. It would be good to get it merged so we can start testing it for imports and exports","2024-10-04T06:58:55Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-04T11:11:54Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-10-04T22:39:31Z",false,"COMMENTED"
"HolonProduction","MEMBER","","2024-07-10T18:33:03Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-07-10T18:41:57Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-10T13:39:23Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-07-10T07:17:38Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-07-10T07:23:56Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-10T09:03:34Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me overall. Agree with Mickeon about the note that could be made clearer.","2024-07-17T12:48:51Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-22T13:00:15Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","> Added a bit of documentation on haptic pulses (not really related but ran into it)

If it's not related it should've been a separate PR but sure.","2024-07-10T07:11:24Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-10T10:26:48Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-11T14:59:27Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","It's the small things that count.

(Commits still would need to be squashed)","2024-07-10T07:05:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-10T05:55:53Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.","2024-07-10T17:57:13Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-07-10T08:13:58Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-10T10:25:33Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-07-11T08:29:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","You'll need to [squash the commits](https://docs.godotengine.org/en/stable/contributing/workflow/pr_workflow.html#the-interactive-rebase) into 1.","2024-07-09T20:13:19Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-09T18:55:38Z",false,"COMMENTED"
"RobProductions","CONTRIBUTOR","","2024-07-09T19:17:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-09T19:46:15Z",false,"COMMENTED"
"RobProductions","CONTRIBUTOR","","2024-07-11T15:51:50Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-13T21:00:15Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-13T22:12:36Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-09T17:44:44Z",false,"COMMENTED"
"AdriaandeJongh","CONTRIBUTOR","","2024-07-10T08:14:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","The wording looks good to me","2024-07-12T08:19:36Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-07-12T10:31:33Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-15T16:48:49Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-15T16:49:35Z",false,"APPROVED"
"dalexeev","MEMBER","Looks right to me.","2024-07-15T08:24:28Z",false,"APPROVED"
"RandomShaper","MEMBER","LGTM. In the case of `SortArray`, I think it'd be better to use `DEV_ASSERT`s for those validations, but I'd have to look closer to come with a conclusion on that and, anyway, that'd be out of the scope of this PR.","2024-07-10T07:38:15Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-10T16:27:50Z",false,"APPROVED"
"Calinou","MEMBER","Code looks good to me. [This is a C++17 feature](https://en.cppreference.com/w/cpp/language/if#Constexpr_if) and we already use it in many other places, so it's OK to use.[^1]

[^1]: The only context where `if constexpr` requires C++23 is for expressions that are not `bool` or are implicit integer conversions to `bool`.","2024-07-10T21:10:52Z",false,"APPROVED"
"DarioSamo","CONTRIBUTOR","Comment looks good to me!","2024-07-09T15:15:43Z",false,"APPROVED"
"clayjohn","MEMBER","Seems fine to me. Great work @Calinou @DarioSamo ","2024-07-09T16:53:16Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","Also don't forget that Godot PRs require you to squash all commits into a single one. https://docs.godotengine.org/en/stable/contributing/workflow/pr_workflow.html#the-interactive-rebase","2024-07-10T08:30:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM, simple enough ","2024-07-09T14:38:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-09T13:51:15Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-09T10:52:32Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-07-09T16:15:01Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-07-09T10:34:04Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-07-09T15:42:12Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-07-09T15:43:43Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-07-09T15:45:44Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-09T15:49:04Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-09T15:59:56Z",false,"COMMENTED"
"mhilbrunner","MEMBER","Great work, LGTM!","2024-07-09T16:04:45Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-10T05:24:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T12:50:53Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-07-09T09:38:41Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-07-09T10:00:39Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-09T10:16:42Z",false,"COMMENTED"
"adamscott","MEMBER","This is quite an improvement. I tested out @CrazyRoka's [test repo](https://github.com/CrazyRoka/godot-benchmark-moving-cubes) and I've seen an improvement of ~61% over one minute of benchmark testing. I've only tested once, so don't take my results too seriously.

<details>
<summary>Results</summary>

| Master branch | This PR |
| :--: | :--: |
| <img width=""1396"" alt=""Capture d‚ÄôeÃÅcran, le 2024-07-09 aÃÄ 14 35 20"" src=""https://github.com/godotengine/godot/assets/270928/92d8ba8b-bd44-40b9-a1ea-87fd86160824""> | <img width=""1396"" alt=""Capture d‚ÄôeÃÅcran, le 2024-07-09 aÃÄ 14 35 27"" src=""https://github.com/godotengine/godot/assets/270928/bc029bb6-0eeb-4303-8435-eecf9372f2d2""> |

</details>

I would wait though for @RandomShaper's input though.","2024-07-09T18:46:26Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-09T07:42:00Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-09T07:43:15Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-09T08:25:52Z",false,"APPROVED"
"akien-mga","MEMBER","Code changes look good to me.","2024-07-17T12:51:29Z",false,"APPROVED"
"akien-mga","MEMBER","Makes sense. It's too bad that even though we use a very explicit `--pretty` format there are still other options which can affect the reproducibility of the command.

From a quick look at the [git log manual](https://git-scm.com/docs/git-log) I don't immediately spot other options which may be set in system/global config and affect that, so this might be good enough.

Otherwise an option would be to set `GIT_CONFIG_GLOBAL=/dev/null GIT_CONFIG_SYSTEM=/dev/null` in the environment for this command ([docs](https://git-scm.com/docs/git#Documentation/git.txt-codeGITCONFIGGLOBALcode)), but I'm not sure how well that would work on Windows, so we can start with just `--no-show-signature`.

We could also parse the output and make sure to only extract the timestamp with some regex to be safe.","2024-07-09T07:24:30Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-09T07:12:43Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-19T13:02:11Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-19T13:02:30Z",false,"APPROVED"
"jsjtxietian","CONTRIBUTOR","","2024-07-19T13:03:30Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-07-09T12:45:13Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-09T01:05:33Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","Makes sense to me; feels right in-line with how we handle architecture.","2024-07-08T23:55:37Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-08T21:58:14Z",false,"APPROVED"
"fire","MEMBER","The thorvg team quickly fixed our bug report for msvc 2017 breakage.","2024-07-08T21:38:45Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","","2024-07-08T21:52:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-08T21:28:12Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-12T22:09:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","I can't reproduce the crash, but the change does not break anything. If you say it fixes something then fine.","2024-07-12T22:11:57Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-07-12T23:41:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-12T23:51:31Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","This kind of weird future-proofing like Godot 3.x's LOD parameters genuinely grinds my gears.","2024-07-08T21:06:35Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-13T00:34:52Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-07-09T07:07:33Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-08T21:14:04Z",false,"APPROVED"
"SaracenOne","MEMBER","Looking over this, I think this is an okay fix. I can only assume the checks here were an artefact of an early iteration of the system and that this bug occured due to testing mainly with nodes parented to editable children.","2024-07-09T00:33:22Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-07-11T11:50:00Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-07-11T12:03:10Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-07-11T12:28:36Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-18T18:15:14Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-18T18:20:03Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-18T18:23:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-18T18:24:07Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-18T18:47:08Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-18T19:05:15Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-18T19:27:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-18T21:03:53Z",false,"COMMENTED"
"KoBeWi","MEMBER","I'm not very familiar with scene import code, but this fixes the issue without causing visible regressions.","2024-07-18T21:12:01Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-08T14:16:11Z",false,"COMMENTED"
"allenwp","CONTRIBUTOR","","2024-08-09T00:05:11Z",false,"COMMENTED"
"allenwp","CONTRIBUTOR","","2024-09-27T21:49:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-13T07:52:18Z",false,"APPROVED"
"akien-mga","MEMBER","I tested and confirmed this fixes the Rust MRP.","2024-07-08T22:00:31Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-12T13:04:53Z",false,"COMMENTED"
"KoBeWi","MEMBER","Half of the containers already use VISIBLE mode, so this makes sense.","2024-07-12T13:06:30Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-08T16:09:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-08T16:05:44Z",false,"APPROVED"
"adamscott","MEMBER","Didn't test it, but looks fine to me. Also coming from @HolonProduction, I'm not worrying too much, especially since there's a lot of tests.

Thanks!","2024-08-19T13:34:09Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-08T15:11:11Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-07-08T15:16:58Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-08T17:09:51Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-22T08:39:06Z",false,"APPROVED"
"adamscott","MEMBER","As you said, it was a simple oversight.","2024-07-08T14:39:03Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-07-08T15:20:03Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-08T15:22:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-08T15:24:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-08T16:01:20Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-07-08T16:54:56Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-08T15:32:12Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-08T15:05:36Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-08T15:07:41Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-07-22T10:42:57Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-08T17:08:11Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-17T21:47:47Z",false,"APPROVED"
"akien-mga","MEMBER","Seems like this was unused since 3.0.

In 2.1 it was used for Material apparently.","2024-07-08T09:39:55Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-08T08:52:33Z",false,"APPROVED"
"akien-mga","MEMBER","That's correct. In the header it's forward-declared by way of including `servers/display_server.h`, so each display server implementation is responsible for including it if they implement one of the APIs that use Texture2D.","2024-07-08T09:22:21Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected. I also tested HDR 2D just in case and it looks correct too.

(The MRP has an animated color, so the Before/After color aren't identical.)

Before | After
-|-
![Before](https://github.com/godotengine/godot/assets/180032/475e414a-5451-42d5-ac2f-2a783354d091) | ![After](https://github.com/godotengine/godot/assets/180032/78d1323a-2daa-4dc8-8605-ab68f6ab3443)

","2024-07-09T01:34:13Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T13:14:43Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-07-08T08:29:21Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I'd be wary right now, to be honest. It doesn't look like much but it may have unintended side effects both internally and even in external user code.
For example, imagine a code path that checks for **PROPERTY_USAGE_INTERNAL** before an hardcoded check for the property named ""script"". It's not too out there, given a boolean check is much, much more efficient and should be done sooner than later.

Should be for 4.4 in my opinion.","2024-07-08T08:33:56Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-07-08T08:40:10Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-08T08:14:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-08T08:16:33Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Docs _seem_ fine","2024-07-08T08:26:45Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-08T09:13:50Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-08T07:58:44Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-07-08T08:03:48Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-08T12:50:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-08T13:18:33Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-07-09T15:06:16Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-07-09T16:13:11Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","I think it's the best change we can make for now. I'm most worried about the hardcoded file extension checks, but that was already an issue before.

We should merge this and then look into overhauling this option system some in 4.4","2024-07-15T23:42:43Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-07-16T10:59:41Z",false,"COMMENTED"
"akien-mga","MEMBER","This is new in 4.3 so doesn't break compat.","2024-07-08T08:34:33Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-08T07:03:58Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-10T20:07:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-10T20:07:34Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.","2024-07-10T20:25:52Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-10T20:26:38Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-07-10T21:06:34Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-08T08:21:47Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks ok to me, but I'll wait for RandomShaper to give it a second look too.","2024-07-09T08:48:49Z",false,"APPROVED"
"RandomShaper","MEMBER","I see you've changed the condition to use the render thread already. That matches my current best judgement of the situation. I hope my analysis helps bringing us to the same page.","2024-07-09T13:24:06Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-10T21:05:09Z",false,"COMMENTED"
"Calinou","MEMBER","I can confirm this fixes https://github.com/godotengine/godot/issues/94132.

","2024-07-10T21:05:25Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-07-11T23:33:18Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-07-11T23:38:46Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-12T00:36:19Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-07-12T00:43:32Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-07T18:23:41Z",false,"COMMENTED"
"fire","MEMBER","I think this is a good idea to unify and let everything have a human readable string instead of to string fallback.","2024-07-07T18:40:57Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-07-08T08:40:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-07T18:40:32Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-07T18:50:26Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

PS: I noticed that when you move the FileSystem dock back to the side, pressing <kbd>Ctrl + J</kbd> won't toggle the Output panel (which then becomes the first bottom panel on the list). Nothing will happen when pressing <kbd>Ctrl + J</kbd>, which feels strange. This issue also occurs in `master`.","2024-07-07T16:58:02Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally on the 2D platformer demo (with interpolation enabled at 10 ticks per second), it works as expected.","2024-07-07T17:33:41Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-07-07T15:07:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-07T16:13:04Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-07T14:49:38Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-07-07T14:56:26Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-07-07T14:56:28Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-07T19:40:10Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-07-07T19:54:12Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-07T19:58:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-09T08:38:01Z",false,"APPROVED"
"bruvzg","MEMBER","40px probably is an overkill, but it should fit font size (which 1px), it's probably better to have a few extra pixels (maybe 5px), also make sure it is tested in both Firefox and Chromium, they have quite different behaviour.

I guess `width` can block controls as well, but I'm not sure what's the best solution, it should be big enough to not break the line (or suggestion window will be misaligned), maybe something like `pointer-events: none;` will work to make it click through.","2024-07-07T08:49:01Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-07-07T15:36:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-07T07:39:41Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-07T07:38:37Z",false,"APPROVED"
"SaracenOne","MEMBER","I think its fine to give this fix a try given I can't find anything else that specifically breaks after removing it. It's still possible a regression in another area might still pop up, but evidently this does fix unambigious bugs and will make the feature more immediately useful to people.","2024-07-08T10:17:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-07T20:15:07Z",false,"COMMENTED"
"Grublady","CONTRIBUTOR","","2024-07-07T21:05:03Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-08T10:03:28Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-07-08T18:34:05Z",false,"COMMENTED"
"Grublady","CONTRIBUTOR","","2024-07-08T18:41:17Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected. Creating a project when the project path has a trailing slash also works (it's in the correct newly created folder).

### Before

https://github.com/godotengine/godot/assets/180032/49555e61-9436-4243-9463-10a6da744cc8

### After

https://github.com/godotengine/godot/assets/180032/053b5a54-dd52-4bf3-a665-3fa9053dccb4


","2024-07-11T01:30:45Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-07T08:36:35Z",false,"COMMENTED"
"alvinhochun","CONTRIBUTOR","","2024-07-07T09:50:08Z",false,"COMMENTED"
"markdibarry","CONTRIBUTOR","","2024-07-07T13:44:05Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-07T13:45:35Z",false,"COMMENTED"
"markdibarry","CONTRIBUTOR","","2024-07-07T13:46:44Z",false,"COMMENTED"
"markdibarry","CONTRIBUTOR","","2024-07-07T13:56:12Z",false,"COMMENTED"
"adamscott","MEMBER","In line with the latest fixes for pixel snapping. This seems legit and good to me, so let's go!","2024-07-08T14:20:16Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-07-08T08:43:52Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

```gdscript
# Built-in script.
extends Node

func _process(_delta):
	# Change this and save while the project is running.
	var value = ""test""
	print(value)
```","2024-07-13T22:50:16Z",false,"APPROVED"
"AThousandShips","MEMBER","Please make your changes with `git commit --amend`","2024-07-07T08:57:06Z",false,"COMMENTED"
"scotmcp","CONTRIBUTOR","","2024-07-07T14:08:27Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-07-07T14:18:56Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM","2024-07-06T18:51:06Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-07T07:42:29Z",false,"APPROVED"
"fire","MEMBER","","2024-07-06T17:29:26Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-07-06T17:31:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-07T11:04:14Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","Changes make sense to me, and hopefully that covers all edge cases.

Thanks for the error handling code as a bonus, that's very nice :)","2024-07-07T11:34:51Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-07T12:34:36Z",false,"APPROVED"
"fire","MEMBER","","2024-07-07T13:28:05Z",false,"APPROVED"
"demolke","CONTRIBUTOR","I was investigating https://github.com/godotengine/godot/issues/93997  and was digging through this code yesterday.

I wrote a similar thing but didn't finish it and saw yours today - https://github.com/demolke/godot/commit/7533dcd6ce18aed08d59d2c8af295972e21e6f1d","2024-07-07T19:03:26Z",false,"CHANGES_REQUESTED"
"Hilderin","CONTRIBUTOR","","2024-07-07T19:49:56Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-07-07T19:50:17Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-07-07T19:50:47Z",false,"COMMENTED"
"demolke","CONTRIBUTOR","","2024-07-07T20:55:02Z",false,"COMMENTED"
"demolke","CONTRIBUTOR","","2024-07-07T21:10:19Z",false,"COMMENTED"
"demolke","CONTRIBUTOR","","2024-07-07T21:52:50Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-07-07T22:14:09Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-07-07T22:15:51Z",false,"COMMENTED"
"demolke","CONTRIBUTOR","Thanks","2024-07-07T22:36:16Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-10T12:52:20Z",false,"APPROVED"
"Paulb23","MEMBER","Overall looks good, one small note inline.","2024-07-30T20:06:58Z",false,"COMMENTED"
"Paulb23","MEMBER","","2024-08-03T17:23:51Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-06T14:32:01Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-07T08:36:03Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-07-06T11:34:08Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-07T09:02:23Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-06T08:30:29Z",false,"COMMENTED"
"k0T0z","CONTRIBUTOR","","2024-07-07T07:13:07Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-07T08:19:05Z",false,"COMMENTED"
"k0T0z","CONTRIBUTOR","","2024-07-07T09:54:20Z",false,"COMMENTED"
"k0T0z","CONTRIBUTOR","","2024-07-06T05:05:41Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-06T07:59:56Z",false,"COMMENTED"
"k0T0z","CONTRIBUTOR","","2024-07-06T08:23:04Z",false,"COMMENTED"
"marcospb19","CONTRIBUTOR","","2024-07-06T03:48:28Z",false,"COMMENTED"
"marcospb19","CONTRIBUTOR","","2024-07-06T03:49:30Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-06T08:32:24Z",false,"COMMENTED"
"marcospb19","CONTRIBUTOR","","2024-07-06T09:33:50Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-06T09:39:41Z",false,"COMMENTED"
"marcospb19","CONTRIBUTOR","","2024-07-06T09:51:18Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Docs are pretty dang good now, assuming they are accurate.

Also remember to squash your commits, see [the Pull Request Workflow](https://docs.godotengine.org/en/stable/contributing/workflow/pr_workflow.html#the-interactive-rebase).","2024-07-06T19:27:35Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","@ze2j is right. Just putting these as additional suggestions so that they can be picked more easily.","2024-07-07T11:23:12Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-07-09T16:24:47Z",false,"COMMENTED"
"mhilbrunner","MEMBER","Thanks for adding these clarifications, looks good to me!","2024-07-09T16:25:56Z",false,"APPROVED"
"marcospb19","CONTRIBUTOR","","2024-07-11T01:39:32Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-07-16T06:53:14Z",false,"APPROVED"
"alvinhochun","CONTRIBUTOR","","2024-07-16T15:32:52Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I'm fine with this personally. It breaks compatibility, sure, but it does as much as a bugfix would. Unsure it should be in 4.3, though.","2024-07-05T21:53:03Z",false,"APPROVED"
"raulsntos","MEMBER","This doesn't break compat in C# because the generated bindings use the type of the getter/setter as the property type. So the C# property was already using the Vector2i type.

So regarding C# compat this change is fine :+1: ","2024-07-06T18:05:31Z",false,"APPROVED"
"fire","MEMBER","Please test!","2024-07-05T23:34:52Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (with and without temporal reprojection enabled), it works as expected. Great work :slightly_smiling_face: 

https://github.com/godotengine/godot/assets/180032/dbc99645-192f-4d7d-9b7a-a175eb1a075b","2024-07-07T02:35:37Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-17T22:03:47Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-07-17T22:04:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","This is not correct, esthetic is the US English spelling, aesthetic is generally the UK one, and we use the US spelling when it differs

Source: https://en.wiktionary.org/wiki/esthetic#English","2024-07-05T16:26:42Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","We can keep this for discussion, I don't think this change is worth it as it's a different (yet standard) spelling more US specific which fits our guidelines, though I don't think we should change `aesthetic` to `esthetic` either

If you still want this change please fix the translation files, they should not be manually edited, and after that I'll remove the changes requested and we'll have this as up for discussion ","2024-07-05T17:08:00Z",false,"DISMISSED"
"ericrallen","CONTRIBUTOR","","2024-07-05T20:04:05Z",false,"COMMENTED"
"ericrallen","CONTRIBUTOR","","2024-07-05T20:04:13Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Non-native speaker and it's my own preference too.","2024-07-05T20:58:01Z",false,"APPROVED"
"AThousandShips","MEMBER","Don't have a preference either way but this standardized things","2024-07-05T21:01:57Z",false,"APPROVED"
"marcospb19","CONTRIBUTOR","non-native here too, I didn't know ""esthetic"" existed and meant ""aesthetic"", I'm familiar with the latter","2024-07-06T03:24:48Z",false,"APPROVED"
"aaronfranke","MEMBER","I'm from the US, native English speaker, and I've always seen ""aesthetic"", never any other version. The existence of ""esthetic"" is brand new information to me. I say let's go with the correct and standard ""aesthetic"".","2024-07-06T10:41:53Z",false,"APPROVED"
"KoBeWi","MEMBER","I gave it some testing and it fixes all problems listed in the linked issues.","2024-07-06T11:06:59Z",false,"APPROVED"
"bruvzg","MEMBER","Not important, but Instead of using hard-coded `1` and `2` it would be much better for readability (and to avoid future mistakes) to add an enum with IDs, somehting like:

```c++
enum TimerID {
    TIMER_ID_MOVE_REDRAW = 1,
    TIMER_ID_WINDOW_ACTIVATION = 2,
};
```","2024-07-08T09:54:29Z",false,"APPROVED"
"TokageItLab","MEMBER","The fundamental problem is the lack of synchronization by AnimationTrackEditor::set_anim_pos(), so fixing it here is not sufficient and a more fundamental fix is needed. I sent https://github.com/godotengine/godot/pull/93980, so please check it out if you can.","2024-07-05T19:57:50Z",false,"CHANGES_REQUESTED"
"akien-mga","MEMBER","","2024-07-05T15:46:56Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","As far as documentation for the two new signals, it's fine.","2024-07-05T23:20:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-06T08:02:54Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-07-06T11:15:27Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-07-06T11:15:30Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-07-09T14:25:36Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-07-09T14:42:41Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks!

With the latest version of the PR, I'm not seeing the issue I was seeing previously. Skimming the code, the GDExtension parts look good to me - I'm not qualified to review the GDScript parts.

Anyway, this is a really great improvement! I'm really excited for this to be merged once Godot 4.4 development opens up :-)","2024-08-07T22:17:50Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-08-15T21:14:36Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-15T21:14:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-28T13:51:05Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-30T07:51:19Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-05T12:02:38Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-07-05T12:21:15Z",false,"COMMENTED"
"sorascode","CONTRIBUTOR","","2024-07-05T12:22:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-05T12:37:48Z",false,"COMMENTED"
"groud","MEMBER","Code looks good to me. It should be mergeable for 4.4.
Thanks!","2024-07-05T13:57:21Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-05T10:03:49Z",false,"APPROVED"
"KoBeWi","MEMBER","It's a proper fix for #93698

Does not fix #92382, but IMO it's not a big problem. You can normally double-click before the tooltip appears.","2024-07-05T22:17:09Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-05T08:29:27Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-07-05T13:57:54Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-05T14:18:44Z",false,"COMMENTED"
"Mantle-Core","NONE","","2024-07-05T17:31:22Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, this doesn't appear to work on my end in the editor:

https://github.com/godotengine/godot/assets/180032/23c9d9d9-6f2e-44d3-a8b5-67634a81b8d1

I would expect fog to converge quickly when the viewport is resized, but it takes a long time to happen. (The editor always redraws twice per second for some reason, even if caret blinking is disabled in the editor settings.)

I'm using https://github.com/Calinou/godot-reflection for testing, with the particle nodes hidden so that continuous redrawing doesn't occur.
","2024-07-07T02:30:21Z",false,"CHANGES_REQUESTED"
"bruvzg","MEMBER","`notify_property_list_changed` is there to update preview, this will break preview update when other font properties are changed, and is font name is unset.","2024-07-05T09:30:06Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-05T08:33:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-05T08:34:15Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-07-05T11:37:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-05T11:38:43Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-07-05T12:03:48Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-10T05:26:04Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-05T09:58:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-04T21:27:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-04T20:10:27Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-07-04T20:14:04Z",false,"COMMENTED"
"KoBeWi","MEMBER","I didn't really measure any noticeable difference (though I only tested with 10% of the import), but the code looks fine.

But I wonder why does it even depend on framerate. Is it because of `Main::iteration()` call? Maybe there is a way to call it async somehow.","2024-07-04T21:47:49Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-04T23:00:01Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-04T23:00:52Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-07-04T23:09:45Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-07-04T23:09:49Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it mostly works as expected.

Reimporting all resources from the MRP linked in https://github.com/godotengine/godot/issues/93877 takes 51 seconds with this PR. I used an optimized editor build for testing, just like in my issue.

The progress dialog clearly redraws very quickly **(photosensitivity warning)**:

https://github.com/godotengine/godot/assets/180032/8e7ab7b2-59b5-4441-bc7d-13d10bbc0a5e

However, it's not quite as fast as with the ""optimal"" settings listed in https://github.com/godotengine/godot/issues/93877, where I get 12 seconds.

If I set V-Sync mode to Disabled in the Editor Settings with this PR, I get 22 seconds. Enabling Update Continuously has no effect on import times.

I wonder if this has to do with V-Sync only being applied on the main window and not the progress window, or vice-versa.

**Edit:** Even with current `master` and optimal settings, I can't get any lower than 22 seconds (matching this PR with V-Sync disabled in the editor settings). Something else may have caused import speeds to regress between https://github.com/godotengine/godot/commit/92c8e87cd987e8d55d176608c3038e9c4646cb2c and https://github.com/godotengine/godot/commit/b97110cd307e4d78e20bfafe5de6c082194b2cd6 ‚Äì or in fact, between https://github.com/godotengine/godot/commit/92c8e87cd987e8d55d176608c3038e9c4646cb2c and 4d984b63697d840f2c823608d2c46740fb44651a, since I didn't rebase your PR when testing it.","2024-07-07T02:53:23Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-28T07:12:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-04T18:38:19Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","In https://github.com/godotengine/godot/pull/80282 this line went unchanged due to severe lack of context, so I heavily appreciate this. Wording matches that prior PR, too.

The prior line was written by by @bruvzg 3 years ago.","2024-07-04T16:45:40Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-07-05T15:26:21Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-04T19:47:48Z",false,"APPROVED"
"dalexeev","MEMBER","This makes it impossible to hover over the tooltip, so I would prefer to fix this another way. Also, I'm not sure that you are fixing the real cause of the bug, and not its symptom.

The fact that `Tree` elements are not individual controls (unlike the Inspector) of course makes using the tooltip less convenient: you need to first leave the Signals dock and hover over another signal again, rather than simply moving the cursor to another signal. But I think that it's a minor usability issue, not the cause of the bug with tooltip duplication _in some cases_.","2024-07-04T20:15:47Z",false,"COMMENTED"
"dalexeev","MEMBER","Looks good to me and it fixes the bug.

There are some inconsistencies between `is_abstract()` and `is_virtual()`. I think in the future we should remove `#ifdef TOOLS_ENABLED` code and the `!ti->disabled` check from `is_virtual()`, but for now let's leave it as is.

@MikeSchulze Please squash commits into one according to our [PR workflow](https://docs.godotengine.org/en/stable/contributing/workflow/pr_workflow.html#the-interactive-rebase). Make sure you are the commit author and @baptr is a co-author (or vice versa).","2024-07-10T07:38:21Z",false,"COMMENTED"
"dalexeev","MEMBER","Note that you are still not the commit author:

![](https://github.com/godotengine/godot/assets/47700418/db469ff9-6252-4b74-9d20-a72ca767ae9b)

Also please do not use GitHub links in commit messages in the future, see [CONTRIBUTING.md](https://github.com/godotengine/godot/blob/master/CONTRIBUTING.md#format-your-commit-messages-with-readability-in-mind):

> If your commit fixes a reported issue, please include it in the _description_ of the PR (not in the title, or the commit message) using one of the [GitHub closing keywords](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue) such as ""Fixes #1234"". This will cause the issue to be closed automatically if the PR is merged. Adding it to the commit message is easier, but adds a lot of unnecessary updates in the issue distracting from the thread.","2024-07-10T08:52:33Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-04T15:52:22Z",false,"COMMENTED"
"bruvzg","MEMBER","`EditorHelp` and `EditorLog` use `is_ready` in the few places and should be updated as well.","2024-07-16T07:02:09Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-07-16T07:06:14Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-07-16T07:07:40Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-16T18:09:05Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-26T21:24:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-04T15:50:36Z",false,"APPROVED"
"fire","MEMBER","","2024-07-04T20:38:41Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-04T12:18:39Z",false,"APPROVED"
"adamscott","MEMBER","","2024-07-04T12:29:54Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-04T12:32:41Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-04T21:31:30Z",false,"COMMENTED"
"clayjohn","MEMBER","This looks great. Thank you. 

For context this is the same behaviour as the Forward+ Renderer, the Mobile renderer is different because it doesn't do a depth prepass. 

This adds alpha prepass objects to both render lists, but the render_list_template function ensures that alpha-prepass objects are not drawn in the forward pass https://github.com/godotengine/godot/blob/a0943acda1232ee9efd2fae9a6f3138603b95979/drivers/gles3/rasterizer_scene_gles3.cpp#L2931-L2933","2024-07-19T20:59:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-04T09:14:40Z",false,"COMMENTED"
"Arnklit","CONTRIBUTOR","","2024-07-04T09:28:41Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me.","2024-07-04T09:30:40Z",false,"APPROVED"
"mihe","CONTRIBUTOR","","2024-07-04T12:31:08Z",false,"CHANGES_REQUESTED"
"Arnklit","CONTRIBUTOR","","2024-07-04T12:41:49Z",false,"COMMENTED"
"Arnklit","CONTRIBUTOR","","2024-07-04T12:41:56Z",false,"COMMENTED"
"Arnklit","CONTRIBUTOR","","2024-07-04T12:42:01Z",false,"COMMENTED"
"TokageItLab","MEMBER","The best approach is to share the calculation with the handle setting method in `bezier_track_set_key_handle_mode()`, which calculates a value that depends on the key interval. The default value is not defined for `HANDLE_SET_MODE_AUTO` when keying a newly created key, but in that case, I think the `HANDLE_MODE_BALANCED` or `HANDLE_MODE_MIRRORED` calculation should be applied. `HANDLE_MODE_MIRRORED` should be a concept closer to the current default in that it adopts a length that is x0.25 the interval-dependent length.","2024-07-04T12:57:30Z",false,"COMMENTED"
"TokageItLab","MEMBER","Well, since follow up is possible later, I think it is enough as a stop gap for this inconvenient situation for now.","2024-07-04T13:41:02Z",false,"APPROVED"
"mihe","CONTRIBUTOR","","2024-07-04T14:46:24Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-08T09:16:45Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-04T09:00:09Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-04T09:29:03Z",false,"COMMENTED"
"mhilbrunner","MEMBER","Note that this is an upstream ENet function, and the docs are [verbatim](http://enet.bespin.org/group__host.html) ENet docs.

`timeout` is a bit tricky here: see discussion [here](https://github.com/lsalzman/enet/issues/136) and [here](https://github.com/lsalzman/enet/issues/135#issuecomment-680235530).

With these possible footguns, we should maybe add some further advice and information here, or at least point to it elsewhere.

That said, that can be followup work or an issue, this PR is good and correct as far as I can see. Thanks for taking the time to improve something you had to find out yourself for everyone else :)","2024-07-04T20:48:13Z",false,"APPROVED"
"bruvzg","MEMBER",">`use_llvm=yes linker=lld`

These flags are not supported on macOS and do nothing (`linker` is Linux only flag, and it's always using LLVM on macOS).

While this change should work (at least on macOS), there's likely something wrong with your Xcode setup, since it should not be necessary. Try resetting active developer directory (`sudo xcode-select -switch /Applications/Xcode.app`) and/or reinstalling command line tools (`sudo xcode-select --install`).","2024-07-04T07:36:00Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-07-04T05:34:28Z",false,"APPROVED"
"fire","MEMBER","","2024-07-04T20:39:08Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","Looks good.

I would just double check how to deal with deprecated properties. I think `PROPERTY_USAGE_NONE` is correct for those.","2024-07-04T20:56:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-04T21:29:18Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-07-05T05:46:55Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-07-04T05:32:56Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me overall, and doesn't seem to introduce regressions in some quick testing on projects with CSV translations.","2024-07-04T14:02:05Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-04T14:15:48Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-04T14:15:51Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-04T16:02:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-04T12:21:36Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-07-04T12:39:10Z",false,"COMMENTED"
"lawnjelly","MEMBER","Actually this is likely fine for now, we can look at moving to AABB in separate PR if there's support.","2024-07-04T18:47:07Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-04T21:08:39Z",false,"APPROVED"
"RandomShaper","MEMBER","LGTM.","2024-07-03T20:37:24Z",false,"APPROVED"
"AThousandShips","MEMBER","Makes sense, haven't tested yet though but makes sense","2024-07-04T07:53:22Z",false,"APPROVED"
"akien-mga","MEMBER","Seems to fix the bug from a quick test, though the bug's apparent randomness is hard to correlate with how it's being fixed.

The code could maybe be made slightly cleaner but the only ideas I have may actually be more confusing that the current one, e.g.:
```cpp
FileCache fc;
fc.type = split[1].get_slice(""/"", 0);
fc.resource_script_class = split[1].get_slice(""/"", 1); // Empty string if there's no separator.
```
I think I prefer the `has` check which makes it clear it's not always present.","2024-07-04T12:36:11Z",false,"APPROVED"
"Naros","CONTRIBUTOR","Works as expected, I don't notice any unnecessary resize events and the GraphEdit works when panning, moving nodes, scrolling the canvas both with/without snapping.  üëç Will this be backported to 4.2 as well?","2024-07-04T17:39:17Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-04T20:04:16Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-07-04T23:46:31Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-05T09:54:52Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-05T13:31:54Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-04T19:49:03Z",false,"APPROVED"
"adamscott","MEMBER","","2024-07-03T17:31:24Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-03T21:09:16Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-07-03T21:13:43Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-23T01:11:58Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-23T01:12:16Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` 568589c9d8c763bfb3a4348174d53b42d7c59f21), it works as expected.

**Testing project:** [truck_town_wheel_visualizer.zip](https://github.com/user-attachments/files/16720666/truck_town_wheel_visualizer.zip)

https://github.com/user-attachments/assets/cfd99bef-90fd-4b69-b7bf-fcba8c1dee6a
","2024-08-23T01:12:22Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-27T09:49:53Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-04T10:00:51Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-04T10:00:55Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-04T12:14:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-03T12:25:17Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","The chances of this are astronomically low, but it sure would be _funny_ for it to be the cause of a crash.","2024-07-03T11:29:23Z",false,"APPROVED"
"kleonc","MEMBER","","2024-07-03T17:00:52Z",false,"COMMENTED"
"Togira123","CONTRIBUTOR","","2024-07-03T17:15:43Z",false,"COMMENTED"
"kleonc","MEMBER","LGTM! :+1:

@Togira123 BTW it's also good to keep the PR description (https://github.com/godotengine/godot/pull/93893#issue-2388336267) up to date (editing it after relevant changes), for future reference.","2024-07-04T09:30:46Z",false,"APPROVED"
"adamscott","MEMBER","The code seems way more comprehensible after this PR. Thanks @m4gr3d !

Otherwise, not to be too much nitpicky, but shouldn't the `static const int` be in an enum instead?","2024-07-03T13:16:52Z",false,"APPROVED"
"clayjohn","MEMBER","Looks good to me!","2024-07-03T21:38:02Z",false,"APPROVED"
"akien-mga","MEMBER","Seems ok.","2024-07-04T08:52:59Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Approved already in RocketChat... chat.

As seen by the issue above, It's really worth paying attention to this when both ""node"" and ""property path"" matter.

I reiterate briefly for future reference: for some methods (`Object.get_indexed()`, `Tween.tween_property()`, etc.), the `:` prefix  can be **optionally** omitted. This is because these methods only expect their given **NodePath** to refer to a property, and use `get_as_property_path()` internally to ensure it does.

Although Godot users are pretty much used to it (it's really nice), this should be seen as an exception, and ideally should be _briefly_ stated for each method that does this.","2024-07-03T10:22:37Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks, that sounds great to me!","2024-07-03T15:28:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-09T15:45:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-09T15:59:39Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-07-09T16:34:59Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-09T18:20:24Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-03T07:51:47Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-07-03T08:23:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-03T08:23:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-03T08:24:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-03T08:25:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-03T08:26:20Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Preemptively approving of this because this is actually how most people _assume_ it works, on Discord. Even not-so-savvy users can agree this makes sense.","2024-07-03T09:49:55Z",false,"APPROVED"
"adamscott","MEMBER","What a one-liner.","2024-09-04T16:41:46Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-03T08:09:35Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-03T09:07:45Z",false,"COMMENTED"
"TV4Fun","CONTRIBUTOR","","2024-07-03T19:35:27Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-03T23:44:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-03T23:49:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-03T23:52:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-03T23:52:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","I did some testing and the files are correctly skipped or included. Could be nice to test some plugins that use customization (I don't have one).","2024-07-04T00:26:47Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-03T08:05:24Z",false,"COMMENTED"
"JacobMillner","CONTRIBUTOR","","2024-07-03T09:52:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-03T09:53:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-03T09:54:26Z",false,"COMMENTED"
"JacobMillner","CONTRIBUTOR","","2024-07-03T09:56:47Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-03T10:02:00Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-07-03T12:38:25Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-03T21:47:26Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Documentation is much better and the rationale makes sense to the (not so savvy) me.","2024-07-02T18:17:54Z",false,"APPROVED"
"fire","MEMBER","","2024-07-02T23:00:24Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

Grid appearance is a bit strange when rotating the view in orthogonal mode though: the X/Y and Y/Z planes remain visible without any rotation even when the camera is slightly offset from the axis. This is not an issue introduced by this PR, but it'll become more noticeable since it'll be shown by default.

https://github.com/godotengine/godot/assets/180032/02190f5c-9c36-4df5-b87f-5c085fdc5822


","2024-07-03T01:25:11Z",false,"APPROVED"
"aaronfranke","MEMBER","I like this. I introduced those editor settings bools years ago, but yeah it makes sense to always have it enabled in ortho view.","2024-07-03T07:46:54Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-03T11:44:12Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-09T08:38:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-08T17:11:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-02T11:22:21Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-02T16:02:04Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-07-04T06:58:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-02T11:26:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-02T11:26:55Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-02T11:41:00Z",false,"COMMENTED"
"CookieBadger","CONTRIBUTOR","","2024-07-02T11:43:21Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-02T11:49:55Z",false,"COMMENTED"
"CookieBadger","CONTRIBUTOR","","2024-07-02T11:51:09Z",false,"COMMENTED"
"TokageItLab","MEMBER","Working fine on testing.","2024-07-07T15:32:51Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-02T10:44:07Z",false,"APPROVED"
"lawnjelly","MEMBER","Looks good to me from quick check.","2024-09-10T14:01:11Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-07-02T11:16:00Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-02T09:58:55Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-07-02T12:27:30Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-07-02T14:47:35Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-02T15:21:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-02T10:48:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-02T10:48:57Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-02T06:46:43Z",false,"COMMENTED"
"groud","MEMBER","Ah well, having a quick look at the previous PR I was wondering if the order mattered. I assumed it didn't, but well, I guess I was wrong. This fix looks good.","2024-07-02T09:20:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-02T10:54:18Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-02T19:02:15Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-02T19:02:20Z",false,"APPROVED"
"jsjtxietian","CONTRIBUTOR","","2024-07-03T02:54:32Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-02T03:15:14Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-07-02T05:50:57Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-02T09:00:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-02T09:01:48Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-02T15:06:43Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-02T15:11:19Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-02T15:19:02Z",false,"COMMENTED"
"EnlightenedOne","NONE","","2024-10-14T11:24:38Z",false,"COMMENTED"
"EnlightenedOne","NONE","","2024-10-14T11:27:47Z",false,"COMMENTED"
"QbieShay","CONTRIBUTOR","","2024-08-06T08:11:54Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-08-16T00:12:59Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-08-27T23:13:51Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-02T00:19:46Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected. WAV files of varying sample rates are handled correctly out of the box, along with mono/stereo audio.

However, `AudioStreamWAV.load_from_buffer()` should be added for parity with AudioStreamOggVorbis. This allows loading audio data from memory, without needing it to be written to disk first. This is useful for networked scenarios and unit testing.

**Testing project:** [runtime_save_load.zip](https://github.com/user-attachments/files/16118031/runtime_save_load.zip)[^1]

[^1]: This is https://github.com/godotengine/godot-demo-projects/tree/master/loading/runtime_save_load modified to support WAV loading. No WAV samples are included in `examples/`.","2024-07-07T03:06:35Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","<img src=https://github.com/godotengine/godot/assets/66727710/0689010b-86cd-462b-a938-231eb5012f92 height=64p>
","2024-07-07T13:38:02Z",false,"COMMENTED"
"what-is-a-git","NONE","","2024-07-07T13:45:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","And fix the indentation ","2024-07-07T13:54:21Z",false,"COMMENTED"
"what-is-a-git","NONE","","2024-07-07T13:58:39Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","The feature itself has been requested for a really long time. Although this is a bit awkward, I cannot exactly speak for the implementation. As for me, documentation seems fine now.","2024-07-09T14:50:27Z",false,"COMMENTED"
"what-is-a-git","NONE","","2024-07-10T13:20:29Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","See above for thoughts. This would heavily need the feedback of the audio team, to see if this is actually desirable as is.","2024-07-10T16:01:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-01T20:27:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-01T20:37:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-01T17:14:44Z",false,"COMMENTED"
"wheatear-dev","CONTRIBUTOR","","2024-07-01T17:27:05Z",false,"COMMENTED"
"wheatear-dev","CONTRIBUTOR","","2024-07-01T17:30:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-01T17:30:43Z",false,"COMMENTED"
"Geometror","MEMBER","Looks good to me, I leave it up to you whether you want to implement my suggestions. We can always extend the test cases later.","2024-07-12T10:40:14Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-12T11:12:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-12T11:31:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-12T11:32:08Z",false,"COMMENTED"
"wheatear-dev","CONTRIBUTOR","","2024-07-12T11:32:24Z",false,"COMMENTED"
"wheatear-dev","CONTRIBUTOR","","2024-07-12T11:33:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-12T11:33:44Z",false,"COMMENTED"
"wheatear-dev","CONTRIBUTOR","","2024-07-12T11:36:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-18T13:48:15Z",false,"DISMISSED"
"Calinou","MEMBER","Tested locally, it works as expected in all rendering methods. Thanks for improving the error reporting on mismatched array sizes too :slightly_smiling_face: 

![image](https://github.com/godotengine/godot/assets/180032/e3013ff7-054b-45c6-b2b0-440b98d3471b)

```glsl
shader_type canvas_item;

void fragment() {
	const int SIZE = 1 + 2;
	int items[SIZE] = { 1, 2, 3 };

	int items2[SIZE + 1] = { 1, 2, 3, 4 };
	int items3[SIZE * 2] = { 1, 2, 3, 4, 5, 6 };

	COLOR.gb *= float(items3[5]) * 0.1;

	// Not valid, as it needs to be a constant.
	//int dyn = 3;
	//int items_dyn[SIZE + dyn] = { 1, 2, 3, 4, 5, 6 };
}
```","2024-07-10T21:58:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-01T16:31:38Z",false,"COMMENTED"
"allenwp","CONTRIBUTOR","","2024-07-01T16:33:04Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-01T17:03:20Z",false,"COMMENTED"
"allenwp","CONTRIBUTOR","","2024-07-01T17:05:45Z",false,"COMMENTED"
"allenwp","CONTRIBUTOR","","2024-07-01T17:40:05Z",false,"COMMENTED"
"allenwp","CONTRIBUTOR","","2024-07-01T18:58:05Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-01T19:44:51Z",false,"COMMENTED"
"allenwp","CONTRIBUTOR","","2024-07-01T20:31:45Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-01T20:45:58Z",false,"COMMENTED"
"allenwp","CONTRIBUTOR","","2024-07-01T21:31:40Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-01T21:35:35Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-02T10:41:14Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-07-01T18:19:24Z",false,"COMMENTED"
"Carbonyte","NONE","","2024-07-01T18:40:42Z",false,"COMMENTED"
"fire","MEMBER","","2024-07-01T15:53:03Z",false,"APPROVED"
"TokageItLab","MEMBER","Is there a case where I need to manually add a global library? It seems to me that this is rather a prohibited method with that argument.

AnimationMixer has a global library by default with an empty string as key, so if you want to add an animation to the global library, you can write the following.

```gdscript
var global_lib = mixer.get_animation_library("""")
global_lib.add_animation(""name"", animres)
```

If anything is missing in the documentation, it is this code.","2024-07-01T15:53:19Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","","2024-07-01T16:26:02Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-07-01T16:27:50Z",false,"APPROVED"
"anniryynanen","CONTRIBUTOR","I reproduced the issue and confirm that this PR fixes it. The code looks good, I don't think it's likely to break anything.","2024-07-08T08:36:06Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-08T09:15:38Z",false,"APPROVED"
"dalexeev","MEMBER","It's sad that we reintroduce the bug that `if freed` and `if not freed` are both true, but I think it's better than introducing `freed != null` since we haven't reached a consensus on it.

If we can find a safe way to fix the first bug without changing the second, that would be great. But until then, reverting the change looks reasonable to me.","2024-07-01T16:16:54Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Should've been **ME**

###### I need to rebase https://github.com/godotengine/godot/pull/93735 again now.

It's okay to come up with different wording another time, it's important to fix inaccuracies first.","2024-07-01T09:50:28Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great! Thank you!","2024-07-19T21:04:55Z",false,"DISMISSED"
"Calinou","MEMBER","Tested locally, it works as expected when the root viewport has HDR 2D enabled. However, when the root viewport has HDR 2D disabled, this makes CanvasModulate in SubViewports no longer match each other depending on whether they have HDR 2D enabled.

The SubViewport on the left has HDR 2D disabled, while the one on the right has HDR 2D enabled. Using Forward+.

**Testing project:** [test_pr_93802.zip](https://github.com/user-attachments/files/16317690/test_pr_93802.zip)

### HDR 2D *enabled* on the root Viewport (working correctly in this PR)

Before | After
-|-
![Before](https://github.com/user-attachments/assets/d6a2cafe-1e9c-4df8-a4e2-81fc85b9dc96) | ![After](https://github.com/user-attachments/assets/17afa55b-4ab5-4788-aa0d-6373b4a69faa)


### HDR 2D *disabled* on the root Viewport (not working correctly in this PR)

Before | After
-|-
![Before](https://github.com/user-attachments/assets/0be4cbc4-9761-4555-b41e-1e60b1ce7fbd) | ![After](https://github.com/user-attachments/assets/84ce623e-bde4-4f4e-8941-83bf7c927462)","2024-07-19T23:49:10Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-23T13:49:35Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-07-23T16:51:17Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-07-23T17:29:25Z",false,"COMMENTED"
"akien-mga","MEMBER","I rebased to remove the reverted commits.

Approving on the basis on Clay's original approval, which was later confirmed in discussion.","2024-07-24T07:50:46Z",false,"APPROVED"
"YeldhamDev","MEMBER","Both bugs were fixed from my tests.","2024-07-03T18:42:08Z",false,"APPROVED"
"KoBeWi","MEMBER","This makes the node signal about size changed after the size is actually updated, which makes sense.

From what I see, `item_rect_changed()` notifies children to update their size, so theoretically it can be a problem when `NOTIFICATION_RESIZED` causes further size change. However such problems are usually fixed by using `call_deferred()` anyway, so it won't matter in most cases.","2024-07-08T14:37:12Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-01T07:37:02Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-07-01T08:43:17Z",false,"COMMENTED"
"k0T0z","CONTRIBUTOR","","2024-07-01T08:46:43Z",false,"COMMENTED"
"k0T0z","CONTRIBUTOR","","2024-07-01T08:49:31Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-01T09:00:08Z",false,"COMMENTED"
"k0T0z","CONTRIBUTOR","","2024-07-01T10:01:36Z",false,"COMMENTED"
"fire","MEMBER","","2024-06-30T23:05:12Z",false,"APPROVED"
"markdibarry","CONTRIBUTOR","","2024-09-24T19:13:02Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-09-24T22:26:15Z",false,"APPROVED"
"fire","MEMBER","","2024-06-30T23:05:29Z",false,"APPROVED"
"kus04e4ek","CONTRIBUTOR","","2024-07-01T08:38:02Z",false,"COMMENTED"
"aaronp64","CONTRIBUTOR","","2024-07-01T14:05:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-30T12:26:33Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-30T12:28:22Z",false,"COMMENTED"
"Geometror","MEMBER","Nice work! Even though this ideally should be split in 2 PRs, I think it's fine like that. ","2024-07-10T14:03:29Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-18T13:16:47Z",false,"APPROVED"
"paulloz","MEMBER","Thank you for the submission!

Looks good to me, and fits the GDScript behaviour.","2024-09-12T12:33:33Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-09-12T17:19:21Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-30T10:37:48Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-30T11:02:21Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-30T11:08:48Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-06-30T11:48:21Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-30T10:33:53Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-30T11:20:29Z",false,"COMMENTED"
"Andre-Tita","NONE","","2024-06-30T11:34:29Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-30T11:52:03Z",false,"COMMENTED"
"Andre-Tita","NONE","","2024-06-30T11:55:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-30T11:55:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-30T12:01:38Z",false,"DISMISSED"
"KoBeWi","MEMBER","","2024-07-06T18:06:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-30T10:35:35Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-30T14:59:51Z",false,"COMMENTED"
"Andre-Tita","NONE","","2024-06-30T15:24:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-30T15:26:16Z",false,"COMMENTED"
"Andre-Tita","NONE","","2024-06-30T15:32:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-30T15:33:30Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-30T15:48:14Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-30T15:48:24Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-30T15:59:02Z",false,"COMMENTED"
"Andre-Tita","NONE","","2024-06-30T16:00:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-30T16:01:25Z",false,"COMMENTED"
"Geometror","MEMBER","Tested and works fine (although there are other things [like node selection through the titlebar] which are broken since GraphEdit wasn't really designed for containing rotated GraphNodes). 
So I'm still not sure if this is worth it because then we need to fix all of these other issues too.","2024-07-01T12:13:53Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good. I pushed an amend to make the commit message more explicit.","2024-07-01T08:19:17Z",false,"APPROVED"
"fire","MEMBER","","2024-07-01T14:12:59Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-18T13:48:49Z",false,"CHANGES_REQUESTED"
"lyuma","CONTRIBUTOR","","2024-06-30T03:37:03Z",false,"COMMENTED"
"Jordyfel","CONTRIBUTOR","","2024-06-30T03:45:34Z",false,"COMMENTED"
"Jordyfel","CONTRIBUTOR","","2024-06-30T03:47:01Z",false,"COMMENTED"
"Jordyfel","CONTRIBUTOR","","2024-06-30T03:49:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-08T00:31:12Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-08T00:33:30Z",false,"COMMENTED"
"Jordyfel","CONTRIBUTOR","","2024-07-08T02:13:53Z",false,"COMMENTED"
"Jordyfel","CONTRIBUTOR","","2024-07-08T02:17:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-08T02:26:09Z",false,"COMMENTED"
"Jordyfel","CONTRIBUTOR","","2024-07-08T02:29:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-08T11:18:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-08T11:29:11Z",false,"APPROVED"
"JekSun97","NONE","","2024-07-02T01:19:35Z",false,"APPROVED"
"anniryynanen","CONTRIBUTOR","I reproduced the issue and confirm that this PR fixes it.

I think the approach is good and it shouldn't be at risk of causing other bugs. ~~I might change the increment to a bigger number, now if a control has say, size (0, 50), starting to scale the width up from 0 makes the height quickly go offscreen.~~ _(Edit: Scratch that, it'd quickly go offsceen for (1, 50) too.)_","2024-07-12T10:03:58Z",false,"COMMENTED"
"anniryynanen","CONTRIBUTOR","","2024-07-12T10:30:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-29T12:35:18Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-01T12:09:47Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-22T08:38:41Z",false,"APPROVED"
"TokageItLab","MEMBER","Since it applies to the whole Animation that the track path is relative to the root_node, not only the root_motion_track, you should fill in the details in `track_set_path()` document, then quote it in root_motion_track document as ""See also [method Animation.track_set_path].""","2024-07-04T13:49:18Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","","2024-07-06T02:01:03Z",false,"CHANGES_REQUESTED"
"scotmcp","CONTRIBUTOR","","2024-07-06T02:02:33Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-07-06T02:09:19Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","","2024-07-06T02:11:48Z",false,"COMMENTED"
"scotmcp","CONTRIBUTOR","","2024-07-06T02:12:48Z",false,"COMMENTED"
"scotmcp","CONTRIBUTOR","","2024-07-06T02:14:38Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-07-06T02:15:38Z",false,"COMMENTED"
"scotmcp","CONTRIBUTOR","","2024-07-06T02:23:13Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-07-06T02:31:50Z",false,"COMMENTED"
"scotmcp","CONTRIBUTOR","","2024-07-06T02:48:05Z",false,"COMMENTED"
"scotmcp","CONTRIBUTOR","","2024-07-06T02:48:46Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-07-06T03:54:18Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-07-06T14:27:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-06T14:33:10Z",false,"COMMENTED"
"Faless","COLLABORATOR","LGTM!

See my comment regarding keeping the type if the `bigint` doesn't safely fit a `Number`.
It's not really a blocker, since truncating / approximating has been the behavior so far.","2024-07-01T03:56:53Z",false,"APPROVED"
"adamscott","MEMBER","","2024-07-02T12:01:23Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-07-02T12:11:11Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-07-02T15:05:49Z",false,"COMMENTED"
"markdibarry","CONTRIBUTOR","Using the MRP, when moving around on screen, I was able to see the 1px gaps on master and it looks like there aren't any using this PR. LGTM.","2024-07-17T12:21:24Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-17T12:27:05Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-29T17:23:07Z",false,"APPROVED"
"Macksaur","CONTRIBUTOR","","2024-07-02T03:18:11Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Particularly nice for `application/config/icon`. Looks fine.

We should look into another way to go about this, perhaps. It can be difficult to keep track of all of these extensions if more are added.
Simpler way out, make them share the same constant String. Alternatively, the way the Image resource is imported into the project should matter, not its extension.","2024-06-29T17:59:21Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-27T21:43:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-29T16:02:30Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-29T16:28:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-04T14:45:37Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-04T14:46:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-29T15:24:03Z",false,"COMMENTED"
"poga","CONTRIBUTOR","","2024-06-29T15:37:05Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-29T16:06:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-29T16:28:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","The commits need to be squashed.","2024-06-29T16:35:57Z",false,"APPROVED"
"adamscott","MEMBER","Testing some games, all seems right. Tested out the issue MRP and it fixes it as well. Let's go, then?","2024-06-29T15:04:12Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-29T13:14:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-29T13:14:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-29T13:43:47Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-06-29T13:44:28Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-06-29T13:45:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-29T13:48:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-29T13:49:07Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-29T13:56:45Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-06-29T14:01:48Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-29T14:02:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-29T14:09:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-29T14:26:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-29T14:33:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-29T14:50:43Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-07-22T06:46:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-22T08:56:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-22T09:20:07Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-07-22T12:00:04Z",false,"APPROVED"
"fire","MEMBER","I am affected by the VRR problem on GSync, can test.

If this is equivalent to the Nvidia profile to disable GSync it would be good to me.

Hardware: 
https://www.dell.com/en-ca/shop/alienware-34-curved-qd-oled-gaming-monitor-aw3423dw/apd/210-bcye/monitors-monitor-accessories","2024-06-29T13:31:37Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally on Windows 11 23H2 and NVIDIA 555.85, it works as expected.

![image](https://github.com/user-attachments/assets/b629fb88-5fab-473f-aaad-e70430a3bf1c)

Using my LG C2's VRR display information (press the green button 7 times on the remote). G-Sync is enabled system-wide on both videos, on both fullscreen and windowed apps. The profile successfully prevents Godot from using VRR in windowed mode, leading to smoother mouse cursor movement:

### Before

https://github.com/user-attachments/assets/0f5106a0-60d3-40d5-8dca-b2cb79b1800f

### After

https://github.com/user-attachments/assets/a1c4e1ff-a249-4526-9509-0c66d98aaa52

This may be worth considering for a 4.2 cherrypick, although there's some risk of unforeseen regressions. We might want to wait for 4.3 to be released to get some feedback before cherry-picking this.","2024-07-18T21:42:24Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-29T12:41:59Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-06-29T13:08:17Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-29T13:19:20Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-29T13:25:29Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-29T13:22:48Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-29T13:41:26Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-08-29T13:41:33Z",false,"COMMENTED"
"Calinou","MEMBER","Looks good to me.","2024-08-29T13:42:06Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-07-11T07:23:46Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-29T10:00:30Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Sure","2024-06-29T10:37:04Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-29T10:57:42Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-06-29T11:30:34Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-29T11:32:25Z",false,"APPROVED"
"zeux","CONTRIBUTOR","","2024-06-29T02:07:33Z",false,"COMMENTED"
"fire","MEMBER","@lyuma Can I have a second opinion on this?

I agree with the approach to this problem with the lod system. 

Previously, I wasn't able to systematically make a justification for disabling the normal raycaster, now thanks to zeux we have some justification.","2024-06-29T13:30:07Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/f0d15bbfdfde1c1076903afb7a7db373580d5534), it works as expected.

**Testing project:** [test_base_mesh.zip](https://github.com/user-attachments/files/16075644/test_base_mesh.zip)

Import speed seems to be ever so slightly faster. With this PR, it takes 21 seconds instead of 23 seconds to open the project with `.godot/` removed, reimport all 3D scenes then exit the editor. (This is with the [import speed-optimized editor settings](https://github.com/godotengine/godot/issues/93877).)

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 39)
</details>

Strangely enough, primitive count when previewing the Camera3D in the scene hasn't changed at all with this PR:

LOD disabled | Mesh LOD Threshold[^1] = `1.0` | Mesh LOD Threshold = `1024.0`
-|-|-
![LOD disabled](https://github.com/godotengine/godot/assets/180032/72e67903-42da-44c6-bc36-cfeaf39754f1) | ![1](https://github.com/godotengine/godot/assets/180032/ebd6f2ca-b914-4ea7-86a5-0c2fe2f81e37) | ![1024](https://github.com/godotengine/godot/assets/180032/4d436075-3134-446a-b688-50438c003365)

[^1]: Can be changed in the Project Settings.","2024-07-03T00:43:08Z",false,"APPROVED"
"fire","MEMBER","","2024-07-03T01:22:47Z",false,"APPROVED"
"clayjohn","MEMBER","I think the PR looks great overall and I appreciate the careful testing. 

I have raised this with the asset team on rocketchat and will continue the discussion there, but IMO we should just remove the raycaster code entirely. We added that code in the first place to mitigate what we saw as quality issues in vanilla MeshOptimizer. Now that MeshOptimizer is producing comparable quality normals, I would just remove it entirely","2024-07-03T22:03:42Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-07-04T17:29:13Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","","2024-06-29T06:20:35Z",false,"COMMENTED"
"akien-mga","MEMBER","I'd consider this partially a bugfix as the performance impact of the new feature can be pretty drastic.

This seems like a good first step to address it, so let's give it a spin.","2024-07-04T10:35:02Z",false,"APPROVED"
"fire","MEMBER","I mentioned this proposal at the gltf meeting so I agree with it. Did not test yet.","2024-06-28T22:15:22Z",false,"APPROVED"
"fire","MEMBER","","2024-06-28T22:16:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-29T08:47:15Z",false,"APPROVED"
"anniryynanen","CONTRIBUTOR","I reproduced the issue in v4.3.beta2 and confirm that this PR fixes it. Regression risk is close to none.","2024-07-09T09:40:01Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-09T10:43:53Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Okay, yeah, this is fine.","2024-06-29T13:00:18Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-29T13:18:28Z",false,"APPROVED"
"Calinou","MEMBER","","2024-06-28T21:24:22Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-28T21:24:30Z",false,"COMMENTED"
"fire","MEMBER","I am ok with the feature proposal.

Did not test on my use cases.","2024-06-28T19:55:26Z",false,"APPROVED"
"KoBeWi","MEMBER","This can cause input leaking. Pressing letter keys in Tree will search, but the event can be used elsewhere and trigger another action.

Does not cause problems in the editor though (thanks to separate shortcut contexts) and fixes the issue.","2024-07-08T12:04:49Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-09T20:16:27Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-09T20:17:11Z",false,"COMMENTED"
"KoBeWi","MEMBER","I think this issue might apply to other nodes with incremental search, but with Tree it's most noticeable in the editor.","2024-07-09T20:18:25Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-28T17:54:31Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","","2024-06-28T20:53:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-29T10:54:29Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-04T09:15:24Z",false,"APPROVED"
"clayjohn","MEMBER","Looks good to me. 

I have tested with the original MRP and with Desert Light and neither are crashing now!","2024-07-01T16:31:10Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","Looks great!","2024-06-28T23:07:00Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","Looks good to me!","2024-06-29T06:25:27Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-06-29T06:36:37Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-29T12:01:48Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-29T12:04:23Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-29T12:06:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-28T13:17:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-28T13:47:00Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","","2024-06-29T06:26:18Z",false,"APPROVED"
"fire","MEMBER","","2024-06-28T13:12:00Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-28T09:24:27Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-28T11:16:23Z",false,"APPROVED"
"AThousandShips","MEMBER","Code makes sense","2024-06-28T12:27:56Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-28T12:41:03Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-06-28T15:06:17Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-06-28T18:02:41Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Both the name and documentation description of this warning do not mean much to the user that is going to stumble upon this warning while writing a lambda function.","2024-06-28T07:25:00Z",false,"COMMENTED"
"akien-mga","MEMBER","Makes sense to me.

I agree that it could use mentioning lambdas at least in the description, and maybe in the warning's name (but that will start being long).
People familiar with lambdas will understand what capture refers to, but people not familiar with lambdas will also be going through the list of warnings to see what's useful to them, so it would help to scope it better to the relevant concept.","2024-06-28T07:58:01Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-28T08:13:51Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Begrudgingly we cannot have warning names that span the width of your monitor.","2024-06-28T08:51:48Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-06-28T12:20:29Z",false,"COMMENTED"
"decacis","CONTRIBUTOR","","2024-06-28T18:40:25Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","(Assuming this is factually accurate now)","2024-06-28T19:21:36Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","Looks good to me","2024-06-29T01:21:06Z",false,"APPROVED"
"akien-mga","MEMBER","I confirm that this fixes the issue for me.","2024-06-28T09:37:16Z",false,"APPROVED"
"akien-mga","MEMBER","Tested on Fedora 40, with KDE Plasma, both Wayland (XWayland) and X11 flavors of it.

On both, I can reproduce the bug in `master`, and this PR fixes it.

The bug isn't reproducible with the Wayland DisplayDriver, but it doesn't support multiple windows so that's expected.","2024-06-28T10:16:03Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-06-27T19:30:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-28T09:00:13Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me.","2024-06-28T08:44:37Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Some of the feedback also applies to the duplicated descriptions in Viewport.","2024-06-27T21:51:58Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-27T22:13:54Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-28T00:06:24Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","On the class reference side of things this is fine","2024-07-05T23:36:22Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","","2024-07-06T16:06:48Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-06T18:23:01Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-28T09:26:21Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-01T12:09:25Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Pretty good now, assuming it's accurate.","2024-06-30T19:34:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-27T12:17:03Z",false,"APPROVED"
"Geometror","MEMBER","","2024-06-27T12:21:31Z",false,"APPROVED"
"TokageItLab","MEMBER","This should never be merged.

Because AnimationTree has been able to have its own AnimationLibrary since 4.2, it is necessary to use AnimationPlayerEditor to edit it.

So what needs to be fixed is the display priority issue, not the disabling of AnimationTree's use of AnimationPlayerEditor.

Although https://github.com/godotengine/godot/pull/93632 approach is more right than this PR, but the problem is how to define the order. Maybe a new API for defining order is needed somewhere.","2024-06-30T16:37:42Z",false,"CHANGES_REQUESTED"
"Mickeon","CONTRIBUTOR","","2024-06-27T10:51:09Z",false,"DISMISSED"
"akien-mga","MEMBER","","2024-06-27T12:03:29Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-27T12:05:30Z",false,"COMMENTED"
"vgezer","CONTRIBUTOR","","2024-06-27T12:09:19Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-27T12:18:52Z",false,"COMMENTED"
"vgezer","CONTRIBUTOR","","2024-06-27T13:01:32Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-27T14:43:25Z",false,"COMMENTED"
"akien-mga","MEMBER","Aside from the doc formatting fix, this looks good to me.","2024-06-27T15:06:40Z",false,"APPROVED"
"akien-mga","MEMBER","Tested, I confirm this fixes the linked issue and seems to reintroduce the same expected behavior as in 4.2.2-stable.","2024-06-28T08:30:27Z",false,"APPROVED"
"fire","MEMBER","I did not test. The update makes sense and looks good.

Checking:

`pre-release` upstream now.","2024-06-27T14:53:43Z",false,"APPROVED"
"akien-mga","MEMBER","The release is fully published upstream now with the same commit.

Tested that it compiles fine with mingw for Windows x86_32.

I'm a bit wary of jumping on a new feature branch right as it's released, but upstream is quick to solve regressions so it's worth giving it a go and it should hopefully be stable enough by the time we release 4.3.","2024-06-28T08:26:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-27T09:06:33Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-27T09:06:57Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-27T09:37:40Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-27T07:26:18Z",false,"APPROVED"
"AThousandShips","MEMBER","This needs to be done in a platform independent fashion, you need to fix the style issues so the CI can run to verify it on all platforms, but this would need to run on all platforms with reasonable support IMO, or be put just in the specific platform","2024-06-27T08:37:19Z",false,"DISMISSED"
"TV4Fun","CONTRIBUTOR","","2024-06-28T04:53:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-03T07:47:03Z",false,"COMMENTED"
"TV4Fun","CONTRIBUTOR","","2024-07-04T02:36:15Z",false,"COMMENTED"
"TV4Fun","CONTRIBUTOR","","2024-07-04T02:37:13Z",false,"COMMENTED"
"TV4Fun","CONTRIBUTOR","","2024-07-04T02:37:26Z",false,"COMMENTED"
"TV4Fun","CONTRIBUTOR","","2024-07-04T02:37:35Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-04T08:01:44Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-07-04T08:07:36Z",false,"COMMENTED"
"TV4Fun","CONTRIBUTOR","","2024-07-04T20:49:40Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","This looks good to me.","2024-06-27T02:51:09Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","Looks good to me too","2024-06-27T02:56:43Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","","2024-06-27T02:57:23Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-06-27T03:03:11Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-27T06:40:21Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-27T06:41:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-28T08:17:36Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected. Code looks good to me.

Great work!

Preview with Inter as the editor font:

https://github.com/godotengine/godot/assets/180032/c39dc636-abd1-4f6a-bd09-377c6892663f

200% editor scale with the default font:

https://github.com/godotengine/godot/assets/180032/bcbcae5b-df03-40b4-b26b-3da2fb672857

The only issue I can notice is that with certain custom fonts (as shown above), the X/Y/Z labels can be slightly off-center. I'm not sure if much can be done about this. (For reference, this issue was already present before your PR.)","2024-06-27T00:46:02Z",false,"APPROVED"
"fire","MEMBER","","2024-06-27T01:10:12Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me. This is pretty low risk so should be fine to include in 4.3 despite the feature freeze.","2024-06-27T06:37:19Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-28T14:23:26Z",false,"COMMENTED"
"Nolkaloid","CONTRIBUTOR","","2024-06-28T14:30:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-28T14:31:53Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-28T14:41:43Z",false,"COMMENTED"
"Nolkaloid","CONTRIBUTOR","","2024-06-28T14:43:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-28T14:44:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-28T14:45:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-28T14:48:28Z",false,"COMMENTED"
"Nolkaloid","CONTRIBUTOR","","2024-06-28T14:50:18Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-28T10:29:42Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me with added compat code.","2024-06-28T10:30:00Z",false,"APPROVED"
"Chaosus","MEMBER","","2024-06-28T10:34:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-26T13:43:03Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-26T13:43:21Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-06-26T13:52:58Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-26T13:03:13Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-06-26T13:14:07Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-26T13:15:46Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-06-26T13:16:53Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-26T13:17:15Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-06-26T13:34:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-26T13:39:16Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-26T13:39:25Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-06-26T13:39:47Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-26T13:40:37Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-26T21:54:28Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-06-27T00:16:47Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-06-27T00:48:54Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-06-27T00:53:02Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-07-08T20:02:57Z",false,"APPROVED"
"passivestar","CONTRIBUTOR","","2024-06-26T09:55:28Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-26T10:21:38Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Makes sense to me although I'm not the team of interest.","2024-06-26T11:58:40Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-26T13:23:39Z",false,"APPROVED"
"AThousandShips","MEMBER","These aren't valid changes, you can't use the stl library

Did you mean to open a PR?","2024-06-26T10:00:41Z",false,"CHANGES_REQUESTED"
"Mickeon","CONTRIBUTOR","","2024-06-26T10:14:58Z",false,"COMMENTED"
"EAinsley","CONTRIBUTOR","","2024-06-26T10:55:31Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-26T11:02:19Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-26T14:16:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-26T14:19:32Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-26T14:20:16Z",false,"COMMENTED"
"KoBeWi","MEMBER","Left some comments, but it works correctly.","2024-06-26T14:20:56Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-26T14:22:19Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-26T16:08:01Z",false,"COMMENTED"
"EAinsley","CONTRIBUTOR","","2024-06-26T16:14:05Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-26T18:34:18Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","Seems straight forward enough, it's a shame these enums don't have a `_MAX` entry or it would be nicer to use `ERR_FAIL_INDEX`. 
I guess this could be simplified to for instance `ERR_FAIL_INDEX(p_quality, RS::SubSurfaceScatteringQuality::SUB_SURFACE_SCATTERING_QUALITY_HIGH + 1)` but I'm personally ok with `ERR_FAIL_COND`.","2024-06-26T06:10:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-26T09:08:07Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","LGTM","2024-06-26T06:12:12Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Makes much more sense now. I like the code between the two methods being united like this.

The performance benefit may be even more with https://github.com/godotengine/godot/pull/92550","2024-06-26T21:29:56Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-27T06:50:48Z",false,"APPROVED"
"groud","MEMBER","","2024-06-28T09:08:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-27T15:05:28Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-06-25T20:34:58Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-06-25T20:35:27Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-06-25T20:54:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-26T08:04:43Z",false,"COMMENTED"
"RandomShaper","MEMBER","Leaving my approval on the added API. This needs to have the compatibility stuff fixed (which I'm not very familiar with) fixed per @AThousandShips comments before merging.","2024-06-26T08:20:12Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-26T15:31:32Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-26T15:34:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-26T15:36:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-26T15:37:19Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Is `count` as the name of the parameter completely fine? Yyyyeah, I'm sure it'll be fine.","2024-06-26T15:49:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-26T16:34:03Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-06-28T10:45:11Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-06-28T10:49:37Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-06-28T10:54:56Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","Looks fine for the most part, i'd recommend in a future pull request to implement a way for developers to have a way of setting default values.
![image](https://github.com/godotengine/godot/assets/69520693/a716e201-ef12-470d-93f8-6d1e33a1ee28)
LGTM
Can't wait to see this into 4.4 stable","2024-06-28T10:56:16Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it mostly works as expected on all rendering methods.

**Testing project:** [test-shader-struct.zip](https://github.com/user-attachments/files/16401845/test-shader-struct.zip)

There's an issue where some nested struct parameters can't be read correctly (only some of them). Excerpt from the testing project:

```glsl
// This shader sets the material color to `Color 1 * Color 2 * Intensity One * Intensity Two`.
shader_type spatial;

struct Intensity { float one; float two; };
struct ColorSet {
	Intensity intensity;
	
	vec4 color1;
	vec3 color2;
};

uniform ColorSet color_set;

void fragment() {
	// Working:
	ALBEDO = color_set.color1.rgb * color_set.color2 * color_set.intensity.one;
	// Broken. If I uncomment this, the rendered material is black
	// even though it should remain bright green with the parameters
	// specified on the screenshot below.
	//ALBEDO = color_set.color1.rgb * color_set.color2 * color_set.intensity.one * color_set.intensity.two;
}
```

No errors are printed when uncommenting the second `//ALBEDO` line. The issue occurs with all rendering methods. Here's the parameters I'm using, and how the material should look like:

![image](https://github.com/user-attachments/assets/f3c88c4b-358c-4789-9884-64cd311011a3)

![image](https://github.com/user-attachments/assets/fa437e26-05b2-44e4-a5b6-7f24a7d6bd96)

The issue goes away if I add `float three;` at the end of the struct (`float four;` is not needed for 16-byte alignment for some reason). Stranglely enough, the issue does not reappear if I remove `float three;` until I reload the project entirely (or run it from the editor). Maybe there's an issue with how automatic padding is added?

Also, as mentioned above, we should make sure the UI doesn't present options that don't make sense (changing type or adding new entries). It seems you're already prevented from removing existing entries at least.

PS: Is it planned to allow using hints such as `: source_color` for struct values? This way, they can be displayed as colors in the inspector to benefit from ColorPicker functionality and sRGB conversion.","2024-07-28T00:47:15Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-26T09:41:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-26T09:42:45Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-26T09:49:32Z",false,"COMMENTED"
"aaronp64","CONTRIBUTOR","","2024-06-26T15:30:40Z",false,"COMMENTED"
"aaronp64","CONTRIBUTOR","","2024-06-26T17:21:25Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Could use some testing but the code change is surprisingly straightforward.","2024-06-27T10:57:39Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-27T10:59:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","Doesn't seem to break anything.

Not sure if it's a proper usage of LocalVector.","2024-08-19T13:50:18Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-21T15:18:33Z",false,"APPROVED"
"TokageItLab","MEMBER","Shouldn't it is fixed in `SceneFormatImporterGLTFInterpolate T bezier()` instead it?","2024-06-26T02:33:52Z",false,"COMMENTED"
"TokageItLab","MEMBER","I agree that rename the method to `hermite()`.

However, in fact, these calculations are already defined in Godot's Math function which is completely the same, so all you need to do is to call it.

- `catmull_rom()` is same with `Math::cubic_interpolate()`
- `hermite()` is same with `Math::smoothstep()`

For now, if you change the code to call the Math function in those method, it should be approve-able.

~BTW, to be consistent with the Math function, it would be also okay to revert the renaming of `harmite()` to `smoothstep()`, and rename `catmull_rom()` to `cubic()`.~
","2024-06-28T19:19:24Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","Oh sorry, `smoothstep()` does not allow to set start and end tangents individually, so you probably need to define a function called `hermite_interpolate()` in Math class. Well, since that is an additional feature, we can follow up later. I think this PR is fine, although `catmull_rom()` could be renamed to `cubic()` (but might be odd since glTF definition calls the hermite spline as cubic...).","2024-06-28T19:32:17Z",false,"APPROVED"
"fire","MEMBER","","2024-06-29T13:36:26Z",false,"APPROVED"
"clayjohn","MEMBER","Makes sense!","2024-06-25T20:59:32Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-25T15:59:26Z",false,"APPROVED"
"Malcolmnixon","CONTRIBUTOR","This looks good, and I can confirm it WebXR is functional in both desktop browsers (with a WebXR plugin) and the Quest VR headset browser.","2024-06-26T01:28:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-28T12:39:39Z",false,"APPROVED"
"Scony","CONTRIBUTOR","","2024-06-26T15:30:24Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Docs are just fine too","2024-06-27T09:27:17Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-25T07:11:18Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-25T09:08:16Z",false,"DISMISSED"
"mse-k","NONE","","2024-06-26T00:41:19Z",false,"COMMENTED"
"mse-k","NONE","","2024-06-26T00:42:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-26T08:06:03Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-28T12:48:13Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-28T16:38:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-28T16:59:01Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-21T09:58:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-21T11:07:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","It's a nice code cleanup overall and doesn't break animation editor with default theme, so it's fine.","2024-08-21T11:13:44Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-25T07:24:28Z",false,"COMMENTED"
"AeioMuch","CONTRIBUTOR","","2024-06-25T09:32:17Z",false,"COMMENTED"
"AeioMuch","CONTRIBUTOR","","2024-06-28T04:10:55Z",false,"COMMENTED"
"akien-mga","MEMBER","Tested, I confirm this fixes the error and the crash.","2024-06-28T12:20:09Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-25T07:14:09Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T12:13:29Z",false,"COMMENTED"
"akien-mga","MEMBER","Makes sense to me.","2024-06-25T12:17:28Z",false,"APPROVED"
"aaronfranke","MEMBER","Makes sense to me (ah, Akien already said that, so that's a jinx).","2024-06-26T03:05:43Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-07-18T00:14:17Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-26T13:16:33Z",false,"APPROVED"
"aaronfranke","MEMBER","Makes sense to me. I haven't tested it.","2024-06-25T13:44:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-25T13:46:44Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-26T08:32:06Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-26T15:44:11Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-26T15:51:50Z",false,"APPROVED"
"RandomShaper","MEMBER","Makes sense. Even if in a future release we add some syntax to negate features, we could keep this hardcoded one as a backcompat.","2024-06-25T07:44:44Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-25T08:03:25Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-24T17:23:01Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-06-24T20:06:47Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-06-24T20:32:44Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-24T20:44:34Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-06-24T20:51:17Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-06-24T21:02:10Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-24T22:29:40Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-24T22:29:58Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-25T07:25:33Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-25T09:58:08Z",false,"APPROVED"
"AThousandShips","MEMBER","This makes sense to me, seems of little use and causing a lot of confusion ","2024-06-24T14:03:30Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","In my opinion the editor can feel lacking in debug utilities for contributors _that are as easy to access_ as Editor Settings are. However, given the niche nature of this setting and likelihood of shooting users in the foot, it's better to not have it at all, or at least have it in its own ""Debug"" section.

EDIT: The setting IS in fact documented, you have to remove it on the XML file too.","2024-06-24T14:03:46Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-06-24T15:29:40Z",false,"APPROVED"
"akien-mga","MEMBER","Seems good to me.

As discussed on RC, this adds one extra build to our CI build matrix, but since it's a Linux-based runner and we have a good concurrency there (the bottleneck is on macOS runners), it should be ok.","2024-06-26T16:25:08Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Makes sense to me! This makes Android consistent with other export types.","2024-06-24T13:18:53Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-24T13:27:43Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-24T12:47:26Z",false,"COMMENTED"
"Adrian-Samoticha","NONE","","2024-06-24T12:53:41Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-06-25T16:34:17Z",false,"COMMENTED"
"Robocraft999","CONTRIBUTOR","","2024-06-25T16:51:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-25T16:52:20Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-06-25T17:06:00Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-26T11:57:47Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-24T11:27:16Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-24T12:51:31Z",false,"APPROVED"
"ajreckof","MEMBER","","2024-06-24T14:45:47Z",false,"APPROVED"
"kleonc","MEMBER","LGTM! :+1:

It would also be good to add test cases (in `test_navigation_server_3d.h`? :thinking:) which:
- would fail before #93227,
- would fail between #93227 and this PR.","2024-06-24T16:09:04Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-24T09:32:41Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-24T08:33:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-24T08:06:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-24T09:32:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-24T11:26:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-24T12:35:08Z",false,"COMMENTED"
"abe33","NONE","","2024-06-24T12:42:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-24T12:43:11Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Kind of iffy on this PR myself overall, because it introduces a lot of code to the core **Texture2D** itself. Despite that there are going to be a lot of times where this anchor is never used. So I don't know how to feel about it.

That is not to deny that this feature is very, very sought-after, but it's worth paying attention by features that cause considerable overhead (at least I do).","2024-07-01T10:36:53Z",false,"COMMENTED"
"abe33","NONE","","2024-07-01T10:51:04Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-01T11:03:30Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-01T13:14:13Z",false,"COMMENTED"
"abe33","NONE","","2024-07-01T13:31:51Z",false,"COMMENTED"
"abe33","NONE","","2024-07-01T17:06:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-24T07:46:48Z",false,"COMMENTED"
"akien-mga","MEMBER","Seems fine, pending style fixes.","2024-06-24T09:31:44Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-24T09:32:42Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-06-24T12:54:14Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-06-24T12:59:21Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-26T17:00:35Z",false,"APPROVED"
"clayjohn","MEMBER","The code here looks good. It solves the problem of post processing getting enabled even though glow/BCS are not enabled. However, if Glow or BCS are enabled and then disabled later, the post process will continue running because the post process FBO is not freed. 

I prefer that we do not free the post process FBO/textures whenever post processing is disabled. But we should stop doing the post processing pass when post processing is disabled","2024-06-25T01:08:56Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-24T16:23:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-28T12:14:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-28T12:14:18Z",false,"APPROVED"
"matheusmdx","CONTRIBUTOR","","2024-06-28T17:37:11Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-28T18:13:08Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks! The latest version is working in my testing.

I didn't review the code in-depth, only skimmed it, but it looks fine at a glance.

The one thing I'm uncertain about: this is also moving custom export templates into advanced settings for all platforms. Should this be included in this PR? Or, a separate PR so that we can discuss that one change with a wider group of contributors?","2024-07-02T14:10:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-16T08:16:07Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-16T08:16:51Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-16T08:17:46Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-16T08:23:39Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-08-17T16:57:15Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-26T20:22:32Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Surprisingly simple. As discussed in RocketChat, it's better than not having the tooltip at all.
Note that the tooltip does not support BBCode formatting at all, but it's not an issue exclusive to the resource picker.","2024-06-23T21:17:41Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-23T21:17:53Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-24T09:05:50Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-24T13:33:17Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-24T13:33:40Z",false,"APPROVED"
"YeldhamDev","MEMBER","","2024-06-24T15:13:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-24T12:04:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-25T07:43:57Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","`visibility_layer`'s own description needs to also be changed to at least mention this new property. See also https://github.com/godotengine/godot/pull/93335#issuecomment-2186383400","2024-06-24T16:37:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-24T16:38:49Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-06-25T17:01:45Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-25T07:43:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-25T07:43:11Z",false,"APPROVED"
"fire","MEMBER","I think this is good.","2024-06-27T16:00:22Z",false,"APPROVED"
"fire","MEMBER","Compatibility breaking discussion in meeting.","2024-06-27T16:25:36Z",false,"CHANGES_REQUESTED"
"clayjohn","MEMBER","","2024-06-27T16:30:33Z",false,"APPROVED"
"fire","MEMBER","","2024-06-27T16:35:05Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-27T16:35:34Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-25T07:49:45Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-25T07:58:57Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-06-25T09:21:19Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-25T09:31:07Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-25T09:45:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-25T09:57:29Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-25T07:54:19Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-26T16:47:43Z",false,"COMMENTED"
"anniryynanen","CONTRIBUTOR","","2024-06-26T16:54:41Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

### Before

*Notice how the hover stylebox lingers until I move the mouse again, even though the mouse is being blocked by the translucent control.*

https://github.com/godotengine/godot/assets/180032/dd09c969-1334-4b16-9384-0770530835c1

### After

https://github.com/godotengine/godot/assets/180032/5ae3e6e4-7e0d-4e93-ab25-4abcc19bd3aa



","2024-06-26T23:39:56Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-27T08:00:24Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-27T09:14:12Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-08-12T03:08:13Z",false,"COMMENTED"
"anniryynanen","CONTRIBUTOR","","2024-08-17T14:09:39Z",false,"COMMENTED"
"anniryynanen","CONTRIBUTOR","","2024-08-17T14:10:57Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","","2024-09-14T23:04:08Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","Code looks good.
Have tested with both available MRPs and didn't find any obvious problems.","2024-09-15T09:42:59Z",false,"APPROVED"
"kitbdev","CONTRIBUTOR","","2024-09-15T15:35:20Z",false,"COMMENTED"
"anniryynanen","CONTRIBUTOR","","2024-09-15T16:02:27Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","","2024-09-15T17:11:40Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","It's the small things that count.","2024-06-23T07:56:30Z",false,"APPROVED"
"Scony","CONTRIBUTOR","","2024-06-23T08:40:10Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-06-23T12:49:55Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-06-24T17:20:36Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","So long as the end result is one commit in the PR it's all good!

As for the documentation mistake, I'm surprised it wasn't caught sooner because it's pretty damningly incorrect.","2024-06-23T15:22:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-24T08:59:52Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-24T09:01:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-24T09:01:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-24T09:01:44Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-06-24T08:12:56Z",false,"APPROVED"
"TokageItLab","MEMBER","Conversely, shouldn't the animation be assigned correctly? Since the AnimationMixer node is selected once before entering the Bezier Editor before crashing, so I think it can be assigned there.","2024-06-29T15:55:48Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-07-02T10:58:13Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","That draft PR you pulled this from is in a weird state because the MinGW build logic got shifted around a bit. Thankfully, this bit was unrelated to that mess & is totally safe to extract in this form.","2024-06-24T14:50:05Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-25T10:00:04Z",false,"APPROVED"
"adamscott","MEMBER","It's great! Thanks for your hard work, @dsnopek!","2024-06-24T16:25:10Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-06-24T20:48:46Z",false,"APPROVED"
"Scony","CONTRIBUTOR","","2024-06-23T08:33:47Z",false,"APPROVED"
"fire","MEMBER","","2024-06-27T15:43:12Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally on Fedora 40, it doesn't work on my end.

I get this, despite having `glslang-devel-14.2.0-1.fc40.x86_64` installed from the repositories:

```
modules/glslang/register_types.cpp:36:10: fatal error: glslang/Include/Types.h: No such file or directory
   36 | #include <glslang/Include/Types.h>
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~
compilation terminated.
scons: *** [modules/glslang/register_types.linuxbsd.editor.x86_64.o] Error 1
scons: building terminated because of errors.
```

Previously, compilation appeared to succeed but I got a linking error at the end:

```
Linking Program bin/godot.linuxbsd.editor.x86_64 ...
progress_finish([""progress_finish""], [])
mold: error: undefined symbol: spvtools::CreateAnalyzeLiveInputPass(std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*)
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsAnalyzeDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))
mold: error: undefined symbol: spvOptimizerOptionsDestroy
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsAnalyzeDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsEliminateDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))>>> referenced 2 more times

mold: error: undefined symbol: spvtools::CreateEliminateDeadOutputComponentsPassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsEliminateDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))
mold: error: undefined symbol: spvtools::Optimizer::Run(unsigned int const*, unsigned long, std::vector<unsigned int, std::allocator<unsigned int> >*, spv_optimizer_options_t*) const
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsAnalyzeDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsEliminateDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))>>> referenced 2 more times

mold: error: undefined symbol: glslang::TShader::setStringsPKPKci
>>> referenced by /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(.text)
>>>               /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(glslang_shader_create)>>> referenced by /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(.text)
>>>               /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(glslang_shader_parse)>>> referenced by register_types.cpp
>>>               modules/libmodule_glslang.linuxbsd.editor.x86_64.a(register_types.linuxbsd.editor.x86_64.o):(_compile_shader_glsl(RenderingDeviceCommons::ShaderStage, String const&, RenderingDevice::ShaderLanguage, String*, RenderingDevice const*))
mold: error: undefined symbol: spvtools::CreateEliminateDeadInputComponentsPassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsEliminateDeadInputComponents(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*))
mold: error: undefined symbol: glslang::GetThreadPoolAllocatorv
>>> referenced by /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(std::_Rb_tree_node<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >* std::_Rb_tree<int, std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> >, std::_Select1st<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > > >::_M_copy<false, std::_Rb_tree<int, std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> >, std::_Select1st<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > > >::_Alloc_node>(std::_Rb_tree_node<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >*, std::_Rb_tree_node_base*, std::_Rb_tree<int, std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> >, std::_Select1st<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > > >::_Alloc_node&) [clone .isra.0])>>> referenced by /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(std::_Rb_tree_node<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >* std::_Rb_tree<int, std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> >, std::_Select1st<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > > >::_M_copy<false, std::_Rb_tree<int, std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> >, std::_Select1st<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > > >::_Alloc_node>(std::_Rb_tree_node<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >*, std::_Rb_tree_node_base*, std::_Rb_tree<int, std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> >, std::_Select1st<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > > >::_Alloc_node&) [clone .isra.0])>>> referenced by /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(std::_Rb_tree_node<std::pair<int const, glslang::TVector<glslang::TIntermConstantUnion const*> > >* std::_Rb_tree<int, std::pair<int const, glslang::TVector<glslang::TIntermConstantUnion const*> >, std::_Select1st<std::pair<int const, glslang::TVector<glslang::TIntermConstantUnion const*> > >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TVector<glslang::TIntermConstantUnion const*> > > >::_M_copy<false, std::_Rb_tree<int, std::pair<int const, glslang::TVector<glslang::TIntermConstantUnion const*> >, std::_Select1st<std::pair<int const, glslang::TVector<glslang::TIntermConstantUnion const*> > >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TVector<glslang::TIntermConstantUnion const*> > > >::_Alloc_node>(std::_Rb_tree_node<std::pair<int const, glslang::TVector<glslang::TIntermConstantUnion const*> > >*, std::_Rb_tree_node_base*, std::_Rb_tree<int, std::pair<int const, glslang::TVector<glslang::TIntermConstantUnion const*> >, std::_Select1st<std::pair<int const, glslang::TVector<glslang::TIntermConstantUnion const*> > >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TVector<glslang::TIntermConstantUnion const*> > > >::_Alloc_node&) [clone .isra.0])>>> referenced 14 more times

mold: error: undefined symbol: spvtools::CreateBlockMergePassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))
mold: error: undefined symbol: spvtools::CreateDeadInsertElimPassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))
mold: error: undefined symbol: glslang::TIntermediate::getMemberAlignment(glslang::TType const&, int&, int&, glslang::TLayoutPacking, bool)
>>> referenced by /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):((anonymous namespace)::TGlslangToSpvTraverser::convertGlslangStructToSpvType(glslang::TType const&, glslang::TVector<glslang::TTypeLoc> const*, glslang::TLayoutPacking, glslang::TQualifier const&))>>> referenced by /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):((anonymous namespace)::TGlslangToSpvTraverser::convertGlslangStructToSpvType(glslang::TType const&, glslang::TVector<glslang::TTypeLoc> const*, glslang::TLayoutPacking, glslang::TQualifier const&))>>> referenced by /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):((anonymous namespace)::TGlslangToSpvTraverser::convertGlslangToSpvType(glslang::TType const&, glslang::TLayoutPacking, glslang::TQualifier const&, bool, bool))>>> referenced 1 more times

mold: error: undefined symbol: glslang::TProgram::link11EShMessages
>>> referenced by /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(.text)
>>>               /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(glslang_program_link)>>> referenced by register_types.cpp
>>>               modules/libmodule_glslang.linuxbsd.editor.x86_64.a(register_types.linuxbsd.editor.x86_64.o):(_compile_shader_glsl(RenderingDeviceCommons::ShaderStage, String const&, RenderingDevice::ShaderLanguage, String*, RenderingDevice const*))
mold: error: undefined symbol: spvtools::CreateIfConversionPassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))
mold: error: undefined symbol: glslang::TProgram::getInfoLogv
>>> referenced by /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(.text)
>>>               /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(glslang_program_get_info_log)>>> referenced by register_types.cpp
>>>               modules/libmodule_glslang.linuxbsd.editor.x86_64.a(register_types.linuxbsd.editor.x86_64.o):(_compile_shader_glsl(RenderingDeviceCommons::ShaderStage, String const&, RenderingDevice::ShaderLanguage, String*, RenderingDevice const*))
mold: error: undefined symbol: glslang::TIntermediate::getBaseAlignmentScalar(glslang::TType const&, int&)
>>> referenced by /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):((anonymous namespace)::TGlslangToSpvTraverser::convertGlslangStructToSpvType(glslang::TType const&, glslang::TVector<glslang::TTypeLoc> const*, glslang::TLayoutPacking, glslang::TQualifier const&))>>> referenced by /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):((anonymous namespace)::TGlslangToSpvTraverser::visitBinary(glslang::TVisit, glslang::TIntermBinary*))>>> referenced by /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):((anonymous namespace)::TGlslangToSpvTraverser::visitBinary(glslang::TVisit, glslang::TIntermBinary*))>>> referenced 1 more times

mold: error: undefined symbol: glslang::TShader::setOverrideVersioni
>>> referenced by /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(.text)
>>>               /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(glslang_shader_set_glsl_version)
mold: error: undefined symbol: spvtools::Optimizer::RegisterPass(spvtools::Optimizer::PassToken&&)
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced 33 more times

mold: error: undefined symbol: glslang::InitializeProcessv
>>> referenced by /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(.text)
>>>               /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(glslang_initialize_process)>>> referenced by register_types.cpp
>>>               modules/libmodule_glslang.linuxbsd.editor.x86_64.a(register_types.linuxbsd.editor.x86_64.o):(initialize_glslang_module(ModuleInitializationLevel))
mold: error: undefined symbol: spvtools::Optimizer::PassToken::~PassToken()
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced 33 more times

mold: error: undefined symbol: spvValidatorOptionsSetWorkgroupScalarBlockLayout
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsValidate(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, bool))
mold: error: undefined symbol: spvValidatorOptionsSetBeforeHlslLegalization
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsValidate(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, bool))
mold: error: undefined symbol: spvtools::CreateInlineExhaustivePassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))
mold: error: undefined symbol: glslang::TShader::getInfoDebugLogv
>>> referenced by /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(.text)
>>>               /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(glslang_shader_get_info_debug_log)>>> referenced by register_types.cpp
>>>               modules/libmodule_glslang.linuxbsd.editor.x86_64.a(register_types.linuxbsd.editor.x86_64.o):(_compile_shader_glsl(RenderingDeviceCommons::ShaderStage, String const&, RenderingDevice::ShaderLanguage, String*, RenderingDevice const*))
mold: error: undefined symbol: spvtools::CreateRedundancyEliminationPassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))
mold: error: undefined symbol: glslang::TIntermediate::findLinkerObjects() const
>>> referenced by /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(_GLOBAL__N_1::TGlslangToSpvTraverser::collectRayTracingLinkerObjectsv)
mold: error: undefined symbol: spvOptimizerOptionsCreate
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsAnalyzeDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsEliminateDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))>>> referenced 2 more times

mold: error: undefined symbol: spvtools::CreateEliminateDeadFunctionsPassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))
mold: error: undefined symbol: glslang::TSpirvTypeParameter::operator==(glslang::TSpirvTypeParameter const&) const
>>> referenced by /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(.text._ZNK7glslang5TTypeeqERKS0_)
>>>               /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(glslang::TType::operator==(glslang::TType const&) const)>>> referenced by /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(.text._ZNK7glslang5TTypeeqERKS0_)
>>>               /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(glslang::TType::operator==(glslang::TType const&) const)
mold: error: undefined symbol: spvDiagnosticPrint
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsDisassemble(std::ostream&, std::vector<unsigned int, std::allocator<unsigned int> > const&, spv_target_env))
mold: error: undefined symbol: spvtools::CreateEliminateDeadOutputStoresPass(std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*)
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsEliminateDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))
mold: error: undefined symbol: spvValidatorOptionsSetRelaxBlockLayout
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsValidate(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, bool))
mold: error: undefined symbol: glslang::TShader::preprocess(TBuiltInResource const*, int, EProfile, bool, bool, EShMessages, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, glslang::TShader::Includer&)
>>> referenced by /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(.text)
>>>               /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(glslang_shader_preprocess)
mold: error: undefined symbol: glslang::TShader::setShiftBindingForSet(glslang::TResourceType, unsigned int, unsigned int)
>>> referenced by /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(.text)
>>>               /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(glslang_shader_shift_binding_for_set)
mold: error: undefined symbol: spvtools::Optimizer::SetTargetEnv(spv_target_env)
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsAnalyzeDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsEliminateDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))>>> referenced 2 more times

mold: error: undefined symbol: glslang::FinalizeProcessv
>>> referenced by /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(.text)
>>>               /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(glslang_finalize_process)>>> referenced by register_types.cpp
>>>               modules/libmodule_glslang.linuxbsd.editor.x86_64.a(register_types.linuxbsd.editor.x86_64.o):(uninitialize_glslang_module(ModuleInitializationLevel))
mold: error: undefined symbol: spvtools::Optimizer::~Optimizer()
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsAnalyzeDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsEliminateDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))>>> referenced 2 more times

mold: error: undefined symbol: glslang::TShader::parse(TBuiltInResource const*, int, EProfile, bool, bool, EShMessages, glslang::TShader::Includer&)
>>> referenced by /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(.text)
>>>               /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(glslang_shader_parse)>>> referenced by register_types.cpp
>>>               modules/libmodule_glslang.linuxbsd.editor.x86_64.a(register_types.linuxbsd.editor.x86_64.o):(glslang::TShader::parsePK16TBuiltInResourcei8EProfilebb11EShMessages)
mold: error: undefined symbol: spvtools::CreateAggressiveDCEPassbb
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsEliminateDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsEliminateDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))
mold: error: undefined symbol: glslang::GetKhronosToolIdv
>>> referenced by /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(glslang::GlslangToSpv(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions*))
mold: error: undefined symbol: spvtools::CreateInterpolateFixupPassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))
mold: error: undefined symbol: spvDiagnosticDestroy
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsDisassemble(std::ostream&, std::vector<unsigned int, std::allocator<unsigned int> > const&, spv_target_env))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsValidate(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, bool))
mold: error: undefined symbol: glslang::TShader::getInfoLogv
>>> referenced by /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(.text)
>>>               /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(glslang_shader_get_info_log)>>> referenced by register_types.cpp
>>>               modules/libmodule_glslang.linuxbsd.editor.x86_64.a(register_types.linuxbsd.editor.x86_64.o):(_compile_shader_glsl(RenderingDeviceCommons::ShaderStage, String const&, RenderingDevice::ShaderLanguage, String*, RenderingDevice const*))
mold: error: undefined symbol: spvtools::CreateScalarReplacementPassj
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))
mold: error: undefined symbol: spvtools::Optimizer::Optimizer(spv_target_env)
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsAnalyzeDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsEliminateDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))>>> referenced 2 more times

mold: error: undefined symbol: glslang::TProgram::TProgram()
>>> referenced by /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(.text)
>>>               /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(glslang_program_create)>>> referenced by register_types.cpp
>>>               modules/libmodule_glslang.linuxbsd.editor.x86_64.a(register_types.linuxbsd.editor.x86_64.o):(_compile_shader_glsl(RenderingDeviceCommons::ShaderStage, String const&, RenderingDevice::ShaderLanguage, String*, RenderingDevice const*))
mold: error: undefined symbol: spvtools::CreateLocalSingleBlockLoadStoreElimPassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))
mold: error: undefined symbol: spvtools::CreateCFGCleanupPassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))
mold: error: undefined symbol: glslang::TProgram::mapIO(glslang::TIoMapResolver*, glslang::TIoMapper*)
>>> referenced by /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(.text)
>>>               /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(glslang_program_map_io)
mold: error: undefined symbol: spvtools::CreateLocalAccessChainConvertPassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))
mold: error: undefined symbol: spvtools::CreateWrapOpKillPassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))
mold: error: undefined symbol: GetDefaultResources()
>>> referenced by register_types.cpp
>>>               modules/libmodule_glslang.linuxbsd.editor.x86_64.a(register_types.linuxbsd.editor.x86_64.o):(_compile_shader_glsl(RenderingDeviceCommons::ShaderStage, String const&, RenderingDevice::ShaderLanguage, String*, RenderingDevice const*))
mold: error: undefined symbol: spvBinaryToText
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsDisassemble(std::ostream&, std::vector<unsigned int, std::allocator<unsigned int> > const&, spv_target_env))
mold: error: undefined symbol: spvContextCreate
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsDisassemble(std::ostream&, std::vector<unsigned int, std::allocator<unsigned int> > const&, spv_target_env))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsValidate(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, bool))
mold: error: undefined symbol: spvValidatorOptionsDestroy
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsValidate(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, bool))
mold: error: undefined symbol: glslang::TProgram::~TProgram()
>>> referenced by register_types.cpp
>>>               modules/libmodule_glslang.linuxbsd.editor.x86_64.a(register_types.linuxbsd.editor.x86_64.o):(_compile_shader_glsl(RenderingDeviceCommons::ShaderStage, String const&, RenderingDevice::ShaderLanguage, String*, RenderingDevice const*))
mold: error: undefined symbol: spvtools::CreateSimplificationPassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))
mold: error: undefined symbol: glslang::TShader::~TShader()
>>> referenced by register_types.cpp
>>>               modules/libmodule_glslang.linuxbsd.editor.x86_64.a(register_types.linuxbsd.editor.x86_64.o):(_compile_shader_glsl(RenderingDeviceCommons::ShaderStage, String const&, RenderingDevice::ShaderLanguage, String*, RenderingDevice const*))
mold: error: undefined symbol: spvtools::CreateAggressiveDCEPassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced 2 more times

mold: error: undefined symbol: spvContextDestroy
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsDisassemble(std::ostream&, std::vector<unsigned int, std::allocator<unsigned int> > const&, spv_target_env))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsValidate(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, bool))
mold: error: undefined symbol: glslang::TShader::setAutoMapBindingsb
>>> referenced by /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(.text)
>>>               /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(glslang_shader_set_options)
mold: error: undefined symbol: glslang::TIntermediate::improperStraddle(glslang::TType const&, int, int, bool)
>>> referenced by /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):((anonymous namespace)::TGlslangToSpvTraverser::convertGlslangStructToSpvType(glslang::TType const&, glslang::TVector<glslang::TTypeLoc> const*, glslang::TLayoutPacking, glslang::TQualifier const&))
mold: error: undefined symbol: spvtools::CreateLocalMultiStoreElimPassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))
mold: error: undefined symbol: spvtools::CreateVectorDCEPassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))
mold: error: undefined symbol: spvValidatorOptionsSetScalarBlockLayout
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsValidate(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, bool))
mold: error: undefined symbol: glslang::TShader::TShader(EShLanguage)
>>> referenced by /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(.text)
>>>               /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(glslang_shader_create)>>> referenced by register_types.cpp
>>>               modules/libmodule_glslang.linuxbsd.editor.x86_64.a(register_types.linuxbsd.editor.x86_64.o):(_compile_shader_glsl(RenderingDeviceCommons::ShaderStage, String const&, RenderingDevice::ShaderLanguage, String*, RenderingDevice const*))
mold: error: undefined symbol: glslang::TPoolAllocator::allocatem
>>> referenced by /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(glslang::TIntermConstantUnion const*& std::vector<glslang::TIntermConstantUnion const*, glslang::pool_allocator<glslang::TIntermConstantUnion const*> >::emplace_back<glslang::TIntermConstantUnion const*>(glslang::TIntermConstantUnion const*&&) [clone .isra.0])>>> referenced by /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(std::_Rb_tree_node<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >* std::_Rb_tree<int, std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> >, std::_Select1st<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > > >::_M_copy<false, std::_Rb_tree<int, std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> >, std::_Select1st<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > > >::_Alloc_node>(std::_Rb_tree_node<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >*, std::_Rb_tree_node_base*, std::_Rb_tree<int, std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> >, std::_Select1st<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > > >::_Alloc_node&) [clone .isra.0])>>> referenced by /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(std::_Rb_tree_node<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >* std::_Rb_tree<int, std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> >, std::_Select1st<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > > >::_M_copy<false, std::_Rb_tree<int, std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> >, std::_Select1st<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > > >::_Alloc_node>(std::_Rb_tree_node<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >*, std::_Rb_tree_node_base*, std::_Rb_tree<int, std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> >, std::_Select1st<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > >, std::less<int>, glslang::pool_allocator<std::pair<int const, glslang::TVector<glslang::TIntermTyped const*> > > >::_Alloc_node&) [clone .isra.0])>>> referenced 12 more times

mold: error: undefined symbol: spvValidateWithOptions
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsValidate(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, bool))
mold: error: undefined symbol: spvtools::CreateLocalSingleStoreElimPassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))
mold: error: undefined symbol: spvtools::CreateStripDebugInfoPassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsStripDebugInfo(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*))
mold: error: undefined symbol: spvtools::Optimizer::SetMessageConsumer(std::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>)
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsAnalyzeDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsEliminateDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))>>> referenced 2 more times

mold: error: undefined symbol: glslang::TShader::setAutoMapLocationsb
>>> referenced by /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(.text)
>>>               /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(glslang_shader_set_options)
mold: error: undefined symbol: glslang::TPoolAllocator::pushv
>>> referenced by /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(glslang::GlslangToSpv(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions*))
mold: error: undefined symbol: spvValidatorOptionsCreate
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsValidate(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, bool))
mold: error: undefined symbol: spvOptimizerOptionsSetRunValidator
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsAnalyzeDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsEliminateDeadOutputStores(spv_target_env, std::vector<unsigned int, std::allocator<unsigned int> >&, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, std::unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int> >*, spv::SpvBuildLogger*))>>> referenced 2 more times

mold: error: undefined symbol: glslang::TProgram::getInfoDebugLogv
>>> referenced by /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(.text)
>>>               /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(glslang_program_get_info_debug_log)>>> referenced by register_types.cpp
>>>               modules/libmodule_glslang.linuxbsd.editor.x86_64.a(register_types.linuxbsd.editor.x86_64.o):(_compile_shader_glsl(RenderingDeviceCommons::ShaderStage, String const&, RenderingDevice::ShaderLanguage, String*, RenderingDevice const*))
mold: error: undefined symbol: spvtools::CreateMergeReturnPassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))
mold: error: undefined symbol: glslang::TShader::setShiftBinding(glslang::TResourceType, unsigned int)
>>> referenced by /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(.text)
>>>               /usr/lib64/libglslang.a(glslang_c_interface.cpp.o):(glslang_shader_shift_binding)
mold: error: undefined symbol: spvtools::CreateEliminateDeadInputComponentsSafePassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))
mold: error: undefined symbol: glslang::TPoolAllocator::popv
>>> referenced by /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(GlslangToSpv.cpp.o):(glslang::GlslangToSpv(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions*))
mold: error: undefined symbol: spvtools::CreateDeadBranchElimPassv
>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))>>> referenced by /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(.text)
>>>               /usr/lib64/libSPIRV.a(SpvTools.cpp.o):(glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::vector<unsigned int, std::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*))
collect2: error: ld returned 1 exit status
scons: *** [bin/godot.linuxbsd.editor.x86_64] Error 1
scons: building terminated because of errors.
```

In contrast, compiling works with `builtin_glslang=yes`.","2024-08-08T22:07:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM","2024-06-22T16:46:42Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-22T16:08:06Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-25T07:47:50Z",false,"APPROVED"
"fire","MEMBER","I also agree that adding a notice so the pr description (not in the title, or the commit message) is unnecessary.","2024-06-22T14:35:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-24T08:55:15Z",false,"APPROVED"
"kleonc","MEMBER","","2024-06-22T13:09:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-05T08:26:14Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-05T08:26:22Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-07-05T08:52:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-22T11:41:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-22T11:41:34Z",false,"COMMENTED"
"OneBogdan01","NONE","","2024-06-22T11:44:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-22T11:45:03Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-22T11:45:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-22T11:48:05Z",false,"COMMENTED"
"OneBogdan01","NONE","","2024-06-22T11:49:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-22T11:50:36Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-07-12T11:03:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-12T11:48:27Z",false,"DISMISSED"
"AThousandShips","MEMBER","","2024-07-12T12:11:38Z",false,"COMMENTED"
"OneBogdan01","NONE","","2024-07-12T12:16:51Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-07-12T12:37:19Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-22T07:43:56Z",false,"APPROVED"
"huwpascoe","NONE","","2024-08-27T17:32:53Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-04T10:07:24Z",false,"COMMENTED"
"huwpascoe","NONE","","2024-09-04T11:16:05Z",false,"COMMENTED"
"clayjohn","MEMBER","We discussed this in the rendering meeting today and agreed that it is good to move forward. 

I just have one nitpick about variable naming, then it should be good to merge. As discussed we can leave [huwpascoe](https://github.com/huwpascoe)'s distance correction for a follow up PR","2024-09-17T19:07:49Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-10-01T14:26:36Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","LGTM, I'm not too familiar with the transmittance code so purely judging on code style.

Only question I have seeing you mention in your description that transmittance requires shadows to be enabled, why you're not doing a `#if defined(LIGHT_TRANSMITTANCE_USED) && !defined(SHADOWS_DISABLED)` and skip over the code entirely?","2024-09-03T02:41:58Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","","2024-06-23T22:08:05Z",false,"APPROVED"
"kleonc","MEMBER","Makes sense to me (if using a rect it should rather be using `get_anchorable_rect()` instead of `get_rect()`; and using `get_size()` to get only the size is equivalent).","2024-06-22T13:21:33Z",false,"APPROVED"
"fire","MEMBER","","2024-06-21T23:03:53Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-22T07:38:45Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-06-21T23:11:49Z",false,"COMMENTED"
"fire","MEMBER","Seems good to me.","2024-06-22T02:16:16Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-06-22T08:28:17Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-22T15:42:02Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-21T15:27:01Z",false,"COMMENTED"
"Nolkaloid","CONTRIBUTOR","","2024-06-22T15:06:47Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-22T14:19:47Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-21T11:21:00Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-21T10:57:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-21T10:57:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-21T10:58:05Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-21T10:58:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-21T10:58:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-21T10:59:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-21T11:12:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-21T11:30:40Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-21T11:39:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-21T14:16:37Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T14:24:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T14:29:22Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T14:31:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T14:33:16Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T14:34:37Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T14:34:53Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T14:40:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T14:40:53Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T14:42:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-21T14:42:07Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T14:43:21Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-21T14:43:29Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-21T14:43:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T14:44:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T14:46:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T14:47:11Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T14:49:55Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T14:51:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T14:54:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T14:56:41Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T14:58:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T15:00:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T15:00:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T15:02:33Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T15:02:53Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T15:03:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T15:08:20Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T15:09:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-21T15:11:25Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T15:12:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T15:16:36Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T15:18:41Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T15:20:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T15:28:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T15:28:58Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T15:33:52Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T15:35:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T15:41:11Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-21T17:34:47Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","There's a lot to go through but here's this really quick.","2024-06-21T18:29:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T18:39:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T18:41:53Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T18:43:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T18:44:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-21T18:47:55Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Part 2","2024-06-22T09:21:18Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","And they don't stop coming and they don't stop coming and they don't stop coming and they don't stop coming, and [...]","2024-07-05T11:33:21Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","My reviews above still stand, unless you disagree intentionally of course.","2024-08-27T12:54:57Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Some of these descriptions still need to be filled but I wouldn't spend further time on this current PR doing that.","2024-09-05T20:01:47Z",false,"APPROVED"
"Calinou","MEMBER","","2024-09-05T20:36:34Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-05T20:37:33Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-05T20:37:54Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-05T20:39:11Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-05T20:39:52Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-05T20:40:36Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-05T20:41:40Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-09-06T09:02:22Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-10T07:43:46Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-10T07:44:03Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-10T07:45:12Z",false,"COMMENTED"
"akien-mga","MEMBER","Let's merge this as a good first step, and we can iterate further on adding ranges or improving descriptions in later PRs.","2024-09-13T08:59:29Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-22T14:20:05Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-21T09:22:15Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-06-21T10:48:54Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-21T08:13:43Z",false,"COMMENTED"
"bruvzg","MEMBER","Seems fine, but docs probably should include info about function parameters (can be mostly copy-pasted from https://docs.godotengine.org/en/latest/tutorials/ui/bbcode_in_richtextlabel.html).","2024-06-21T05:17:58Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-21T06:50:11Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-26T14:24:46Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

However, the UI still refers to a Blender *installation*, which can be a bit ambiguous. I suggest renaming it to Blender *executable* instead.

![image](https://github.com/user-attachments/assets/93bd7193-a1c8-46a8-ab47-ac8e4511f661)

On macOS, it might be worth hinting that you should point at `Contents/MacOS/blender` within `Blender.app` too (e.g. by appending to the label with `#ifdef MACOS_ENABLED`).","2024-07-26T16:07:26Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-29T13:11:30Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.","2024-06-27T17:27:49Z",false,"APPROVED"
"fire","MEMBER","","2024-06-27T19:53:13Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-27T21:55:24Z",false,"APPROVED"
"fire","MEMBER","I am not able to evaluate / test this, but navigation is important.","2024-06-20T21:31:39Z",false,"APPROVED"
"RandomShaper","MEMBER","Looks good and makes sense at first glance.","2024-06-21T07:43:36Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-31T13:20:26Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","","2024-06-20T17:00:13Z",false,"COMMENTED"
"fire","MEMBER","","2024-09-04T21:20:25Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-09-05T05:28:18Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-09-05T05:29:52Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-05T14:05:23Z",false,"COMMENTED"
"RandomShaper","MEMBER","Looks good and makes sense at first glance.","2024-06-21T07:47:11Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-20T14:12:13Z",false,"APPROVED"
"AThousandShips","MEMBER","This looks good to me, good improvement reducing the risk of errors

Just left a potential improvement suggestion ","2024-06-20T13:15:56Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-20T13:27:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-20T13:33:22Z",false,"COMMENTED"
"KoBeWi","MEMBER","I wonder if we should just use `VISIBLE` in every `get_minimum_size()`.","2024-06-20T12:29:26Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-20T11:13:16Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-20T10:20:46Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-06-20T10:28:26Z",false,"COMMENTED"
"akien-mga","MEMBER","I confirm this fixes the regression with the Scatter addon in my full project.

Can't assess the code in depth but it seems reasonable to me.","2024-06-21T13:12:02Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally on Truck Town (with a pause toggle key added), it works as expected.

Note that this introduces a visible hitch when pausing, although this is hard to notice at 60 Hz physics ‚Äì even at 30 Hz, it's not that obvious. On the bright side, this has the benefit of showing you the ""true"" state of the game whenever you pause, which can be valuable for some use cases (such as frame-by-frame advance).

In this 120 FPS video, I spam the pause key while driving:

https://github.com/godotengine/godot/assets/180032/21414df8-d061-4231-b3f5-83c54c15d0f6

Curiously, if you set `get_tree().paused = true` then `false` within the same frame, this will reset interpolation on everything without pausing the game:

https://github.com/godotengine/godot/assets/180032/8f17cd29-f8fe-4432-bb43-f067c09dffc5","2024-06-28T23:19:39Z",false,"APPROVED"
"Calinou","MEMBER","","2024-06-21T00:53:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-12T11:09:31Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-07-14T10:57:13Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-07-23T13:05:12Z",false,"APPROVED"
"fire","MEMBER","","2024-06-20T19:43:18Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-20T07:57:06Z",false,"APPROVED"
"kleonc","MEMBER","","2024-06-20T09:05:04Z",false,"CHANGES_REQUESTED"
"EAinsley","CONTRIBUTOR","","2024-06-20T09:28:12Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-06-20T09:33:00Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great! This should provide a very slight speed boost for drawing rects. 

For posterity, this code is dead code for 2 reasons:
1. The particles flag was never assigned, so the branch always evaluated to false
2. Particles use the ATTRIBUTES variant. But this code is explicitly compiled out when ATTRIBUTES is used. 
","2024-06-20T04:16:47Z",false,"APPROVED"
"apolkk","NONE","","2024-06-19T23:50:30Z",false,"APPROVED"
"ayslan-gamedev","NONE","","2024-06-20T01:43:56Z",false,"APPROVED"
"ayslan-gamedev","NONE","","2024-06-20T01:58:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-22T14:20:26Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-06-20T00:25:58Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-09-13T00:51:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-13T12:06:03Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-13T12:46:55Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","Tested locally and that works perfectly, nice job! The idea to implement each operation individually sounds a great idea.

The only suggestion I could make but it's maybe out of scope of this PR is that if could be great to expand the FileSystemDock and select the folder after it's creation.","2024-09-13T13:04:57Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-16T12:30:05Z",false,"COMMENTED"
"ChristopheClaustre","CONTRIBUTOR","","2024-06-23T08:53:17Z",false,"COMMENTED"
"ChristopheClaustre","CONTRIBUTOR","","2024-06-23T09:47:29Z",false,"COMMENTED"
"ChristopheClaustre","CONTRIBUTOR","","2024-06-23T09:48:10Z",false,"COMMENTED"
"ChristopheClaustre","CONTRIBUTOR","","2024-06-23T11:47:31Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-06-29T20:27:28Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it mostly works as expected in all rendering methods with both BaseMaterial3D and ShaderMaterial.

**Testing project:** [test_pr_93371.zip](https://github.com/user-attachments/files/16564463/test_pr_93371.zip)

The main issue however is that materials using Alpha Scissor and Alpha Hash are not excluded from baking, even though they should be (since you can see through them):

### `master`

*Notice how BaseMaterial3D alpha scissor and alpha hash (on the left) are correctly excluded from baking. ShaderMaterials are not excluded from baking though, regardless of their transparency mode.*

![image](https://github.com/user-attachments/assets/ceeeba97-5b64-4063-b33e-2dac2f9dbe40)

### This PR

*Notice how BaseMaterial3D alpha scissor and alpha hash (on the left) are no longer excluded from baking. This PR fixes the issue with ShaderMaterials that use Alpha or Opaque Pre-Pass transparency, but not other transparency modes.*

![image](https://github.com/user-attachments/assets/5911b3a8-fe68-4697-856b-34246ae6d4b3)

Alpha and Opaque Pre-Pass are correctly excluded from baking.","2024-08-09T16:33:54Z",false,"CHANGES_REQUESTED"
"akien-mga","MEMBER","","2024-06-20T07:27:36Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-20T07:30:00Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-20T07:36:17Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks fine to me overall. It's a pain that D3D12 headers force us to do these hacks but well, it's not worse than before.","2024-06-20T07:49:44Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-20T07:50:25Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-06-20T09:35:42Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-20T09:38:47Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-06-20T09:41:56Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-20T09:44:32Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-20T09:46:41Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-20T09:48:08Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-20T09:53:39Z",false,"COMMENTED"
"lawnjelly","MEMBER","That is good, it looks like mostly a straight port fixes the issues in 4.x too, and this keeps the existing notification stack working.","2024-06-20T06:23:59Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-20T09:33:16Z",false,"APPROVED"
"clayjohn","MEMBER","Nice catch!

Note for other maintainers, this is needed to make the checks added in https://github.com/godotengine/godot/pull/90268 functional. The logic is only triggered when using multithreaded rendering which is still experimental and disabled by default. So this is a low risk change. ","2024-06-19T20:29:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-20T12:16:35Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-20T12:17:23Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-20T12:19:38Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-20T12:23:52Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-20T12:27:10Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-20T12:29:03Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-20T12:31:26Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-20T12:31:43Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-06-20T12:36:50Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-20T12:43:08Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-20T12:46:17Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-20T12:59:39Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-20T12:59:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-19T18:31:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-19T18:35:01Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-20T15:26:32Z",false,"APPROVED"
"Maran23","CONTRIBUTOR","As written before, looks good and fixes the issues. Code looks good too. Thanks!","2024-06-21T02:27:17Z",false,"APPROVED"
"passivestar","CONTRIBUTOR","","2024-06-19T17:22:46Z",false,"COMMENTED"
"passivestar","CONTRIBUTOR","","2024-06-19T17:24:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-20T18:05:45Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-20T18:18:44Z",false,"APPROVED"
"MewPurPur","CONTRIBUTOR","","2024-06-20T07:08:38Z",false,"COMMENTED"
"aaronp64","CONTRIBUTOR","","2024-06-20T14:57:27Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

![image](https://github.com/godotengine/godot/assets/180032/019c0ea1-9a49-46c9-9372-dec768c6be4f)

![image](https://github.com/godotengine/godot/assets/180032/41625b13-191e-4d81-9f7f-789089d998fc)","2024-06-21T17:30:01Z",false,"APPROVED"
"Calinou","MEMBER","","2024-06-21T17:30:16Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-21T17:32:10Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-21T17:32:21Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-19T19:18:04Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-19T14:45:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-06T20:54:41Z",false,"APPROVED"
"akien-mga","MEMBER","Let's give it a spin. I checked `cat core/input/gamecontrollerdb.txt | cut -d',' -f2` for occurrences of these words and none of them seems included, so that should be fine.

I'm slightly concerned some controllers out there might have names like ""PlayStation controller with touchpad"" because in theory touchpad support is part of the SDL mapping, but since there's none in the list so far I guess it's fine.","2024-07-09T08:43:10Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-19T14:27:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-19T14:40:43Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-06-19T18:54:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-19T19:05:29Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-06-19T19:41:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-19T19:52:10Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-06-20T09:55:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-20T09:57:30Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-20T09:59:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-20T10:21:25Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-06-19T12:11:20Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-06-19T12:30:17Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-06-19T12:30:43Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-06-19T12:35:57Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-06-19T12:59:35Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-06-20T09:17:37Z",false,"COMMENTED"
"akien-mga","MEMBER","Tested again, I confirm this now fixes #90954 and the dev assert is solved.","2024-06-26T10:13:50Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-06-26T15:44:49Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-19T10:02:53Z",false,"APPROVED"
"kus04e4ek","CONTRIBUTOR","","2024-06-19T09:48:26Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-06-19T10:03:42Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-06-19T15:56:16Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-06-24T08:25:57Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-24T08:49:19Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good!","2024-06-24T08:50:42Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-19T08:17:22Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-06-19T08:57:57Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-19T09:01:10Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-19T09:01:16Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally on various 3D demos, it works as expected.","2024-06-19T14:43:39Z",false,"APPROVED"
"Geometror","MEMBER","","2024-07-12T14:02:09Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-07-12T14:12:37Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-07-12T14:24:01Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-19T07:06:04Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-19T07:20:00Z",false,"APPROVED"
"bruvzg","MEMBER","Have not tested it, but it probably can be set without `if env[""use_volk""]:`, and for both iOS and macOS.","2024-06-19T05:04:27Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-07-04T07:12:45Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-18T21:12:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-18T21:12:47Z",false,"APPROVED"
"fire","MEMBER","","2024-06-19T14:05:16Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-18T21:08:41Z",false,"COMMENTED"
"tracefree","CONTRIBUTOR","","2024-06-18T21:28:46Z",false,"COMMENTED"
"clayjohn","MEMBER","You will also need to change the code for the Compatibility renderer here: https://github.com/godotengine/godot/blob/e2fc6d38cb240ea23bd5700514f8a8ce7011e89c/drivers/gles3/shaders/tonemap_inc.glsl#L80","2024-06-18T21:34:29Z",false,"COMMENTED"
"tracefree","CONTRIBUTOR","","2024-06-18T21:38:37Z",false,"COMMENTED"
"tracefree","CONTRIBUTOR","","2024-06-18T21:46:43Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-18T21:49:04Z",false,"COMMENTED"
"tracefree","CONTRIBUTOR","","2024-06-18T22:00:12Z",false,"COMMENTED"
"allenwp","CONTRIBUTOR","","2024-06-19T00:40:16Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-19T01:20:30Z",false,"COMMENTED"
"tracefree","CONTRIBUTOR","","2024-06-19T08:26:26Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-06-19T09:05:15Z",false,"COMMENTED"
"tracefree","CONTRIBUTOR","","2024-06-19T12:20:26Z",false,"COMMENTED"
"clayjohn","MEMBER","Sorry, I lost track of this after my last round of reviews. It looks good to me! 

Just for posterity, I commented on the increase in instructions in a previous review. It makes sense for us to use this optimized version over the naive formula. But I am not concerned about the overall increase in instructions from using the correct formula for two reasons:
1. Its the correct formula, using an incorrect formula isn't a good optimization
2. This shader is texture read bound (especially if using glow, or FXAA etc.), so the extra instructions will be hidden by the usual latency hiding mechanisms. 

It still makes sense to use the optimized form for two reasons:
1. Its better for mobile devices as it will use less battery (despite not running faster)
2. Its better if we end up copying this code in another part of the engine that may be more instruction-sensitive","2024-09-24T22:12:48Z",false,"APPROVED"
"Chaosus","MEMBER","","2024-06-19T05:01:15Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-06-19T05:07:50Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-06-19T05:25:47Z",false,"COMMENTED"
"10Drenth","CONTRIBUTOR","","2024-06-19T05:39:21Z",false,"COMMENTED"
"Chaosus","MEMBER","I think it's a correct now, great, thanks.","2024-06-21T13:49:37Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-03T10:10:51Z",false,"COMMENTED"
"10Drenth","CONTRIBUTOR","","2024-09-03T10:13:04Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-03T11:06:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-20T12:54:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-20T10:02:09Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-20T13:12:42Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-09-20T13:16:52Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-20T13:50:13Z",false,"APPROVED"
"Bromeon","CONTRIBUTOR","This looks great, thanks so much! I implemented the Rust part and while I haven't had the chance to test individual APIs yet, the `is_required` field is consistently present for all virtual methods :slightly_smiling_face:

Maybe @TitanNano could also have another look?

One question, do you think `is_override_required` would be clearer than just `is_required`? Or clear enough from the context?","2024-09-23T20:19:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-24T16:34:45Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-27T11:44:52Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-27T11:45:02Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-18T15:19:24Z",false,"COMMENTED"
"monxa","NONE","","2024-06-18T15:21:23Z",false,"COMMENTED"
"monxa","NONE","","2024-06-18T15:23:46Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected. Behavior is still correct when physics interpolation is disabled.

Code looks good to me.

### Before

https://github.com/godotengine/godot/assets/180032/aa52ab71-fc0e-433b-981d-f132148138dc

### After

https://github.com/godotengine/godot/assets/180032/3110844f-2ee6-4a90-bee1-077ab4b73400","2024-06-18T22:51:45Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-29T08:42:27Z",false,"COMMENTED"
"RandomShaper","MEMBER","I've finally been able to give a new review to this. Now I've parsed it more carefully, I see why this is an improvement at several levels.

A few extra requests:
1. I found it a bit hard to tell `ref_pointer_no_init()` from `ref_pointer()`. I'd suggest merging both like this (not tested, but you get the idea; not sure how doable in `Variant::ObjData::ref()`-`ref_pointer()`):
```C++
template<bool Init = False>
_FORCE_INLINE_ void ref_pointer(T *p_refcounted) { // Note 'p_ref` -> 'p_refcounted`
	if (unlikely(p_ref == reference)) {
		return;
	}
	
	// Suggesting this instead of the cleanup_ref approach. Seems more straighforward and avoids dealing with the refcount more than strictly needed. Am I missing something?
	if (reference) {
		reference->unreference();
	}

	bool valid = false;
	if (likely(p_refcounted)) {
		bool valid = false;
		if constexpr (Init) {
			if (p_refcounted->init_ref()) {
				valid = true;
			}
		} else {
			if (p_refcounted->reference()) {
				valid = true;
			}
		}
	}
	reference = likely(valid) ? p_refcounted : nullptr;
}
```
2. As in the code above, it'd be good to use `likely()`/`unlikely()` in the null checks and identity checks throughout. The former code failed to do so, but I think it's worth while you're at it.
3. Maybe opinionated, but I find `ptr` easier to parse than `ptr != null`, especially in this sort of code.
4. In the various functions that are implemented as `*this = p_from;`, I'd suggest being explicit about the call to `ref*()`. After all, anyone trying to wrap their head around this code will have to check how `operator=` is implemented anyway.
5. Now I don't see much reason any longer to have separate commits, unless the first one could be a pure fix and the second one a pure refactor. Otherwise, I'd ask you to squash them back.

I'm aware this looks like a lot of changes, but it's just a little refinement over your work. If you already got close to perfection, these ideas should get us even a step closer!","2024-09-18T07:39:41Z",false,"CHANGES_REQUESTED"
"RandomShaper","MEMBER","All I can say now is that this is a piece of fine art.

Thank you very much for your patience and diligence dealing with my feedback this long.","2024-09-23T16:48:03Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-06-18T10:33:16Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-06-18T10:35:11Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-06-18T10:57:52Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-07-04T01:08:01Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-07-04T01:17:19Z",false,"COMMENTED"
"dalexeev","MEMBER","Sorry for delay. Could you use an already existing static method for the test? For example, `JSON.stringify()`.

```gdscript
class MyJSON extends JSON:
    pass

func test():
    print(MyJSON.stringify(""test""))
```","2024-07-15T08:06:24Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-18T11:05:27Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-18T11:36:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-18T08:03:11Z",false,"APPROVED"
"lawnjelly","MEMBER","Looks sensible (providing there are no regressions, my crystal ball gazing not working this morning). :grin: ","2024-06-18T07:53:31Z",false,"APPROVED"
"akien-mga","MEMBER","Seems relatively safe from looking at what `ResourceCache::clear()` actually does.","2024-06-18T11:42:34Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-18T11:51:37Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

**Testing project:** [test_pr_93291.zip](https://github.com/user-attachments/files/15931946/test_pr_93291.zip)

## Preview

*Particles only collide with the spheres of the same color, which have the same collision mask as the particles' layer.*

https://github.com/godotengine/godot/assets/180032/e7a4f6e4-145c-4d8e-98e1-853ee95a137a

### Heightfield mask

*Yellow box is on layer 2. The heightfield's bake mask has all layers enabled except layer 2.*

https://github.com/godotengine/godot/assets/180032/30d6796c-8c5e-4d7a-b1dd-7d0e91fc7fe2","2024-06-21T18:50:00Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-22T09:22:10Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Documentation could be improved, but the feature is a bit tricky to explain, and at least it's consistent with the surrounding descriptions. Although I cannot come up with anything better, there's just a few things that stand out to me.","2024-06-22T09:34:07Z",false,"COMMENTED"
"touilleMan","MEMBER","","2024-06-18T09:44:43Z",false,"APPROVED"
"Bromeon","CONTRIBUTOR","I think this looks good -- only thing where I'm not sure is if we have a policy to use `static_cast` when possible (the codebase is not very consistent in that regard). Just in case we're already cleaning up.","2024-06-18T09:49:01Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks!

This looks good to me! Getting rid of those ugly `#pragma`s will be nice. Looking at the CI, I don't see any warnings appearing.

> only thing where I'm not sure is if we have a policy to use static_cast when possible (the codebase is not very consistent in that regard)

As far as I know, we don't have a policy with regard to this, although, it would be nice to make one, especially if we can do some static linting to enforce it. But that's a whole other issue.","2024-06-18T13:53:39Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-18T08:08:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM","2024-06-18T09:19:22Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-18T08:06:59Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-06-18T09:37:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-20T11:47:53Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-20T12:39:38Z",false,"APPROVED"
"KoBeWi","MEMBER","This leads to error about missing file and being unable to open the model import dialog. Still better than crashing.

Though I'm not sure if empty options is always unexpected. The crash only happened, because some options are accessed without safeguard. E.g. here:
https://github.com/godotengine/godot/blob/3e0c10d3931afb62a30f26532a9f7709ee68bf2c/modules/gltf/editor/editor_scene_importer_gltf.cpp#L62-L65

The empty options happened (at least in one of the linked issues) because renaming the referenced file did not update path in `.import` file. A separate issue should be opened for that.","2024-07-30T12:42:55Z",false,"APPROVED"
"akien-mga","MEMBER","I think we can merge this for 4.3 as a stopgap measure, but yeah as pointed out by KoBeWi some further work will be needed to handle this scenario better.","2024-07-30T12:53:54Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks! Looks correct to me. It was probably a copy-paste mistake originally :-)","2024-06-18T15:28:05Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-06-18T05:47:29Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-06-18T20:15:26Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-06-21T07:48:47Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-21T08:06:52Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-21T08:16:18Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Worth investigating **and documenting** the benefits of calling this method over manually calling `_run()` just to be sure.

I personally think that a theoretical `run` could be renamed and made a static method that can be provided an absolute path. Just theorising, though.
```gdscript
EditorScript.run_absolute(""res://editor_script.gd"")
```","2024-06-17T19:01:44Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks great!","2024-06-18T16:09:27Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-24T12:59:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T13:01:46Z",false,"COMMENTED"
"Gamemap","CONTRIBUTOR","","2024-09-24T21:29:15Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T21:33:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T21:34:16Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-03T14:34:41Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-03T14:35:19Z",false,"APPROVED"
"clayjohn","MEMBER","I agree. These should be enforced as consts from the shader language side so we can provide nice errors when they are written to. 

Right now users get faced with our internal shader compiler error which is not friendly and is super confusing for them","2024-06-17T22:49:13Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-18T10:53:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-18T10:54:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-18T10:55:12Z",false,"COMMENTED"
"elXill","NONE","","2024-06-18T10:57:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-18T10:58:32Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-18T11:29:57Z",false,"CHANGES_REQUESTED"
"elXill","NONE","","2024-06-18T17:02:26Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-19T00:16:26Z",false,"COMMENTED"
"elXill","NONE","","2024-06-19T19:01:48Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-20T09:42:51Z",false,"COMMENTED"
"elXill","NONE","","2024-06-20T11:16:17Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-20T11:19:52Z",false,"COMMENTED"
"elXill","NONE","","2024-06-20T11:30:08Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-20T11:45:32Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","","2024-06-20T11:46:07Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-20T11:49:19Z",false,"COMMENTED"
"elXill","NONE","","2024-06-20T12:29:53Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-20T13:13:23Z",false,"CHANGES_REQUESTED"
"elXill","NONE","","2024-06-20T16:26:09Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-20T17:54:29Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-20T19:53:46Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-06-21T08:12:27Z",false,"COMMENTED"
"elXill","NONE","","2024-06-21T09:37:20Z",false,"COMMENTED"
"elXill","NONE","","2024-06-21T09:47:19Z",false,"COMMENTED"
"elXill","NONE","","2024-06-21T09:53:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-22T09:12:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-22T15:13:14Z",false,"COMMENTED"
"elXill","NONE","","2024-06-22T15:29:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-22T15:31:54Z",false,"COMMENTED"
"elXill","NONE","","2024-06-22T15:33:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-22T15:34:59Z",false,"COMMENTED"
"elXill","NONE","","2024-06-22T15:36:27Z",false,"COMMENTED"
"TokageItLab","MEMBER","The constant value of `12` is frequently used, so it is recommended that it be defined as follows in `animation_state_machine_editor.h` and replaced altogether with that.

```cpp
class AnimationNodeStateMachineEditor : public AnimationTreeNodeEditorPlugin {
	GDCLASS(AnimationNodeStateMachineEditor, AnimationTreeNodeEditorPlugin);

	static constexpr uint64_t STATE_MACHINE_GROUPS_LIMIT = 12;

```","2024-06-22T16:24:56Z",false,"CHANGES_REQUESTED"
"elXill","NONE","","2024-06-22T16:32:19Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-22T16:33:47Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-22T16:36:59Z",false,"COMMENTED"
"elXill","NONE","","2024-06-22T17:25:36Z",false,"COMMENTED"
"elXill","NONE","","2024-06-22T18:19:26Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-22T18:29:06Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-22T18:33:25Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","I tried to play with it, and to be honest, it was not so useful. However, I feel that the main problem depends on the complexity of the GUI and the number of clicks for this feature. So here are some suggestions for improvement.


## Node Groups should be editable in the inspector if possible, rather than in the bottom editor

This would allow group assignments to be made immediately when a node is selected.

However, since `AnimationNodeAnimation` and `AnimationNodeStateMachineTransition` already have objects registered directly in the inspector, there may be conflicts. So it may be necessary to implement your own inspector plugin like `EditarInspecutorPluginAnimationTrackKeyEdit`.


## Need fewer buttons and the group names need to be easily editable

It is tedious to have tabs in the bottom editor and toggle them by buttons. There should be a LineEdit, or having right click menu, or having pencil button next to the name to rename it.


## Show/hide needs to be a toggle type as we don't know the current state

This needs to be a toggle, just as the scene tree dock is. I also think it must be a checkbox, not an eye icon, to let people know that it is a filter. This is because unassigned groups should always be displayed.


## I don't see why the number of groups needs to be a constant array

If they are to be listed with naming, they should be a dynamic list basically.

Or it should be a bitmask, like a collision layer. Then, the layer data should not be stored in each node in each StateMachine as array.

That is, if constants are used, `PackedInt32Array node_group_selections;` should be `uint_16 node_group_selections;`.

If you want to have a group name for the bitmask, you could have it in EditorSetting, as the CollisionLayer does, and display it where you need it; it means that you should have a separate list of names from the bitmask. Also, if you need to manage the names each StateMachine, you could consider storing it in the StateMachine using the TOOLS_ENABLED block and let the StateMachine inspector manage it.

Alternatively, if you use a dynamic list (don't use bitmask), `PackedInt32Array node_group_selections;` should be Vector<int> node_group_selections;`, but there are a few performance concerns.

Taken together with the above input, a mock that would improve this would look like below:

![image](https://github.com/godotengine/godot/assets/61938263/cceeb8e3-1443-49bc-b5eb-fcdce64acf14)

If it adapts to bitmask and a simpler GUI, it become like below:

![image](https://github.com/godotengine/godot/assets/61938263/d36e126d-bd88-4936-8ac6-2effbb964325)

FYI, the last image is almost the same as the Layer bitmask feature that groups the display and hide of the blender.","2024-06-29T14:36:39Z",false,"CHANGES_REQUESTED"
"akien-mga","MEMBER","","2024-06-18T15:53:26Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-18T15:54:44Z",false,"APPROVED"
"TokageItLab","MEMBER","Working fine on testing.","2024-06-17T15:30:42Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-17T17:28:36Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-18T12:26:57Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-06-18T03:35:00Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-06-18T04:06:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-18T08:00:13Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-06-18T08:02:28Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","This looks like the more sensible solution to me","2024-06-18T08:45:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-18T11:31:32Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-17T11:51:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-17T11:52:22Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-17T11:52:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-17T11:54:36Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-17T12:02:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-17T12:05:40Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-17T13:51:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-17T13:55:03Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-06-17T15:51:52Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-17T16:52:08Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-06-17T17:03:25Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-17T17:13:37Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-06-17T18:35:30Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-06-17T18:35:59Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-06-17T18:36:26Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-06-17T18:36:48Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-06-17T18:36:55Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-06-17T18:37:05Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-06-17T18:40:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-17T22:37:15Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-17T22:39:19Z",false,"APPROVED"
"smix8","CONTRIBUTOR","","2024-06-18T00:03:40Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-19T20:12:44Z",false,"COMMENTED"
"fire","MEMBER","TODO: Update the GLTFDocument to use the bake static mesh function.","2024-06-22T14:47:20Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-18T16:21:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM","2024-06-18T17:23:03Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-20T13:31:57Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/0a4aedb36065f66fc7e99cb2e6de3e55242f9dfb), it works as expected.

I can't really notice a difference in terms of startup time or inspector responsiveness though (tested on a Linux x86_64 editor build with `optimize=speed lto=full`).

The startup + shutdown time difference across 100 runs is very small:

```
Benchmark 1: bin/godot.linuxbsd.editor.x86_64 /tmp/4/project.godot --quit     <---- This PR
  Time (mean ¬± œÉ):      3.799 s ¬±  0.182 s    [User: 2.135 s, System: 0.612 s]
  Range (min ‚Ä¶ max):    2.878 s ‚Ä¶  4.048 s    100 runs
 
  Warning: Statistical outliers were detected. Consider re-running this benchmark on a quiet system without any interferences from other programs. It might help to use the '--warmup' or '--prepare' options.
 
Benchmark 2: bin/godot.linuxbsd.editor.x86_64.master /tmp/4/project.godot --quit
  Time (mean ¬± œÉ):      3.814 s ¬±  0.198 s    [User: 2.133 s, System: 0.612 s]
  Range (min ‚Ä¶ max):    2.848 s ‚Ä¶  4.096 s    100 runs
 
  Warning: Statistical outliers were detected. Consider re-running this benchmark on a quiet system without any interferences from other programs. It might help to use the '--warmup' or '--prepare' options.
 
Summary
  bin/godot.linuxbsd.editor.x86_64 /tmp/4/project.godot --quit ran
    1.00 ¬± 0.07 times faster than bin/godot.linuxbsd.editor.x86_64.master /tmp/4/project.godot --quit
```

The stripped binary with this PR is 4 KB smaller.","2024-09-20T13:54:59Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-21T09:04:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T10:19:47Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-26T16:39:16Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-26T19:53:30Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-16T21:46:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-28T11:46:32Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-28T11:47:29Z",false,"COMMENTED"
"yankscally","NONE","thanks for help","2024-06-28T11:57:17Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-06-16T21:14:40Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

https://github.com/godotengine/godot/assets/180032/86b925d6-a597-450c-b10d-edcc4b388d65

While we're at it, I'd change CSGShape3D's `snap` documentation to mention that only the top-level CSG node' Snap property is taken into account. Child nodes' value is ignored for snapping vertices of the final (combined) CSG shape.

","2024-06-16T21:24:51Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-16T21:26:05Z",false,"COMMENTED"
"fire","MEMBER","","2024-06-16T22:35:17Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-17T13:39:17Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-18T15:53:45Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-06-16T16:58:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-16T17:01:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-16T17:27:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","Approving on style","2024-06-16T17:47:07Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-06-16T18:03:46Z",false,"COMMENTED"
"dalexeev","MEMBER","GDScript code style looks good to me.","2024-06-16T18:13:14Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-06-17T05:27:39Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Every description around AnimatedSprite could be far improved upon, but it's better than nothing. ","2024-06-16T21:31:42Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-06-18T06:18:53Z",false,"APPROVED"
"paulloz","MEMBER","Reviewing based on the code only, I don't have any Apple hardware either.","2024-06-23T08:28:05Z",false,"APPROVED"
"Calinou","MEMBER","","2024-06-16T19:13:01Z",false,"COMMENTED"
"passivestar","CONTRIBUTOR","","2024-06-16T19:26:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-17T13:38:22Z",false,"COMMENTED"
"passivestar","CONTRIBUTOR","","2024-06-17T15:48:35Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-17T16:57:43Z",false,"APPROVED"
"smix8","CONTRIBUTOR","Thanks.

On a different note the NavigationServer3D documentation of that function should be improved to clarify what the collision parameter does.","2024-06-16T15:48:45Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-16T15:53:00Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-17T08:44:27Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-19T16:12:24Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-17T11:01:58Z",false,"APPROVED"
"paddy-exe","CONTRIBUTOR","Code looks good to me. Haven't tested it yet though. Just now saw the merge notification üòÖ ","2024-06-17T12:51:43Z",false,"APPROVED"
"fire","MEMBER","I have no opinion on which is the exact wording of ""inverse"". I prefer undo, but someone else can pick the ""color of the shed"".","2024-06-16T22:51:47Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","> ""This method is the opposite of ...""
> [String](https://github.com/thmasn/godot/blob/def5545b392a3882770ef27ae337c532a712fe46/doc/classes/String.xml#L385) [StringName](https://github.com/thmasn/godot/blob/def5545b392a3882770ef27ae337c532a712fe46/doc/classes/StringName.xml#L360)

I wrote a good chunk of these so admittedly there's a general inconsistency around the place.

""Undo"" is probably the most uncommon way to refer to this concept, though.","2024-06-16T23:02:48Z",false,"APPROVED"
"paulloz","MEMBER","This looks fine to me. But I haven't had *that much* time to test.","2024-06-19T10:26:38Z",false,"APPROVED"
"AThousandShips","MEMBER","Please update your commit to have a more descriptive message, like the title of the PR

This will also need to be done for `Vector2`","2024-06-15T14:52:05Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-15T11:21:54Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-17T22:54:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-18T07:47:38Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-18T22:03:35Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Given that this has accidentally been reported twice, I will assume this fix to be accurate.","2024-07-16T20:46:04Z",false,"APPROVED"
"fire","MEMBER","The section of the animation code is hard to evaluate for me, but looks good to me.","2024-06-15T04:38:08Z",false,"APPROVED"
"kleonc","MEMBER","","2024-06-15T06:00:22Z",false,"COMMENTED"
"markdibarry","CONTRIBUTOR","","2024-06-15T14:56:38Z",false,"COMMENTED"
"kleonc","MEMBER","LGTM! Now canvas items should end up with the same `repeat_size` and `repeat_times` regardless of whether they are y-sorted or not. :+1:","2024-06-15T18:40:04Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-06-15T03:19:42Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-15T03:20:47Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-06-19T08:29:31Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-06-19T08:30:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-22T17:21:19Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-22T17:21:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-22T17:22:36Z",false,"APPROVED"
"TheSofox","CONTRIBUTOR","","2024-06-22T17:40:45Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-06-22T17:40:50Z",false,"COMMENTED"
"Calinou","MEMBER","Docs look good to me.","2024-06-15T14:04:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-17T08:33:54Z",false,"APPROVED"
"Calinou","MEMBER","","2024-06-15T13:59:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-15T14:00:54Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-06-15T15:42:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-16T09:17:19Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-17T08:32:20Z",false,"APPROVED"
"Calinou","MEMBER","Code and docs look good to me.","2024-06-15T14:00:31Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-15T14:01:09Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-17T08:34:16Z",false,"APPROVED"
"clayjohn","MEMBER","ReflectionProbes should be masked before calling the shader. Since ReflectionProbes are linked against Meshes, we can just avoid linking them if the mask does not overlap. 

This way we can properly cull objects that don't fit in the mask without adding a run time cost in the shader","2024-06-25T14:44:25Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-06-15T08:00:13Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-19T09:55:05Z",false,"COMMENTED"
"KoBeWi","MEMBER","Remember to squash the commits into 1.","2024-06-19T09:55:41Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-19T17:59:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-30T13:23:55Z",false,"APPROVED"
"smix8","CONTRIBUTOR","","2024-06-14T20:15:14Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-15T08:04:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-15T08:05:45Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-06-16T03:33:32Z",false,"APPROVED"
"smix8","CONTRIBUTOR","","2024-08-16T14:41:30Z",false,"CHANGES_REQUESTED"
"smix8","CONTRIBUTOR","","2024-08-16T20:23:10Z",false,"APPROVED"
"rune-scape","CONTRIBUTOR","wonderful! ive been searching for this bug","2024-06-17T07:41:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-17T08:49:08Z",false,"APPROVED"
"ajreckof","MEMBER","This is something that has been a huge pain for quite some time. I haven't tested it but code looks good.
","2024-06-25T11:36:30Z",false,"APPROVED"
"KoBeWi","MEMBER","This makes SceneTree shortcuts unusable when a Button is focused. Not sure if it's a problem though, as editor viewports can steal focus very easily so it shouldn't be noticeable.","2024-07-09T12:07:23Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-07-09T12:41:08Z",false,"COMMENTED"
"passivestar","CONTRIBUTOR","","2024-07-09T13:07:07Z",false,"COMMENTED"
"akien-mga","MEMBER","I confirm this fixes the issue, and the changes seem sensible.","2024-06-14T15:11:32Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-17T12:40:26Z",false,"APPROVED"
"kus04e4ek","CONTRIBUTOR","","2024-06-14T09:36:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-14T09:52:17Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-02T12:30:17Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-14T08:10:20Z",false,"APPROVED"
"kleonc","MEMBER","","2024-06-14T09:51:12Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-14T16:38:49Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-06-14T17:03:18Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-06-15T17:17:17Z",false,"COMMENTED"
"kleonc","MEMBER","LGTM!

But since I've proposed changing it to the current version, another opinion / approval would be good.

+Remainder for before merging:

> Note that it depends on [godotengine/godot-docs#9489](https://github.com/godotengine/godot-docs/pull/9489) to go in first so the graph URL links work.","2024-06-15T19:14:27Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","","2024-06-16T02:15:14Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-16T22:22:21Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-16T22:22:47Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-04T16:49:58Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-07-24T19:59:16Z",false,"APPROVED"
"akien-mga","MEMBER","Tested, works great!","2024-06-14T07:51:09Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

However, I can't reproduce https://github.com/godotengine/godot/issues/93104 on an optimized editor build (`optimize=speed lto=full`). Saving is quite fast both before and after this PR, although it's slightly faster with this PR. This is also the case with a debug build (saving takes ~800 ms in `master`, ~700 ms with this PR).

In both cases, the FileSystem dock gets scrolled up when saving the scene. I'd prefer if the existing scroll bar position was kept instead, but that should be looked into in its own PR.

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 39)
</details>","2024-06-16T23:33:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-18T15:55:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-18T16:29:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-18T16:29:31Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-18T20:24:52Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-18T20:29:59Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-18T20:30:23Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-18T20:31:27Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-18T20:32:08Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-18T20:33:37Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-18T20:39:21Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-18T21:45:25Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-18T22:08:50Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-20T15:39:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-20T16:07:29Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-20T16:14:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-20T16:28:45Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-06-20T20:20:34Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-20T20:20:36Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-20T20:20:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-20T20:43:31Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-20T20:47:44Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks great to me!","2024-06-14T11:17:24Z",false,"APPROVED"
"adamscott","MEMBER","","2024-06-14T13:23:03Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-14T13:29:30Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-14T13:30:24Z",false,"COMMENTED"
"adamscott","MEMBER","Looks fine with the small change I proposed! Thanks Fabio!","2024-06-14T13:31:23Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally on all rendering methods on Linux + NVIDIA, it works as expected.

**Testing project:** [test_perspective_scale.zip](https://github.com/user-attachments/files/15844415/test_perspective_scale.zip)

https://github.com/godotengine/godot/assets/180032/216dd593-e772-41ff-a8ef-1c71905e9ad8

Some feedback:

- Overall, this approach works well with weapon models made of multiple meshes, as done in the testing project above.

- The Viewport approach is still relevant if you wish to make your weapon model translucent while avoiding any sorting issues, including if multiple meshes overlap within the weapon model. For (mostly) opaque weapon models, this new approach is clearly better.

- Models with clip perspective can still cast and receive shadows, including from other objects in the scene. The perspective scale does not affect the position at which shadows are received, which I think makes sense for this use case.

- Screen-space effects no longer affect the model that uses clip scale and a low Z clip scale, but this is expected. We should make sure to document this, as I don't see a way to resolve this.

- **Z Clip Scale** and **Perspective Scale** should be hidden in the inspector if **Use Clip Scale** is unchecked.

- The perspective scale multiplier is inverted compared to what I'm typically expecting. Higher values result in a *lower* FOV, instead of a higher FOV. This might not be a problem, but I thought I'd mention it nonetheless.

- Meshes parented to the camera occasionally disappear with low perspective scale (= high FOV). See the example below with the weapon, which is made of multiple MeshInstance3D nodes:

https://github.com/godotengine/godot/assets/180032/def097f0-ee0e-49fb-b439-ea4090d8cc68

It might be possible to work around this one by setting a large custom AABB to the weapon model (as it's always visible anyway), but this isn't exposed in the Advanced Import Settings dialog yet.
","2024-06-14T22:28:29Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-14T07:35:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-14T10:17:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-14T16:19:55Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-06-14T16:37:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-14T16:39:22Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks!

I haven't tested, but the code looks good to me.","2024-08-22T20:57:25Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","","2024-08-22T23:54:34Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-18T15:54:11Z",false,"APPROVED"
"Geometror","MEMBER","","2024-07-10T13:54:14Z",false,"APPROVED"
"Geometror","MEMBER","","2024-07-12T10:52:48Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-12T12:10:51Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-07-25T08:04:23Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-07-25T08:04:29Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Documentation itself is fine","2024-07-01T07:20:09Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `3.x` https://github.com/godotengine/godot/commit/26405db2222082f705701df67105d070faa98330), it works as expected.

**Testing project:** [truck_town_at_night_3.x.zip](https://github.com/user-attachments/files/17117284/truck_town_at_night_3.x.zip)

![image](https://github.com/user-attachments/assets/c7769fdd-878d-41ee-8929-0ae0f768aa0d)","2024-09-24T15:54:46Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-13T11:59:53Z",false,"APPROVED"
"Calinou","MEMBER","","2024-06-13T12:38:01Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-13T11:31:05Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-06-13T15:41:09Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-06-13T16:48:49Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-06-13T10:50:47Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-13T11:12:42Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-13T11:12:59Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-14T10:38:45Z",false,"APPROVED"
"bruvzg","MEMBER","If this logic is removed, then these two lines in the header should be removed as well:

https://github.com/godotengine/godot/blob/475248d99df89fc29032a42f1d29ad4cef49c8b5/scene/resources/audio_stream_polyphonic.h#L59-L60

Why was it saving/using index in the first place? It might be performance critical, and in this case it's better to keep it, check index first and then fallback to the full list search instead of removing it completely.","2024-06-13T08:26:23Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-22T07:40:45Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-22T10:19:30Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-22T10:19:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-13T09:27:17Z",false,"APPROVED"
"DarkMarmot","NONE","","2024-06-27T01:11:24Z",false,"COMMENTED"
"akien-mga","MEMBER","Makes sense to me.","2024-06-13T09:46:01Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-13T11:07:09Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-13T11:26:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-13T11:37:51Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-13T11:38:56Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-18T13:27:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-18T13:53:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-18T13:53:22Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-06-18T22:26:40Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-18T22:26:43Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-14T10:36:03Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-06-13T05:29:29Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-06-13T04:59:00Z",false,"APPROVED"
"akien-mga","MEMBER","I confirm this fixes the warning for me on Linux.","2024-06-13T08:15:42Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-14T10:37:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-12T15:13:26Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-12T15:15:47Z",false,"COMMENTED"
"passivestar","CONTRIBUTOR","","2024-06-12T15:27:04Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-13T19:49:56Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-12T13:26:50Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-13T15:17:41Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-14T10:39:07Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","I haven't tested, or double checked the data on the spec, but this looks good at a glance!

Given that it's just registering metadata about new ""controller"" types, I personally think it should be fine to sneak into `4.3`, or in worst case, cherry-picked into `4.3.1`.","2024-06-12T13:34:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-12T09:01:35Z",false,"APPROVED"
"akien-mga","MEMBER","Works well and the code seems good.","2024-06-12T07:35:46Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great!","2024-06-12T02:45:02Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-06-12T07:55:54Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-06-12T15:58:09Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-14T02:08:22Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-06-14T06:09:52Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-14T16:58:12Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/97b8ad1af0f2b4a216f6f1263bef4fbc69e56c7b) on various official demos, it works as expected. The `--import` command line argument still works correctly too.

Code looks good to me.","2024-07-16T03:20:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-16T22:35:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-16T22:36:20Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-16T23:04:53Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-17T01:26:15Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-26T20:23:38Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected. Code looks good to me.","2024-06-12T15:23:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-25T15:56:06Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-12T09:39:22Z",false,"COMMENTED"
"HolonProduction","MEMBER","","2024-06-12T15:16:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-19T08:37:51Z",false,"APPROVED"
"jinyangcruise","NONE","","2024-06-19T02:25:48Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-06-19T14:25:37Z",false,"COMMENTED"
"jinyangcruise","NONE","","2024-06-20T11:41:28Z",false,"COMMENTED"
"jinyangcruise","NONE","","2024-06-20T11:45:12Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-06-21T22:03:37Z",false,"COMMENTED"
"jinyangcruise","NONE","","2024-06-22T02:11:47Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-06-27T22:17:46Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me.","2024-06-28T08:44:53Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.","2024-06-12T15:33:02Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-28T16:19:35Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-11T20:07:21Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected. This is a great start :slightly_smiling_face: 

**Testing project:** [test_pr_93041.zip](https://github.com/user-attachments/files/15840855/test_pr_93041.zip)

https://github.com/godotengine/godot/assets/180032/94986f0d-9dd0-4597-a2f5-013fce56cd0b

Some feedback:

- I think the Hybrid mode's UI is pretty good as it is; It behaves exactly as I expect it to. It's a good way to cater to both controller and keyboard/mouse users effectively.

- The OptionButton's minimum width isn't increased to account for the icons' width (including their padding), which means long option names get cut off.

- The action of changing the item should follow the BaseButton's **Action Mode** property. By default, the item change should occur when the mouse button is *released*, not when it's pressed. This should be done on both Hybrid and Carousel mode, both when clicking the arrows and when clicking the item name in Carousel.
  - The only exception to this rule is the dropdown appearance in Hybrid, which should always appear on button press to follow macOS and Linux UI guidelines.
 
- There should be a boolean property to disable wraparound behavior. In this case, the Previous/Next arrows should be modulated with a ""disabled color"" theme item when the carousel is already at the first/last item.
  - This property should only be displayed in the inspector when **Type** is **Hybrid** or **Carousel**. This can be done by implementing `_validate_property()` in OptionButton and calling `notify_property_list_changed()` in `set_type()` when the type has changed from its previous value.
  - In fact, I think wraparound behavior should be disabled by default, but it's worth surveying various well-known game UIs to see what they do. In general, I tend to prefer **not** having wraparound because it makes it easier to [crank everything all the way up](https://www.youtube.com/watch?v=p6oEBrAYowg) :wink: 
 
- There should be hover feedback when hovering and pressing the arrows. This can be done by adding theme items where the user can specify icon modulations color for hovered and pressed icons, similar to what's present in other Control nodes. (Pressing takes priority over hovering, of course.)
- When in Carousel mode, it should be possible to right-click the button to go backwards (with left-clicking going forwards as usual). Wraparound should also occur in this case when reaching the first item (it should go to the last item).
- Consider implementing the bottom blips indicator as mentioned in the original proposal, as this greatly improves carousel usability in my experience. Thanks to blips, users no longer have to click through all options to see how many options are actually available if the button is in Carousel mode :slightly_smiling_face: 
","2024-06-14T16:21:51Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-11T16:51:56Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-06-11T16:58:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-12T07:59:24Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-06-12T08:20:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-11T14:40:28Z",false,"APPROVED"
"Calinou","MEMBER","","2024-06-11T14:42:23Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-28T12:37:45Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-08-27T12:52:47Z",false,"COMMENTED"
"AThousandShips","MEMBER","Will try out this code later today or tomorrow hopefully","2024-08-27T12:56:03Z",false,"COMMENTED"
"AThousandShips","MEMBER","Tested briefly and works as expected in my basic testing, except for the earlier code suggestions above this looks good to me but TIWAGOS

One minor usability detail I notice that might be worth to improve is that when you have finished adding a polygon it clears the current tool, so you have to press the add point button again, this was in place originally I'd assume because you replaced the polygon if finishing a new one, but I think you should keep the add point tool now, but that's all the usability details I can speak for in my testing","2024-08-28T13:02:32Z",false,"APPROVED"
"groud","MEMBER","","2024-09-03T13:36:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-03T13:39:23Z",false,"COMMENTED"
"groud","MEMBER","","2024-09-03T13:42:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-03T13:43:32Z",false,"COMMENTED"
"groud","MEMBER","","2024-09-03T13:45:46Z",false,"COMMENTED"
"rburing","MEMBER","","2024-10-06T21:05:49Z",false,"CHANGES_REQUESTED"
"kleonc","MEMBER","","2024-10-07T00:44:29Z",false,"COMMENTED"
"rburing","MEMBER","","2024-10-07T21:11:17Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","Sorry for the delay. Just gave a look and the code looks mighty fine!

I really appreciate that you did this with `WaylandThread` in mind, I realize that it's not very documented yet but nonetheless you managed to go along with it great! :D

Nothing looks out of place, although please note that I didn't test it and I don't know IMEs terribly well so TIWAGOS on the actual details.

Thank you so much for working on this!","2024-06-18T21:28:08Z",false,"APPROVED"
"QbieShay","CONTRIBUTOR","","2024-06-17T11:40:55Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","The logic looks good, thanks for the fix!","2024-06-12T01:28:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-11T09:55:06Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-11T08:32:26Z",false,"APPROVED"
"smix8","CONTRIBUTOR","Approve for the change in general. This still needs someone code review and a rebase.

Rebase because some of the query functions have been moved to the `nav_mesh_queries_3d.h` file.

I had time to test this PR more thoroughly with current master. Running 1000 iterations the results are on average at least the same, but for the more important hot paths like the main path function always better, even if only for a tiny amount. So I guess this is good.","2024-09-22T14:59:36Z",false,"APPROVED"
"akien-mga","MEMBER","Code seems good to me.

Needs rebase. Be sure to notify us once it's done, as GitHub doesn't always send notifications for rebases for some reason.","2024-09-24T10:32:52Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-19T12:44:29Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-19T12:45:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-19T12:47:50Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-06-19T16:35:02Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-19T16:38:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-19T16:41:50Z",false,"APPROVED"
"Geometror","MEMBER","","2024-09-29T19:59:03Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-09-29T20:01:19Z",false,"COMMENTED"
"Geometror","MEMBER","Works as expected and code looks fine too. Nice work!","2024-09-29T20:03:17Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-11T12:12:13Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-10T17:50:58Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-10T17:16:09Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-11T16:21:40Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

If the `project_settings_changed` signal had an array of modified setting names, we could be more selective on this, but it'll do for now. This is effectively an editor-only change anyway, so runtime performance is unaffected.","2024-06-11T16:22:57Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-10T17:31:05Z",false,"APPROVED"
"Faless","COLLABORATOR","","2024-06-10T17:04:29Z",false,"APPROVED"
"AThousandShips","MEMBER","Looks good and improves readability quite substantially","2024-06-10T16:06:20Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-10T16:09:35Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-10T16:09:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-10T16:10:10Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-07-05T11:39:35Z",false,"APPROVED"
"fire","MEMBER","Usability - yes","2024-07-05T13:03:45Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-10T18:10:17Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-10T18:12:53Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-10T18:14:47Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-10T18:15:29Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-10T18:23:29Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-10T18:57:33Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-10T19:59:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-10T20:38:55Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-11T14:27:20Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally on Linux, it works as expected. The rationale makes sense to me.

One thing I find strange though is that if I right-click empty space in the FileSystem dock (e.g. below `res://` when it's collapsed), I still see ""Open in File Manager"" even though this PR doesn't add it anywhere:

![image](https://github.com/godotengine/godot/assets/180032/4d45bf2d-8c92-4cce-9252-e0ef6fa5dd1d)","2024-06-14T20:33:37Z",false,"COMMENTED"
"skarnl","NONE","","2024-10-09T07:12:36Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-11T15:04:22Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-06-12T17:26:43Z",false,"COMMENTED"
"ogapo","CONTRIBUTOR","","2024-06-12T20:30:57Z",false,"COMMENTED"
"ogapo","CONTRIBUTOR","","2024-06-12T20:42:49Z",false,"COMMENTED"
"RandomShaper","MEMBER","LGTM. If there's some quirk with this once in the wild, it can be patched later. It'd be harmless anyway.","2024-06-19T04:28:24Z",false,"APPROVED"
"AThousandShips","MEMBER","Haven't tested but the code looks right ","2024-09-18T13:38:48Z",false,"APPROVED"
"kus04e4ek","CONTRIBUTOR","","2024-06-10T10:25:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-10T14:49:05Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-06-10T15:00:17Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-06-10T15:01:39Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-06-10T15:19:27Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-10T15:22:08Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-06-10T15:34:09Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-06-11T09:23:32Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-06-13T06:53:51Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-06-13T09:14:49Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-06-14T10:02:00Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-11T09:18:47Z",false,"APPROVED"
"akien-mga","MEMBER","Tested, works as intended (for Godot apps, didn't test the editor).","2024-06-13T15:14:10Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally with https://github.com/Calinou/godot-endoom and https://github.com/godotengine/godot-demo-projects/tree/master/gui/rich_text_bbcode, it works as expected. Performance is the same as before.

Code looks good to me.","2024-06-16T22:16:40Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-19T17:36:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-19T17:37:48Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-19T18:28:45Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-20T09:41:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-06T08:41:32Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-10T08:20:35Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-06-10T17:56:02Z",false,"COMMENTED"
"libklein","CONTRIBUTOR","","2024-06-10T21:43:04Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-06-11T10:46:38Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-06-12T01:29:34Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-06-12T16:15:41Z",false,"COMMENTED"
"libklein","CONTRIBUTOR","","2024-06-12T22:28:56Z",false,"COMMENTED"
"kleonc","MEMBER","Overall LGTM, just some code style nitpicks.

Also please [squash your commits](https://docs.godotengine.org/en/latest/contributing/workflow/pr_workflow.html#the-interactive-rebase), a single commit per PR is preferred.","2024-06-13T14:34:43Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-06-14T07:30:36Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-10T08:17:31Z",false,"COMMENTED"
"missing-semi-colon","NONE","","2024-06-10T22:37:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-11T08:19:18Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-06-12T19:46:01Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-06-09T15:17:16Z",false,"APPROVED"
"rburing","MEMBER","","2024-06-16T19:10:50Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-06-16T19:21:47Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected on the Truck Town demo running at 15 Hz physics (and 120 FPS rendering). The logic makes sense to me.

I can't really spot a visual difference before and after this PR though.","2024-06-17T16:01:54Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-07-01T08:30:05Z",false,"COMMENTED"
"AThousandShips","MEMBER","This looks good to me, IMO the code is more readable, and while a compiler *should* optimize both versions the same this should be easier to optimise well","2024-06-10T08:16:30Z",false,"APPROVED"
"akien-mga","MEMBER","Seems ok as a stopgap solution.","2024-06-17T11:36:00Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-11T14:48:40Z",false,"APPROVED"
"groud","MEMBER","","2024-06-10T12:50:51Z",false,"COMMENTED"
"groud","MEMBER","","2024-06-11T15:02:42Z",false,"APPROVED"
"groud","MEMBER","","2024-06-17T15:12:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-09T08:29:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-09T08:31:18Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-09T09:24:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-09T09:27:15Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-09T09:38:38Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","Technically I think this is an ok API to expose, since it is very useful. I was worried about calculating the bone name list during runtime when it is not needed, so I would prefer if it is updated only when used.","2024-06-09T21:50:52Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-06-10T01:30:41Z",false,"APPROVED"
"AThousandShips","MEMBER","Looks good otherwise ","2024-06-09T08:27:36Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","This isn't an area of the engine I'm very familiar with, but exposing this makes sense to me.","2024-09-10T21:02:54Z",false,"APPROVED"
"fire","MEMBER","","2024-06-09T17:32:29Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-10T11:28:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-19T09:44:29Z",false,"COMMENTED"
"capnm","CONTRIBUTOR","","2024-06-19T11:12:09Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-19T11:35:17Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-19T13:47:42Z",false,"COMMENTED"
"capnm","CONTRIBUTOR","","2024-06-19T18:51:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-10T15:16:36Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-10T15:18:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-10T17:24:48Z",false,"APPROVED"
"AThousandShips","MEMBER","This is not a valid chance, it requires the above `StatementMacros`, and it's unrelated to this repo, what are you trying to achieve?","2024-06-08T13:47:33Z",false,"CHANGES_REQUESTED"
"KoBeWi","MEMBER","","2024-06-11T13:36:25Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, this seems to resolve the issue partially with particle interpolation. I still notice the particles teleporting on spawn in the Platformer 3D demo if I re-enable physics interpolation on the bullet scene's particles:

https://github.com/godotengine/godot/assets/180032/9b33d5f8-090a-4250-91e9-f2a499eb35a3

The particle scale wobbling is fixed now still.

**Testing project:** [platformer.zip](https://github.com/user-attachments/files/15749695/platformer.zip)","2024-06-08T21:24:26Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","Seems ok technically.

> Get parent [Skeleton3D] node if found.

Based on this documentation, I do not understand why this method is different from `get_parent() as Skeleton3D` - I don't like having two methods that do the same thing.

Is if we eventually allow descendants of Skeleton3D to be modifiers then this could be useful separate from get_parent","2024-06-09T21:44:52Z",false,"APPROVED"
"raulsntos","MEMBER","Thanks for contributing to the .NET module. In general, the change makes sense to me but I'd like to confirm with the Editor team that they are OK with this.

I have also left some comments about the .NET changes.","2024-06-08T03:36:12Z",false,"CHANGES_REQUESTED"
"Hilderin","CONTRIBUTOR","","2024-06-08T03:40:05Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-06-08T04:11:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-08T09:20:02Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-08T15:05:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-08T15:06:55Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-08T15:12:28Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-06-08T17:16:55Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-08T22:26:46Z",false,"COMMENTED"
"raulsntos","MEMBER","Works as expected and the changes to the mono module look good to me.","2024-06-09T16:38:46Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-09T16:53:51Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-09T17:41:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","Editor changes look ok.","2024-06-10T12:15:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-08T08:27:52Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-06-14T10:03:06Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-08-02T14:20:29Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-23T00:23:04Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-08-23T05:56:49Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-23T15:51:22Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-08-26T09:15:10Z",false,"COMMENTED"
"RandomShaper","MEMBER","Reiterating a better solution may be worked on in the future, this is fine to me as it's clean enough and fixes a pretty unfortunate issue.","2024-09-09T21:30:53Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-10T12:36:08Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-09-11T23:04:25Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-08T10:06:36Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-11T15:05:51Z",false,"APPROVED"
"Geometror","MEMBER","","2024-07-10T14:11:59Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` 71699e08c9df78b7203fa4ef9cede28e995d6ace), it works as expected.

![image](https://github.com/godotengine/godot/assets/180032/12c2138e-de56-49a9-b8aa-6aab9b270c24)
","2024-06-14T15:35:02Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-24T09:01:20Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM","2024-06-07T13:58:18Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-13T15:18:13Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/5833f597865c773fae3ee09fc4e31d4a243f812d), it works as expected. I've tested the script editor and didn't notice any regressions to common behavior (code folding, autocompletion, multiple carets).

## Benchmark

On average, this PR is **2.16√ó faster** than `master` with an optimized editor build (`optimize=speed lto=full`) on the MRP linked in the PR.

However, I get a reproducible slowdown in terms of editor FPS when opening the [Platformer 2D](https://github.com/godotengine/godot-demo-projects/tree/master/2d/platformer)'s `player.gd` script in the editor with the following editor settings:

- Script is scrolled to its first line, with the caret on the first line and first character (no text is selected).
- Output panel is cleared and collapsed.
- Window is maximized on a 4K display at 100% scaling.
- Editor started with the `--print-fps` command line argument.
- V-Sync Mode: **Disabled**.
- **Update Continuously** checked.

Before this PR, I get 861 FPS (1.16 mspf) in a maximized editor window on average, while after this PR, I get 758 FPS (1.31 mspf) on average.

I've made sure I'm CPU-bottlenecked in this situation (GPU utilization does not exceed 40% in this scenario). This issue does not occur at lower resolutions (where less of the script is visible), such as a 1920x1080 window of the editor. In this case, I'm even more CPU-bottlenecked but this PR wins out over `master`.

Either way, I figure I'd point this out as this may point out at some scalability issues in the new code (e.g. methods that have `O(N¬≤)` scaling has replaced methods that were previously `O(N)`).

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 39)
</details>

### Before

```
10.0878296476422ms avg draw time (99 samples)
10.0065517907191ms avg draw time (198 samples)
9.94229878640737ms avg draw time (297 samples)
9.96660463737719ms avg draw time (396 samples)
9.95996937607274ms avg draw time (495 samples)
9.95242515396992ms avg draw time (594 samples)
9.94330463987408ms avg draw time (693 samples)
9.93462313305248ms avg draw time (792 samples)
9.93317573025037ms avg draw time (891 samples)
9.9287399137863ms avg draw time (990 samples)
9.92602815969588ms avg draw time (1089 samples)
```

### After

```
4.75202184734922ms avg draw time (99 samples)
4.6268870132138ms avg draw time (198 samples)
4.60077375675291ms avg draw time (297 samples)
4.57970060483374ms avg draw time (396 samples)
4.56591904765428ms avg draw time (495 samples)
4.56037465169374ms avg draw time (594 samples)
4.5561594364447ms avg draw time (693 samples)
4.55680308919964ms avg draw time (792 samples)
4.55250055032681ms avg draw time (891 samples)
4.55153975823913ms avg draw time (990 samples)
4.55042635004273ms avg draw time (1089 samples)
```","2024-06-10T10:13:06Z",false,"APPROVED"
"kitbdev","CONTRIBUTOR","- fixes https://github.com/godotengine/godot/issues/93036 (after its fixed)

It looks like `queue_redraw` has an issue that lets it be called multiple times in a frame, and it is not specifically related to TextEdit or CodeEdit. It should be fixed elsewhere and `queue_redraw` should continue to be used in these files instead of this `set_process_internal` workaround.
When trying your example (https://github.com/godotengine/godot/pull/92865#issuecomment-2155763912) I could only rarely get it to draw 2-3 times per frame. 


Also, when there are many lines in a script (over 1000) the line numbers jitter left and right when adding/removing a line.

Here I'm hitting backspace and enter, though the jittering doesn't look exactly the same in gif:

![godot te line number jitter](https://github.com/godotengine/godot/assets/10054226/55a13c2f-3bf4-4a3a-8b64-09a44639b608)","2024-06-11T17:37:50Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-06-14T08:07:33Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-04T08:30:01Z",false,"APPROVED"
"rune-scape","CONTRIBUTOR","","2024-07-05T05:01:04Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","The line number jitter when there are too many lines issues is fixed.

There is an issue when deleting the longest line, the width doesn't go to the second longest line:

https://github.com/user-attachments/assets/fcacb6f7-8b64-4671-a1eb-f34e3cfffb9a

Also there is an issue with the height when there is lots of wrapped text, the scrollbar doesn't show or is too small:

![image](https://github.com/user-attachments/assets/69a6c98c-6406-4582-9409-f24ad21e442a)
","2024-08-01T19:49:42Z",false,"CHANGES_REQUESTED"
"rune-scape","CONTRIBUTOR","","2024-08-11T19:13:43Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","Previous issues fixed.

For https://github.com/godotengine/godot/issues/93036 it is fixed, See my comment here https://github.com/godotengine/godot/issues/93036#issuecomment-2263748558.
Hovering below the last line in the breakpoint gutter will now show the hovered breakpoint on the last line. This now matches the click behavior, since clicking there will add a breakpoint to the last line. If it isn't wanted it can be fixed in another PR.

Just a couple of minor things:","2024-08-27T22:32:33Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-08-28T20:43:14Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-08-28T20:45:50Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-08-28T20:53:00Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-08-28T23:51:27Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-09-05T03:50:58Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","Haven't tested the performance, but the functionality looks good to me.","2024-09-05T15:32:57Z",false,"APPROVED"
"rune-scape","CONTRIBUTOR","","2024-09-05T20:47:50Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-08T11:42:49Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-08T11:43:12Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-08T13:09:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","Can't confirm the factual correctness but the language is good and clear!","2024-06-07T12:59:42Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-06-07T15:46:06Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-12T08:59:20Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-12T09:51:49Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Thanks for the fix!","2024-07-28T15:09:47Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-06-23T22:25:37Z",false,"APPROVED"
"adamscott","MEMBER","","2024-06-07T15:37:47Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-10T15:18:06Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-06-07T05:08:59Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-07T15:28:11Z",false,"COMMENTED"
"patwork","CONTRIBUTOR","","2024-06-08T18:31:50Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-08T20:46:27Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks good! ","2024-06-14T22:06:28Z",false,"APPROVED"
"Scony","CONTRIBUTOR","Haven't tested but the change looks correct. I've checked with blame and it looks like the problem was there form the very beginning.

If you have some more time then I'd recommend adding a unit test covering that code path. There are unit tests for map already so it should be a matter of copy-pasting and modifying a bit.","2024-06-07T07:19:20Z",false,"APPROVED"
"smix8","CONTRIBUTOR","","2024-06-07T14:21:34Z",false,"APPROVED"
"QbieShay","CONTRIBUTOR","LGTM. IIRC you can check port type with a string too, I don't know what's better in that case. @Chaosus ?","2024-06-06T19:44:14Z",false,"APPROVED"
"Chaosus","MEMBER","","2024-06-11T14:42:24Z",false,"APPROVED"
"TokageItLab","MEMBER","This is an incorrect fix.

I found some problems in the AnimationMixer, but the main cause for this issue is that the AnimationPlayerEditor is unintentionally seeking to position 0 immediately after playback; Somehow pressing the play button causes the seek to occur three times, but it should only be once.","2024-06-07T01:38:48Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-06-07T13:23:02Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-08T21:19:13Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-18T13:25:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-18T13:33:13Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-08-19T11:51:43Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-08-19T11:57:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-19T11:59:29Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-08-19T12:13:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","Works correctly.

Could use a look from @TokageItLab ","2024-08-19T12:16:35Z",false,"APPROVED"
"TokageItLab","MEMBER","Seems to be working well.","2024-08-30T04:08:29Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-31T21:47:29Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-06T13:04:36Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-06-06T13:07:35Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-06T13:08:58Z",false,"COMMENTED"
"fire","MEMBER","","2024-06-06T14:52:50Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-06-06T14:57:06Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/292e50e17e3f6e2509d3178a00204f964a907460), it works as expected. Great work :slightly_smiling_face: 

## Benchmark

Using an optimized editor build (`optimize=speed lto=full`) for all tests. Project is kept at its default window size and the camera isn't moved after startup. The editor is **not** running in the background.

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 39)
</details>

Using [Animation_test.zip](https://github.com/godotengine/godot/files/15501000/Animation_test.zip):

`master` | This PR | https://github.com/godotengine/godot/pull/92554 | This PR + https://github.com/godotengine/godot/pull/92554 [^1]
-|-|-|-
90 FPS (11.11 mspf) | 116 FPS (8.62 mspf) | 113 FPS (8.84 mspf) | 123 FPS (8.13 mspf)

[^1]: This required trivial code changes to get it to compile, since there's a small merge conflict when rebasing https://github.com/godotengine/godot/pull/92554 on top of this PR. Visual results still looked correct after doing so.","2024-06-11T23:04:13Z",false,"APPROVED"
"TokageItLab","MEMBER","I recall our earlier discussion that we should use GDREGISTER_VIRTUAL_CLASS for some Animation related classes.","2024-06-12T00:09:06Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-12T00:09:44Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-12T00:22:05Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-06-15T10:04:17Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-06-15T10:15:22Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-06-15T10:22:55Z",false,"COMMENTED"
"TokageItLab","MEMBER","Looking at the code, there should be no change in the essential behavior. I guess there are places where we can be optimized more, but I think this PR is fine for now.","2024-08-31T03:59:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-06T13:45:29Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-06-06T13:52:21Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM but needs some editor people reviews as well for specifics","2024-06-06T13:54:44Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-10T14:03:48Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-10T14:23:49Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-07T10:48:30Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-07T11:33:50Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected. The default scroll speed seems good to me (tested in the editor help on the Array class documentation).

A few things I noticed:

- RichTextLabels that don't have a visible scroll bar (due to not having enough text or having **Scroll Active** disabled) still display the scroll icon when clicking. This should be prevented.

- It's not possible for certain RichTextLabels to opt out of this feature. They might use the middle mouse button for other things, so I suggest allowing `mb_click_scrolling_rate` to be `0.0` and disabling the feature in this case, if you don't want to add a second boolean property.

- The icon in the default project theme is lacking contrast (the arrows are hardly visible):

![image](https://github.com/godotengine/godot/assets/180032/ca58f1d6-b532-4d7e-8d99-61a88f3f7f4a)

The editor's icon could also have more contrast, but it's not as extreme there. This is how it looks in Firefox for reference, where I think it looks perfect:

![image](https://github.com/godotengine/godot/assets/180032/92f55cf1-ea52-4426-827f-4a000aae2784)","2024-06-07T22:07:48Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Looks good to me!","2024-06-10T14:03:57Z",false,"APPROVED"
"Bromeon","CONTRIBUTOR","","2024-06-10T14:15:56Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-06-10T14:43:59Z",false,"COMMENTED"
"Bromeon","CONTRIBUTOR","","2024-06-10T15:38:13Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-06-11T02:22:07Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-11T08:42:32Z",false,"COMMENTED"
"Bromeon","CONTRIBUTOR","","2024-06-11T16:20:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-06T06:38:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-06T06:44:24Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-20T19:40:25Z",false,"COMMENTED"
"Alex2782","CONTRIBUTOR","done","2024-07-22T13:19:53Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks good! Thank you. 

Let's go with this workaround for 4.3 and then hopefully do something else once we have a different workaround","2024-07-22T15:08:15Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-10T11:58:44Z",false,"APPROVED"
"akien-mga","MEMBER","Confirmed that this also fixes #92964.","2024-06-10T14:39:34Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-13T15:18:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-05T22:30:00Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me.

This is pretty important for unit testing so I'll merge despite the feature freeze for 4.3, and consider it for a 4.2.3 cherry-pick.","2024-07-01T15:34:55Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-01T15:35:53Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","","2024-06-05T16:34:46Z",false,"APPROVED"
"AThousandShips","MEMBER","Code looks good and I think this is the best option for this at least for the time being, with the option of breaking compatibility down the line","2024-06-05T15:43:44Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks! Looks good to me :-)","2024-06-05T15:30:01Z",false,"APPROVED"
"paulloz","MEMBER","","2024-06-06T18:24:46Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-06-07T02:44:59Z",false,"COMMENTED"
"paulloz","MEMBER","LGTM, thanks!","2024-06-07T07:43:11Z",false,"APPROVED"
"fire","MEMBER","I don't see any obvious problems so it looks good to me.","2024-06-05T14:39:47Z",false,"APPROVED"
"Calinou","MEMBER","Code looks good to me. This method isn't exposed to scripting (but I don't see much need for it).","2024-06-05T14:49:25Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

**Testing project:** [test_2d_batching_1x1_sprite.zip](https://github.com/user-attachments/files/15595697/test_2d_batching_1x1_sprite.zip)
This project renders 10,000 Sprite2D nodes that are 1x1 each at a fixed position. This creates a stress point for the CPU while not using the GPU much (as each sprite is tiny).

## Benchmark

Using a Linux optimized editor build (`optimize=speed lto=full`).

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 40)
</details>

Results are in 3840x2160 fullscreen, but results in 1152x648 are pretty much identical since this is a CPU-bottlenecked scenario.

Before | After *(this PR, old implementation)* | After *(this PR, new implementation)* | Compatibility[^2]
-|-|-|-
935 FPS (1.07 mspf) | 2145 FPS (0.47 mspf) | 1632 FPS (0.62 mspf) | 1563 FPS (0.64 mspf)

Software rendering with llvmpipe (1152x648):

Before | After *(this PR, old implementation)* | After *(this PR, new implementation)* | Compatibility[^2]
-|-|-|-
27 FPS (37.04 mspf) | 183 FPS (5.46 mspf) | 185 FPS (5.41 mspf) | N/A

[^1]: Results between Forward+ and Mobile are largely identical, so they are consolidated here.
[^2]: Not affected by this PR, but this is present for reference.","2024-06-05T19:47:13Z",false,"COMMENTED"
"alula","CONTRIBUTOR","","2024-06-05T23:29:21Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-06-05T23:54:32Z",false,"COMMENTED"
"alula","CONTRIBUTOR","","2024-06-06T05:47:48Z",false,"COMMENTED"
"alula","CONTRIBUTOR","","2024-06-06T05:51:24Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-06-06T20:44:12Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-12T21:55:16Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","I've added some inline comments","2024-07-29T23:27:01Z",false,"COMMENTED"
"clayjohn","MEMBER","The new batching implementation looks perfect. I tested on a few example projects locally and did not find any visual regressions and performance was improved as expected (as well as the monitor reporting a massive decrease in draw calls).

This should be ready to merge once you remove the fallback to the old method. 

I'd love to include this in dev3!","2024-09-10T19:38:31Z",false,"APPROVED"
"clayjohn","MEMBER","Tested after the rebase and it looks and runs great!","2024-09-10T23:20:05Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-11T09:36:26Z",false,"COMMENTED"
"stuartcarnie","CONTRIBUTOR","","2024-09-11T19:26:23Z",false,"COMMENTED"
"dalexeev","MEMBER","I'm not sure this is really necessary. Linked discussion is quite short. Should it be called `@export_input_action` instead? Perhaps this should be turned into a full proposal first?","2024-06-05T18:18:24Z",false,"COMMENTED"
"Dynamic-Pistol","NONE","","2024-06-05T18:45:06Z",false,"COMMENTED"
"Dynamic-Pistol","NONE","","2024-06-05T18:55:43Z",false,"COMMENTED"
"Dynamic-Pistol","NONE","","2024-06-05T19:37:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-06T08:29:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-06T08:30:14Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-07T19:40:50Z",false,"CHANGES_REQUESTED"
"bruvzg","MEMBER","","2024-06-08T19:52:49Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-08T19:57:54Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-08T21:16:13Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-13T12:10:49Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it mostly works as expected. This is a good start :slightly_smiling_face: 

Some feedback:

- Built-in actions should be listed *last* when `allow_builtin` is enabled. Otherwise, you have to scroll down the list a lot to find non-built-in actions. I think most of the time, you'll still want to select your own actions as opposed to built-in actions when built-in actions are allowed.
- Should `allow_builtin` be renamed to `show_builtin`? If `allow_builtin` is not used, you can still manually enter the name of a built-in action and the inspector won't prevent you from doing so. I think that behavior is fine, but we should be careful about semantics here.
- When you add/remove/rename an action, the inspector isn't updated automatically. This means it can display outdated state, with actions that don't exist anymore (and newly created actions won't show up). It'll only update when you select another node, or collapse then expand the subresource that contains the input action.","2024-06-17T21:09:53Z",false,"COMMENTED"
"kleonc","MEMBER","Was just looking into this too. :smile:

Missing docs.

Also while at it:
- there's missing guard in `TileMapLayer::set_use_kinematic_bodies`,
- in `TileMapLayer::set_rendering_quadrant_size` dirty flag should be set after the error and assignment.","2024-06-05T10:47:39Z",false,"COMMENTED"
"kleonc","MEMBER","The code LGTM, haven't tested though. :upside_down_face:

+Still you could address:
> Also while at it:
> * there's missing guard in `TileMapLayer::set_use_kinematic_bodies`,
>  * in `TileMapLayer::set_rendering_quadrant_size` dirty flag should be set after the error and assignment.","2024-06-05T15:51:32Z",false,"APPROVED"
"kleonc","MEMBER","","2024-06-05T16:07:12Z",false,"COMMENTED"
"kleonc","MEMBER","Rechecked the changes, noticed only another little typo in the docs. Besides looks mergeable to me. :+1:

Also briefly tested this, AFAICT it works as intended.","2024-06-07T11:36:48Z",false,"APPROVED"
"rburing","MEMBER","The approach looks good and fixes issues.","2024-06-18T20:24:01Z",false,"APPROVED"
"nglmercer","NONE","looks fine","2024-06-07T00:51:12Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-05T16:34:37Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-05T16:35:10Z",false,"APPROVED"
"fire","MEMBER","","2024-06-04T20:57:16Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-06-04T21:30:52Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-06-04T21:39:12Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-04T21:41:11Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-04T21:41:23Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-06-04T21:43:27Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-04T22:14:00Z",false,"APPROVED"
"adamscott","MEMBER","","2024-06-04T17:59:02Z",false,"COMMENTED"
"MewPurPur","CONTRIBUTOR","Noteworthy is that viewBoxes are removed in favor of their equivalent width+height (that's almost all of the file size reduction). The more I learn about SVGs, the more it feels like the fact we even had both must have been for some sort of legacy reason, not because it makes sense.","2024-06-04T21:18:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-23T13:31:21Z",false,"APPROVED"
"lawnjelly","MEMBER","It looks superficially okay to me as I'm pinged.

Caveat, I'm not super familiar with 4.x renderer so not familiar with the ""grand design"".","2024-06-11T12:55:12Z",false,"APPROVED"
"akien-mga","MEMBER","This also looks fine to me, and I know Clay has a lot on his plate to review, so I'll go ahead and merge so we have this tested in beta 2.","2024-06-12T08:58:39Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-06T12:25:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-06T12:33:08Z",false,"COMMENTED"
"Rindbee","CONTRIBUTOR","","2024-06-06T12:40:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-06T13:10:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-06T13:11:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-06T13:11:40Z",false,"APPROVED"
"Rindbee","CONTRIBUTOR","","2024-06-06T14:40:53Z",false,"COMMENTED"
"fire","MEMBER","Since the night shader does exist, I can see how this removal makes sense.","2024-06-05T10:43:48Z",false,"APPROVED"
"Calinou","MEMBER","","2024-06-05T15:32:44Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM, had a feeling this was the cause but didn't end up testing it out myself as a solution ","2024-06-04T10:49:34Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-04T13:27:01Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-04T13:21:46Z",false,"APPROVED"
"akien-mga","MEMBER","I think this is an important usability improvements to work around the shortcomings of our buildsystem, so I'll include it in 4.3 despite the feature freeze.","2024-06-21T11:42:19Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-04T06:05:56Z",false,"APPROVED"
"bruvzg","MEMBER","I can't reproduce the issue, but this change is definitely correct. `SetTimer` can reuse IDs and since we can have multiple times per window, not unsetting it might cause interference.","2024-06-05T17:16:52Z",false,"APPROVED"
"Calinou","MEMBER","","2024-06-03T22:33:44Z",false,"COMMENTED"
"Alex2782","CONTRIBUTOR","","2024-06-03T23:06:29Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-11T14:42:55Z",false,"COMMENTED"
"Alex2782","CONTRIBUTOR","","2024-06-11T16:46:12Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-11T17:18:06Z",false,"COMMENTED"
"Alex2782","CONTRIBUTOR","","2024-06-11T17:32:38Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-11T18:20:11Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks good to me. We still don't know exactly what driver version the flip_xy bug was fixed in, but the code looks great. We can adjust the exact driver version in the check once we have confirmation from Qualcomm","2024-06-13T16:47:21Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-03T23:16:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-04T07:09:49Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Docs are fine, no beating around the bush. This has been good for a while.","2024-10-02T18:32:18Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-03T18:58:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-01T14:30:50Z",false,"APPROVED"
"Faless","COLLABORATOR","LGTM!","2024-08-06T15:49:00Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-06-03T18:15:12Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great! Fewer memory allocations is always welcome","2024-06-12T23:26:28Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-06-13T07:42:04Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-13T09:08:15Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-06-13T10:50:00Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-06-13T10:52:12Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-03T23:18:35Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

**Testing project:** [test_font_scale_change.zip](https://github.com/user-attachments/files/15537314/test_font_scale_change.zip)

### Before

> [!WARNING]
> **Epilepsy warning:** Flashing text is visible due to the bug this PR fixes.

https://github.com/godotengine/godot/assets/180032/319f43b0-0208-4bc8-84e6-bc4fc63a1b59

### After *(this PR)*

https://github.com/godotengine/godot/assets/180032/4d592e66-3bc0-4f2c-8046-fc8df0b3ccec

","2024-06-03T17:07:59Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-11T11:45:03Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-06-12T23:24:53Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-03T13:28:07Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-06-04T08:14:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-03T11:28:05Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Only peeve:","2024-06-23T18:41:01Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-27T09:24:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-27T09:40:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM","2024-06-03T09:33:33Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-03T08:33:07Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Looks good to me! I only have the one note about adding `@deprecated` to the old functions in `gdextension_interface.h`","2024-06-11T14:15:45Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-11T14:20:36Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-06-12T16:31:05Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","Not sure if you're looking for review, but I looked over everything except the implementation details of the algorithm and shader.","2024-06-03T05:55:30Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-03T09:11:53Z",false,"COMMENTED"
"fire","MEMBER","","2024-06-03T10:59:30Z",false,"COMMENTED"
"fire","MEMBER","","2024-06-03T11:33:25Z",false,"COMMENTED"
"fire","MEMBER","","2024-06-03T11:34:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-03T11:39:48Z",false,"COMMENTED"
"fire","MEMBER","","2024-06-03T11:41:01Z",false,"COMMENTED"
"fire","MEMBER","","2024-06-03T16:20:05Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, this is very encouraging :slightly_smiling_face: 

I noticed an issue (on top of what has been said above): it looks broken when FSR2 is used at any 3D scale factor at or below `1.0` (since values above `1.0` disable FSR2).

![Broken motion blur with FSR2](https://github.com/godotengine/godot/assets/180032/ed2b1750-943c-46ac-8ac0-be741d8b3dcb)

Other than that, quality is quite good in best-case scenarios (example with 16 samples):

![Motion blur](https://github.com/godotengine/godot/assets/180032/4a7bc88a-568f-4dfa-9bc8-e9f41883334d)

60 FPS video made with Movie Maker mode on https://github.com/Calinou/godot-reflection (`--write-movie output.avi -- --benchmark` CLI arguments):

https://github.com/godotengine/godot/assets/180032/5e0284a3-efd8-4429-ae80-84044ce6161f

Motion blur has a rendering issue in the first frames of the project (after startup). To resolve this, motion blur intensity should probably be set to 0 initially and ramp up over the number of frames defined by the sample count.

The motion blur falls apart when there are transparent surfaces close to the camera (such as particles or glass), which is an unfortunate consequence of motion vectors not being written by transparent surfaces. I don't know a good solution to this, but we should see if it's possible to skip motion blur entirely on those pixels. This should only be done in certain scenarios though, not on *all* transparent materials (e.g. you wouldn't want a car's windshield to ignore motion blur when viewed from outside). I wonder if https://github.com/godotengine/godot/pull/77523 would help here.

The motion blur intensity is framerate-dependent in this PR, which I think is a reasonable default for the reasons outlined in the proposal's comments. The default intensity seems a bit low for 60 FPS ‚Äì¬†I bumped it to `1.0` personally (e.g. in the above video), but I would make it `0.5` at the very least. I'm using a 120 Hz OLED display, so your perception of motion blur may differ from mine (particularly if you're using a VA display, due to their slow response times).

Motion blur doesn't appear to be resolution-dependent, which is good.

Also, I think this should be implemented as a core camera effect as opposed to a compositor effect. The effect is hardcoded either way, so there isn't much benefit to having it as a built-in compositor effect. If we intend to migrate core effects to compositor effects, we should do that in separate PRs and do this for all effects, not just one.","2024-06-03T23:00:51Z",false,"CHANGES_REQUESTED"
"akien-mga","MEMBER","","2024-06-03T00:29:29Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-06-03T08:38:21Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-03T09:00:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-03T09:01:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-03T09:01:30Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-03T15:12:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-03T14:18:36Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-02T20:27:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-02T20:27:07Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-06-02T20:31:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-02T20:32:42Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-06-02T20:35:31Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","Very nice! I always like negative diffs :)","2024-06-02T21:58:34Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-04T21:13:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T21:15:27Z",false,"COMMENTED"
"KoBeWi","MEMBER","The reason why #88970 broke this is that I missed the purpose of the atlas rect. The code had a special case for AtlasTexture, where it extracted the base texture and region separately and then re-created a sub-region image ü§¶‚Äç‚ôÇÔ∏è","2024-06-04T21:30:55Z",false,"APPROVED"
"kleonc","MEMBER","","2024-06-04T23:46:06Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-06-04T23:49:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-02T20:02:35Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-02T20:15:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-02T20:17:23Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-10T15:20:11Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-10T20:35:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-10T20:36:28Z",false,"APPROVED"
"akien-mga","MEMBER","Works well on Linux too.","2024-06-03T09:45:59Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-06-02T18:14:52Z",false,"APPROVED"
"vnen","MEMBER","","2024-06-20T14:31:39Z",false,"APPROVED"
"Calinou","MEMBER","","2024-06-02T14:28:14Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-06-02T17:03:11Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-06-12T19:44:49Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-17T22:32:22Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-02T10:33:43Z",false,"COMMENTED"
"PartyLogan","NONE","","2024-06-02T11:00:33Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-02T11:50:32Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-02T08:38:42Z",false,"APPROVED"
"stephen-berry","CONTRIBUTOR","","2024-06-04T11:09:32Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-04T12:21:07Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-04T12:22:31Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T12:30:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T13:03:31Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-02T13:58:56Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-17T18:22:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-17T18:25:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-17T18:25:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-17T18:30:03Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-17T19:16:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-17T20:14:10Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-17T21:43:58Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-17T21:44:20Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-17T21:44:35Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-17T21:44:44Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-18T00:24:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-20T14:23:50Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-24T20:04:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-09T21:45:03Z",false,"COMMENTED"
"KoBeWi","MEMBER","Works, but could use some testing in a complex 3D project with import plugins and stuff.","2024-07-09T21:48:41Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-07-10T03:00:41Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-29T07:59:16Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-29T09:08:32Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-29T09:10:03Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-29T09:53:54Z",false,"COMMENTED"
"ryevdokimov","CONTRIBUTOR","I can confirm this resolves this issue: https://github.com/godotengine/godot/pull/93972#issuecomment-2322319983

@TokisanGames ","2024-08-30T21:05:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-02T15:14:02Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-02T20:34:52Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-09-02T21:05:35Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-03T08:45:57Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks great to me! And we really minimized the impact on the core, which is nice :)

Amazing work, this solves such a huge pain point! :tada: ","2024-09-03T08:46:36Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-02T07:30:16Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-19T14:51:02Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-19T22:59:47Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-20T14:07:10Z",false,"APPROVED"
"kitbdev","CONTRIBUTOR","","2024-06-02T17:12:50Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-06T06:37:15Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM, all the `get_child` cases match cleanly and code looks good","2024-06-06T09:37:57Z",false,"APPROVED"
"akien-mga","MEMBER","Code seems fine to me, works ok in limited testing on Fedora 40 KDE Wayland, and it doesn't seem to break support for building with ANGLE.","2024-06-13T12:38:18Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-02T05:47:07Z",false,"APPROVED"
"AThousandShips","MEMBER","Code looks good and ran some basic tests and it works as expected, and unit tests look good to me and should ensure compliance üéâ ","2024-06-04T09:21:32Z",false,"APPROVED"
"zodywoolsey","NONE","","2024-06-26T20:36:10Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-21T08:49:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-21T08:50:01Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-26T21:08:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-27T09:52:42Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-27T14:19:37Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-27T14:20:42Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-27T23:12:31Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-29T07:55:47Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-29T17:49:57Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-29T17:50:25Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-29T17:50:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-29T17:52:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-30T07:52:30Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-01T16:18:36Z",false,"COMMENTED"
"pc9098","NONE","","2024-06-01T16:19:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-08T20:43:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-08T20:52:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-09T14:26:20Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-10T10:02:50Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-10T22:18:30Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-01T15:09:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-01T15:10:25Z",false,"COMMENTED"
"JustSascha","NONE","","2024-06-01T15:22:01Z",false,"COMMENTED"
"JustSascha","NONE","","2024-06-01T15:22:19Z",false,"COMMENTED"
"fire","MEMBER","Adding [SceneTree] will allow you to call more godot functionaility.","2024-06-01T16:54:15Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-06T17:48:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-06T17:48:40Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-06T17:48:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-06T17:49:03Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-06T17:49:10Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected. This looks a fair bit better to me, nice work :slightly_smiling_face: 

### Default

Before | After *(this PR)*
-|-
![Before](https://github.com/godotengine/godot/assets/180032/d29bd259-f671-4464-ac27-f4b9bff04dae) | ![After](https://github.com/godotengine/godot/assets/180032/fed11adc-e215-49d5-8cb3-f6a6a3f28b2e)

Before | After *(this PR)*
-|-
![Before](https://github.com/godotengine/godot/assets/180032/91931e9f-9178-41c3-961e-acc135cdab89) | ![After](https://github.com/godotengine/godot/assets/180032/9e465a3b-2f13-48e3-923d-4761cfb81bd1)

### Compact

No change. I think there should be more spacing around dialogs when in compact mode (texts can get dangerously close to the OS' rounded corners cutting them off), but this may need to be handled in its own PR.

### Spacious

Before | After *(this PR)*
-|-
![Before](https://github.com/godotengine/godot/assets/180032/a7421c2a-f996-4a52-a796-3be4d10532f6) | ![After](https://github.com/godotengine/godot/assets/180032/dc5844bf-e943-4e51-a676-fd8a412c672c) | 

Before | After *(this PR)*
-|-
![Before](https://github.com/godotengine/godot/assets/180032/edfc7616-4435-4051-8319-8e419498617e) | ![After](https://github.com/godotengine/godot/assets/180032/20d01f42-270b-405e-b2c5-38a9bd18601e)","2024-06-18T23:58:11Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-06T13:24:01Z",false,"APPROVED"
"TokageItLab","MEMBER","This is not correct fix and the wrong way to go about it.

The problem is that the AudioStreamPlayer properties are being ignored in the playback within AudioStreamPolyphonic, so AudioStreamPolyphonic needs to be fixed, not AnimationMixer.

Then, since AudioTrack is played back by AudioStreamPolyphonic, we need to add a feature to AudioTrackKey to allow it to set volume and pitch for each of them individually. And Instead of passing AudioStreamPlayer properties, we need to pass them individually from the key.

Simply put, AudioStreamPlayer properties should be treated as properties of the master track, and AudioTrackKeys should have properties for individual streams; It may be divided into two PRs as ""Fix AudioStreamPlayer doesn't affect pitch and volume property to AudioStreamPolyphonic (bugfix)"" and ""Add volume and pitch property to AudioTrack key (enhancement)"".","2024-06-01T12:32:22Z",false,"CHANGES_REQUESTED"
"akien-mga","MEMBER","","2024-06-18T22:05:37Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-18T22:05:23Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-18T22:04:30Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-24T07:12:30Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-24T08:48:36Z",false,"APPROVED"
"fire","MEMBER","","2024-06-17T13:55:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-01T13:36:09Z",false,"APPROVED"
"bruvzg","MEMBER","This was actually a deliberate change (see https://github.com/godotengine/godot/pull/92009 and https://github.com/godotengine/godot/issues/91022) to prevent twitching buttons. Is there a specific reason why you want this behavior back? In this case, https://github.com/godotengine/godot/pull/92009 should be reverted instead (probably only offset caching).

Or we should an extra toggle to the theme constants to allow both options, since both behaviors might be useful.","2024-06-01T07:51:26Z",false,"CHANGES_REQUESTED"
"bruvzg","MEMBER","A few other parts can be removed as well (do not do anything anymore):
```diff
diff --git a/scene/gui/button.cpp b/scene/gui/button.cpp
index 3bf9d79c7f..68c7012fe4 100644
--- a/scene/gui/button.cpp
+++ b/scene/gui/button.cpp
@@ -56,70 +56,30 @@ void Button::_update_theme_item_cache() {
 	const bool rtl = is_layout_rtl();
 	if (rtl && has_theme_stylebox(SNAME(""normal_mirrored""))) {
 		theme_cache.max_style_size = theme_cache.normal_mirrored->get_minimum_size();
-		theme_cache.style_margin_left = theme_cache.normal_mirrored->get_margin(SIDE_LEFT);
-		theme_cache.style_margin_right = theme_cache.normal_mirrored->get_margin(SIDE_RIGHT);
-		theme_cache.style_margin_top = theme_cache.normal_mirrored->get_margin(SIDE_TOP);
-		theme_cache.style_margin_bottom = theme_cache.normal_mirrored->get_margin(SIDE_BOTTOM);
 	} else {
 		theme_cache.max_style_size = theme_cache.normal->get_minimum_size();
-		theme_cache.style_margin_left = theme_cache.normal->get_margin(SIDE_LEFT);
-		theme_cache.style_margin_right = theme_cache.normal->get_margin(SIDE_RIGHT);
-		theme_cache.style_margin_top = theme_cache.normal->get_margin(SIDE_TOP);
-		theme_cache.style_margin_bottom = theme_cache.normal->get_margin(SIDE_BOTTOM);
 	}
 	if (has_theme_stylebox(""hover_pressed"")) {
 		if (rtl && has_theme_stylebox(SNAME(""hover_pressed_mirrored""))) {
 			theme_cache.max_style_size = theme_cache.max_style_size.max(theme_cache.hover_pressed_mirrored->get_minimum_size());
-			theme_cache.style_margin_left = MAX(theme_cache.style_margin_left, theme_cache.hover_pressed_mirrored->get_margin(SIDE_LEFT));
-			theme_cache.style_margin_right = MAX(theme_cache.style_margin_right, theme_cache.hover_pressed_mirrored->get_margin(SIDE_RIGHT));
-			theme_cache.style_margin_top = MAX(theme_cache.style_margin_top, theme_cache.hover_pressed_mirrored->get_margin(SIDE_TOP));
-			theme_cache.style_margin_bottom = MAX(theme_cache.style_margin_bottom, theme_cache.hover_pressed_mirrored->get_margin(SIDE_BOTTOM));
 		} else {
 			theme_cache.max_style_size = theme_cache.max_style_size.max(theme_cache.hover_pressed->get_minimum_size());
-			theme_cache.style_margin_left = MAX(theme_cache.style_margin_left, theme_cache.hover_pressed->get_margin(SIDE_LEFT));
-			theme_cache.style_margin_right = MAX(theme_cache.style_margin_right, theme_cache.hover_pressed->get_margin(SIDE_RIGHT));
-			theme_cache.style_margin_top = MAX(theme_cache.style_margin_top, theme_cache.hover_pressed->get_margin(SIDE_TOP));
-			theme_cache.style_margin_bottom = MAX(theme_cache.style_margin_bottom, theme_cache.hover_pressed->get_margin(SIDE_BOTTOM));
 		}
 	}
 	if (rtl && has_theme_stylebox(SNAME(""pressed_mirrored""))) {
 		theme_cache.max_style_size = theme_cache.max_style_size.max(theme_cache.pressed_mirrored->get_minimum_size());
-		theme_cache.style_margin_left = MAX(theme_cache.style_margin_left, theme_cache.pressed_mirrored->get_margin(SIDE_LEFT));
-		theme_cache.style_margin_right = MAX(theme_cache.style_margin_right, theme_cache.pressed_mirrored->get_margin(SIDE_RIGHT));
-		theme_cache.style_margin_top = MAX(theme_cache.style_margin_top, theme_cache.pressed_mirrored->get_margin(SIDE_TOP));
-		theme_cache.style_margin_bottom = MAX(theme_cache.style_margin_bottom, theme_cache.pressed_mirrored->get_margin(SIDE_BOTTOM));
 	} else {
 		theme_cache.max_style_size = theme_cache.max_style_size.max(theme_cache.pressed->get_minimum_size());
-		theme_cache.style_margin_left = MAX(theme_cache.style_margin_left, theme_cache.pressed->get_margin(SIDE_LEFT));
-		theme_cache.style_margin_right = MAX(theme_cache.style_margin_right, theme_cache.pressed->get_margin(SIDE_RIGHT));
-		theme_cache.style_margin_top = MAX(theme_cache.style_margin_top, theme_cache.pressed->get_margin(SIDE_TOP));
-		theme_cache.style_margin_bottom = MAX(theme_cache.style_margin_bottom, theme_cache.pressed->get_margin(SIDE_BOTTOM));
 	}
 	if (rtl && has_theme_stylebox(SNAME(""hover_mirrored""))) {
 		theme_cache.max_style_size = theme_cache.max_style_size.max(theme_cache.hover_mirrored->get_minimum_size());
-		theme_cache.style_margin_left = MAX(theme_cache.style_margin_left, theme_cache.hover_mirrored->get_margin(SIDE_LEFT));
-		theme_cache.style_margin_right = MAX(theme_cache.style_margin_right, theme_cache.hover_mirrored->get_margin(SIDE_RIGHT));
-		theme_cache.style_margin_top = MAX(theme_cache.style_margin_top, theme_cache.hover_mirrored->get_margin(SIDE_TOP));
-		theme_cache.style_margin_bottom = MAX(theme_cache.style_margin_bottom, theme_cache.hover_mirrored->get_margin(SIDE_BOTTOM));
 	} else {
 		theme_cache.max_style_size = theme_cache.max_style_size.max(theme_cache.hover->get_minimum_size());
-		theme_cache.style_margin_left = MAX(theme_cache.style_margin_left, theme_cache.hover->get_margin(SIDE_LEFT));
-		theme_cache.style_margin_right = MAX(theme_cache.style_margin_right, theme_cache.hover->get_margin(SIDE_RIGHT));
-		theme_cache.style_margin_top = MAX(theme_cache.style_margin_top, theme_cache.hover->get_margin(SIDE_TOP));
-		theme_cache.style_margin_bottom = MAX(theme_cache.style_margin_bottom, theme_cache.hover->get_margin(SIDE_BOTTOM));
 	}
 	if (rtl && has_theme_stylebox(SNAME(""disabled_mirrored""))) {
 		theme_cache.max_style_size = theme_cache.max_style_size.max(theme_cache.disabled_mirrored->get_minimum_size());
-		theme_cache.style_margin_left = MAX(theme_cache.style_margin_left, theme_cache.disabled_mirrored->get_margin(SIDE_LEFT));
-		theme_cache.style_margin_right = MAX(theme_cache.style_margin_right, theme_cache.disabled_mirrored->get_margin(SIDE_RIGHT));
-		theme_cache.style_margin_top = MAX(theme_cache.style_margin_top, theme_cache.disabled_mirrored->get_margin(SIDE_TOP));
-		theme_cache.style_margin_bottom = MAX(theme_cache.style_margin_bottom, theme_cache.disabled_mirrored->get_margin(SIDE_BOTTOM));
 	} else {
 		theme_cache.max_style_size = theme_cache.max_style_size.max(theme_cache.disabled->get_minimum_size());
-		theme_cache.style_margin_left = MAX(theme_cache.style_margin_left, theme_cache.disabled->get_margin(SIDE_LEFT));
-		theme_cache.style_margin_right = MAX(theme_cache.style_margin_right, theme_cache.disabled->get_margin(SIDE_RIGHT));
-		theme_cache.style_margin_top = MAX(theme_cache.style_margin_top, theme_cache.disabled->get_margin(SIDE_TOP));
-		theme_cache.style_margin_bottom = MAX(theme_cache.style_margin_bottom, theme_cache.disabled->get_margin(SIDE_BOTTOM));
 	}
 }
 
diff --git a/scene/gui/button.h b/scene/gui/button.h
index eefb690913..477260e6b9 100644
--- a/scene/gui/button.h
+++ b/scene/gui/button.h
@@ -70,10 +70,6 @@ private:
 		Ref<StyleBox> focus;
 
 		Size2 max_style_size;
-		float style_margin_left = 0;
-		float style_margin_right = 0;
-		float style_margin_top = 0;
-		float style_margin_bottom = 0;
 
 		Color font_color;
 		Color font_focus_color;
```","2024-06-01T13:09:35Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-01T13:26:17Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-06-01T14:45:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-01T15:03:43Z",false,"COMMENTED"
"adamscott","MEMBER","Looks good to me.","2024-07-02T13:03:03Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-06-21T10:43:05Z",false,"COMMENTED"
"AThousandShips","MEMBER","Makes sense and looks good in theory, but TIWAGOS","2024-06-27T16:23:15Z",false,"APPROVED"
"akien-mga","MEMBER","As discussed in the release management meeting yesterday, let's go ahead with that change even though GDScript contributors are not available right now for an in-depth review.

This is a follow up to rune's own changes and was tested by several affected users, so it should be good to go and test more widely in the next beta.","2024-06-28T12:41:16Z",false,"APPROVED"
"cyanglaz","NONE","","2024-05-31T21:44:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-01T08:16:24Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-01T08:40:02Z",false,"COMMENTED"
"cyanglaz","NONE","","2024-06-01T12:40:55Z",false,"COMMENTED"
"vnen","MEMBER","Need to squash the commits and write a proper commit message, but the change itself looks good to me.","2024-07-25T19:02:42Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-06-03T05:45:35Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-31T16:46:36Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-31T16:48:47Z",false,"COMMENTED"
"akien-mga","MEMBER","Code looks good, I'll try to do some tests to make sure it works for different build names.","2024-06-11T17:08:14Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-09T19:31:05Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-09T19:33:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-09T19:40:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-09T19:42:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-09T19:50:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-09T19:50:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-09T19:52:12Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-09T19:52:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-10T08:30:13Z",false,"COMMENTED"
"groud","MEMBER","","2024-06-10T11:21:57Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-10T11:24:30Z",false,"COMMENTED"
"groud","MEMBER","","2024-06-10T12:25:31Z",false,"COMMENTED"
"groud","MEMBER","","2024-06-10T12:27:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-11T21:29:46Z",false,"COMMENTED"
"groud","MEMBER","","2024-06-12T07:40:46Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good.","2024-06-18T13:44:42Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-31T12:02:15Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-31T08:19:52Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-05-31T09:10:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-31T09:14:59Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-05-31T10:19:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-31T10:23:42Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-05-31T10:25:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-31T10:34:15Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-31T10:55:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-31T11:10:21Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-05-31T11:13:02Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-01T21:26:39Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-31T08:50:17Z",false,"COMMENTED"
"hccloud","CONTRIBUTOR","","2024-06-03T05:13:49Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","The logic looks good to me.","2024-06-03T12:58:03Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-03T13:02:23Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-31T07:38:40Z",false,"APPROVED"
"Geometror","MEMBER","","2024-07-12T14:36:27Z",false,"COMMENTED"
"Geometror","MEMBER","Tested and noticed no regressions.
Very nice cleanup!","2024-07-14T11:16:57Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-14T11:20:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-16T14:53:48Z",false,"APPROVED"
"Chaosus","MEMBER","","2024-08-16T12:42:00Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-31T09:01:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-31T11:02:07Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-31T11:02:41Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-05-31T11:24:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-31T11:29:34Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-05-31T23:42:48Z",false,"COMMENTED"
"bruvzg","MEMBER","The only thing I would change is returning value from the `_ensure_cache_for_size` as pointer instead of reference, to avoid unnecessary local variable which are unused in most cases.
```diff
-	FontForSizeAdvanced *ffsd = nullptr;
-	ERR_FAIL_COND_V(!_ensure_cache_for_size(fd, size, ffsd), 0);
+	ERR_FAIL_COND_V(!_ensure_cache_for_size(fd, size, nullptr), 0);
```","2024-06-01T21:24:37Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-04T08:25:09Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Could use some testing","2024-06-28T14:07:59Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Documentation is fine now and aside it's mostly identical to `master`. Again, could use some testing.","2024-06-28T16:15:32Z",false,"APPROVED"
"aaronp64","CONTRIBUTOR","","2024-05-30T21:46:18Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-05-30T22:53:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-28T19:57:03Z",false,"COMMENTED"
"rune-scape","CONTRIBUTOR","","2024-08-28T20:28:53Z",false,"COMMENTED"
"vnen","MEMBER","LGTM","2024-09-03T14:46:22Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-03T14:50:09Z",false,"APPROVED"
"Calinou","MEMBER","","2024-05-30T21:51:33Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-05-30T21:56:38Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-05-31T05:57:08Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-05-31T17:19:05Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-06T14:34:51Z",false,"COMMENTED"
"patwork","CONTRIBUTOR","","2024-06-14T10:59:00Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-14T19:51:22Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-14T20:06:41Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-14T20:06:47Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-15T08:55:53Z",false,"APPROVED"
"Calinou","MEMBER","Code and docs look good to me.","2024-06-16T21:44:42Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-30T19:23:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-30T19:24:38Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-31T12:42:54Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-06-01T11:20:50Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-06-01T11:20:57Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-06-01T11:21:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-01T11:21:14Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-06-01T11:28:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-06T14:36:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-06T14:37:27Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-06T14:41:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-06T15:12:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-06T15:13:02Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-06-06T16:10:45Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-06T16:11:58Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-06-06T16:16:50Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-06-06T16:19:14Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-06-06T17:29:13Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-06-06T17:29:37Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-06-06T17:30:01Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-06-06T17:30:33Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-06-06T17:30:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-06T17:52:11Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

Button styling looks a bit strange when using the Black (OLED) theme preset, due to the borders being drawn:

![image](https://github.com/godotengine/godot/assets/180032/52816048-6a32-40c1-b948-a05fb0849be8)

I'd look into hiding the borders specifically for those buttons. These borders are only drawn when **Draw Extra Borders** is enabled in the Editor Settings, which is automatically enabled by the Black (OLED) editor theme preset.","2024-06-08T23:14:32Z",false,"COMMENTED"
"bruvzg","MEMBER","Looks good to me.

The `NodeWarning` icon on the ""edit"" button in the project manager looks an out of place. The yellow badge in the editor is reasonable, but in the PM it probably should use a monochrome icon.","2024-06-10T05:50:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-18T16:31:34Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-07-21T10:34:55Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-07-21T16:52:58Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-07-22T16:59:51Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-07-29T11:49:21Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-26T21:05:10Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-09-27T17:20:48Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-06-12T19:48:45Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-06T10:43:45Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-06T19:16:00Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-30T16:39:58Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-30T16:39:07Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-06-03T13:41:35Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/c73ac74c4a44ccfed158b3603f809a24590bac0a), it works as expected.

**Testing project:** [test_pr_92555.zip](https://github.com/user-attachments/files/16564627/test_pr_92555.zip)

## Benchmark

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 40)
</details>

Using an optimized editor build (`optimize=speed lto=full`).

20 million iterations of `String.insert()` (10 million at the beginning of a string, 10 million at the end[^1]):

Before | After
-|-
2169 ms | 952 ms

[^1]: These take more or less the same time to complete, I wanted to check performance of both cases just to be sure.

With much longer strings to insert into:

### Before

```
insert(0) took 1222376 usecs
insert(5) took 3907256 usecs
```

### After

```
insert(0) took 797245 usecs
insert(5) took 802382 usecs
```","2024-08-09T17:01:09Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/292e50e17e3f6e2509d3178a00204f964a907460), it works as expected. See https://github.com/godotengine/godot/pull/92838#pullrequestreview-2111592592 for animation benchmark results (including results when coupled with #92838).

","2024-06-11T23:45:05Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-17T17:32:38Z",false,"COMMENTED"
"Faless","COLLABORATOR","Looking good! Nicely spotted!","2024-05-30T15:16:13Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-06-03T13:50:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-03T13:56:33Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-06-03T14:13:39Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-06-03T14:13:59Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-03T14:36:34Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/c73ac74c4a44ccfed158b3603f809a24590bac0a), it works as expected.

**Testing project:** [test_pr_92550.zip](https://github.com/user-attachments/files/16564741/test_pr_92550.zip)

## Benchmark

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 40)
</details>

Using an optimized editor build (`optimize=speed lto=full`).

### Before

```
join(2 strings) took 3155335 usecs
join(10 strings) took 7880363 usecs
```

### After

```
join(2 strings) took 2511176 usecs
join(10 strings) took 5855268 usecs
```","2024-08-09T17:07:42Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-30T14:40:06Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-06-03T15:01:26Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-06-26T21:47:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-27T08:24:29Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-27T09:25:29Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/c73ac74c4a44ccfed158b3603f809a24590bac0a), it works as expected.

**Testing project:** [test_pr_92548.zip](https://github.com/user-attachments/files/16564736/test_pr_92548.zip)

## Benchmark

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 40)
</details>

Using an optimized editor build (`optimize=speed lto=full`).

### Before

```
to_upper() took 3265488 usecs
to_lower() took 3367960 usecs
```

### After

```
to_upper() took 2939893 usecs
to_lower() took 3141137 usecs
```","2024-08-09T17:12:54Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-30T14:15:22Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected. This provides a slight speedup in a real world scenario (using `print_rich()` lots of times, which [currently](https://github.com/godotengine/godot/issues/87899) relies on string replacement a lot).

**Testing project:** [test_print_rich.zip](https://github.com/user-attachments/files/15538082/test_print_rich.zip)

## Benchmark

Using `optimize=speed lto=full` Linux editor binaries.

Command:

```bash
$ hyperfine 'bin/godot.linuxbsd.editor.x86_64.master --path /tmp/4 &> /dev/null' 'bin/godot.linuxbsd.editor.x86_64 --path /tmp/4 &> /dev/null'
```

```
Benchmark 1: bin/godot.linuxbsd.editor.x86_64.master --path /tmp/4 &> /dev/null
  Time (mean ¬± œÉ):     15.030 s ¬±  0.211 s    [User: 10.756 s, System: 3.243 s]
  Range (min ‚Ä¶ max):   14.651 s ‚Ä¶ 15.292 s    10 runs
 
Benchmark 2: bin/godot.linuxbsd.editor.x86_64 --path /tmp/4 &> /dev/null  <--- This PR
  Time (mean ¬± œÉ):     14.046 s ¬±  0.504 s    [User: 9.959 s, System: 3.257 s]
  Range (min ‚Ä¶ max):   13.138 s ‚Ä¶ 14.656 s    10 runs
 
Summary
  bin/godot.linuxbsd.editor.x86_64 --path /tmp/4 &> /dev/null ran
    1.07 ¬± 0.04 times faster than bin/godot.linuxbsd.editor.x86_64.master --path /tmp/4 &> /dev/null
```

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 39)
</details>
","2024-06-03T18:24:16Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-08-17T16:28:39Z",false,"APPROVED"
"Chaosus","MEMBER","","2024-05-30T13:26:39Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-05-30T13:57:04Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-05-30T14:12:25Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-05-30T14:14:05Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-05-30T14:19:34Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-05-30T14:21:56Z",false,"COMMENTED"
"akien-mga","MEMBER","Makes sense to me. Thanks for the quick fix, and the detailed explanations!","2024-05-30T20:29:37Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-30T12:55:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-30T12:57:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-30T12:57:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-30T12:57:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-30T12:58:03Z",false,"COMMENTED"
"sofia285","NONE","","2024-05-30T21:34:48Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-30T12:47:07Z",false,"APPROVED"
"Calinou","MEMBER","","2024-06-13T13:23:27Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-13T13:23:35Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-13T13:24:08Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-13T13:24:26Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-13T13:25:00Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-13T13:25:24Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, I noticed some issues:

- The size information label (and the maximum layer you're allowed to preview) is not updated when the texture size's changes. Example with NoiseTexture3D:

https://github.com/godotengine/godot/assets/180032/2efd9be0-9441-4ec0-aa7e-e230aeb8a0fd

It only updates when you collapse and expand the NoiseTexture3D in the inspector, although I managed to update the size label (but not the maximum selectable layer) somehow. I don't remember how I did this.","2024-06-17T17:47:22Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-06-18T16:03:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-18T17:35:27Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected now. However, this error is printed when you open a NoiseTexture3D inspector (it's not printed in `master`):

```
ERROR: Required virtual method NoiseTexture3D::_has_mipmaps must be overridden before calling.
   at: _gdvirtual__has_mipmaps_call (./scene/resources/texture.h:135
```","2024-06-18T22:33:48Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","Works great now :slightly_smiling_face: ","2024-06-19T14:04:33Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-12T14:14:30Z",false,"COMMENTED"
"akien-mga","MEMBER","Makes sense as a stopgap, but indeed this needs to be reworked further.","2024-05-30T13:35:04Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-30T08:50:13Z",false,"COMMENTED"
"timothyqiu","MEMBER","I think you can only check for `is_input_handled()` once before the 3D physics picking logic instead. (After the `#ifndef` on line 885.)","2024-05-30T09:38:17Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","","2024-07-26T15:11:52Z",false,"CHANGES_REQUESTED"
"Sauermann","CONTRIBUTOR","","2024-07-27T07:01:36Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-30T08:28:51Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-30T08:38:51Z",false,"COMMENTED"
"BuzzLord","NONE","","2024-05-30T22:28:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-31T08:01:04Z",false,"COMMENTED"
"BuzzLord","NONE","","2024-05-31T08:34:07Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-30T08:35:09Z",false,"COMMENTED"
"caimantilla","NONE","","2024-06-07T04:44:24Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-07T13:37:47Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-23T19:03:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-24T07:38:43Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-06-06T13:42:34Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-29T21:50:02Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-29T21:54:14Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-05-29T21:56:34Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-29T21:48:27Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-05-29T21:53:26Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally with Forward+ and Mobile (rebased on top of `master` https://github.com/godotengine/godot/commit/292e50e17e3f6e2509d3178a00204f964a907460), it works as expected. Since this is done at a server level, this works both in the scenario where CameraEffects is set on the Environment resource and when it's set on the current Camera3D node.

Note that this also disables autoexposure while debug draw is active, but not the manual exposure multiplier. We could look into forcing this multiplier to be `1.0` when a debug draw mode is enabled. This already seems to be in place for the Overdraw debug mode, but not other debug draw modes.","2024-06-11T15:24:28Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-06-11T15:50:22Z",false,"COMMENTED"
"ChristopheClaustre","CONTRIBUTOR","","2024-06-11T18:24:32Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-11T20:42:13Z",false,"COMMENTED"
"ChristopheClaustre","CONTRIBUTOR","","2024-06-12T07:30:36Z",false,"COMMENTED"
"ChristopheClaustre","CONTRIBUTOR","","2024-06-12T07:38:22Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-12T15:19:02Z",false,"COMMENTED"
"ChristopheClaustre","CONTRIBUTOR","","2024-06-13T07:40:44Z",false,"COMMENTED"
"ChristopheClaustre","CONTRIBUTOR","","2024-06-13T22:10:47Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-14T15:39:08Z",false,"COMMENTED"
"ChristopheClaustre","CONTRIBUTOR","","2024-06-16T18:43:19Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great to me. The comments are very helpful and I agree with your assessment","2024-06-19T21:14:08Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-02T11:18:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-02T11:19:05Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-10T12:50:26Z",false,"COMMENTED"
"ydeltastar","CONTRIBUTOR","","2024-06-10T12:54:01Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-10T16:25:24Z",false,"COMMENTED"
"ydeltastar","CONTRIBUTOR","","2024-06-10T17:31:05Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-10T17:42:17Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-05-29T21:02:48Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-29T19:46:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-29T20:01:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-29T12:35:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-29T12:36:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-29T12:36:42Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-05-29T12:44:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-29T12:49:45Z",false,"COMMENTED"
"vgezer","CONTRIBUTOR","","2024-05-29T12:58:26Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-05-29T13:34:43Z",false,"COMMENTED"
"vgezer","CONTRIBUTOR","","2024-05-29T13:44:52Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-29T21:17:09Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-05-30T04:55:41Z",false,"COMMENTED"
"vgezer","CONTRIBUTOR","","2024-05-30T19:00:56Z",false,"COMMENTED"
"vgezer","CONTRIBUTOR","","2024-06-02T11:31:40Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-11T11:44:02Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-11T17:50:43Z",false,"APPROVED"
"vgezer","CONTRIBUTOR","","2024-06-11T18:04:22Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-11T18:13:39Z",false,"COMMENTED"
"vgezer","CONTRIBUTOR","","2024-06-11T18:23:47Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-11T18:31:20Z",false,"COMMENTED"
"vgezer","CONTRIBUTOR","","2024-06-12T07:46:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-12T09:37:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-12T09:37:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-12T09:37:56Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-12T09:43:06Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-12T10:21:22Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-06-12T10:23:31Z",false,"COMMENTED"
"vgezer","CONTRIBUTOR","","2024-06-13T06:03:55Z",false,"COMMENTED"
"vgezer","CONTRIBUTOR","","2024-06-13T06:21:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-13T09:30:33Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me.

This is a new feature but it also fixes a recent regression, so I'll merge this for 4.3 despite the feature freeze.","2024-06-25T06:54:57Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-29T19:37:14Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally with https://github.com/godotengine/godot-demo-projects/tree/master/3d/truck_town, it works as expected. This is an encouraging start :slightly_smiling_face: 

Standard (vertical FOV 74, horizontal FOV ~107) | Panini (horizontal FOV 150)
-|-
![Screenshot_20240531_001126 png webp](https://github.com/godotengine/godot/assets/180032/c8f527e0-c253-48cb-a001-f18203b5670f) | ![Screenshot_20240531_001137 png webp](https://github.com/godotengine/godot/assets/180032/107daed7-b462-4d76-ab84-51da23e2b7bc)

Video with VoxelGI enabled:

https://github.com/godotengine/godot/assets/180032/877b224c-3ba1-4765-a38d-5dea6112fcc9

I found several issues that should be addressed in one way or another:

### Field of view

- When changing the window's aspect ratio, the camera is incorrectly cropped if the aspect ratio is taller than the project's default:

https://github.com/godotengine/godot/assets/180032/9dd89916-7ea2-45a2-b6e5-2136e28b6649

- Camera3D's **Keep Aspect** property is not taken into account when the camera is in panini projection mode. When **Keep Width** is used, horizontal FOV should not increase when the window is made wider.

- Panini projection asks for a FOV, but this FOV always appears to be an horizontal FOV value, while it should be interpreted as a vertical FOV value when the **Keep Height** aspect mode is used (the default). When using **Keep Width**, it should be interpreted as an horizontal FOV as it is currently.
  - Changing this will make the default of 150 too high, so I suggest decreasing it to 100 or so, perhaps even 90.

### Rendering

- At low FOV (< 100), the low resolution of the cubemap becomes obvious. At very high FOV (> 250), visible aliasing can be noticed due to the cubemap resolution being too high.

![Low-resolution cubemap](https://github.com/godotengine/godot/assets/180032/dd421897-20b8-42c5-9a57-e2d5f5401a48)

- Very high FOV (above 350) has visible streaks on the edges of the screen. I suggest clamping the FOV to 350 in the inspector (instead of 359) to avoid this.

![FOV 359](https://github.com/godotengine/godot/assets/180032/548fdb89-0a23-4eb9-94a5-b98012a47eb2)

- SDFGI doesn't work when using a camera with panini projection. It does impact performance, but it has no visible result on the scene rendering. VoxelGI and LightmapGI both work.

- FXAA and TAA operate on the output view, not the internal cubemap faces. This means aliasing is still visible on the screen's edges as they are quite undersampled.

- When TAA is enabled, lots of ghosting are visible when the camera moves fast on certain cubemap faces. FSR2 isn't as subject to this issue, even at resolution scales lower than 1.0.

- SSAO and SSIL work, but there are seams between cubemap faces. Example with SSIL at intensity 6 to make the seam more obvious:

![SSIL seams](https://github.com/godotengine/godot/assets/180032/4c5e2fe5-d447-42b0-b63b-9978980d1d8a)

- Volumetric fog has visible seams between cubemap faces. The higher the temporal reprojection factor is, the more visible they are. Disabling temporal reprojection gets rid of the seams entirely.

![Volumetric fog seams with temporal reprojection](https://github.com/godotengine/godot/assets/180032/b4161202-93a2-4672-8bf0-3f43847e7e5b)

## Benchmark

The performance impact is pretty high. To reduce the performance impact, most other engines I've seen use cheaper screen-space approximations to this effect (perhaps using up to 4 views for very high FOV, but sticking to a single oversampled view for most conventional FOV values).

All tests done with an optimized editor build (`optimize=speed lto=full`).

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 39)
</details>

## Standard 1152x648

Forward+ | Mobile | Compatibility
-|-|-
3261 FPS (0.31 mspf) | 3185 FPS (0.31 mspf) | 2347 FPS (0.43 mspf)

## Standard 3840x2160

Forward+ | Mobile | Compatibility
-|-|-
920 FPS (1.09 mspf) | 1570 FPS (0.64 mspf) | 1430 FPS (0.70 mspf)

## Panini 1152x648

Forward+ | Mobile | Compatibility
-|-|-
1030 FPS (0.97 mspf) | *N/A* | *N/A*

## Panini 3840x2160

Forward+ | Mobile | Compatibility
-|-|-
206 FPS (4.85 mspf) | *N/A* | *N/A*
","2024-05-30T22:38:20Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Your routine ""[comment style](https://docs.godotengine.org/en/stable/contributing/development/code_style_guidelines.html#comment-style-guide)"" checking.","2024-06-21T09:05:33Z",false,"COMMENTED"
"tomas-g03","NONE","","2024-06-28T11:16:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-29T09:20:49Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-05-29T09:44:51Z",false,"COMMENTED"
"hccloud","CONTRIBUTOR","","2024-05-30T02:14:09Z",false,"COMMENTED"
"hccloud","CONTRIBUTOR","","2024-05-30T02:27:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-29T08:49:50Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-29T08:57:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-29T06:42:09Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-27T14:18:58Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-29T07:03:00Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-29T07:02:21Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it mostly works as expected.

There's a visible precision loss in the movie output compared to the window output (i.e. what I see in the window). Notice the glow's appearance in the top-left corner having noticeable banding, or even the lighting on the cube.

There's also a slight difference in overall brightness. The project uses Forward+ for reference.

**Testing project:** [test_hdr_2d_movie.zip](https://github.com/user-attachments/files/15510268/test_hdr_2d_movie.zip)

### Window output

![Screenshot_20240531_095522](https://github.com/godotengine/godot/assets/180032/d21e1778-da29-433c-b272-7944a8d9eed7)

### Movie output before

![input00000000](https://github.com/godotengine/godot/assets/180032/c176434a-3b5c-4547-9a46-eb68a1b2ec2e)

### Movie output after this PR

![input00000000](https://github.com/godotengine/godot/assets/180032/66204d5f-7034-4294-be1e-78b0254b86de)
","2024-05-31T07:58:13Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-31T08:15:00Z",false,"APPROVED"
"passivestar","CONTRIBUTOR","Tested, works as expected, code makes sense","2024-05-29T13:43:00Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-05-29T19:31:28Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-28T20:52:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-28T20:52:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-28T20:53:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-28T20:54:16Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-28T20:54:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-28T20:55:37Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-05-29T01:19:08Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-05-29T01:22:54Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-05-29T01:29:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-28T21:20:04Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-05-28T21:51:50Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-05-28T22:04:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-29T07:54:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","Looks good at a general glance, will take a closer look when I'm able","2024-05-29T08:33:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-29T13:26:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-29T13:26:47Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-05-29T13:28:21Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-29T13:29:14Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-05-29T13:30:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-29T13:30:51Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-05-29T13:32:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-29T13:41:38Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-05-29T13:42:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-29T13:43:53Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-05-29T13:56:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-29T13:58:46Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-05-29T14:05:03Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","Changes make sense to me","2024-05-29T21:51:33Z",false,"APPROVED"
"kleonc","MEMBER","","2024-05-30T08:18:24Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-04T22:07:12Z",false,"APPROVED"
"KoBeWi","MEMBER","I'm not sure about using a hard-coded value for that, but surprisingly `24 * ESCALE` is already used a few times in the codebase. Proper value would be `class_icon_size + 8 * EDSCALE`.","2024-06-02T08:41:52Z",false,"APPROVED"
"AThousandShips","MEMBER","You can't do this, they are generated automatically, this isn't a valid change

Instead you please fill in the descriptions if you want to help here","2024-05-28T17:49:34Z",false,"DISMISSED"
"fire","MEMBER","","2024-05-29T01:16:16Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-29T01:16:29Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-29T01:16:40Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-29T01:16:53Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-29T01:17:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-30T15:42:49Z",false,"COMMENTED"
"AaronOldenburg","NONE","","2024-05-30T16:56:16Z",false,"COMMENTED"
"AaronOldenburg","NONE","","2024-05-30T17:03:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-30T17:17:25Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-10T13:46:01Z",false,"COMMENTED"
"AaronOldenburg","NONE","","2024-06-13T15:47:27Z",false,"COMMENTED"
"AaronOldenburg","NONE","","2024-06-13T15:52:47Z",false,"COMMENTED"
"AaronOldenburg","NONE","","2024-06-13T15:56:35Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-13T16:54:45Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-13T17:07:56Z",false,"COMMENTED"
"AaronOldenburg","NONE","","2024-06-13T18:30:55Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-23T19:08:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-23T20:09:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-28T14:13:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-28T14:15:58Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-28T14:40:01Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-29T02:38:25Z",false,"COMMENTED"
"clayjohn","MEMBER","Tested locally on the RD and GLES3 backends and can confirm that this PR fixes the jittering. 

With the jittering fixed, it's more obviously when the particle penetrates and then de-penetrates a surface (in the next frame) unofortunately, but that is something we can fix later. This PR is already a huge improvement. ","2024-05-31T01:38:58Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

However, this PR completely changes the appearance of the trails particles in https://github.com/godotengine/godot-demo-projects/tree/master/3d/particles due to the collision behavior being modified in ""fringe"" cases:

### Before

https://github.com/godotengine/godot/assets/180032/f6fcb639-198a-456e-97d7-9f6266129363

### After *(this PR)*

https://github.com/godotengine/godot/assets/180032/8eeea21c-3b18-4e8b-b71e-7d0d2a1af1ea

I assume this is because this PR changes how particles collide when they spawn within a collision box (even if only slightly). Reducing the particle's collision base size from 0.1 to 0.01 fixes the issue in the particles demo, but I thought I'd highlight it.
","2024-05-31T06:21:30Z",false,"COMMENTED"
"Calinou","MEMBER","Despite my above comment, I still think this is good to merge. Code looks good to me.

I would highlight this change in the next blog post still, just in case.","2024-05-31T07:49:23Z",false,"APPROVED"
"fire","MEMBER","","2024-05-29T06:04:00Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-29T08:54:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-29T09:06:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-28T12:28:48Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-28T12:53:28Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally on https://github.com/godotengine/godot-demo-projects/tree/3.x/3d/kinematic_character, it works as expected.

### Before

*Both videos use 4x slowdown and 10 physics ticks per second.*

https://github.com/godotengine/godot/assets/180032/b88c0eb8-de3d-4d01-b1e4-6c35077d785f

### After

https://github.com/godotengine/godot/assets/180032/e653a22a-875a-42fc-ad6a-7b2a5c05958a

","2024-06-06T21:22:41Z",false,"APPROVED"
"Calinou","MEMBER","","2024-06-06T21:23:36Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-06T21:23:45Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-06T21:23:49Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-28T10:55:02Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-05-28T11:07:28Z",false,"COMMENTED"
"patwork","CONTRIBUTOR","","2024-05-28T12:46:02Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-28T13:46:57Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-03T22:02:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-28T14:09:30Z",false,"APPROVED"
"Geometror","MEMBER","The one problem I have with this solution is that we now need to convert every line point to graph space, not just the start and end point. The minimap is already quite costly.
I'm also unable to reproduce your bug. Could you provide a MRP?","2024-05-28T17:13:50Z",false,"COMMENTED"
"Geometror","MEMBER","Nice work :)","2024-05-28T18:49:56Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-28T18:50:21Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-28T14:13:05Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-28T14:45:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-28T12:27:54Z",false,"APPROVED"
"dalexeev","MEMBER","Looks good as a hot fix and considering it's already done this way for theme properties. But in the future we should refactor this (again).","2024-05-28T14:27:40Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-05-28T16:02:19Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-05-28T18:45:23Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-05-28T19:04:01Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-28T09:27:49Z",false,"APPROVED"
"Maran23","CONTRIBUTOR","","2024-05-28T08:24:42Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-28T14:20:52Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-28T14:21:00Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-05-29T04:48:47Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-29T06:48:58Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-29T06:49:02Z",false,"APPROVED"
"fire","MEMBER","","2024-05-28T01:06:52Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-28T00:39:25Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","Looks good to me, seems to be a sensible change. ","2024-05-28T23:58:42Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-05-29T01:29:31Z",false,"COMMENTED"
"Dowsley","CONTRIBUTOR","","2024-06-02T18:32:48Z",false,"COMMENTED"
"Dowsley","CONTRIBUTOR","","2024-06-02T18:34:17Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-02T22:12:22Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-27T20:33:08Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-29T11:35:44Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-05-29T11:43:09Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally in all rendering methods (rebased on top of `master` https://github.com/godotengine/godot/commit/a7aa8356b9288fb6de1cef2980465703c63102ea), it works as expected.

Finally a use case for implicit float ‚Üí int conversions not being allowed in GLSL. :stuck_out_tongue: 

https://github.com/godotengine/godot/assets/180032/2a790ea0-fc75-4f85-b7a6-fe73bf052e4a

**Testing project:** [test_pr_92441.zip](https://github.com/user-attachments/files/15789941/test_pr_92441.zip)
","2024-06-11T14:54:41Z",false,"APPROVED"
"rburing","MEMBER","There's a typo in the commit message but the change looks correct.","2024-05-27T17:53:15Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-02T11:37:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-02T11:37:58Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-02T11:39:04Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-02T11:39:19Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-02T11:42:02Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-02T11:42:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-02T11:47:50Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-02T11:48:35Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-02T11:51:11Z",false,"COMMENTED"
"KoBeWi","MEMBER","The code needs *some* work, but the feature is fine overall.","2024-06-02T11:52:06Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-09T21:40:30Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-10T08:38:13Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-14T15:52:06Z",false,"COMMENTED"
"Jabberdrake","CONTRIBUTOR","","2024-06-14T16:10:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-14T16:11:48Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-05-27T15:47:01Z",false,"COMMENTED"
"shana","CONTRIBUTOR","","2024-05-27T16:03:58Z",false,"COMMENTED"
"aaronp64","CONTRIBUTOR","","2024-05-27T22:56:44Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-05-28T09:24:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-28T09:39:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-28T09:42:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-28T09:48:53Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-28T10:07:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-27T14:32:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-27T14:39:56Z",false,"COMMENTED"
"dcaoc03","CONTRIBUTOR","","2024-05-27T14:40:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-27T13:39:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-27T13:50:40Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-27T13:58:05Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-27T14:10:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-27T14:12:13Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-05-27T14:14:19Z",false,"COMMENTED"
"Daylily-Zeleen","CONTRIBUTOR","","2024-05-27T14:15:36Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-06-10T14:16:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM code wise","2024-06-10T15:14:09Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-11T11:07:17Z",false,"COMMENTED"
"Daylily-Zeleen","CONTRIBUTOR","","2024-06-11T14:54:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-11T15:05:01Z",false,"COMMENTED"
"Daylily-Zeleen","CONTRIBUTOR","","2024-06-11T15:07:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-11T15:11:45Z",false,"APPROVED"
"Daylily-Zeleen","CONTRIBUTOR","","2024-06-11T15:12:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-27T11:51:26Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-27T11:09:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-27T11:09:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-27T11:09:53Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-27T11:21:54Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-03T09:19:39Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-27T10:51:21Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-27T09:56:07Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","Gave a look, things look fine!

I think that the freelook fix bundled is more of a workaround (see https://github.com/godotengine/godot/pull/92455#issuecomment-2138068102 ) but it will do for now.

I also researched a bit on the Wayland side and things aren't bad at all. There's a bit of a focus tracking bug in the Wayland thread (which I'll fix soon), but otherwise everything gets reported properly by the compositor even in between focus changes (rightly so, as there's no pointer query API on WL), so we're mostly set :D","2024-05-30T11:11:09Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-05-27T13:16:02Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-05-27T09:10:05Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-05-27T09:06:11Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-05-27T09:40:21Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-27T09:07:01Z",false,"COMMENTED"
"mateuseap","CONTRIBUTOR","","2024-05-27T09:17:06Z",false,"COMMENTED"
"mateuseap","CONTRIBUTOR","","2024-05-27T09:18:35Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-27T09:20:35Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-27T12:07:17Z",false,"COMMENTED"
"mateuseap","CONTRIBUTOR","","2024-05-27T12:14:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-27T08:32:54Z",false,"APPROVED"
"mateuseap","CONTRIBUTOR","","2024-05-27T08:52:39Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me. Let's maybe merge right after beta1, so we get a good baseline for comparison if there are any regression reports in beta2?","2024-05-30T09:23:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-04T06:10:09Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-09-04T09:10:20Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-26T21:03:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-26T21:03:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-26T21:03:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-26T21:04:02Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-26T21:04:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-26T21:06:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-26T21:07:03Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-26T21:08:40Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-26T21:09:44Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-26T21:11:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-26T21:12:55Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-26T21:21:32Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-26T21:23:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-26T21:43:30Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-26T21:44:12Z",false,"COMMENTED"
"rburing","MEMBER","","2024-05-26T22:23:11Z",false,"COMMENTED"
"rburing","MEMBER","","2024-05-26T22:27:40Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-26T22:27:46Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-26T22:30:13Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-05-26T22:39:46Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-05-26T22:43:40Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-26T22:48:31Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-27T01:10:05Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-27T03:41:52Z",false,"COMMENTED"
"dalexeev","MEMBER","The GDScript code style looks good to me, but I think it's up to the physics team to decide.","2024-05-27T06:01:51Z",false,"COMMENTED"
"rburing","MEMBER","","2024-05-27T06:09:55Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-27T09:17:48Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-27T09:17:54Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-27T09:18:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-27T09:26:20Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-27T10:17:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-27T10:20:44Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-27T10:27:27Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-27T10:32:18Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-27T10:47:43Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-30T09:40:05Z",false,"APPROVED"
"matmas","NONE","","2024-06-01T12:23:21Z",false,"COMMENTED"
"matmas","NONE","","2024-06-03T01:09:43Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-06-04T12:22:47Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-06-04T12:40:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","Looks very intriguing! Looking forward to this","2024-06-04T12:44:35Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-04T13:07:49Z",false,"COMMENTED"
"matmas","NONE","","2024-06-05T02:24:53Z",false,"COMMENTED"
"rburing","MEMBER","","2024-06-16T16:21:46Z",false,"COMMENTED"
"lawnjelly","MEMBER","Although I've confirmed with akien this will be for 4.4 (so can only be merged after 4.3), I wanted to give preliminary approval as this is already in a state where it could theoretically be merged (and iterated on).

We will no doubt continue improving the PR in the meantime.","2024-06-19T08:23:13Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-19T17:13:46Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-05-29T00:10:28Z",false,"APPROVED"
"Calinou","MEMBER","","2024-05-26T18:38:37Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-05-26T18:39:03Z",false,"APPROVED"
"ckaiser","CONTRIBUTOR","","2024-05-26T23:35:16Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-06-12T23:58:55Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great! Thanks","2024-06-13T16:50:39Z",false,"APPROVED"
"dalexeev","MEMBER","1\. In my opinion, the syntax should be `for key: KeyType, value: ValueType in iterable`. Because a. the type is not separated from the identifier, and b. `key: Type, value` is less confusing than `key, value: Type` if you omit the value's type hint.

2\. GDScript is a gradually typed programming language, so we do not require static typing anywhere.

![](https://github.com/godotengine/godot/assets/47700418/b63fb746-70cc-41a9-9d3e-02a8dfc6bf1c)

In case the iterable value is a supertype of `Dictionary` (i.e. `Variant`), there should be no compile-time error, only the second iterator variable should be marked as unsafe.

Type checking should be performed at runtime, if necessary. If the value turns out to be a dictionary, then ok. If not, then there must be a runtime error. You can implement this either in the compiler (by generating type checking code if necessary, much like we did for `match`) or by adding new opcode(s) for the VM.

3\. The type of the second iterator variable is not converted for implicitly convertible types (like `int` and `float`) and does not cause a runtime error for incompatible types.

![](https://github.com/godotengine/godot/assets/47700418/8e69b057-6686-4b15-a2d2-af523e85ee88)
![](https://github.com/godotengine/godot/assets/47700418/9b7f1ea3-4f76-48d3-a9ea-bc0c52e4c6e2)

This is inconsistent with the behavior of the first iterator variable.

![](https://github.com/godotengine/godot/assets/47700418/7bf05b57-114b-4c8f-a8fb-2a1ccba8a0e0)
![](https://github.com/godotengine/godot/assets/47700418/6a28e3c5-e512-41c5-ab3c-01ccc02928b8)

To fix the first, you need to replace `use_conversion_assign` with `first_use_conversion_assign` and `second_use_conversion_assign`. See #80247 for reference.

https://github.com/godotengine/godot/blob/be56cab58c056c074d1e02cd0b38641204e39f41/modules/gdscript/gdscript_byte_codegen.cpp#L1618-L1623

To fix the second, you should probably use `OPCODE_ASSIGN` instead of `write_get()`.

4\. Please add more tests.

Also, please remove the reference to the proposal from the commit (leave it only in the first post), because it creates unnecessary noise on each push:

![](https://github.com/godotengine/godot/assets/47700418/2a3f0d70-e85c-4c30-b682-0ba0bc8b9916)","2024-05-26T16:52:18Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-06-04T08:51:35Z",false,"COMMENTED"
"rodrigodias4","CONTRIBUTOR","","2024-06-05T14:36:10Z",false,"COMMENTED"
"rodrigodias4","CONTRIBUTOR","","2024-06-05T15:05:32Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-30T17:35:37Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-26T11:37:12Z",false,"COMMENTED"
"nonchip","NONE","","2024-05-26T11:41:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-26T11:48:15Z",false,"COMMENTED"
"nonchip","NONE","","2024-05-26T12:04:24Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-26T12:38:12Z",false,"COMMENTED"
"nonchip","NONE","","2024-05-26T12:40:06Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-05-27T00:25:40Z",false,"COMMENTED"
"mateuseap","CONTRIBUTOR","","2024-05-27T00:54:33Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-05-27T02:41:24Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-29T11:49:32Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-29T11:50:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-29T11:50:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-29T11:51:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-29T11:52:05Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-29T11:52:20Z",false,"COMMENTED"
"Splizard","CONTRIBUTOR","","2024-05-29T12:02:39Z",false,"COMMENTED"
"groud","MEMBER","","2024-05-27T09:12:41Z",false,"APPROVED"
"fire","MEMBER","I didn't tested cases but the feature is great.","2024-05-26T02:27:12Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-27T13:03:45Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-28T13:13:58Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-05-28T17:11:50Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-29T08:50:51Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-29T08:52:10Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-05-26T19:02:43Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-26T22:22:50Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-26T22:32:11Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-05-27T02:22:44Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-27T05:00:20Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-27T05:08:20Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","Seems good - i like the simplification of using `MeshInstance3D::get_active_material()` since that is what it is for.","2024-05-29T09:58:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-29T09:58:52Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-05-29T18:14:02Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-25T18:32:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-25T19:31:47Z",false,"APPROVED"
"Faless","COLLABORATOR","Nicely spotted! Great work! :1st_place_medal: ","2024-05-25T23:05:04Z",false,"APPROVED"
"jonbonazza","CONTRIBUTOR","","2024-05-26T01:31:27Z",false,"APPROVED"
"adamscott","MEMBER","Seems fine to me!","2024-05-25T13:44:38Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-05-25T21:31:49Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-05-25T22:04:10Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-05-25T22:06:01Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-25T09:35:56Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-05-25T17:06:17Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-25T11:15:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-25T11:43:08Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks! Looks good to me :-)","2024-05-25T15:20:57Z",false,"APPROVED"
"fire","MEMBER","","2024-09-07T03:26:07Z",false,"COMMENTED"
"adamscott","MEMBER","Looks good to me!","2024-05-24T22:29:07Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-25T09:39:29Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","Do we have any other events we can listen to detect when the reference frame has been updated instead of computing the transform every frame?","2024-05-25T17:54:29Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-05-28T19:18:26Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-28T19:40:00Z",false,"COMMENTED"
"devloglogan","CONTRIBUTOR","","2024-05-28T23:10:42Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","Looks good!","2024-05-28T23:11:58Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-29T08:19:33Z",false,"APPROVED"
"devloglogan","CONTRIBUTOR","","2024-05-29T12:53:30Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks! I haven't tested, but the code looks good to me :-)","2024-05-29T13:06:42Z",false,"APPROVED"
"adamscott","MEMBER","","2024-05-28T14:12:52Z",false,"COMMENTED"
"van800","CONTRIBUTOR","","2024-05-28T14:45:15Z",false,"COMMENTED"
"van800","CONTRIBUTOR","","2024-05-28T14:50:16Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-05-28T16:13:03Z",false,"COMMENTED"
"van800","CONTRIBUTOR","","2024-05-28T16:35:15Z",false,"COMMENTED"
"van800","CONTRIBUTOR","","2024-05-28T16:40:20Z",false,"COMMENTED"
"van800","CONTRIBUTOR","","2024-05-28T20:02:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-29T21:23:10Z",false,"COMMENTED"
"van800","CONTRIBUTOR","","2024-05-30T06:11:19Z",false,"COMMENTED"
"van800","CONTRIBUTOR","","2024-05-30T06:12:57Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-30T07:31:01Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-30T08:51:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-30T08:52:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-30T19:52:20Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-25T12:25:20Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-05-25T13:09:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-25T13:34:13Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-05-27T10:22:16Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-05-27T10:23:31Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-05-27T10:37:44Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-05-27T11:21:18Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-05-27T11:36:17Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-05-27T17:24:36Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-04T14:49:47Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-04T16:05:41Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-04T16:45:05Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-06-14T09:53:12Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-06-14T09:57:41Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-14T13:34:36Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-06-18T08:16:26Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-06-18T12:01:36Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-18T13:37:12Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-18T14:43:11Z",false,"COMMENTED"
"akien-mga","MEMBER","Let's YOLO merge and see what happens, this fixes a number of critical regressions.

We can iterate on the design of the core API later, or flag it as something that's a hack only for GDScript and shouldn't be used in other parts of the engine.","2024-06-19T08:35:05Z",false,"DISMISSED"
"fire","MEMBER","","2024-05-24T17:53:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-24T18:16:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-24T17:19:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-25T06:49:12Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","Thanks for your contribution!

This include is indeed missing, but please note that the whole wrap/no-wrap include block is in `platform/linux/wayland/wayland_thread.h`:

https://github.com/godotengine/godot/blob/b7feebefabc2d48b0d4794cd31fc141f1caecc5c/platform/linuxbsd/wayland/wayland_thread.h#L38-L47

So, I think that it would be wiser (or at least more consistent) to put it there, in the `else` branch, between the xkbcommon and cursor include, so that we have two mirrored blocks.

(It took me a bit to find where the other includes came for so I understand that it's not very intuitive, sorry)","2024-05-25T09:58:56Z",false,"CHANGES_REQUESTED"
"Riteo","CONTRIBUTOR","Nice, good catch!","2024-05-25T15:15:56Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-24T17:10:16Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-24T20:34:58Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-24T20:35:51Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-25T11:34:05Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-25T11:40:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-25T11:40:20Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-25T11:41:39Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-25T12:06:59Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-24T15:37:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-24T15:38:07Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-24T17:02:19Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-05-24T17:34:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-29T17:24:41Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-29T17:25:41Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-29T20:04:04Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-05-30T01:43:09Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-05-30T01:50:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-30T08:51:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-30T08:52:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-30T08:53:45Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-05-30T09:30:02Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-05-30T09:32:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-30T09:34:13Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-05-30T09:44:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-30T09:45:33Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-05-30T09:46:27Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-30T09:46:35Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-30T09:48:06Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-05-30T09:50:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","Haven't tested but the code looks good to me (can't speak for the last line of change that's discussed though)","2024-06-10T14:45:45Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-11T10:30:35Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-11T10:40:50Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-11T10:43:57Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-11T21:04:56Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-24T16:42:41Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-30T09:25:00Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-24T13:44:28Z",false,"COMMENTED"
"alula","CONTRIBUTOR","","2024-05-24T13:50:14Z",false,"COMMENTED"
"alula","CONTRIBUTOR","","2024-05-24T13:52:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-24T13:57:49Z",false,"COMMENTED"
"alula","CONTRIBUTOR","","2024-05-24T13:57:53Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","Tested locally, and the builds are indeed successful! There's currently a handful of warnings produced, so this currently can't run `werror=yes`; nevertheless, this grants a foundation for this workflow & those warnings can be ironed out in a followup PR.","2024-06-22T14:15:55Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-28T09:06:17Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-08-28T14:03:40Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-28T14:28:21Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-08-28T17:40:25Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","","2024-08-28T18:27:49Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-08-28T18:32:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-24T13:30:19Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-05-27T13:20:05Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-05-27T21:21:35Z",false,"COMMENTED"
"SudeySjan","NONE","@losinggeneration ","2024-05-28T23:47:14Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-05-30T02:29:50Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-05-30T09:37:56Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-24T13:53:22Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-24T14:42:04Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-24T15:13:30Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-24T15:33:17Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-24T15:34:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-24T16:30:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-24T21:54:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-24T21:54:43Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-24T21:59:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-24T22:02:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-24T22:13:05Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-24T22:33:35Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-24T22:39:28Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-24T22:44:58Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-24T22:46:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-24T22:52:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-24T22:58:13Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-24T23:00:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-24T23:24:00Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T00:00:22Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T00:00:30Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T00:01:01Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T00:04:22Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T12:11:11Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T12:19:40Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T12:48:51Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T12:50:29Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T12:51:58Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T12:59:27Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T13:30:02Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T13:32:59Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T13:44:16Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T13:45:40Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T14:01:07Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T15:46:28Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T16:01:02Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T16:01:55Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T16:02:02Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T16:02:08Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T16:03:20Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T16:03:26Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T16:03:32Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T16:03:39Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T16:05:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T16:08:23Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T16:14:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T16:21:25Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T16:51:25Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T17:08:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T17:09:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T17:11:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-25T17:11:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T17:13:15Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T17:15:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T17:18:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T17:21:29Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T17:25:40Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T17:27:35Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T17:27:39Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T17:27:45Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T17:28:02Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T17:28:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T17:55:02Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T21:35:15Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-25T21:37:29Z",false,"COMMENTED"
"KoBeWi","MEMBER","The changes look fine overall. I tested it in various scenarios and a complex project and the script cache works correctly.

Aside from the last comments I left, there code could get more `const`s for some pointers/Strings, but it's not really important.","2024-06-25T21:43:15Z",false,"APPROVED"
"Hilderin","CONTRIBUTOR","","2024-06-25T22:33:22Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-25T22:33:27Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-27T12:25:38Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-06-27T19:21:08Z",false,"COMMENTED"
"akien-mga","MEMBER","Did some testing on various projects and it seems to work well for me.

I also got reports from various users testing it and they either saw improvements, or no new issue in their daily workflow, which is also a good sign.

So let's give it a spin and see how it fares in 4.3-beta3.","2024-06-28T12:24:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-30T20:30:52Z",false,"APPROVED"
"akien-mga","MEMBER","Seems good as a stop-gap measure for a crash that seems to affect a lot of users.

But as pointed out in the bug report the bug is likely deeper, and would be worth looking into. CC @Paulb23 @kitbdev 

I'm not even sure why CodeEdit is involved at all for users using external editors with LSP.","2024-05-24T08:11:44Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-24T07:37:36Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-05-24T07:33:50Z",false,"COMMENTED"
"aengus126","NONE","","2024-05-26T23:07:00Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","I'd change the wording from `as long` to `as long as` or from `as long` to `whenever both`","2024-05-23T20:11:42Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-05-24T07:26:55Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-24T08:02:18Z",false,"COMMENTED"
"rvenson","CONTRIBUTOR","","2024-05-25T18:13:53Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great!","2024-06-13T00:10:03Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

## Benchmark

Using an optimized editor binary (`optimize=speed lto=full`).

**Testing project:** [image-half-convert-benchmark.zip](https://github.com/user-attachments/files/15826799/image-half-convert-benchmark.zip)
(only source format is taken into account in the benchmark)

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 39)
</details>

The time taken to create an image and convert its format 1,000 times (the image is recreated on every iteration seems identical before and after this PR. Here it is for reference:

Format | After *(this PR)*
-|-
RH | 77.5 ms
RGH | 99.5 ms
RGBH | 119.5 ms
RGBAH | 140.8 ms
RF | 65.5 ms
RGF | 77.1 ms
RGBF | 75.2 ms
RGBAF | 79.9 ms

I'm a bit surprised I don't see any performance improvement in this scenario, but at least it's not slower than before.

Note that the stripped binary size also grows by 8 KB with this PR, likely due to the addition of a template function. It's not a huge issue but I thought it'd be worth mentioning nonetheless.","2024-06-13T18:00:07Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/568589c9d8c763bfb3a4348174d53b42d7c59f21), it doesn't seem to work as expected with @huwpascoe's MRP. I still get sudden unexpected LOD level changes when the camera moves at certain positions (e.g. going from a low LOD level to full resolution LOD instantly).

Also, in general, the LOD level regularly decreases even though my camera is getting *closer* to the MultiMeshInstance3D's center, which doesn't make sense to me.

### `master`

https://github.com/user-attachments/assets/c2222cee-22a8-485a-bae5-5f57bd524111

### This PR

https://github.com/user-attachments/assets/5766c7bb-cc4e-4d21-81ab-cb5c3a500e9f

This makes me wonder if the full resolution LOD should always be used if the camera's AABB is inside the MultiMeshInstance's AABB. This will be slower, but it ensures one instance from the MultiMeshInstance3D will never look bad if it's right in front of you, no matter how isolated it is from the rest (or whether it's near the edges or at the center of the MultiMeshInstance3D).

A less extreme approach could be to clamp the LOD selection for MultiMeshInstance3Ds when the camera is inside its bounds (e.g. use only the two most detailed LOD levels to avoid too much discrepancy).","2024-08-23T01:51:18Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-13T15:36:47Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-13T16:17:06Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-13T16:23:16Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-23T18:38:02Z",false,"APPROVED"
"fire","MEMBER","","2024-05-23T18:48:05Z",false,"APPROVED"
"Scony","CONTRIBUTOR","","2024-05-23T19:23:52Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-05-28T06:36:43Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-28T14:27:53Z",false,"COMMENTED"
"akien-mga","MEMBER","I'm no rendering expert, but the overall code change looks sensible to me, and this would be a welcome bugfix to test in beta1.","2024-05-28T14:29:51Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-05-28T15:29:03Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","Excellent work.

we additionally need to `modify editor_scene_importer_ufbx.cpp` and call `state->set_bake_fps` before `append_from_file` since ufbx needs to know it there.

optionally you could make the same change in all importers but I don't think gltf uses it until generate scene","2024-05-23T15:53:35Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","Looks good","2024-05-23T17:11:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-30T09:40:35Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-23T14:54:02Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

Property filtering in action in Curve3D:

![image](https://github.com/godotengine/godot/assets/180032/01d6f7e1-b06d-477b-93e9-b8407ea2cf23)
","2024-06-10T13:00:52Z",false,"APPROVED"
"fire","MEMBER","I tested https://github.com/godotengine/godot/files/15415243/reimport_test.zip.

### On 4.3 and this pr it keeps the last value


https://github.com/godotengine/godot/assets/32321/6a6d82b8-aebf-41ff-b701-ce31f6428131


## On 4.2 it resets on reimport

https://github.com/godotengine/godot/assets/32321/c97597b7-1501-424a-a291-029cd07563b4

Will do more testing.
","2024-05-24T02:24:27Z",false,"COMMENTED"
"fire","MEMBER","I tested the broken cases. See video. It seems to resolve property reload bugs.

Didn't see anything obviously problematic.

The last attempt to introduce this fix created a signal. In this bugfix pull request we use `_nodes_scene_reimported` as the callback as a replacement.","2024-05-24T02:29:42Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-24T08:03:12Z",false,"COMMENTED"
"SaracenOne","MEMBER","","2024-05-26T04:06:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-27T15:06:34Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-27T15:07:23Z",false,"COMMENTED"
"SaracenOne","MEMBER","","2024-05-28T10:10:19Z",false,"COMMENTED"
"SaracenOne","MEMBER","","2024-05-28T10:11:29Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-28T13:21:04Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-28T13:22:27Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-28T13:22:55Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-28T15:43:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-28T16:12:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-23T09:14:18Z",false,"COMMENTED"
"ajreckof","MEMBER","","2024-05-23T09:17:31Z",false,"COMMENTED"
"KoBeWi","MEMBER","The issue suggests that 3D editor is doing something wrong with the selection.
This fix is safe though, so the cause can be investigated later.","2024-05-23T18:33:52Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-23T08:30:28Z",false,"APPROVED"
"Paulb23","MEMBER","","2024-06-07T19:48:33Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-10-02T12:07:37Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-05-22T16:54:53Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-05-22T23:30:00Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-05-23T13:38:08Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-05-23T13:53:19Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-05-23T15:41:10Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks good to me. This isn't a risky change, so we can sneak it in to 4.3. Fewer allocations is always better and this code gets called a lot","2024-05-23T15:41:41Z",false,"APPROVED"
"fire","MEMBER","I like it but curious if it makes a difference. I second waiting for performance profiles.","2024-05-22T22:16:07Z",false,"APPROVED"
"clayjohn","MEMBER","Looks good to me. Tested locally with a modified TPS demo with 256 player characters and 4 enemies. Tested with a i7-1165G7 (integrated GPU) with power profile set to ""High Performance"". 

In Master, my scene had a consistent 28-30 FPS (pretty consistently 29, but jumping to 30 or 28 for moment). 

With this PR I have a consistent 30-31 FPS (pretty consistently 30, but jumping to 31 for a moment)

_My demo scene (using 0.25 resolution scale to avoid GPU bottleneck_
![Screenshot from 2024-05-22 16-20-59](https://github.com/godotengine/godot/assets/16521339/04d98ca4-095d-4c74-8386-3ad49b649317)

_Master_
![Screenshot from 2024-05-22 16-22-54](https://github.com/godotengine/godot/assets/16521339/88985998-4760-4040-8d86-e4980028634c)

_This PR_
![Screenshot from 2024-05-22 16-20-45](https://github.com/godotengine/godot/assets/16521339/55865ff4-3f48-479f-9011-327eb9acb967)

As you can see, in both cases the frame time is not super consistent. So it is pretty difficult to be confident. At the same time, removing allocations is always a good thing, so I suggest we go ahead with this PR. 

","2024-05-22T23:28:49Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-05-23T07:33:29Z",false,"COMMENTED"
"lawnjelly","MEMBER","Agree this looks much better than before, whether or not it is massive bottleneck.

Also bear in mind sometimes it is worth having fixed size bitset class (e.g. by template, or passing in the data to use) to avoid dynamic allocation and use stack instead.","2024-05-23T07:43:11Z",false,"APPROVED"
"DarioSamo","CONTRIBUTOR","","2024-05-23T11:39:49Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-05-27T19:31:50Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-05-27T20:46:18Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-05-28T07:34:35Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-05-28T16:26:29Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-05-30T18:24:17Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-16T00:36:16Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-08-16T11:55:29Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-22T14:33:47Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-05-22T12:44:44Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","Anyways, the code looks nice and simple! Wayland/X11-side things look A-OK, but don't forget to also take into account bruvzg's review :)","2024-05-22T14:32:30Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-05-23T06:28:32Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

**Testing project:** [test_pr_92251.zip](https://github.com/godotengine/godot/files/15448335/test_pr_92251.zip)

![image](https://github.com/godotengine/godot/assets/180032/b779f6cf-16b9-41fd-9cb0-eb0fe5bf9466)","2024-05-26T17:17:34Z",false,"APPROVED"
"akien-mga","MEMBER","Not an expert, but looks ok to me.","2024-05-29T21:24:06Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-05-22T23:36:56Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-05-23T03:54:25Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-05-23T03:57:28Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-05-23T15:46:57Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-22T08:39:42Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-22T07:15:54Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-22T07:16:38Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-05-22T14:59:15Z",false,"COMMENTED"
"theraot","CONTRIBUTOR","","2024-05-28T07:28:00Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-28T14:21:29Z",false,"APPROVED"
"Faless","COLLABORATOR","This looks good, but I wonder if we should parse the fragment before the scheme.

As far as I understand RFC 3986 [section 3.5](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) and [Appendix A](https://www.rfc-editor.org/rfc/rfc3986#appendix-A) specify that the URL fragment can contain both `:` and `/` characters.

This means that the following URI is valid:

```
google.com/#goto=http://redirect_url/
```

But our current implementation will take the scheme as `google.com/#goto=http://`.","2024-09-27T10:36:09Z",false,"COMMENTED"
"Faless","COLLABORATOR","LGTM, nice work! :rocket: ","2024-09-28T13:43:43Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-22T10:00:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","Looks good generally, save for the documentation details and the addition of a dedicated method to the engine, especially to handle the single/double precision behavior","2024-05-22T10:07:54Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-22T10:16:25Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-22T10:16:29Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-22T10:16:33Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-22T10:16:36Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-22T10:16:41Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-22T10:16:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-22T10:18:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-22T10:18:53Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-22T10:18:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","Otherwise this looks good I believe, will need general approval and decision on the necessity, but looks good code wise

Would be appreciated if you also added tests for `expm1` but that's not necessary and can be added later

Edit: We can also consider binding `expm1` to scripting down the line as well, but out of scope for this IMO","2024-05-22T10:20:26Z",false,"APPROVED"
"ubitux","NONE","","2024-05-22T10:22:01Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-22T10:22:04Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-05-27T08:05:14Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-27T09:36:45Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-27T10:10:54Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-05-27T11:44:49Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-27T11:50:01Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-27T11:51:11Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-27T18:56:24Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-27T18:56:34Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-27T21:33:42Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-27T23:07:11Z",false,"COMMENTED"
"ubitux","NONE","","2024-05-28T00:43:37Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, this doesn't appear to be independent of FPS (or physics tick rate for things in `_physics_process()`).

I've changed the Voxel demo to make use of `move_toward_smooth()` for FPS-independent smoothing. The project below uses 120 physics ticks per second;¬†if you change it to 30 in the project settings, notice how player movement acceleration becomes much slower (while it should remain just as fast). Try creating a flat world in the project so you can test this more easily.

The player movement code is in `player/player.gd`. You can check the original demo here: https://github.com/godotengine/godot-demo-projects/tree/master/3d/voxel

**Testing project:** [voxel_move_toward_smooth.zip](https://github.com/user-attachments/files/15749798/voxel_move_toward_smooth.zip)
","2024-06-08T22:24:37Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-10-04T08:40:14Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-22T07:11:54Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-22T07:10:34Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-23T19:02:29Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-22T06:40:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-29T21:11:49Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-21T21:26:23Z",false,"COMMENTED"
"fire","MEMBER","ü´∂ ","2024-05-21T21:26:59Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me.

~I'll merge after beta 1 just in case some difference in order of initialization introduce unexpected breakage.~

*Edit:* Actually YOLO, beta 1 will likely only be on Monday so we have time to test such a (seemingly) benign change.","2024-05-21T21:30:23Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-25T10:31:19Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-25T10:32:48Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-25T10:34:14Z",false,"COMMENTED"
"semensanyok","CONTRIBUTOR","","2024-05-25T10:52:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-25T11:00:13Z",false,"COMMENTED"
"semensanyok","CONTRIBUTOR","","2024-05-25T11:10:20Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-25T11:16:00Z",false,"COMMENTED"
"semensanyok","CONTRIBUTOR","","2024-05-25T11:19:52Z",false,"COMMENTED"
"semensanyok","CONTRIBUTOR","","2024-05-25T11:21:51Z",false,"COMMENTED"
"semensanyok","CONTRIBUTOR","","2024-05-25T11:21:57Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-25T11:31:54Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-25T12:12:26Z",false,"APPROVED"
"semensanyok","CONTRIBUTOR","","2024-05-25T13:40:32Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-05-28T06:46:50Z",false,"COMMENTED"
"EspeuteClement","CONTRIBUTOR","","2024-05-28T07:04:39Z",false,"COMMENTED"
"rburing","MEMBER","Thanks!","2024-07-07T16:24:59Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-05-21T19:25:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-21T21:09:15Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally with all rendering methods (rebased on top of `master` 25ff1306d62b8eb0487608b2a9bed0644e2fce17), it works as expected. The rationale makes sense to me.

**Testing project:** [test_ambient_disabled.zip](https://github.com/user-attachments/files/15962939/test_ambient_disabled.zip)

Before | After *(this PR)*
-|-
![Before](https://github.com/godotengine/godot/assets/180032/a1b567cd-f1a1-4ff8-80f9-a923e0448481) | ![After](https://github.com/godotengine/godot/assets/180032/66bf1d67-cc02-44a7-93d4-7ddee6f33342)","2024-06-25T00:47:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-21T16:48:06Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-05-21T19:19:02Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-23T21:16:45Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","Probably not suitable long-term, but as a stopgap solution it does what it needs to do.","2024-05-21T15:24:42Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-05-27T10:41:57Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-30T09:27:21Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me, pending minor change suggested by Pedro.","2024-05-30T09:27:33Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks!

I'm able to reproduce the issue, and this PR fixes it. The code looks good to me.

Hopefully, this is the last bug we have to fix in this logic! :-)","2024-05-21T14:35:49Z",false,"APPROVED"
"fire","MEMBER","","2024-05-21T15:55:12Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-08-06T11:03:35Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-06T12:43:55Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-09-03T12:29:13Z",false,"CHANGES_REQUESTED"
"Arnklit","CONTRIBUTOR","","2024-09-03T15:17:16Z",false,"COMMENTED"
"fire","MEMBER","","2024-09-03T15:47:04Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-09-03T15:49:42Z",false,"COMMENTED"
"Arnklit","CONTRIBUTOR","","2024-09-03T15:59:38Z",false,"COMMENTED"
"fire","MEMBER","","2024-09-03T16:05:26Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-05-21T21:38:52Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-05-21T21:39:33Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-05-21T21:41:38Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-05-21T21:46:41Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-05-25T18:23:51Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Docs are completely fine if I may add.","2024-06-10T13:58:19Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-21T11:32:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-21T11:33:15Z",false,"APPROVED"
"fire","MEMBER","","2024-05-21T15:57:31Z",false,"APPROVED"
"fire","MEMBER","","2024-05-22T21:46:27Z",false,"APPROVED"
"groud","MEMBER","","2024-05-21T09:02:51Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-21T09:03:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-21T09:05:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-21T09:08:47Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-21T09:08:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-21T09:34:34Z",false,"APPROVED"
"akien-mga","MEMBER","I still think we should have made the default OFF in the editor, and enabled it where we want it, instead of playing whack-a-mole with unexpected translations ;)","2024-05-21T08:18:27Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-12T14:29:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-21T08:26:32Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-21T12:07:39Z",false,"CHANGES_REQUESTED"
"Gerfalerf","NONE","","2024-05-21T15:55:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-21T16:04:43Z",false,"COMMENTED"
"Gerfalerf","NONE","","2024-05-21T16:40:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-21T16:41:36Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-21T19:23:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-21T19:57:08Z",false,"COMMENTED"
"Gerfalerf","NONE","","2024-05-21T21:41:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-22T07:26:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-22T08:29:47Z",false,"COMMENTED"
"Gerfalerf","NONE","","2024-05-22T15:19:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-22T15:25:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-22T15:12:31Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-22T15:15:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-22T16:03:44Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","I just tested if this fixes issue https://github.com/godotengine/godot/issues/82278 (using the MRP from issue https://github.com/godotengine/godot/issues/89662) and it does! (I've updated the description to add that issue)

Other than a small issue in a comment, the code changes look good to me!","2024-05-21T15:10:38Z",false,"APPROVED"
"clayjohn","MEMBER","I agree this has gotten quite ugly. We should probably reorganize at some point, but this change is fine for now","2024-05-21T16:11:26Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","","2024-05-22T00:09:45Z",false,"COMMENTED"
"fire","MEMBER","The feature enhancement sounds great. Not done any technical testing.","2024-05-21T04:11:13Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-21T08:46:31Z",false,"APPROVED"
"clayjohn","MEMBER","This looks good as a stopgap measure to help memory usage. That being said, I'm not sure how much of a challenge it would be to modify `webp_lossless_packer` to pack all mip levels from an image. 

It seems to me the trouble comes from the fact that `WebPCommon::_webp_lossless_pack` only operates on the base mip level. So we end up copying the same memory several times:
1. Our base image (fully in memory before compression)
2. 1 copy of each mip level
3. WebP creates 2 copies of each mip level at one point. 
4. WebP creates and returns 1 copy (this only overlaps with one of the previous copies)

Accordingly, we are keeping 1 copy of the entire image and 4 copies of each mip level in turn. This PR removes number 2 for the base mip level (which accounts for the most memory usage) but leaves the other levels alone. If we could extend `_webp_lossless_pack` to take a a specific mip level (or handle all mip levels) then we could remove 2 altogether and have a max of 3 copies at a time. 

That being said, I think what I describe above is future work, as it will require some refactoring and will have less of an impact than what you have already done. 

","2024-05-22T00:43:12Z",false,"APPROVED"
"akien-mga","MEMBER","Couldn't get reviews in a timely manner, but since this fixes a regression, I'll yolo merge and we'll see if anything breaks (and be prepared to revert this if it's problematic).","2024-06-18T14:13:43Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-05-20T22:08:35Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-05-20T22:15:29Z",false,"COMMENTED"
"emrekultursay","CONTRIBUTOR","","2024-05-20T22:52:28Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","Looks good!

Can you squash the commits into one so the PR is ready for merging (https://docs.godotengine.org/en/stable/contributing/workflow/pr_workflow.html#the-interactive-rebase)","2024-05-20T22:57:28Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Looks good!","2024-05-21T01:54:06Z",false,"APPROVED"
"groud","MEMBER","","2024-05-21T09:21:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-21T06:30:02Z",false,"APPROVED"
"groud","MEMBER","Looks good to me.

","2024-05-21T09:19:44Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-20T21:18:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-19T16:52:27Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-19T16:53:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-19T16:54:02Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-19T16:56:04Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-19T17:00:56Z",false,"COMMENTED"
"aqfranco","CONTRIBUTOR","","2024-06-22T22:38:12Z",false,"COMMENTED"
"KoBeWi","MEMBER","More code bloat in Tree üò¨
The feature and implementation look fine though.

Not sure about tests.","2024-06-24T16:05:54Z",false,"APPROVED"
"lawnjelly","MEMBER","This looks great from a quick look.

The `FileAccess` classes were a mess and moving everything possible to base classes, and simplifying the derived classes makes sense imo (providing there are no downsides in some of the more esoteric versions like zip).

Could do with a secondary review and obviously lots of testing.

This is something I would like to do in 3.x too, along with adding caching in the wrapper, which speeds up loading by 2-3x in practice (OS caching doesn't appear very good in my tests when I last looked at this).","2024-06-08T10:12:08Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","The Android logic looks good, and from a quick round of testing, it doesn't seem to introduce any regressions on Android.","2024-06-08T15:49:00Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-05-20T16:46:18Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-21T06:44:33Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-05-21T09:18:26Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-05-21T09:19:40Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-21T09:20:10Z",false,"APPROVED"
"DarioSamo","CONTRIBUTOR","","2024-05-21T12:04:53Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-23T18:46:39Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-05-23T20:13:22Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-26T13:17:19Z",false,"APPROVED"
"kus04e4ek","CONTRIBUTOR","","2024-05-20T15:10:43Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-05-20T15:12:10Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-05-20T15:51:12Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-21T06:27:41Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-20T09:38:21Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-20T09:46:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-20T14:51:41Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-05-20T17:43:02Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-21T09:00:09Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-20T08:52:37Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-20T08:11:40Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-05-20T08:19:46Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-20T14:44:09Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-20T08:12:59Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-05-20T17:37:16Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-20T06:28:30Z",false,"APPROVED"
"KoBeWi","MEMBER","Code looks ok.","2024-05-28T09:42:45Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-05-20T13:49:47Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-05-20T23:49:36Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-05-20T23:54:27Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-21T13:54:46Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","I'm able to reproduce the issue (the `OpenXR: Unable to update the swapchain [ XR_ERROR_HANDLE_INVALID ]` error appearing) and using this PR fixes it!

The code changes look good to me.","2024-05-21T15:30:37Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-20T07:39:12Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-20T08:03:47Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-20T08:03:56Z",false,"COMMENTED"
"Maran23","CONTRIBUTOR","","2024-05-20T09:33:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-20T10:18:51Z",false,"APPROVED"
"KoBeWi","MEMBER","You should define the shortcut once and use ED_GET_SHORTCUT.","2024-05-21T19:21:35Z",false,"CHANGES_REQUESTED"
"KoBeWi","MEMBER","Will conflict with #92223","2024-05-21T22:36:17Z",false,"APPROVED"
"QbieShay","CONTRIBUTOR","","2024-05-22T13:34:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-29T21:03:20Z",false,"APPROVED"
"raulsntos","MEMBER","Thank you again for doing all this work!

This is only a partial review, I still have to review the massive `scoped` changes but I thought it'd be better to comment on the parts I've already reviewed than to keep you waiting until I'm done with everything.","2024-06-24T04:24:42Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-06-24T04:37:40Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-06-24T04:49:50Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-06-24T04:51:32Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-06-24T05:10:51Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-06-26T06:10:05Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-06-26T07:00:57Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-08-19T14:08:59Z",false,"COMMENTED"
"clayjohn","MEMBER","Using `sqrt_IEEE_int_approximation` carefully seems like a nice improvement, but I am unsure about the changes to the GGX functions. We carefully selected those variants of the GGX approximation because there were so cheap. Your new versions appear to produce way more instructions (I assume they are more accurate as a result). (see for some history https://github.com/godotengine/godot/pull/51716)

The Filament docs have a good explanation for why we use the optimized V_GGX instead of the more correct term. https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/geometricshadowing(specularg)

","2024-05-20T20:45:05Z",false,"COMMENTED"
"rainydaysavings","NONE","","2024-05-21T08:30:19Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-21T08:49:13Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-05-21T15:53:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-23T08:42:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-23T08:42:52Z",false,"APPROVED"
"ckaiser","CONTRIBUTOR","","2024-05-23T11:02:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-23T11:08:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-20T17:19:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-20T17:20:19Z",false,"COMMENTED"
"fire","MEMBER","We're not able to do a good review. We trust Tokage.","2024-05-28T17:59:15Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","Makes sense! Definitely improves readability :D","2024-05-21T19:23:17Z",false,"APPROVED"
"Eoin-ONeill-Yokai","CONTRIBUTOR","This looks great. It certainly helps the readability of the flags section for platform code. ","2024-05-21T21:54:18Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-22T06:16:23Z",false,"APPROVED"
"akien-mga","MEMBER","Looks great!","2024-05-22T18:59:11Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Seems fine by me, but I wonder if this is more of a fault of the docs and if they could make it even more explicit.","2024-07-05T22:50:06Z",false,"APPROVED"
"raulsntos","MEMBER","Changes to parameter names break source compatibility in C# because the call-site could be using named parameters, but since these are virtual methods and aren't meant to be called from scripting, then I don't think this matters.

So regarding C# compat, I think the change is fine :+1: 
","2024-07-06T17:54:23Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Although I'd be more in favour of correcting the ""Prints"" statement, this is correct, too. Thank you for cleaning after me.","2024-06-08T19:13:20Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-06-09T00:50:58Z",false,"COMMENTED"
"mart3323","CONTRIBUTOR","","2024-06-09T12:13:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-10T11:30:15Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-10T11:30:24Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-10T11:32:31Z",false,"APPROVED"
"Calinou","MEMBER","Looks good to me. This is how it looks in action:

![image](https://github.com/godotengine/godot/assets/180032/cce7049e-6aff-4770-a121-788fd6b0fdbc)
","2024-05-19T21:11:43Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-19T11:20:23Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-30T20:19:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-19T10:50:53Z",false,"APPROVED"
"akien-mga","MEMBER","Yolo.","2024-07-01T11:19:37Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-19T07:18:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-30T07:21:49Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-30T07:22:12Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-30T07:23:34Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-30T10:57:44Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-08-30T10:58:46Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-03T11:21:21Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

One strange thing I noticed though is that when you set particle seed mode to **Random** then restart particle emission, the seed is changed to a random value which you can see after changing it back to **Custom**. This makes sense, but this seed is always capped to 1 million due to the inspector hint:

![image](https://github.com/godotengine/godot/assets/180032/b70dbe62-a3d3-41fb-8357-3a02151dacb5)

See the second suggestion below which aims to address this.

PS: Are there any plans to expose a high-level GPUParticles3D property that allows for easy seeking, without needing a custom script? I assume this would need to force speed scale to be 0 though (like AnimationPlayer's **Manual** process mode).","2024-05-19T21:35:36Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-05-19T21:36:30Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-05-19T21:37:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-08T09:26:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-08T13:17:59Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-08T13:18:36Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-08T13:38:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-08T13:51:47Z",false,"COMMENTED"
"QbieShay","CONTRIBUTOR","","2024-08-12T10:16:53Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-18T20:10:46Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/39fc116c5fed3a434aa35087a87d58d518b1033a), it works as expected.

Before | After
-|-
![image](https://github.com/user-attachments/assets/96d36aa0-2719-478c-b273-df477346d28a) | ![image](https://github.com/user-attachments/assets/48eaafd9-02e1-4009-8ef8-c704374bf4a6)

<details>
<summary>Code used in the screenshots</summary>

```gdscript
extends Node2D

signal _int(int)
signal _int2(int: int)

var _bool: bool = false


func bool(_bool: bool) -> bool:
	_int.emit(1)
	_int2.emit(2)
	return _bool


func _ready() -> void:
	var _float = func float(_float: float) -> float: return _float
	bool(_bool)
```
</details>","2024-08-12T18:21:23Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-12T18:33:44Z",false,"COMMENTED"
"ckaiser","CONTRIBUTOR","","2024-08-13T04:58:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-18T14:20:08Z",false,"COMMENTED"
"Nodragem","CONTRIBUTOR","","2024-05-18T15:19:24Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-18T16:19:07Z",false,"COMMENTED"
"timothyqiu","MEMBER","* Dropping a Texture in the 2D editor is missing the messages about holding Shift and holding Alt.
* When dropping multiple types of file, the messages about modifier keys are also missing.
* There're cases where the message says ""Dropping a A, B, or C"". It feels wrong because we can definitely tell whether it's A, B, or C in code.","2024-09-20T11:12:27Z",false,"CHANGES_REQUESTED"
"clayjohn","MEMBER","","2024-05-20T19:05:30Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-05-20T19:04:57Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-18T10:25:30Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-18T14:53:18Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-05-18T07:06:33Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-05-18T07:07:44Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-05-18T07:08:20Z",false,"COMMENTED"
"clayjohn","MEMBER","This looks good. The problem comes from here where we define diffuse_buffer to be frag_color:
https://github.com/godotengine/godot/blob/bb342cb55c119d82969f34fea1e5641961c2786a/drivers/gles3/shaders/scene.glsl#L927

So the main output of the shader ultimately writes to frag_color (our intermediate color value). Accordingly, we need to assign it to frag_color_final outside the branch","2024-05-20T18:08:29Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","This makes sense to me.

`Engine` is created before `initialize_modules(MODULE_INITIALIZATION_LEVEL_CORE)`, so it would make sense that it's deleted after `uninitialize_modules(MODULE_INITIALIZATION_LEVEL_CORE)`, since we want to clean things up in basically the reverse order that we created them.","2024-05-17T20:53:57Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-05-17T19:12:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-17T20:50:35Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-05-17T18:50:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-17T07:52:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-17T08:59:59Z",false,"APPROVED"
"akien-mga","MEMBER","Tested successfully on Linux, Fedora 40 KDE on Wayland.
Tested X11 (multi and single window mode) and Wayland (single window mode) display servers.","2024-05-17T09:55:16Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-17T10:58:19Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-17T09:00:05Z",false,"APPROVED"
"vnen","MEMBER","LGTM","2024-05-18T20:06:29Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me!","2024-05-17T09:13:09Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","ProjectSettings documentation for the warning still says ""has no effect on surrounding code"", should be adjusted as well. (Same for standalone ternary it seems)","2024-05-17T05:39:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM","2024-05-17T08:02:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-23T19:41:53Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-05-23T21:02:35Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-24T17:14:43Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-05-24T17:29:24Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-24T17:52:38Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Not sure how to feel about several things:
- Back in 4.0 alpha, a PR was closed which pretty much would've done this (see https://github.com/godotengine/godot/pull/65549#issuecomment-1252359661 for reasoning). Years have passed and opinions may have changed, but have they, and why?
- I don't think the new `draw_background` and `draw_outline` are necessary. On the surface, the same effect can be achieved by setting them to a fully transparent **Color**, which is pretty trivial to do both in the editor and in code.
    - I've never seen anyone request `draw_background`, but I may be completely mistaken.
- ""_Outline_"" VS. ""_line_"", I am not sure which is true here.
""Outline"" implies it's being drawn _outside of the edges_, but I assume that the line is actually drawn covering the edges and expanding both inside and outside.
- Because `antialiased` and negative `line_width` are undesirable together, and I can easily see an user pressing buttons until something looks nice, a configuration warning could be nice.
- All the new documentation descriptions are welcome of course, but they're a bit rough. One thing at the time.","2024-06-27T07:21:00Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-29T00:11:13Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-29T00:12:28Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-29T00:14:01Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","This is fine in my opinion, but that cursor thing should be reported and solved separately as it feels unrelated to this PR.","2024-06-23T19:34:27Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-16T12:51:50Z",false,"COMMENTED"
"akien-mga","MEMBER","CC @Repiteo","2024-05-16T12:17:23Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","Only tested this in `--all-files` contexts, so never noticed this quirk; great catch!","2024-05-16T13:34:05Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-16T09:52:44Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-05-16T09:59:18Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-05-16T09:59:27Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-16T10:00:28Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-05-16T10:03:43Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-05-16T10:16:00Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-05-16T10:32:28Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-05-16T11:03:25Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-16T13:35:58Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-16T13:36:45Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-16T13:37:16Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-05-16T14:18:12Z",false,"COMMENTED"
"TokageItLab","MEMBER","For now, I think it is fine about this fix. My only concern for now about remove immutable tracks is:

> However, apart from this, I am wondering if the past remove immutable tracks are dead code due to the https://github.com/godotengine/godot/pull/90064 change, are they still being used for something other than Skeleton?

If we need it for something other than Skeleton, we need to consider whether that code can be commonized with what we added in #90064.

P.S. BTW, I will send another proposal later for bones which have own scales.","2024-05-16T14:23:54Z",false,"APPROVED"
"fire","MEMBER","","2024-05-16T18:33:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-16T11:01:54Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-16T09:13:25Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-17T09:31:58Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-17T19:55:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-17T20:08:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-17T20:11:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-17T20:55:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-17T20:57:20Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-17T21:03:57Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-17T21:34:05Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-17T21:38:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-17T21:51:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-17T21:53:16Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-05-18T01:19:33Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-05-18T01:26:18Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-05-18T05:43:24Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-05-18T06:41:47Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-05-18T08:33:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-18T08:36:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-19T11:54:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-19T12:07:51Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-05-19T12:11:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-19T12:13:04Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-05-19T08:14:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-19T11:00:11Z",false,"COMMENTED"
"GrahameGW","CONTRIBUTOR","","2024-05-19T16:56:27Z",false,"COMMENTED"
"GrahameGW","CONTRIBUTOR","","2024-05-19T16:58:54Z",false,"COMMENTED"
"GrahameGW","CONTRIBUTOR","","2024-05-19T17:15:00Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Keep in mind most of us are doing this in our free time, too üòâ","2024-07-30T14:46:12Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected on https://github.com/godotengine/godot-demo-projects/tree/master/3d/platformer in all rendering methods.

*Master (Forward+): N/A*

<details>
<summary>This PR (Forward+)</summary>

 **Resource Path** | Type | Format | Usage 
---|---|---|---
 **res://stage/panorama.webp** | Texture | 2048x1024x1 RGBA8 | 10.66 MiB 
 **Render Target (Internal)** | Texture | 1152x648x1 RGB8 | 2.84 MiB 
 **Render Target (Internal)** | Texture | 1152x648x1 RGB8 | 2.84 MiB 
 &nbsp; | Texture | 512x512x1 LumAlpha8 | 682.6 KiB 
 &nbsp; | Texture | 512x512x1 LumAlpha8 | 682.6 KiB 
 **res://stage/tiles_albedo.webp** | Texture | 256x256x1 RGB8 | 255.9 KiB 
 **res://stage/tiles_rough.webp** | Texture | 256x256x1 RGB8 | 255.9 KiB 
 &nbsp; | Texture | 800x6x1 RGBA8 | 24.98 KiB 
 &nbsp; | Texture | 800x6x1 RGBA8 | 24.98 KiB 
 **res://stage/meshes/previews/wall.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/ramp.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/floor.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/floor_edge.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/floor_corner.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/corner_floor.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/wall_floor.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/wall_var.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/ceiling.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/corner_fixr.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://player/player.tscn::GradientTexture2D_kvc1x** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://player/controls/osb_right.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://player/controls/osb_left.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://player/controls/osb_down.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://player/controls/osb_up.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://coin/coin.tscn::GradientTexture2D_qhu5r** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/corner.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/ceiling_corner.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/tree_top.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/trunk_deco.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/trunk.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/trunk_floor.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/ceiling_wall.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/corner_fix.webp** | Texture | 64x64x1 DXT5 RGBA8 | 5.35 KiB 
 &nbsp; | Texture | 16x32x1 RGBA8 | 2.66 KiB 
 &nbsp; | Texture | 32x16x1 RGBA8 | 2.66 KiB 
 &nbsp; | Texture | 32x16x1 RGBA8 | 2.66 KiB 
 &nbsp; | Texture | 32x16x1 RGBA8 | 2.66 KiB 
 &nbsp; | Texture | 32x16x1 RGBA8 | 2.66 KiB 
 &nbsp; | Texture | 32x16x1 RGBA8 | 2.66 KiB 
 &nbsp; | Texture | 32x16x1 RGBA8 | 2.66 KiB 
 &nbsp; | Texture | 32x16x1 RGBA8 | 2.66 KiB 
 &nbsp; | Texture | 32x16x1 RGBA8 | 2.66 KiB 
 &nbsp; | Texture | 48x8x1 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 8x48x1 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 **res://particle.webp** | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 12x12x1 RGBA8 | 760 B 
 &nbsp; | Texture | 12x12x1 RGBA8 | 760 B 
 &nbsp; | Texture | 12x12x1 RGBA8 | 760 B 
 &nbsp; | Texture | 8x16x1 RGBA8 | 684 B 
 &nbsp; | Texture | 8x16x1 RGBA8 | 684 B 
 &nbsp; | Texture | 14x8x1 RGBA8 | 588 B 
 &nbsp; | Texture | 10x10x1 RGBA8 | 520 B 
 &nbsp; | Texture | 16x4x1 RGBA8 | 348 B 
 &nbsp; | Texture | 4x16x1 RGBA8 | 348 B 
 &nbsp; | Texture | 8x8x1 RGBA8 | 340 B 
 &nbsp; | Texture | 8x8x1 RGBA8 | 340 B 
</details>

___

*Master (Mobile): N/A*

<details>
<summary>This PR (Mobile)</summary>

 **Resource Path** | Type | Format | Usage 
---|---|---|---
 **res://stage/panorama.webp** | Texture | 2048x1024x1 RGBA8 | 10.66 MiB 
 **Render Target (Internal)** | Texture | 1152x648x1 RGB8 | 2.84 MiB 
 **Render Target (Internal)** | Texture | 1152x648x1 RGB8 | 2.84 MiB 
 &nbsp; | Texture | 512x512x1 LumAlpha8 | 682.6 KiB 
 &nbsp; | Texture | 512x512x1 LumAlpha8 | 682.6 KiB 
 **res://stage/tiles_albedo.webp** | Texture | 256x256x1 RGB8 | 255.9 KiB 
 **res://stage/tiles_rough.webp** | Texture | 256x256x1 RGB8 | 255.9 KiB 
 &nbsp; | Texture | 800x6x1 RGBA8 | 24.98 KiB 
 &nbsp; | Texture | 800x6x1 RGBA8 | 24.98 KiB 
 **res://stage/meshes/previews/wall.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/ramp.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/floor.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/floor_edge.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/floor_corner.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/corner_floor.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/wall_floor.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/wall_var.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/ceiling.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/corner_fixr.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://player/player.tscn::GradientTexture2D_kvc1x** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://player/controls/osb_right.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://player/controls/osb_left.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://player/controls/osb_down.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://player/controls/osb_up.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://coin/coin.tscn::GradientTexture2D_qhu5r** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/corner.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/ceiling_corner.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/tree_top.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/trunk_deco.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/trunk.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/trunk_floor.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/ceiling_wall.webp** | Texture | 64x64x1 RGBA8 | 21.33 KiB 
 **res://stage/meshes/previews/corner_fix.webp** | Texture | 64x64x1 DXT5 RGBA8 | 5.35 KiB 
 &nbsp; | Texture | 16x32x1 RGBA8 | 2.66 KiB 
 &nbsp; | Texture | 32x16x1 RGBA8 | 2.66 KiB 
 &nbsp; | Texture | 32x16x1 RGBA8 | 2.66 KiB 
 &nbsp; | Texture | 32x16x1 RGBA8 | 2.66 KiB 
 &nbsp; | Texture | 32x16x1 RGBA8 | 2.66 KiB 
 &nbsp; | Texture | 32x16x1 RGBA8 | 2.66 KiB 
 &nbsp; | Texture | 32x16x1 RGBA8 | 2.66 KiB 
 &nbsp; | Texture | 32x16x1 RGBA8 | 2.66 KiB 
 &nbsp; | Texture | 32x16x1 RGBA8 | 2.66 KiB 
 &nbsp; | Texture | 48x8x1 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 8x48x1 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 **res://particle.webp** | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 16x16x1 RGBA8 | 1.33 KiB 
 &nbsp; | Texture | 12x12x1 RGBA8 | 760 B 
 &nbsp; | Texture | 12x12x1 RGBA8 | 760 B 
 &nbsp; | Texture | 12x12x1 RGBA8 | 760 B 
 &nbsp; | Texture | 8x16x1 RGBA8 | 684 B 
 &nbsp; | Texture | 8x16x1 RGBA8 | 684 B 
 &nbsp; | Texture | 14x8x1 RGBA8 | 588 B 
 &nbsp; | Texture | 10x10x1 RGBA8 | 520 B 
 &nbsp; | Texture | 16x4x1 RGBA8 | 348 B 
 &nbsp; | Texture | 4x16x1 RGBA8 | 348 B 
 &nbsp; | Texture | 8x8x1 RGBA8 | 340 B 
 &nbsp; | Texture | 8x8x1 RGBA8 | 340 B 
</details>

___

<details>
<summary>Master (Compatibility)</summary>

 **Resource Path** | Type | Format | Usage 
---|---|---|---
 **res://stage/panorama.webp** | Texture | 2048x1024 RGBA8 | 10.66 MiB 
 &nbsp; | Texture | 512x512 LumAlpha8 | 512.0 KiB 
 &nbsp; | Texture | 512x512 LumAlpha8 | 512.0 KiB 
 **res://stage/tiles_albedo.webp** | Texture | 256x256 RGB8 | 255.9 KiB 
 **res://stage/tiles_rough.webp** | Texture | 256x256 RGB8 | 255.9 KiB 
 &nbsp; | Texture | 800x6 RGBA8 | 18.75 KiB 
 &nbsp; | Texture | 800x6 RGBA8 | 18.75 KiB 
 **res://stage/meshes/previews/ceiling_wall.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/wall.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/ramp.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/floor.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/floor_edge.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/floor_corner.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/corner_floor.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/wall_floor.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/wall_var.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/ceiling.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/corner_fixr.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/trunk_floor.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/trunk.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/trunk_deco.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/tree_top.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/ceiling_corner.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/corner.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 &nbsp; | Texture | 64x64 RGBA8 | 16.00 KiB 
 &nbsp; | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://player/controls/osb_up.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://player/controls/osb_down.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://player/controls/osb_right.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://player/controls/osb_left.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/corner_fix.webp** | Texture | 64x64 DXT5 RGBA8 | 5.35 KiB 
 &nbsp; | Texture | 32x16 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 32x16 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 32x16 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 32x16 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 32x16 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 32x16 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 32x16 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 32x16 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 16x32 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 8x48 RGBA8 | 1.50 KiB 
 &nbsp; | Texture | 48x8 RGBA8 | 1.50 KiB 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 **res://particle.webp** | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 12x12 RGBA8 | 576 B 
 &nbsp; | Texture | 12x12 RGBA8 | 576 B 
 &nbsp; | Texture | 12x12 RGBA8 | 576 B 
 &nbsp; | Texture | 8x16 RGBA8 | 512 B 
 &nbsp; | Texture | 8x16 RGBA8 | 512 B 
 &nbsp; | Texture | 14x8 RGBA8 | 448 B 
 &nbsp; | Texture | 10x10 RGBA8 | 400 B 
 &nbsp; | Texture | 16x4 RGBA8 | 256 B 
 &nbsp; | Texture | 4x16 RGBA8 | 256 B 
 &nbsp; | Texture | 8x8 RGBA8 | 256 B 
 &nbsp; | Texture | 8x8 RGBA8 | 256 B 
 &nbsp; | Texture | 4x4 RGBA8 | 256 B 
 &nbsp; | Texture | 4x4 RGBA8 | 256 B 
 &nbsp; | Texture | 4x4 RGBA8 | 84 B 
 &nbsp; | Texture | 4x4 RGBA8 | 84 B 
 &nbsp; | Texture | 4x4 RGBA8 | 84 B 
 &nbsp; | Texture | 4x4 RGBA8 | 84 B 
 &nbsp; | Texture | 4x4 RGBA8 | 84 B 
 &nbsp; | Texture | 4x4 RGBA8 | 84 B 
 &nbsp; | Texture | 4x4 RGBA8 | 84 B 
 &nbsp; | Texture | 4x4 RGBA8 | 84 B 
 &nbsp; | Texture | 0x0 RGBA8 | 0 B 
 &nbsp; | Texture | 0x0 RGBA8 | 0 B 
 &nbsp; | Texture | 1152x648 RGBA8 | 0 B 
 &nbsp; | Texture | 0x0 Red8 | 0 B 
</details>

<details>
<summary>This PR (Compatibility)</summary>

 **Resource Path** | Type | Format | Usage 
---|---|---|---
 **res://stage/panorama.webp** | Texture | 2048x1024 RGBA8 | 10.66 MiB 
 &nbsp; | Texture | 512x512 LumAlpha8 | 512.0 KiB 
 &nbsp; | Texture | 512x512 LumAlpha8 | 512.0 KiB 
 **res://stage/tiles_albedo.webp** | Texture | 256x256 RGB8 | 255.9 KiB 
 **res://stage/tiles_rough.webp** | Texture | 256x256 RGB8 | 255.9 KiB 
 &nbsp; | Texture | 800x6 RGBA8 | 18.75 KiB 
 &nbsp; | Texture | 800x6 RGBA8 | 18.75 KiB 
 **res://stage/meshes/previews/ceiling_wall.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/wall.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/ramp.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/floor.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/floor_edge.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/floor_corner.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/corner_floor.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/wall_floor.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/wall_var.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/ceiling.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/corner_fixr.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/trunk_floor.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/trunk.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/trunk_deco.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/tree_top.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/ceiling_corner.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/corner.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://player/player.tscn::GradientTexture2D_kvc1x** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://coin/coin.tscn::GradientTexture2D_qhu5r** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://player/controls/osb_up.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://player/controls/osb_down.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://player/controls/osb_right.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://player/controls/osb_left.webp** | Texture | 64x64 RGBA8 | 16.00 KiB 
 **res://stage/meshes/previews/corner_fix.webp** | Texture | 64x64 DXT5 RGBA8 | 5.35 KiB 
 &nbsp; | Texture | 32x16 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 32x16 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 32x16 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 32x16 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 32x16 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 32x16 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 32x16 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 32x16 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 16x32 RGBA8 | 2.00 KiB 
 &nbsp; | Texture | 8x48 RGBA8 | 1.50 KiB 
 &nbsp; | Texture | 48x8 RGBA8 | 1.50 KiB 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 **res://particle.webp** | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 16x16 RGBA8 | 1024 B 
 &nbsp; | Texture | 12x12 RGBA8 | 576 B 
 &nbsp; | Texture | 12x12 RGBA8 | 576 B 
 &nbsp; | Texture | 12x12 RGBA8 | 576 B 
 &nbsp; | Texture | 8x16 RGBA8 | 512 B 
 &nbsp; | Texture | 8x16 RGBA8 | 512 B 
 &nbsp; | Texture | 14x8 RGBA8 | 448 B 
 &nbsp; | Texture | 10x10 RGBA8 | 400 B 
 &nbsp; | Texture | 16x4 RGBA8 | 256 B 
 &nbsp; | Texture | 4x16 RGBA8 | 256 B 
 &nbsp; | Texture | 8x8 RGBA8 | 256 B 
 &nbsp; | Texture | 8x8 RGBA8 | 256 B 
 &nbsp; | Texture | 4x4x4 RGBA8 | 256 B 
 &nbsp; | Texture | 4x4x4 RGBA8 | 256 B 
 &nbsp; | Texture | 4x4 RGBA8 | 84 B 
 &nbsp; | Texture | 4x4 RGBA8 | 84 B 
 &nbsp; | Texture | 4x4 RGBA8 | 84 B 
 &nbsp; | Texture | 4x4 RGBA8 | 84 B 
 &nbsp; | Texture | 4x4 RGBA8 | 84 B 
 &nbsp; | Texture | 4x4 RGBA8 | 84 B 
 &nbsp; | Texture | 4x4 RGBA8 | 84 B 
 &nbsp; | Texture | 4x4 RGBA8 | 84 B 
 &nbsp; | Texture | 0x0 RGBA8 | 0 B 
 &nbsp; | Texture | 0x0 RGBA8 | 0 B 
 &nbsp; | Texture | 1152x648 RGBA8 | 0 B 
 &nbsp; | Texture | 0x0 Red8 | 0 B 
</details>","2024-05-16T00:11:14Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

**Testing project:** [RichTextLabelHintTestGdscript.zip](https://github.com/user-attachments/files/15597362/RichTextLabelHintTestGdscript.zip)
(This is the MRP from #91984 converted to GDScript, so you don't need a C# build to run it.)

### Before

https://github.com/godotengine/godot/assets/180032/dcbb919c-2a25-48d5-9203-43013d16db57

### After *(this PR)*

https://github.com/godotengine/godot/assets/180032/88e3be82-7eca-4377-b4a9-e3db74cbfdb8

","2024-06-05T22:32:34Z",false,"APPROVED"
"raulsntos","MEMBER","LGTM. Thanks!","2024-05-16T03:04:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-15T19:28:26Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-16T14:11:43Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-05-16T20:45:00Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-15T19:12:49Z",false,"APPROVED"
"clayjohn","MEMBER","Looks good to me","2024-05-15T18:15:17Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-15T15:52:46Z",false,"COMMENTED"
"passivestar","CONTRIBUTOR","","2024-05-15T15:53:18Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, this doesn't appear to do much against the seams in the Global Illumination demo project:

Before | After *(this PR)*
-|-
![Screenshot_20240515_185503](https://github.com/godotengine/godot/assets/180032/44ad9bb1-e7dd-4f72-9a3d-d05d9c6634cf) | ![Screenshot_20240515_190512](https://github.com/godotengine/godot/assets/180032/34162618-0681-4b5d-8f2d-02554ae0f414)

**Testing project:** [global_illumination.zip](https://github.com/godotengine/godot/files/15324761/global_illumination.zip) (bake the *LightmapGIAll* node)
","2024-05-15T17:07:05Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great for a Yolo merge before Beta. 

For context, that code block swaps all the other properties, so the change makes intuitive sense and the results speak for themselves","2024-05-15T17:41:53Z",false,"APPROVED"
"fire","MEMBER","","2024-05-15T17:58:13Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-15T18:07:28Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-19T13:32:27Z",false,"COMMENTED"
"ra314","CONTRIBUTOR","","2024-05-19T13:52:43Z",false,"COMMENTED"
"ra314","CONTRIBUTOR","","2024-05-19T13:54:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-19T14:00:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-19T14:01:12Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-15T14:52:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-16T21:34:03Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-05-16T07:22:46Z",false,"COMMENTED"
"lalitshankarchowdhury","CONTRIBUTOR","","2024-05-16T09:06:59Z",false,"COMMENTED"
"lalitshankarchowdhury","CONTRIBUTOR","","2024-05-16T09:07:49Z",false,"COMMENTED"
"bruvzg","MEMBER","Please squash your commits, see [pull request workflow](https://docs.godotengine.org/en/latest/contributing/workflow/pr_workflow.html#the-interactive-rebase).","2024-05-16T09:14:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-15T10:11:22Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-15T10:31:25Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-15T10:56:39Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it mostly works as expected.

**Testing project:** [test_pr_91973.zip](https://github.com/godotengine/godot/files/15328084/test_pr_91973.zip)

I suggest adding property hints to the ring properties, as right now, you can drag them towards negative values, which doesn't make sense.

![image](https://github.com/godotengine/godot/assets/180032/1f53e706-3241-47a1-8728-d700221403f4)

The angle in particular should be clamped between `0.0` and `180.0`, and the `degrees` inspector property hint should be used (see Node2D's `rotation` property for an example). All properties (except cone angle) should have `or_greater`, so you can input values as large as you might need.

Emission Height, Radius and Inner Radius should be limited to positive values as well, as strange things can happen if you use negative values:

https://github.com/godotengine/godot/assets/180032/d0db0757-4de8-4500-b9d3-5031d10ab9a7

https://github.com/godotengine/godot/assets/180032/1394d96d-72ec-4261-b250-69b1e39ac940

The angle property feels a bit strange, as the cone already has a starting angle of 0 degrees when the value is about 45 in the inspector:

https://github.com/godotengine/godot/assets/180032/053cbe54-a591-4884-994e-453bb4a4cde6
","2024-05-16T00:28:31Z",false,"CHANGES_REQUESTED"
"Mickeon","CONTRIBUTOR","Documentation itself is fine if that was of any concern.","2024-07-09T15:28:27Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of 26d1577f3985363faab48a65e9a0d9eed0e26d86 with ""Accept incoming"" chosen during rebase), it works as expected for both CPU and GPU particles. The new behavior (with the effective angle clamped if the end of the cone is reached) makes sense.

Code looks good to me.","2024-07-09T18:28:11Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-09T18:30:13Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-09T18:30:17Z",false,"COMMENTED"
"Arnklit","CONTRIBUTOR","","2024-07-15T15:53:22Z",false,"COMMENTED"
"Arnklit","CONTRIBUTOR","","2024-07-15T15:53:28Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-15T16:34:32Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-15T09:37:25Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-15T09:40:57Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-05-15T09:49:00Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-05-15T09:51:19Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-15T10:01:29Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-15T10:04:48Z",false,"APPROVED"
"adamscott","MEMBER","Tested out the MRP, works very well.","2024-08-02T15:12:50Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","In my opinion it we really want to mention ""canvas nodes"" it should be the full name of the class (""Add CanvasNode Here..."") to keep it untranslated.

But ""Add 2D Node Here..."" is completely fine and more accessible.","2024-06-23T19:39:49Z",false,"APPROVED"
"Scony","CONTRIBUTOR","","2024-05-16T21:21:45Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-05-16T21:27:12Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-06-17T09:50:57Z",false,"COMMENTED"
"clayjohn","MEMBER","Makes sense to me. Seems like a low risk fix, so let's go ahead with it for 4.4","2024-07-24T21:03:29Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-15T08:08:52Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-14T22:26:47Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM, but TIWAGOS","2024-05-14T16:39:41Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-14T18:14:17Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-15T07:08:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-30T20:37:51Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-05-14T15:59:58Z",false,"APPROVED"
"YeldhamDev","MEMBER","LGTM.","2024-05-14T17:16:05Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me.","2024-05-30T20:36:00Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me.","2024-05-30T20:37:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-14T15:08:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-14T15:10:36Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-14T15:32:09Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-14T15:45:32Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-14T11:57:17Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-14T11:57:52Z",false,"APPROVED"
"Flynsarmy","CONTRIBUTOR","","2024-05-14T12:13:48Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-14T12:41:39Z",false,"COMMENTED"
"Flynsarmy","CONTRIBUTOR","","2024-05-14T13:50:52Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-14T15:54:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-17T12:27:04Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-14T11:32:21Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-30T09:42:26Z",false,"APPROVED"
"fire","MEMBER","Upstream says this is a binary compatible release so I expect no breakage. Not tested exhaustively.","2024-05-15T18:08:40Z",false,"APPROVED"
"KoBeWi","MEMBER","Looks ok.

It might be interesting to do some simple benchmark here. This will obviously reduce binary size (all similar changes do), but it can also *minimally* improve editor startup time.","2024-05-14T12:49:56Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me.

Another one to tackle in the same category would be `toggled`. Not as frequent, but still:
```
$ rg 'connect.*""toggled""' | wc -l
71
```","2024-05-14T13:40:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-14T09:36:53Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-05-14T09:39:57Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-14T09:40:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-14T09:31:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-14T08:04:58Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-14T18:36:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-14T07:46:48Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-14T06:43:59Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-14T08:31:46Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-05-14T12:31:13Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-14T06:40:34Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-05-14T06:16:02Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-14T06:38:02Z",false,"APPROVED"
"raulsntos","MEMBER","Thanks, this is a good cleanup. Make sure to also remove the remaining excessive whitespace.","2024-05-14T05:27:09Z",false,"COMMENTED"
"raulsntos","MEMBER","LGTM. Thanks!","2024-05-14T15:28:33Z",false,"APPROVED"
"akien-mga","MEMBER","Makes sense to me.

But might be worth evaluating what's the cost of this function in e.g. a project with a lot of class icons. I remember we wanted to do some caching, was it implemented in the end @KoBeWi ?","2024-05-14T08:06:49Z",false,"APPROVED"
"raulsntos","MEMBER","Thanks for contributing to the documentation!

CI is complaining about indentation. Make sure the code is indented with 4 **spaces**, unlike the rest of the XML file which uses tabs.

Also, the commit is linked to a different GitHub account than the one you used to submit the PR. This is fine, but I wanted to make sure it wasn't by mistake. For more information see:  [Why are my commits linked to the wrong user?](https://docs.github.com/en/pull-requests/committing-changes-to-your-project/troubleshooting-commits/why-are-my-commits-linked-to-the-wrong-user)

See which ""email"" you have configured currently: https://github.com/godotengine/godot/pull/91920.patch","2024-05-14T04:59:34Z",false,"COMMENTED"
"raulsntos","MEMBER","Sorry for the delay, I missed the notification. Looks good, thanks!","2024-06-26T23:59:35Z",false,"APPROVED"
"Calinou","MEMBER","","2024-05-13T19:43:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-13T15:08:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-13T15:17:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","Were planning to do one of these myself, and looks great!","2024-05-14T08:13:56Z",false,"APPROVED"
"akien-mga","MEMBER","Didn't review in depth, but makes sense to me.","2024-05-14T08:20:14Z",false,"APPROVED"
"adamscott","MEMBER","","2024-05-13T15:03:06Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-13T13:09:36Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-13T18:43:50Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/8e36f98ea5b5ab4c1fb5249f94b61a7bbfb379a1), it works as expected on Windows 11 23H2.

**Testing projects:**

- Long folder names with Unicode: **(requires 7-zip to extract, Windows extractor won't work):** [The project with an unnecessarily long path name, also featuring Unicode characters such as √© ‚Ç¨ œÑ.zip](https://github.com/user-attachments/files/16355869/The.project.with.an.unnecessarily.long.path.name.also.featuring.Unicode.characters.such.as.e.zip)
  - This one used to spew constant reimport errors with `icon.svg` in 4.2.2.stable. This PR fixes those errors entirely.
- Heavily nested folder **(requires 7-zip to extract, Windows extractor won't work):** [1.zip](https://github.com/user-attachments/files/16355870/1.zip)
  - This PR doesn't appear to affect behavior much in this situation (compared to 4.2.2.stable).
- Project folder from the above nested folder, but not nested: [60.zip](https://github.com/user-attachments/files/16355871/60.zip)

However, shader compilation fails multiple times when opening the editor using the Compatibility rendering method on a project with a very long nested path. This issue also occurred in 4.2.2.stable under the same conditions. This leads to 3D materials not showing up:

```
Editing project: C:/Users/Hugo/Documents/Godot/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17/18/19/20/21/22/23/24/25/26/27/28/29/30/31/32/33/34/35/36/37/38/39/40/41/42/43/44/45/46/47/48/49/50/51/52/53/54/55/56/57/58/59/60
Godot Engine v4.3.beta.custom_build.33dd4c218 (2024-07-24 00:54:50 UTC) - https://godotengine.org
ERROR: Condition ""err != OK"" is true.
   at: ShaderGLES3::initialize (drivers\gles3\shader_gles3.cpp:798)
ERROR: Condition ""err != OK"" is true.
   at: ShaderGLES3::initialize (drivers\gles3\shader_gles3.cpp:798)
ERROR: Condition ""err != OK"" is true.
   at: ShaderGLES3::initialize (drivers\gles3\shader_gles3.cpp:798)
ERROR: Condition ""err != OK"" is true.
   at: ShaderGLES3::initialize (drivers\gles3\shader_gles3.cpp:798)
ERROR: Condition ""err != OK"" is true.
   at: ShaderGLES3::initialize (drivers\gles3\shader_gles3.cpp:798)
ERROR: Condition ""err != OK"" is true.
   at: ShaderGLES3::initialize (drivers\gles3\shader_gles3.cpp:798)
ERROR: Condition ""err != OK"" is true.
   at: ShaderGLES3::initialize (drivers\gles3\shader_gles3.cpp:798)
ERROR: Condition ""err != OK"" is true.
   at: ShaderGLES3::initialize (drivers\gles3\shader_gles3.cpp:798)
ERROR: Condition ""err != OK"" is true.
   at: ShaderGLES3::initialize (drivers\gles3\shader_gles3.cpp:798)
ERROR: Condition ""err != OK"" is true.
   at: ShaderGLES3::initialize (drivers\gles3\shader_gles3.cpp:798)
ERROR: Condition ""err != OK"" is true.
   at: ShaderGLES3::initialize (drivers\gles3\shader_gles3.cpp:798)
ERROR: Condition ""err != OK"" is true.
   at: ShaderGLES3::initialize (drivers\gles3\shader_gles3.cpp:798)
OpenGL API 3.3.0 NVIDIA 560.70 - Compatibility - Using Device: NVIDIA - NVIDIA GeForce RTX 4090
```

This does not occur when the same project is edited in a shorter path.

The running project renders correctly though. This visual issue does not occur when using Forward+, but another set of errors is visible instead:

```
ERROR: Condition ""f.is_null()"" is true.
   at: ShaderRD::_save_to_cache (servers\rendering\renderer_rd\shader_rd.cpp:474)
ERROR: Condition ""f.is_null()"" is true.
   at: ShaderRD::_save_to_cache (servers\rendering\renderer_rd\shader_rd.cpp:474)
```

On a similarly long path on a SMB network drive (tested by running the editor using PowerShell when <kbd>Shift + right-clicking</kbd> empty space in Explorer), the editor opens correctly but all resources fail to import:

```
ERROR: Condition ""err != OK"" is true.
   at: ShaderRD::_initialize_cache (servers\rendering\renderer_rd\shader_rd.cpp:771)

ERROR:ERROR:ERROR: Condition ""f.is_null()"" is true.
 Condition ""f.is_null()"" is true.
   at:    at: ResourceImporterTexture::_save_ctex (editor\import\resource_importer_texture.cpp:347)
ResourceImporterTexture::_save_ctex (editor\import\resource_importer_texture.cpp:347)
 Condition ""f.is_null()"" is true.
   at: ResourceImporterTexture::_save_ctex (editor\import\resource_importer_texture.cpp:347)
ERROR: Cannot open MD5 file 'res://.godot/imported/icon_outlined.png-be09dc71a0cb04701900baffec3ab610.md5'.
   at: (editor\editor_file_system.cpp:2544)
ERROR: Cannot open MD5 file 'res://.godot/imported/icon.svg-218a8f2b3041327d8a5756f3a245f83b.md5'.
   at: (editor\editor_file_system.cpp:2544)
ERROR: Cannot open MD5 file 'res://.godot/imported/icon_outlined - Copy.png-83bc8bcbaecd26b9592143e9fe20290c.md5'.
   at: (editor\editor_file_system.cpp:2544)
ERROR: Unable to open file: res://.godot/imported/icon_outlined.png-be09dc71a0cb04701900baffec3ab610.s3tc.ctex.
   at: (scene\resources\compressed_texture.cpp:41)
ERROR: Failed loading resource: res://.godot/imported/icon_outlined.png-be09dc71a0cb04701900baffec3ab610.s3tc.ctex. Make sure resources have been imported by opening the project in the editor at least once.
   at: (core\io\resource_loader.cpp:284)
ERROR: Failed loading resource: res://icon_outlined.png. Make sure resources have been imported by opening the project in the editor at least once.
   at: (core\io\resource_loader.cpp:284)
ERROR: Unable to open file: res://.godot/imported/icon.svg-218a8f2b3041327d8a5756f3a245f83b.ctex.
   at: (scene\resources\compressed_texture.cpp:41)
ERROR: Failed loading resource: res://.godot/imported/icon.svg-218a8f2b3041327d8a5756f3a245f83b.ctex. Make sure resources have been imported by opening the project in the editor at least once.
   at: (core\io\resource_loader.cpp:284)
ERROR: Failed loading resource: res://icon.svg. Make sure resources have been imported by opening the project in the editor at least once.
   at: (core\io\resource_loader.cpp:284)
ERROR: Unable to open file: res://.godot/imported/icon_outlined - Copy.png-83bc8bcbaecd26b9592143e9fe20290c.ctex.
   at: (scene\resources\compressed_texture.cpp:41)
ERROR: Failed loading resource: res://.godot/imported/icon_outlined - Copy.png-83bc8bcbaecd26b9592143e9fe20290c.ctex. Make sure resources have been imported by opening the project in the editor at least once.
   at: (core\io\resource_loader.cpp:284)
ERROR: Failed loading resource: res://icon_outlined - Copy.png. Make sure resources have been imported by opening the project in the editor at least once.
   at: (core\io\resource_loader.cpp:284)
ERROR: Unable to open file: res://.godot/imported/icon_outlined.png-be09dc71a0cb04701900baffec3ab610.s3tc.ctex.
   at: (scene\resources\compressed_texture.cpp:41)
ERROR: Failed loading resource: res://.godot/imported/icon_outlined.png-be09dc71a0cb04701900baffec3ab610.s3tc.ctex. Make sure resources have been imported by opening the project in the editor at least once.
   at: (core\io\resource_loader.cpp:284)
ERROR: Failed loading resource: res://icon_outlined.png. Make sure resources have been imported by opening the project in the editor at least once.
   at: (core\io\resource_loader.cpp:284)
ERROR: Unable to open file: res://.godot/imported/icon_outlined.png-be09dc71a0cb04701900baffec3ab610.s3tc.ctex.
   at: (scene\resources\compressed_texture.cpp:41)
ERROR: Failed loading resource: res://.godot/imported/icon_outlined.png-be09dc71a0cb04701900baffec3ab610.s3tc.ctex. Make sure resources have been imported by opening the project in the editor at least once.
   at: (core\io\resource_loader.cpp:284)
ERROR: Failed loading resource: res://icon_outlined.png. Make sure resources have been imported by opening the project in the editor at least once.
   at: (core\io\resource_loader.cpp:284)
ERROR: Cannot save config file to 'res://.godot/editor/node_3d.tscn-editstate-14584830dbc22d3f76a596eed5f4948e.cfg'.
   at: (editor\editor_node.cpp:1546)
Godot Engine v4.3.beta.custom_build.33dd4c218 (2024-07-24 00:54:50 UTC) - https://godotengine.org
Vulkan 1.3.280 - Forward+ - Using Device #0: NVIDIA - NVIDIA GeForce RTX 4090

ERROR:ERROR:ERROR: Condition ""f.is_null()"" is true.
 Condition ""f.is_null()"" is true.
 Condition ""f.is_null()"" is true.
   at:    at: ResourceImporterTexture::_save_ctex (editor\import\resource_importer_texture.cpp:347)
ResourceImporterTexture::_save_ctex (editor\import\resource_importer_texture.cpp:347)
   at: ResourceImporterTexture::_save_ctex (editor\import\resource_importer_texture.cpp:347)
ERROR: Cannot open MD5 file 'res://.godot/imported/icon_outlined - Copy.png-83bc8bcbaecd26b9592143e9fe20290c.md5'.
   at: (editor\editor_file_system.cpp:2544)
ERROR: Cannot open MD5 file 'res://.godot/imported/icon.svg-218a8f2b3041327d8a5756f3a245f83b.md5'.
   at: (editor\editor_file_system.cpp:2544)
ERROR: Cannot open MD5 file 'res://.godot/imported/icon_outlined.png-be09dc71a0cb04701900baffec3ab610.md5'.
   at: (editor\editor_file_system.cpp:2544)
ERROR: Cannot save config file to 'res://.godot/editor/node_3d.tscn-editstate-14584830dbc22d3f76a596eed5f4948e.cfg'.
   at: (editor\editor_node.cpp:1546)
Godot Engine v4.3.beta.custom_build.33dd4c218 (2024-07-24 00:54:50 UTC) - https://godotengine.org
Vulkan 1.3.280 - Forward+ - Using Device #0: NVIDIA - NVIDIA GeForce RTX 4090

ERROR:ERROR: Condition ""f.is_null()"" is true.
 Condition ""f.is_null()"" is true.
   at:    at: ResourceImporterTexture::_save_ctex (editor\import\resource_importer_texture.cpp:347)
ResourceImporterTexture::_save_ctex (editor\import\resource_importer_texture.cpp:347)
ERROR: Condition ""f.is_null()"" is true.
   at: ResourceImporterTexture::_save_ctex (editor\import\resource_importer_texture.cpp:347)
ERROR: Cannot open MD5 file 'res://.godot/imported/icon_outlined - Copy.png-83bc8bcbaecd26b9592143e9fe20290c.md5'.
   at: (editor\editor_file_system.cpp:2544)
ERROR: Cannot open MD5 file 'res://.godot/imported/icon_outlined.png-be09dc71a0cb04701900baffec3ab610.md5'.
   at: (editor\editor_file_system.cpp:2544)
ERROR: Cannot open MD5 file 'res://.godot/imported/icon.svg-218a8f2b3041327d8a5756f3a245f83b.md5'.
   at: (editor\editor_file_system.cpp:2544)
```

Either way, this seems like an improvement overall so I'll approve.

It's worth testing this on Windows 7/8.1 just in case, especially if this is intended to be cherry-picked to 4.3.x. It's fine for this feature to not work there, but it should avoid breaking Windows 7/8.1 support entirely (unless it was decided to drop it by then).","2024-07-24T01:20:54Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-13T10:53:58Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-13T10:33:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-13T10:34:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-13T10:36:04Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-13T10:53:39Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-15T21:24:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-13T08:10:36Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-13T08:11:43Z",false,"APPROVED"
"jsjtxietian","CONTRIBUTOR","","2024-05-13T08:11:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-13T08:55:26Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-05-14T03:01:12Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good.

We seem to have this code all the way down to 4.0, I'm surprised we're only hearing about this now... I guess we don't have a lot of users testing on older Android devices.","2024-05-13T08:07:01Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-11T11:42:46Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-05-13T07:35:45Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-05-13T07:36:42Z",false,"COMMENTED"
"alvinhochun","CONTRIBUTOR","","2024-07-13T16:15:49Z",false,"COMMENTED"
"bruvzg","MEMBER","New shortcuts are usually used to switch tabs, and should not conflict with anything in system or in Godot.","2024-05-20T05:21:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-13T14:48:05Z",false,"APPROVED"
"rburing","MEMBER","","2024-05-12T19:26:42Z",false,"APPROVED"
"ryevdokimov","CONTRIBUTOR","Tested 2D and 3D, looks good. Just needs to fix code style/formatting. 

Hoping this makes it in for 4.3, I find the current behavior to be very unintuitive and the justifications in the proposal seem sound. ","2024-05-12T14:36:51Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-13T09:05:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-15T22:39:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","The code looks ok.","2024-05-15T22:41:39Z",false,"APPROVED"
"Nodragem","CONTRIBUTOR","","2024-05-16T09:03:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-16T09:04:38Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-16T09:38:24Z",false,"COMMENTED"
"Nodragem","CONTRIBUTOR","","2024-05-16T09:38:51Z",false,"COMMENTED"
"Nodragem","CONTRIBUTOR","","2024-05-16T09:45:14Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-16T13:31:38Z",false,"APPROVED"
"smix8","CONTRIBUTOR","","2024-05-15T07:51:42Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","my b","2024-05-12T17:14:45Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-12T22:34:29Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-12T13:40:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","I think the code and everything make sense, though I haven't tested it, but I'm not convinced this is necessary to put in core, I'm not sure I see the specific need to be able to fetch all the points directly, I'd probably expect any usage of this for things like drawing to just iterate over the positions and using the `get_point_position` or similar, I'm less sure about the usefulness of fetching all the points at once, especially since it doesn't consider solid points so any such checking would require further testing (which couldn't be done with this output anyway as the solid check checks for the grid points)

Also any user who might be interested in the points in any other ordering, like by column, or right to left instead etc. couldn't use this

So I'm not sure about the actual scope where this would be used directly, and the only benefit would be performance for fetching this particular case, but I'm not sure that performance would be critical if one already iterates over the output and processes it, so I'm unsure about the specific use case for this

But very interesting and nice work either way, would 100% approve if I wasn't unsure about the necessity

Edit: What I think *might* be really interesting though would be to return an array of dictionaries containing point information, like `{id, pos, solid, weight_scale}`, *that* I feel would be very useful, and would greatly help with performance etc.","2024-05-12T14:05:47Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-12T14:32:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM, makes sense and should be useful! üéâ ","2024-05-12T14:32:48Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-05-12T14:55:54Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-12T07:53:25Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-12T15:03:16Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","","2024-05-16T23:45:08Z",false,"COMMENTED"
"patwork","CONTRIBUTOR","","2024-05-17T10:45:18Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-17T10:57:06Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-05-17T15:58:23Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-05-17T16:01:03Z",false,"COMMENTED"
"patwork","CONTRIBUTOR","","2024-05-18T02:23:16Z",false,"COMMENTED"
"patwork","CONTRIBUTOR","","2024-05-18T02:23:26Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","Works like a charm!","2024-05-20T12:35:45Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me on the CI side.

JS changes look fine but I'm no expert so an OK from @godotengine/web would be good.","2024-05-21T08:57:15Z",false,"APPROVED"
"ryevdokimov","CONTRIBUTOR","
https://github.com/godotengine/godot/assets/105675984/d92a972f-f356-4b2d-9693-6e7803f96b0f

","2024-05-12T00:51:41Z",false,"APPROVED"
"YeldhamDev","MEMBER","","2024-05-12T04:11:29Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-12T10:51:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-12T10:52:11Z",false,"COMMENTED"
"yahiaetman","NONE","","2024-05-12T11:22:33Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-12T11:26:33Z",false,"COMMENTED"
"yahiaetman","NONE","","2024-05-12T11:26:50Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-13T14:51:43Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-07-08T09:28:39Z",false,"CHANGES_REQUESTED"
"ImpishOaths","CONTRIBUTOR","","2024-07-08T15:43:48Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-07-08T18:15:08Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-07-08T18:16:51Z",false,"COMMENTED"
"ImpishOaths","CONTRIBUTOR","","2024-07-08T18:30:17Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-07-08T19:00:45Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-05-17T19:27:27Z",false,"COMMENTED"
"semensanyok","CONTRIBUTOR","","2024-05-17T20:00:51Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great! Thank you for your quick response","2024-05-17T20:02:30Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-13T14:51:02Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great!","2024-05-14T14:20:47Z",false,"APPROVED"
"akien-mga","MEMBER","Makes sense to me.

*Edit:* Not sure actually. I don't have a lot of hands on experience with 3D but it seems useful to me to be able to navigate the scene while dragging something to instantiate at a specific place. Sometimes the target is just a little bit off the current viewport, or zooming is needed to position things precisely, etc.","2024-05-29T21:13:26Z",false,"DISMISSED"
"akien-mga","MEMBER","Alright, let's go with this approach and see if anyone complains their [workflow](https://xkcd.com/1172/) broke.","2024-06-19T08:36:52Z",false,"APPROVED"
"AThousandShips","MEMBER","Based on that some checks now show ""passed"" instead of ""skipped"" this seems to be working correctly","2024-05-11T14:01:28Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","","2024-05-11T14:13:37Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","","2024-05-11T20:33:33Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-05-13T15:51:16Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-13T18:11:07Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-13T18:24:54Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-05-13T18:29:59Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-13T19:19:18Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-05-13T19:39:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-11T12:24:21Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-05-11T13:20:32Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM, except for the code style that needs fixing ","2024-05-11T13:21:49Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-11T13:22:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-11T08:39:50Z",false,"APPROVED"
"fire","MEMBER","I was not able to review this deeply with the test cases, but it is an important fix.","2024-05-11T14:06:30Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-11T08:53:35Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-11T08:45:08Z",false,"APPROVED"
"fire","MEMBER","","2024-05-11T17:19:50Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-08-18T13:07:35Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-08-18T14:08:12Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-18T15:08:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-18T15:09:37Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/1bd740d18d714f815486b04bf4c6154ef6c355d9), it works as expected.

However, in the MRP, I see objects teleporting in on startup (120 FPS video at 0.25√ó speed):

https://github.com/user-attachments/assets/b5d0c0d8-2e39-46c7-92b9-a603b6dd602b

Adding `reset_physics_interpolation()` in the script's `_ready()` method doesn't fix this issue. Strangely enough, calling `reset_physics_interpolation()` every `_physics_process()` frame also has no effect (it should look like interpolation is disabled when doing so).","2024-08-18T15:27:14Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-11T07:10:01Z",false,"APPROVED"
"dalexeev","MEMBER","Note that you could use `@export_custom(PROPERTY_HINT_RESOURCE_UID, ""Type"")` instead of `@export_resource_uid(""Type"")`. You could also add a test, see [export_variable.gd](https://github.com/godotengine/godot/blob/master/modules/gdscript/tests/scripts/parser/features/export_variable.gd).","2024-05-11T10:41:20Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great. I double checked and indeed these are only used for debug drawing, so no reason to return the MSAA versions. ","2024-05-12T17:59:31Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected. The issue no longer occurs on the same setup as in https://github.com/godotengine/godot/issues/62955#issuecomment-1426818318.

The normal buffer view looks a bit strange when MSAA is enabled (it's also not smoothed out), but I guess not much can be done about this.

Disabled | 2√ó MSAA | 4√ó MSAA | 8√ó MSAA
-|-|-|-
![Screenshot_20240513_002134](https://github.com/godotengine/godot/assets/180032/c466a4b5-9672-432c-ae9a-7319313b2b2f) | ![Screenshot_20240513_002141](https://github.com/godotengine/godot/assets/180032/6ca304ba-5064-48fe-81a1-5cb580ded14b) | ![Screenshot_20240513_002149](https://github.com/godotengine/godot/assets/180032/9c052b8a-7c9d-470a-a3f4-741e50a9e788) | ![Screenshot_20240513_002155](https://github.com/godotengine/godot/assets/180032/df1ed80d-789c-4c78-8351-3fce40731ec0)

","2024-05-12T22:22:55Z",false,"APPROVED"
"verypleasentusername","NONE","—Ö–æ—Ä–æ—à–æ!","2024-05-10T17:16:38Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-05-10T17:20:47Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-10T17:47:32Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-05-10T18:03:36Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-05-10T18:06:36Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-10T18:19:04Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","LGTM, whatever that's worth. :)","2024-05-10T18:26:13Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-10T19:37:25Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-14T19:34:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","It's a hack, but at least it's safe.","2024-05-14T20:25:14Z",false,"APPROVED"
"Maran23","CONTRIBUTOR","Looks good to me.
I can confirm that this fixes the issue.
Also, this looks good code wise.
The code before also floored and rounded the icon size, and the rationale here makes sense to me.","2024-05-13T12:15:27Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected. This makes sense to do regardless of the **Snap Controls to Pixels** project setting, as that project setting should only control snapping of controls as a whole, not their individual draw calls within.","2024-05-13T17:00:39Z",false,"APPROVED"
"akien-mga","MEMBER","Looks fine to me if it works.","2024-05-25T12:38:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-10T17:30:01Z",false,"APPROVED"
"clayjohn","MEMBER","Tested and confirmed it works. ","2024-05-10T21:23:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-10T15:21:56Z",false,"COMMENTED"
"dustdfg","CONTRIBUTOR","","2024-09-27T18:50:49Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-10T13:29:49Z",false,"APPROVED"
"AThousandShips","MEMBER","Works correctly in my testing ","2024-05-10T15:20:48Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","","2024-05-10T17:47:38Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","","2024-05-30T16:29:30Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-10T08:24:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-10T08:15:09Z",false,"APPROVED"
"fire","MEMBER","I imported the test case from https://github.com/godotengine/godot/issues/90371 and it did not crash.

This is a basic test and does not go into depth with technical review of thorvg.

![editor_screenshot_2024-05-10T094842](https://github.com/godotengine/godot/assets/32321/46b6a31c-9d41-4d07-b67f-930b6748cf28)
","2024-05-10T16:49:32Z",false,"APPROVED"
"kleonc","MEMBER","","2024-05-10T06:58:51Z",false,"COMMENTED"
"aaronfranke","MEMBER","> BUG: GLBs produced by Godot don't pass validation

Awesome, thanks for the fix. Wasn't aware of this before.

> Remove empty ""extensions"" JSON object being appended to all nodes (if it's still empty).

I was aware of this but didn't get around to it, thank you for fixing this. I believe your fix is correct, since it preserves `""extensions""` when passing the JSON to GLTFDocumentExtension classes, and only removes it at the end.

> Don't create an initial buffer until

Another great fix, I've seen this before but never got around to it. This adds more lines of code but it's worth it, because now it will exclude empty buffers. I wonder if this would affect GLTFDocumentExtension classes, though? Regardless I think it's good to have GLTFDocumentExtension classes check for a buffer before trying to write one, so I think your fix here is good.

> Allow the case where root_nodes is empty.

I agree, this is allowed by the spec and should be allowed by Godot for non-scene glTF files. However note that the code in this PR is not sufficient to actually handle that case. If you export a scene with only the root node with MULTI_ROOT, there is currently a check for `if (child_count > 0) {` that will prevent MULTI_ROOT from being used in this case. However, removing that check is not sufficient by itself, because that causes the file to not be able to be imported back into Godot since it's not a scene, and also the `""scene""` and `""scenes""` would also need to be excluded. In order for the feature of non-scene glTF files to be made useful, we would need to implement https://github.com/godotengine/godot-proposals/issues/7494 to allow importing glTF files as other resource types.

TL;DR: The changes in this PR are good, but the use case of empty root_nodes is not working yet. Further improvements can be left to another PR, this PR is good as-is.","2024-05-12T00:25:05Z",false,"APPROVED"
"fire","MEMBER","","2024-05-12T01:16:49Z",false,"COMMENTED"
"bruvzg","MEMBER","TTC and OTC files contain multiple subfonts, so if using it is allowed for editor, it would make sense to also expose `face_index` to actually select which of subfonts to use. Something like:

```diff
diff --git a/editor/editor_settings.cpp b/editor/editor_settings.cpp
index c019d46034..0a8b5a1f37 100644
--- a/editor/editor_settings.cpp
+++ b/editor/editor_settings.cpp
@@ -446,6 +446,11 @@ void EditorSettings::_load_defaults(Ref<ConfigFile> p_extra_config) {
 	EDITOR_SETTING(Variant::STRING, PROPERTY_HINT_GLOBAL_FILE, ""interface/editor/main_font"", """", ""*.ttf,*.otf,*.woff,*.woff2,*.pfb,*.pfm"")
 	EDITOR_SETTING(Variant::STRING, PROPERTY_HINT_GLOBAL_FILE, ""interface/editor/main_font_bold"", """", ""*.ttf,*.otf,*.woff,*.woff2,*.pfb,*.pfm"")
 	EDITOR_SETTING(Variant::STRING, PROPERTY_HINT_GLOBAL_FILE, ""interface/editor/code_font"", """", ""*.ttf,*.otf,*.woff,*.woff2,*.pfb,*.pfm"")
+
+	EDITOR_SETTING(Variant::INT, PROPERTY_HINT_NONE, ""main_font_face_index"", 0, """");
+	EDITOR_SETTING(Variant::INT, PROPERTY_HINT_NONE, ""main_font_bold_face_index"", 0, """");
+	EDITOR_SETTING(Variant::INT, PROPERTY_HINT_NONE, ""code_font_face_index"", 0, """");
+
 	_initial_set(""interface/editor/separate_distraction_mode"", false);
 	_initial_set(""interface/editor/automatically_open_screenshots"", true);
 	EDITOR_SETTING_USAGE(Variant::BOOL, PROPERTY_HINT_NONE, ""interface/editor/single_window_mode"", false, """", PROPERTY_USAGE_DEFAULT | PROPERTY_USAGE_RESTART_IF_CHANGED)
diff --git a/editor/themes/editor_fonts.cpp b/editor/themes/editor_fonts.cpp
index c13ee6e6b0..fe47a64e2f 100644
--- a/editor/themes/editor_fonts.cpp
+++ b/editor/themes/editor_fonts.cpp
@@ -206,8 +206,13 @@ void editor_register_fonts(const Ref<Theme> &p_theme) {
 
 	// Init base font configs and load custom fonts.
 	String custom_font_path = EDITOR_GET(""interface/editor/main_font"");
+	int custom_font_face_index = EDITOR_GET(""interface/editor/main_font_face_index"");
+
 	String custom_font_path_bold = EDITOR_GET(""interface/editor/main_font_bold"");
+	int custom_font_bold_face_index = EDITOR_GET(""interface/editor/main_font_bold_face_index"");
+
 	String custom_font_path_source = EDITOR_GET(""interface/editor/code_font"");
+	int custom_font_source_face_index = EDITOR_GET(""interface/editor/code_font_face_index"");
 
 	Ref<FontVariation> default_fc;
 	default_fc.instantiate();
@@ -219,6 +224,7 @@ void editor_register_fonts(const Ref<Theme> &p_theme) {
 			custom_font->set_fallbacks(fallback_custom);
 		}
 		default_fc->set_base_font(custom_font);
+		default_fc->set_variation_face_index(custom_font_face_index);
 	} else {
 		EditorSettings::get_singleton()->set_manually(""interface/editor/main_font"", """");
 		default_fc->set_base_font(default_font);
@@ -236,6 +242,7 @@ void editor_register_fonts(const Ref<Theme> &p_theme) {
 			custom_font->set_fallbacks(fallback_custom);
 		}
 		default_fc_msdf->set_base_font(custom_font);
+		default_fc_msdf->set_variation_face_index(custom_font_face_index);
 	} else {
 		EditorSettings::get_singleton()->set_manually(""interface/editor/main_font"", """");
 		default_fc_msdf->set_base_font(default_font_msdf);
@@ -253,6 +260,7 @@ void editor_register_fonts(const Ref<Theme> &p_theme) {
 			custom_font->set_fallbacks(fallback_custom);
 		}
 		bold_fc->set_base_font(custom_font);
+		bold_fc->set_variation_face_index(custom_font_bold_face_index);
 	} else if (custom_font_path.length() > 0 && dir->file_exists(custom_font_path)) {
 		Ref<FontFile> custom_font = load_external_font(custom_font_path, font_hinting, font_antialiasing, true, font_subpixel_positioning);
 		{
@@ -279,6 +287,7 @@ void editor_register_fonts(const Ref<Theme> &p_theme) {
 			custom_font->set_fallbacks(fallback_custom);
 		}
 		bold_fc_msdf->set_base_font(custom_font);
+		bold_fc_msdf->set_variation_face_index(custom_font_bold_face_index);
 	} else if (custom_font_path.length() > 0 && dir->file_exists(custom_font_path)) {
 		Ref<FontFile> custom_font = load_external_font(custom_font_path, font_hinting, font_antialiasing, true, font_subpixel_positioning);
 		{
@@ -305,6 +314,7 @@ void editor_register_fonts(const Ref<Theme> &p_theme) {
 			custom_font->set_fallbacks(fallback_custom);
 		}
 		mono_fc->set_base_font(custom_font);
+		mono_fc->set_variation_face_index(custom_font_source_face_index);
 	} else {
 		EditorSettings::get_singleton()->set_manually(""interface/editor/code_font"", """");
 		mono_fc->set_base_font(default_font_mono);
```","2024-05-10T05:09:46Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-10T06:56:26Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-05-10T07:37:49Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-05-10T13:24:48Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-05-10T18:01:49Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-05-10T18:04:59Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-05-10T18:05:18Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-05-10T18:06:37Z",false,"COMMENTED"
"bruvzg","MEMBER","Seems fine.

Handling fallbacks and messages seems to be a bit different in the different platforms, it probably should be unified at some point.","2024-09-04T05:46:49Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-04T08:01:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-10T08:41:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-10T08:40:39Z",false,"APPROVED"
"devloglogan","CONTRIBUTOR","Was able to reproduce, and this PR fixed it. LGTM!","2024-05-09T20:05:21Z",false,"APPROVED"
"Faless","COLLABORATOR","","2024-05-09T17:54:35Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-05-09T18:03:15Z",false,"COMMENTED"
"RandomShaper","MEMBER","Admittedly, this is a somewhat naive review because it's hard to follow everything going on here properly in detail. As such, besides witnessing the code changes look solid and sensible, I can only raise a few nitpicks:
- `driver_clear_resources_with_views` and the other bool member above could become bitfields.
- Also for `driver_clear_resources_with_views`, I'd suggest a rename to the more compact `driver_uses_views_for_clears`. Or, alternatively, inverting its meaning and naming it `driver_clears_via_copy_engine`, or something similar. (The rename would carry over to `API_TRAIT_CLEAR_RESOURCES_WITH_VIEWS`.)
- I've spotted a few pieces of code style that deviate from the latest best or estabilished practices in the codebase. That was already the case in some of these files, so I think we'd rather do a style-fixing pass later. They are things such as uninitialized local variables and the omission of the (superfluous, I know) `public` keyword in the specification of inheritance across structs.
- Finally, there's the `thread_local LocalVector` technique. That's kind of a safer `alloca()`, isn't it? I guess we should discuss rules about when to prefer that over the `ALLOCA_ARRAY()` utility macro that drivers use, which may mean we let the drivers do the same, but in any case come up with something consistent.","2024-05-10T15:42:43Z",false,"COMMENTED"
"clayjohn","MEMBER","This seems fine to me to merge for 4.3. It should have a pretty small impact outside of D3D12 and will be a huge benefit for D3D12 users (it brings performance in line with the Vulkan backend). 

Approving from my side, but it would be good for @RandomShaper to confirm that he is happy with the details before merging","2024-05-14T19:55:41Z",false,"APPROVED"
"AThousandShips","MEMBER","Style looks good!","2024-05-15T07:52:08Z",false,"APPROVED"
"DarioSamo","CONTRIBUTOR","","2024-05-15T14:26:08Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-05-21T09:22:13Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-05-21T09:24:01Z",false,"APPROVED"
"lapspider45","NONE","","2024-05-11T07:40:56Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-05-11T07:51:08Z",false,"COMMENTED"
"lapspider45","NONE","","2024-05-11T14:05:55Z",false,"COMMENTED"
"chocola-mint","CONTRIBUTOR","","2024-05-11T14:46:53Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-05-11T15:09:20Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-11T15:51:07Z",false,"COMMENTED"
"chocola-mint","CONTRIBUTOR","","2024-05-12T01:29:24Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-05-12T04:47:43Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` a4f2ea91a1bd18f70a43ff4c1377db49b56bc3f0), it works as expected.

Some comments:

- The **Edit Marker** dialog should allow precisely setting the time the marker is located at. This also allows you to visually confirm the marker is positioned at the right time.
- The last created marker's color seems to occasionally reset to white while editing animations for an unknown reason.
- Marker names can be unreadable on light theme depending on their color. Example with `#ffff00` as a marker color:

Dark theme | Light theme
-|-
![image](https://github.com/godotengine/godot/assets/180032/04137077-7bc9-47f5-9b33-27fab55d5376) | ![image](https://github.com/godotengine/godot/assets/180032/9b1cb976-0c1d-48c4-8d6d-c5c75c626583)

- When a section of the timeline is highlighted in red, I suggest drawing the highlight on the background of the animation tracks as well. This makes it easier to see where the markers begin/end when your animation editor is made tall (which is common when editing complex animations).
- For reasons similar to the above, I suggest making markers draw a thin vertical line (with low opacity) as a background of the animation tracks, with their respective color.","2024-06-12T14:19:18Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-12T14:32:32Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-12T14:46:26Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-17T13:04:58Z",false,"CHANGES_REQUESTED"
"chocola-mint","CONTRIBUTOR","","2024-06-17T13:16:46Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-17T13:33:15Z",false,"COMMENTED"
"chocola-mint","CONTRIBUTOR","","2024-06-18T06:19:11Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-18T06:30:20Z",false,"COMMENTED"
"chocola-mint","CONTRIBUTOR","","2024-06-18T07:43:32Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-18T07:47:12Z",false,"COMMENTED"
"chocola-mint","CONTRIBUTOR","","2024-06-18T07:50:15Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-18T07:57:37Z",false,"COMMENTED"
"chocola-mint","CONTRIBUTOR","","2024-06-18T10:52:26Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-18T11:36:28Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-18T11:40:03Z",false,"COMMENTED"
"chocola-mint","CONTRIBUTOR","","2024-06-18T11:44:04Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-18T11:47:32Z",false,"COMMENTED"
"chocola-mint","CONTRIBUTOR","","2024-06-18T11:52:05Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-18T16:14:21Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-19T00:41:54Z",false,"COMMENTED"
"chocola-mint","CONTRIBUTOR","","2024-06-19T04:47:16Z",false,"COMMENTED"
"chocola-mint","CONTRIBUTOR","","2024-06-19T04:47:50Z",false,"COMMENTED"
"chocola-mint","CONTRIBUTOR","","2024-06-19T05:28:45Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-19T05:39:59Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-06-19T05:43:13Z",false,"COMMENTED"
"chocola-mint","CONTRIBUTOR","","2024-06-19T05:46:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","New ones again","2024-06-19T08:38:56Z",false,"COMMENTED"
"TokageItLab","MEMBER","- Marker should be deselected when track key is selected
  - Or keep the selection internally and toggle its display depending on the focus
- Add a delete shortcut with the delete key
  - The above fix should make the selection exclusive, allowing deletion to be done safely by allowing users to see what they are selecting/deleting
- The right-click menu for delete and rename should appear as long as the marker is selected, even if the pointer is not on the marker
- While a sction is being made with two markers, the timeline area within the sction should not be deselected by clicking on the timeline area. Now we can't seek in the section, should be fixed
- When three or more markers are selected, the longest section should be made instead of deselecting
- Deleting a marker after changing the marker's color in the inspector causes an error

```
scene\resources\animation.cpp:3293 - Condition ""!marker_colors.has(p_name)"" is true. Returning: Color()
scene\resources\animation.cpp:3279 - Condition ""!marker_times.has(p_name)"" is true. Returning: -1
```

- Seek after deleting a marker, there is an input bug that keeps seeking state after releasing the button

https://github.com/godotengine/godot/assets/61938263/865281b1-03c9-43dc-b912-748eedb1b049

- When closing the right-click menu by clicking on the timeline area the keys behave crazy. Probably a problem similar to https://github.com/godotengine/godot/issues/92884

https://github.com/godotengine/godot/assets/61938263/321656a4-a418-43db-b4ac-ea574410f080


","2024-06-29T12:45:16Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","","2024-08-27T09:01:21Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-08-27T12:27:18Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-08-27T14:06:38Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","","2024-08-27T14:30:59Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","![image](https://github.com/user-attachments/assets/360fb2eb-06d1-43a1-a165-95edf39d8f80)
","2024-08-29T04:03:51Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","","2024-08-29T05:57:39Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-08-29T06:02:56Z",false,"COMMENTED"
"chocola-mint","CONTRIBUTOR","","2024-08-29T08:43:43Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-08-29T09:35:57Z",false,"COMMENTED"
"chocola-mint","CONTRIBUTOR","","2024-08-29T12:50:04Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-08-29T13:39:31Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-08-29T14:06:24Z",false,"COMMENTED"
"TokageItLab","MEMBER","Pointed out a few more things about API declaration.

Also, some behavior on some editors is a bit erratic and needs to be fixed:

- Behavior when a section is set while playing without a section
- When a section is playing with 3 or more markers selected, and the number of markers selected is reduced
- Behavior when a section outside the animation length is specified","2024-08-29T14:34:11Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER",">> Behavior when a section outside the animation length is specified
> The current behavior is to clamp the end of the section within the animation's original length. This is consistent with the current markers API and so I don't think it needs to be changed.

It is fine when one of the ends of the section is within the timeline, but broken when both ends of the section are outside the timeline.

https://github.com/user-attachments/assets/8096c0a2-964d-4b53-982e-bc0dde3241eb

","2024-08-29T20:39:05Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","","2024-08-30T08:18:51Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","","2024-08-30T10:06:33Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-08-30T10:48:34Z",false,"COMMENTED"
"TokageItLab","MEMBER","If it has been fixed properly, then `pause()` should no longer be necessary, also `_clear_selection_for_anim()` can be replaced with _clear_selection().

Also, since the section is now configurable with or without `playing()`, so it must be unchecked as well.

After applying these suggested changes, I believe the consistency is only broken when the marker is moved during playback, so I assume it is necessary to detect when the marker position is changed, e.g., with signal, and then do `set_current_section()` again.

The other thing that needs to be fixed is when you drag a section to negative time, the drawing is broken:
![image](https://github.com/user-attachments/assets/f3402888-dd95-4042-9d1c-b7967501a5c2)
","2024-08-30T16:47:29Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","","2024-08-30T16:53:37Z",false,"COMMENTED"
"chocola-mint","CONTRIBUTOR","","2024-08-31T01:22:43Z",false,"COMMENTED"
"TokageItLab","MEMBER","Did you change anything in gui input? I can't insert marker by right click now.","2024-08-31T08:32:40Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","","2024-08-31T08:44:22Z",false,"CHANGES_REQUESTED"
"chocola-mint","CONTRIBUTOR","","2024-08-31T08:55:28Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-08-31T09:31:29Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-08-31T09:52:02Z",false,"COMMENTED"
"chocola-mint","CONTRIBUTOR","","2024-08-31T09:59:04Z",false,"COMMENTED"
"TokageItLab","MEMBER","All right. I believe the redundant code has been removed and is working fine. It deserves a lot of credit for the nice work.","2024-08-31T10:41:01Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-31T10:58:34Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-08-31T11:05:46Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-08-31T11:24:55Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-08-31T12:29:27Z",false,"COMMENTED"
"SaracenOne","MEMBER","Still investigating, but at first look, it appears this PR might have caused regressions with root motion calculation and will need to be fixed before merging.","2024-09-04T01:40:30Z",false,"CHANGES_REQUESTED"
"SaracenOne","MEMBER","Another small issue I noticed is if you have a marker selected and switch from the timeline display in seconds to FPS, the time in the marker changes to reflect the frame number, but if you go back to displaying the timeline in seconds, the time is still displayed as a frame. Small UI issue, but something I noticed in testing.","2024-09-04T02:04:13Z",false,"CHANGES_REQUESTED"
"chocola-mint","CONTRIBUTOR","","2024-09-04T05:33:18Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-09-04T07:55:13Z",false,"CHANGES_REQUESTED"
"chocola-mint","CONTRIBUTOR","","2024-09-09T04:55:21Z",false,"COMMENTED"
"TokageItLab","MEMBER","I double checked and there are some issues with RootMotion, but I don't think they are directly related to this PR.

One problem of the RootMotion I have known is the possibility of calculation discrepancies in the first and last frame, but this is related to https://github.com/godotengine/godot/issues/90345, and I don't think this PR affects it.

Also, if it has a few keys, it may be possible for the user to be unintentionally affected by the loop_wrap option when the interval is specified, but this is not a blocker as it is a documentation issue.

![image](https://github.com/user-attachments/assets/bbbbe90c-f9f7-423b-9e0c-d719f14e4e64)

I think it is mergeable for now.","2024-09-13T19:26:35Z",false,"APPROVED"
"SaracenOne","MEMBER","I would recommend changing 
```
		pi.start = start_offset;
		pi.end = start_offset + cur_len;
```
to
```
		pi.start = 0.0;
		pi.end = cur_len;
```
since the former approach still has issues with root motion when used with BlendTree animations using custom timelines.","2024-09-29T06:50:26Z",false,"CHANGES_REQUESTED"
"SaracenOne","MEMBER","LGTM üëç ","2024-09-29T08:41:01Z",false,"APPROVED"
"raulsntos","MEMBER","Thanks, just a few minor nit-picks but otherwise it's good.","2024-05-10T02:39:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-09T12:45:53Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-05-09T15:38:23Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-09T18:24:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-09T18:27:04Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-09T18:28:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-09T18:39:31Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-10T08:43:23Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-09T12:11:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-09T12:11:43Z",false,"APPROVED"
"TokageItLab","MEMBER","Working fine","2024-05-09T11:20:25Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","I haven't tested this, but I did read through the code in detail, and it looks good to me!","2024-07-11T16:31:00Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-07-11T16:33:27Z",false,"COMMENTED"
"bruvzg","MEMBER","This will only work with ""Characters After Shaping"" mode, since it's assuming that visible range is character indices, but in other modes these are glyph indices (and should track `processed_glyphs_step` instead of character index).

https://github.com/godotengine/godot/assets/7645683/68793699-4c28-44f1-b927-2ab4b8606e11
","2024-05-09T08:38:38Z",false,"COMMENTED"
"IntangibleMatter","CONTRIBUTOR","","2024-05-09T11:15:29Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","Similar to what I've done in https://github.com/godotengine/godot/pull/66600, it would be nice to create a GDScript template for `RichTextTransition` as well.","2024-05-09T11:49:47Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-07T00:22:02Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master`) b97110cd307e4d78e20bfafe5de6c082194b2cd6, it doesn't work on my end.

Despite adding the example script and incrementing `visible_ratio` in `_process()` in a script, nothing happens. Nothing is visible in the editor either, despite the transition script having `@tool`.

I can _sometimes_ see a lump of characters being animated downwards but it's very inconsistent when it happens.

Also, having a RichTextTransition attached to a RichTextLabel causes it to redraw continuously, even if its Visible Characters property hasn't changed. (You can check this by enabling **Show Update Spinner** in the Editor Settings.)

**Testing project:** [test-richtexteffect-enter-exit-fx.zip](https://github.com/user-attachments/files/16117744/test-richtexteffect-enter-exit-fx.zip)
","2024-07-07T00:49:52Z",false,"CHANGES_REQUESTED"
"fire","MEMBER","","2024-05-09T07:48:12Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-09T15:38:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-09T15:46:02Z",false,"COMMENTED"
"elalish","NONE","","2024-05-09T16:21:04Z",false,"COMMENTED"
"pca006132","NONE","","2024-05-09T16:23:31Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-09T18:20:30Z",false,"COMMENTED"
"elalish","NONE","","2024-05-09T18:31:51Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-09T18:56:46Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-15T18:21:30Z",false,"COMMENTED"
"elalish","NONE","","2024-05-15T18:45:20Z",false,"COMMENTED"
"elalish","NONE","","2024-06-09T17:32:53Z",false,"COMMENTED"
"fire","MEMBER","","2024-06-10T00:48:54Z",false,"COMMENTED"
"elalish","NONE","","2024-06-10T18:25:58Z",false,"COMMENTED"
"31","CONTRIBUTOR","","2024-06-15T20:30:10Z",false,"COMMENTED"
"elalish","NONE","","2024-06-15T23:45:17Z",false,"COMMENTED"
"31","CONTRIBUTOR","","2024-06-16T03:29:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","Some issues:
* The indentation must be four spaces, you have changed it to tabulators
* You've moved the member variables into the `_Ready` method in C#, that's invalid C# AFAIK, they shouldn't have `private`, or leading underscore
* And I agree with the above, it should just be a simpler example ","2024-05-09T08:05:34Z",false,"DISMISSED"
"AThousandShips","MEMBER","","2024-05-09T09:35:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","Makes sense and looks good to me

Please squash your commits into one, see [here](https://docs.godotengine.org/en/latest/contributing/workflow/pr_workflow.html#the-interactive-rebase) ","2024-05-09T10:17:29Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-09T07:29:45Z",false,"APPROVED"
"fire","MEMBER","","2024-05-09T08:02:53Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-05-15T10:17:00Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-05-16T13:16:54Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-05-16T13:18:20Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-05-16T13:24:27Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-10-13T17:30:24Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-10-13T17:30:57Z",false,"COMMENTED"
"akien-mga","MEMBER","It's becoming a bit convoluted, but if it fixes the issue, seems fine.","2024-05-09T00:06:08Z",false,"APPROVED"
"bruvzg","MEMBER","The only differences from the logic before #85319 I see, it was not using `try_cmd` for `windres` and was doing `if len(out[1]):` on the `windres` output and retrying without prefix, this is probably intentional, but I do not remember why.

So it's possible that there are multiple copiers of `windres` and only some of them work, support different set or architectures for example (but all might run with `--version` only).

Or it's possible that some version of `windres` does not respond to `--version` or return non-zero exit code.

I would probably consider reverting #85319, there's no benefit to this change beside code readability, and with newly added unclear `env` checks and addition of the prefix to PATH, I think it's now less readable that it was before #85319.","2024-05-09T06:38:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-09T10:13:33Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-05-09T10:18:48Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-09T10:19:54Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-05-09T10:45:53Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-09T10:46:28Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-05-13T07:40:59Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-05-15T19:14:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-09T20:02:52Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-08T18:57:15Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-31T21:49:12Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-13T22:33:41Z",false,"COMMENTED"
"KoBeWi","MEMBER","Doesn't seem to break anything.","2024-05-14T12:19:14Z",false,"APPROVED"
"kitbdev","CONTRIBUTOR","","2024-05-14T15:05:31Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good. Can be rebased.","2024-05-09T08:59:13Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-09T00:06:30Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-30T09:44:30Z",false,"APPROVED"
"YeldhamDev","MEMBER","","2024-05-16T21:27:59Z",false,"APPROVED"
"KoBeWi","MEMBER","This is some super hack, but it's limited to a helper class, so it's fine.","2024-05-13T11:59:22Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-08T16:30:35Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-08T16:38:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-08T16:39:42Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-08T14:49:45Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-08T12:31:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-08T12:27:59Z",false,"APPROVED"
"markdibarry","CONTRIBUTOR","I did some quick tests, and checked the screen center values while using camera drag with and without physics interpolation. LGTM.","2024-05-08T12:58:38Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-05-09T06:57:21Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-05-09T07:03:44Z",false,"COMMENTED"
"markdibarry","CONTRIBUTOR","Ran through tests for most things I think would be affected. LGTM. Great job!","2024-05-26T22:17:17Z",false,"APPROVED"
"lawnjelly","MEMBER","I think this looks as correct as possible, and I guess testing will reveal any problems here.

(It's been a while since I looked at `Camera2D`, and the whole logic of doing processing in `get_camera_transform()` has long needed refactoring.)","2024-05-28T09:55:41Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-05-08T14:47:01Z",false,"COMMENTED"
"Naros","CONTRIBUTOR","","2024-05-08T15:43:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-09T09:33:22Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Starting thoughts, I'm not particularly fond of this. Mainly, these methods feel too ""technical"", ""mechanical"" to be needing to be exposed. The additional documentation does not help. Yes, these are used _by the engine_, but what can the _user_... use this for?
The above questioning is why we decided to ""unexpose"" Resource's `setup_local_to_scene` (https://github.com/godotengine/godot/pull/67082). The method is literally just an internal method exposed for little to no reason: The user could implement it on their own, and documenting its internal purpose was difficult. So we gotta be a bit careful to expose these willy-nilly.

A quick skim over this has me believe that it would be a better fit to expose this in **Resource**, instead.

And furthermore, these are purely editor-exclusive, and very situational. Too much to be in **Object**, personally.
This has me think there's got to be a better way to accomplish what one may need this for. Namely, exposing these methods through another Editor-exclusive class.","2024-09-01T19:05:31Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-15T17:08:28Z",false,"APPROVED"
"kleonc","MEMBER","Seems way more user friendly indeed, code looks good.","2024-05-08T10:07:37Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-08T09:20:54Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-05-08T08:36:24Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-25T08:44:55Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-05-08T02:47:02Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-08T07:19:06Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-08T07:19:34Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-05-08T05:22:03Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-05-08T15:55:17Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-05-08T01:01:00Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-07T23:01:22Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-05-07T23:11:52Z",false,"APPROVED"
"devloglogan","CONTRIBUTOR","This fixed the composition layer issue right up for me. Thanks! :)","2024-05-08T02:56:30Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","LGTM, indeed now that we've reorganised things so we have initial support for multi-threading, we'll likely have a few improvements to make in the extensions.

I think it's going to become important that we do most of our testing with multithreading turned on, though I fear it may be a bit to early as we might end up chasing issues that aren't caused by XR but because there are missing fixes in multithreading as a whole. ","2024-05-08T04:07:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-07T22:43:12Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","This could really use a [proposal](https://github.com/godotengine/godot-proposals/issues) or discussion somewhere to gauge interest.

There's nothing purely wrong on the implementation, but judging by the above conversation it's situational and tailored specifically to the game you are developing. Hence it's worth questioning if this needs to be in core.","2024-06-23T19:51:02Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-05-07T22:05:05Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-05-07T22:45:54Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-07T22:41:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-07T22:26:51Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-28T16:51:34Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-28T16:52:38Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-28T16:53:14Z",false,"COMMENTED"
"sourcelocation","NONE","","2024-07-28T17:39:09Z",false,"COMMENTED"
"raulsntos","MEMBER","I haven't tested it, but it looks good as discussed in RC.","2024-05-08T01:46:03Z",false,"APPROVED"
"bruvzg","MEMBER","> Windows now correctly checks for both debug_symbols and separate_debug_symbols before attempting separation; previously, it only checked for the former.

This was intentional, MinGW build should check for executable size and force debug symbols if it's too large (see https://github.com/godotengine/godot/pull/79875), but seems like the logic is already broken by https://github.com/godotengine/godot/pull/85319, the following two lines were likely accidentally removed during rebase:

```
    # Force separate debug symbols if executable size is larger than 1.9 GB.
    if env[""separate_debug_symbols""] or os.stat(target[0]).st_size >= 2040109465:
```","2024-05-08T05:10:45Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-07T11:34:46Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-27T16:21:48Z",false,"COMMENTED"
"Calinou","MEMBER","Code looks good to me.","2024-08-05T14:26:54Z",false,"APPROVED"
"vnen","MEMBER","LGTM","2024-05-18T20:10:03Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-07T08:13:49Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-05-07T10:01:27Z",false,"APPROVED"
"fire","MEMBER","","2024-05-07T10:07:32Z",false,"APPROVED"
"lawnjelly","MEMBER","Looks fine to me, but probably needs another approval as this could be controversial.","2024-05-08T08:50:35Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-07T06:23:04Z",false,"APPROVED"
"raulsntos","MEMBER","> Or is there something I'm missing/misunderstanding?

@paulloz No, I think you got it perfectly. Whenever something changes behavior I get a little nervous, but I think you are completely correct that it won't be disruptive, thank you.

> Should `[Export]` be used consistently with `@export_custom`?

@ZerxZ Yeah, I think the GDScript annotation fulfills the same use cases. Thank you for showing how `@export_custom` works, this was helpful. I think it makes sense to follow the same behavior, and it probably matches user expectations when using the attribute.

---

So it sounds like there's consensus on allowing explicit hints override computed hints, since explicitness indicates intention. We should probably make sure other hints also work like this, but that would be work for a follow-up PR.

This PR goes in that direction and works as expected, so I'm approving.","2024-05-08T16:23:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-07T06:07:17Z",false,"COMMENTED"
"charlieb","NONE","","2024-05-07T17:32:20Z",false,"COMMENTED"
"clayjohn","MEMBER","We may want to disable updating the radiance maps when the reflection source is not background. 

Right now, this will continue to update the radiance maps as long as the background mode is set to sky, even if the reflection mode is set to custom color. 

The current logic for updating the radiance maps is:
```
if (draw_sky || draw_sky_fog_only || environment_get_reflection_source(p_render_data->environment) == RS::ENV_REFLECTION_SOURCE_SKY || environment_get_ambient_source(p_render_data->environment) == RS::ENV_AMBIENT_SOURCE_SKY) {
```","2024-05-07T02:20:08Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-05-13T01:04:52Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks good to me!","2024-05-13T20:04:43Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","","2024-05-07T09:08:37Z",false,"APPROVED"
"fire","MEMBER","","2024-05-07T10:09:12Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-05-06T21:38:58Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-05-07T05:06:54Z",false,"APPROVED"
"Geometror","MEMBER","Looks great, there is just one thing:
The new minimap icon definitely goes into the right direction, but it does look a bit out of place IMO. I'm not sure whether the map marker actually improves the recognizability.","2024-07-12T14:19:26Z",false,"COMMENTED"
"Geometror","MEMBER","What do you think about using just one color for the icon?
![image](https://github.com/user-attachments/assets/136b5b61-3515-4391-85aa-22b084f3deb8)
IMO that fits a tiny bit better, however I'm fine with it either way, so it's up to you :)

To make this PR mergeable, please squash you commits and rebase.","2024-07-16T08:57:59Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-05-07T06:32:46Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-07T06:40:26Z",false,"COMMENTED"
"jogly","NONE","","2024-05-07T14:38:27Z",false,"COMMENTED"
"jogly","NONE","","2024-05-07T15:30:49Z",false,"COMMENTED"
"aaronfranke","MEMBER","I spent about 10 minutes looking around this file reviewing this change. Disclaimer: I'm not an expert in the SceneImportSettingsDialog code.

I looked around to see what was the intention here, to see what is the precedent for handling loading the settings, because I was suspicious as to why similar code did not exist next to this code, and why nothing else was altering the data after it was read from `_load_default_subresource_settings`.

It seems that the precedent is that... there was no existing code handling the same thing. `""settings/loop_mode""` is the only thing in here that behaves like this. As far as I can tell this is the only case where we need to round-trip read it back into the settings, because in most cases the dialog is the source of truth, but this is a special case where the animation looping can be set to true without the dialog's help.

Anyway, this seems correct, and the code looks very safe (it only changes the dialog's loop mode setting if it was not already set), so I'm approving this PR.","2024-10-10T06:07:51Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","","2024-10-11T03:33:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-13T15:12:45Z",false,"APPROVED"
"akien-mga","MEMBER","Looks great to me!","2024-05-09T10:07:14Z",false,"APPROVED"
"Calinou","MEMBER","","2024-05-06T18:04:18Z",false,"APPROVED"
"akien-mga","MEMBER","Makes sense to me. But should we wait for #91382 to be merged first before merging this too?","2024-05-07T06:59:25Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-05-07T01:02:36Z",false,"COMMENTED"
"Maran23","CONTRIBUTOR","","2024-05-16T21:04:02Z",false,"COMMENTED"
"Daylily-Zeleen","CONTRIBUTOR","","2024-05-18T15:35:07Z",false,"COMMENTED"
"Daylily-Zeleen","CONTRIBUTOR","","2024-05-18T15:44:52Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-24T17:55:48Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-24T20:04:40Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-25T07:55:41Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-06T15:29:31Z",false,"APPROVED"
"smix8","CONTRIBUTOR","Yes please.

The navigation module NavMap also has a lot of uses of the LocalVector find() that you could likely replace if you feel like it.","2024-05-06T15:56:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-06T15:19:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-06T16:26:52Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","The diff looks fine and I really appreciate this change!

Thanks for splitting the patch, it really helped with reviewing as I could go in full pattern-matching mode with the word diff.","2024-05-08T10:11:31Z",false,"APPROVED"
"akien-mga","MEMBER","Also looks good to me. I guess we can squash before merge now that it's been reviewed.","2024-05-08T10:16:03Z",false,"APPROVED"
"mhilbrunner","MEMBER","Thank you so much! Spotted nothing.","2024-05-08T11:07:14Z",false,"APPROVED"
"HolonProduction","MEMBER","No need to call it twice, or am I missing something?","2024-07-04T14:32:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-08T17:26:01Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-05-06T13:20:00Z",false,"COMMENTED"
"kleonc","MEMBER","Overall LGTM!
(just small comment style nitpick)","2024-05-07T16:33:51Z",false,"APPROVED"
"Frozenfire92","CONTRIBUTOR","","2024-05-07T21:43:26Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-07T22:31:18Z",false,"COMMENTED"
"Frozenfire92","CONTRIBUTOR","","2024-05-07T22:35:50Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-07T22:44:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-06T10:51:36Z",false,"COMMENTED"
"kleonc","MEMBER","Might introduce some very minor behavior changes because of the slightly changed checks here and there (potential regressions seem rather unlikely though), but unifying these checks / removing inconsistencies absolutely does make sense. :+1:","2024-05-06T13:55:12Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-06T13:56:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-06T13:57:03Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-05-06T14:56:19Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-06T15:14:47Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-08T10:20:40Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-08T10:34:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-08T10:47:33Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-25T06:59:37Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-05-06T05:31:54Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-05-06T05:33:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-06T15:05:13Z",false,"DISMISSED"
"AThousandShips","MEMBER","LGTM, didn't test the setup with the config file solution but the functionality was good previously and the code looks right","2024-05-08T15:16:38Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-08T16:07:12Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-08T16:15:22Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-08T16:16:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-08T16:16:27Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-08T16:24:07Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally on Windows 11, I noticed some issues:

- The Load/Save icons remain highlighted after you exit the FileDialog in any way. This persists if you close/reopen the ColorPicker on a given property in the inspector.
- In the editor, the default save location is `user://`, which means color palettes are not saved within the project folder and won't be saved in version control. I suggest making the default save location `res://`, but use the `ACCESS_FILESYSTEM` FileDialog mode so that the user can choose to save the palette outside `res://` if they so wish.
  - Outside the editor, the default save location should remain `user://` as it's guaranteed to be writable (unlike `res://`). That said, I'd say the access mode should also be `ACCESS_FILESYSTEM` for the same reasons as the editor.
    - `Engine::get_singleton()->is_editor_hint()` should be used here to differentiate editor and running project.
- We should use a file extension different than `.cpl`, as this extension is already used by Windows for control panel items. This causes Windows Explorer to have a default file association that doesn't make sense. `.pal` and `.plt` are already taken by various other apps still in use today, but `.ple` seems mostly unused (only Windows Live Messenger used it for encrypted chat logs in the 2000s).","2024-05-09T00:31:42Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","","2024-05-09T00:32:24Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-05-09T00:32:41Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it mostly works as expected.

https://github.com/godotengine/godot/assets/180032/b4f105e6-f9ce-4e05-841d-7b3dc4e052ce

I still noticed some issues though:

- There are inconsistencies when saving/loading palettes across different ColorPicker nodes that have the same palette loaded. The dirty marker (`*`) isn't always present when it should be, for instance. You can see a few instances of this in the above video.
- I *sometimes* can't remove certain colors from a palette by right-clicking them. I'm not sure what triggers this exactly.
- Loading palettes from a running project doesn't seem to work (saving works - you can load the palette from a running project in the editor).
- The save/load buttons should expand the Swatches section of the ColorPicker when you successfully save or load a swatch. Right now, if the Swatches section is still collapsed, it'll appear like the buttons do nothing after selecting a file.
- The save button should be hidden if there are no colors in the swatch yet. In this situation, only loading a palette makes sense.","2024-05-12T23:43:52Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-05-14T17:18:58Z",false,"COMMENTED"
"nongvantinh","CONTRIBUTOR","","2024-05-14T17:22:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-15T16:57:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-15T17:12:35Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-15T17:14:21Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-15T17:15:35Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-15T17:15:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-16T09:16:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-17T12:19:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-17T12:31:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-17T12:32:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-17T12:32:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-17T12:32:58Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-17T12:58:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-18T07:48:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-18T07:49:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-18T07:51:29Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-18T11:22:40Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-19T12:25:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-19T12:51:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-19T12:57:29Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-19T12:58:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-19T13:00:53Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-19T13:02:32Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-19T13:03:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-19T13:04:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-19T13:11:51Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-19T13:12:13Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-19T13:17:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-19T13:19:20Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-19T13:21:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-19T15:32:14Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-19T15:32:40Z",false,"COMMENTED"
"nongvantinh","CONTRIBUTOR","","2024-05-19T15:38:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-19T15:39:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-19T15:39:51Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-25T17:09:20Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-25T17:15:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-25T19:28:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-25T19:29:07Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-26T14:15:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-26T14:15:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-26T14:15:50Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-26T14:16:29Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-26T14:16:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-26T14:17:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-26T14:17:04Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-26T14:22:05Z",false,"COMMENTED"
"nongvantinh","CONTRIBUTOR","","2024-05-26T14:33:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-26T14:34:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-31T12:50:24Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-19T11:01:08Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

I noticed a few UI issues though:

- When using **Quick Load**, the color picker closes, so you can't see your palette being loaded (it still loads correctly when you reopen the color picker). This does not happen when using **Load** - the color picker stays open as expected.
- The button in the dropdown is **Save**, but it always displays a file dialog even if a color palette file was already loaded. In this case, it should be renamed to **Save As...**. A **Save** button that overwrites the existing loaded palette could also be added above **Save As...** (this button should be disabled if no palette is loaded).","2024-10-11T09:04:47Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-05-06T12:24:51Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/55b8724bd5188932b69a6ee484ab092cd95d4498), it works as expected.

**Testing project:** [test_lightmap_padding.zip](https://github.com/godotengine/godot/files/15239685/test_lightmap_padding.zip)

Before | After (Denoiser Range = 2)
-|-
![Screenshot_20240507_204621](https://github.com/godotengine/godot/assets/180032/fdedce5c-dfe8-4379-b001-d7fe3f714170) | ![Screenshot_20240507_204447](https://github.com/godotengine/godot/assets/180032/67b8500b-c0ea-47b2-bb3e-ac668b661206)
","2024-05-07T18:47:35Z",false,"APPROVED"
"DarioSamo","CONTRIBUTOR","","2024-05-10T12:54:15Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-05-10T12:54:47Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-05-10T12:55:54Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","LGTM, just need to address a few minor issues.","2024-05-10T12:56:10Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-05-10T12:56:20Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","Changes look good!","2024-05-15T11:43:22Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it mostly works as expected.

**Testing project:** [test_pr_91599.zip](https://github.com/godotengine/godot/files/15226588/test_pr_91599.zip)

I noticed 2 issues though:

- Changing a key's easing in the inspector does not update what you see in the editor in real-time. It only updates when you scrub the timeline again:

https://github.com/godotengine/godot/assets/180032/26a2cd1f-8c70-4707-a049-ab3a8610e4af

- Using undo after modifying a key's value in the inspector does not reflect in real-time until you scrub the timeline:

https://github.com/godotengine/godot/assets/180032/9e696b84-498c-4031-b4ee-82aa87e15093

","2024-05-06T21:08:42Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","From a code standpoint, it looks that the specified arguments of the AnimationPlayer methods are fine. I will wait for the fixes to some of the behaviors pointed out above.","2024-05-07T01:07:54Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-05-07T04:25:47Z",false,"CHANGES_REQUESTED"
"dnllowe","CONTRIBUTOR","","2024-05-07T11:48:44Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-05-07T12:12:38Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-05-07T12:16:43Z",false,"COMMENTED"
"dnllowe","CONTRIBUTOR","","2024-05-07T12:17:10Z",false,"COMMENTED"
"TokageItLab","MEMBER","Pointing out two things from the test:

https://github.com/godotengine/godot/assets/61938263/296d7359-63dd-491d-90b4-5222dda74e32

- Selecting a keyframe causes a seek due to the KeyEdit updating on the inspector, which does not exist previously and probably was not the intended change and needs to be fixed
- Inconsistencies occur when key times are moved by the inspector","2024-05-07T12:30:21Z",false,"CHANGES_REQUESTED"
"SudeySjan","NONE","","2024-05-28T23:46:02Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` 374807f427eec5ee7caebfc509a158fe715a6bfe), it mostly works as expected.

There are 2 more remaining issues I noticed:

- Changing playback mode or interpolation mode with these icons doesn't update the animation preview until you scrub the timeline:

![image](https://github.com/godotengine/godot/assets/180032/2279ba1d-90c5-43f6-9298-73aecbe44b92)

- If you drag a keyframe, it only updates the animation preview once the mouse cursor is released. I think it should update in real-time, without requiring you to release the mouse cursor. This is how it works already if you edit a property by dragging in the inspector.","2024-06-27T00:02:42Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","Need to squash.

The AnimationPlaybackTrack is not updated in real time, but since the AnimationPlaybackTrack is special case, so I judge that it is fine for now. I think we can follow up as needed, but probably refactoring https://github.com/godotengine/godot-proposals/issues/8783 first.","2024-08-26T06:12:26Z",false,"APPROVED"
"Calinou","MEMBER","Looks good to me now. Great work!","2024-08-30T10:36:49Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-05T21:52:59Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-06T08:00:24Z",false,"APPROVED"
"akien-mga","MEMBER","Reviewed the code, looks really good.","2024-05-08T14:28:48Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","","2024-05-08T14:46:32Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-05-08T14:48:47Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-08T16:05:17Z",false,"APPROVED"
"rburing","MEMBER","","2024-05-05T21:48:36Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-06T10:19:44Z",false,"COMMENTED"
"Chaosus","MEMBER","Perhaps it would be helpful as a quick fix.","2024-05-05T18:29:43Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-12T10:40:40Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-12T10:41:56Z",false,"APPROVED"
"ajreckof","MEMBER","","2024-05-12T21:05:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-13T11:31:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-13T11:33:34Z",false,"COMMENTED"
"ajreckof","MEMBER","","2024-05-13T11:39:07Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-13T11:40:06Z",false,"COMMENTED"
"ajreckof","MEMBER","","2024-05-13T11:41:53Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-05T09:24:09Z",false,"APPROVED"
"rburing","MEMBER","","2024-05-05T16:41:43Z",false,"DISMISSED"
"AThousandShips","MEMBER","","2024-05-05T16:43:55Z",false,"DISMISSED"
"AThousandShips","MEMBER","","2024-05-05T17:08:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-05T17:10:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-05T17:10:23Z",false,"COMMENTED"
"rburing","MEMBER","Looks good to me.","2024-05-05T17:18:34Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-05T17:18:35Z",false,"APPROVED"
"Calinou","MEMBER","","2024-05-06T17:06:00Z",false,"COMMENTED"
"hermet","NONE","@beicause Could you please check the comments? 

Also an opinion:
I just noticed that generating all frame images like this is quite intensive. I expect that dynamically updating the texture every frame by using ThorVG animation would be better for saving texture memory and reducing the harsh initialization bottleneck.","2024-05-10T09:28:32Z",false,"COMMENTED"
"hermet","NONE","Thank you for your update. I have some additional feedback on your code, although it might not help to resolve this issue.

Unfortunately, I've tried similar calls with our ThorVG example with your attached resource(lottie.json in lottie_test.zip) using one extra thread but didn't encounter any issues, and even the thread sanitizer didn‚Äôt report anything.

I might need more context. Could you please conduct some tests and observe the results?

1. Disable the ThorVG threading feature and see the result:
-> Remove `#define THORVG_THREAD_SUPPORT` in inc/config.h.
2. Does this worker thread seems not same with the thread which calls initialize_svg_module? 
![image](https://github.com/godotengine/godot/assets/3711518/c1abae92-b8cf-42fa-a02c-6ae16b0d5d73)
3. How many LottieTexture2D instances are created from this issue, and does update_image() calls are made just once per its instance?","2024-05-11T12:37:47Z",false,"COMMENTED"
"beicause","CONTRIBUTOR","@hermet 
After disabling ThorVG thread support, I get in the infinite(?) loop in `sw_engine/tvgSwRle.cpp` `static void _cubicTo`(lines 665)
Sometimes it's OK, but sometimes the `rc` is very negative, I print it as follow:
![2024-05-13 00-07-58Â±èÂπïÊà™Âõæ](https://github.com/godotengine/godot/assets/75941842/fd14addd-262b-4d83-8b9c-a3171c93effb)

Then I wait `arc` gradually decreasing, but `rw.bezStack` is (-1682252790473928, -1682252790480408), which is too negative and impassable to reach.
![2024-05-13 00-50-47Â±èÂπïÊà™Âõæ](https://github.com/godotengine/godot/assets/75941842/fce27938-a666-4277-aaf8-d97331690720)

Additional info: In the same game project, the left successfully run, while the right is stuck, log diff:
![2024-05-13 14-14-11Â±èÂπïÊà™Âõæ](https://github.com/godotengine/godot/assets/75941842/81a0f801-0852-4bce-9dfc-9c590889587f)
","2024-05-12T15:09:58Z",false,"COMMENTED"
"beicause","CONTRIBUTOR","","2024-05-12T15:39:15Z",false,"COMMENTED"
"hermet","NONE","","2024-05-13T13:12:27Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-05T09:00:00Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-05T11:15:39Z",false,"APPROVED"
"pgh1686","CONTRIBUTOR","","2024-05-06T01:45:27Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Makes sense! I didn't do any testing, but the code looks good to me :-)","2024-05-06T22:44:45Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-05-04T19:58:11Z",false,"APPROVED"
"akien-mga","MEMBER","Confirmed that it's already correct in forward_plus and gl_compatibility. And not relevant for 4.2, this is new code in 4.3.","2024-05-06T08:59:16Z",false,"APPROVED"
"raulsntos","MEMBER","Thanks. I think it makes sense for `CSharpScript` to only contain the members declared in the C# type that it represents, then the inherited members can be retrieved by iterating the hierarchy chain.

The same change should likely be made to the other members (properties and signals), and we must make sure the behavior matches GDScript (i.e. if `GDScript::get_method_list` iterates the hierarchy chain and returns inherited methods, then `CSharpScript::get_method_list` should return inherited methods too).

For example, we still have a loop in _RPC functions_ that retrieve the RPC attribute for methods from base types, and in _Event signals_ that retrieve the signals from base types.

The method generated method `GetGodotPropertyList` would similarly have to be updated to only consider the properties in the current type (and not the base types), this would also fix https://github.com/godotengine/godot/issues/75271.

I know this sounds like a lot, but I'd rather make all these changes in the same PR to avoid ending up in an partial change where some members are retrieved only for the current type, and others also retrieve from the base types.","2024-05-05T01:38:43Z",false,"COMMENTED"
"raulsntos","MEMBER","Looks good and works as expected, thanks!","2024-05-10T02:26:45Z",false,"APPROVED"
"fire","MEMBER","This makes sense, but I am not sure of any sideeffects.","2024-05-04T14:51:48Z",false,"COMMENTED"
"TokageItLab","MEMBER","> I don't know why this was commented out, as it worked in every case I tested.

No. I remember I commented out them because the bones between the mapped bones have rest rotation on sharing animation in Godot 4 caused corrupting the animation sharing even if the those unmapped bones are not animating.

For example such case:
[LeftUpperArm] - [elbow_l(unmapped)] - [LeftLowerArm] - [wrist_l(unmapped)] - [LeftHand]

I think it's fine to keep their original rest if ""there are no mapped bones in their children"", so at least that check needs to be made.","2024-05-04T22:58:49Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","LGTM","2024-05-05T04:01:31Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","In terms of code, it's ok. This is haphazardly changing the rest rotation for some non-human bones, and I think the logic seems a little non-obvious. For example, it checks if a child is mapped, but what about grandchildren.

Will a user understand why a ""elbow twist"" bone has rotation changed while a ""elbow sleeve"" bone keeps the original rotation?

Furthermore, there may be users who have created BoneAttachments using the identity Basis and adjusted for it either in code or by manually positioning attached objects. Therefore, this risks compatibility break with any existing scenes / bone attachments. which were made assuming the previous design (which has stayed the same since Godot 4.0 was released)

With Godot 4.3 about to hit beta, this is quite late in the release cycle to be changing a fundamental part of the retargeting design.

At the very least, if we decide to go forward with this change, we need to include a compatibility setting on the retarget settings (Skeleton3D) which defaults to the old behavior for existing files and a different setting for new files.","2024-05-05T04:42:20Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","Ah yes, sorry I missed that it only looks at the children and not the grandchildren.

As long as we don't reimport them, there should be no compatibility issues, but I don't know how to handle compatibility as I don't have a strong opinion for that.

At least if you change it to check its grandchildren, I still can approve this, IMO. For performance, it would better to scan from parentress_bone to pre-create a whitelist with no mapped descendants and check if the rest rewriting bones are included in it.","2024-05-05T04:56:49Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","","2024-05-06T06:03:13Z",false,"CHANGES_REQUESTED"
"ydeltastar","CONTRIBUTOR","","2024-05-06T13:18:01Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-05-06T19:54:20Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-05-07T01:00:07Z",false,"CHANGES_REQUESTED"
"lyuma","CONTRIBUTOR","","2024-05-07T01:24:54Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-05-07T01:40:53Z",false,"COMMENTED"
"ydeltastar","CONTRIBUTOR","","2024-05-07T02:28:03Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-05-07T02:53:59Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-05-07T02:56:47Z",false,"COMMENTED"
"ydeltastar","CONTRIBUTOR","","2024-05-07T04:30:12Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","With an import option here it's ok.

Note: queue vector .erase(), whitelist vector .has() and nested for loop are all order N^2 time complexity. This is an endemic problem with the Godot import code and not isolated to this codepath so I'll approve anyway.","2024-05-07T08:52:07Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-07T08:55:08Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-05-07T12:06:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-04T14:40:49Z",false,"APPROVED"
"raulsntos","MEMBER","LGTM. Thanks!","2024-05-21T04:28:54Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-04T12:01:34Z",false,"COMMENTED"
"AlexanderFarkas","CONTRIBUTOR","","2024-05-04T12:12:16Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-05-07T23:24:27Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected (Windows 11). I no longer get errors when **Save on Focus Loss** kicks in.

The downside of this approach is that if saving takes a long time (e.g. due to a huge binary resource being serialized as text in a scene file), the editor will appear to freeze for a few seconds if you alt-tab back in quickly. Still, I consider this is preferable to displaying an error every time the editor loses focus.

Eventually, the scene saving UX should be reworked to use a visually non-blocking method that doesn't need to spawn a dialog. This will alleviate the issue entirely while being less intrusive when you press <kbd>Ctrl + S</kbd> or when saving before running a scene.","2024-05-07T23:26:12Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-04T09:18:16Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-04T09:19:37Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-05-04T09:27:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-04T09:27:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-04T09:34:35Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-05-04T09:42:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-04T08:30:58Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-04T08:33:49Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Documentation is fine.

It seems like it was @clayjohn 's idea to [make it a project setting](https://github.com/godotengine/godot/issues/91531#issuecomment-2093675452). I wonder what he thinks of it now.

As for me, I heavily appreciate the more explicit error message, although I really worry it will be spammed a lot.","2024-07-05T20:13:32Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-07T10:23:32Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-16T13:36:26Z",false,"APPROVED"
"clayjohn","MEMBER","I've tested locally and it works fine!
","2024-05-16T15:30:21Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-04T08:13:08Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-05-08T10:52:37Z",false,"APPROVED"
"kitbdev","CONTRIBUTOR","","2024-05-03T21:25:02Z",false,"COMMENTED"
"akien-mga","MEMBER","I confirm this fixes the crash when exiting after `--import` on Linux.","2024-05-07T14:40:58Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-09T09:56:40Z",false,"COMMENTED"
"rburing","MEMBER","","2024-05-09T10:15:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","Can't confirm the exact functionality but I approve of this feature","2024-05-26T10:47:29Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (together with https://github.com/godotengine/godot-docs/pull/9324), it works as expected.

https://github.com/godotengine/godot/assets/180032/ac0f2a32-db72-4b4a-9ded-3db40d5c3123","2024-05-26T18:08:19Z",false,"APPROVED"
"fire","MEMBER","","2024-05-03T21:03:25Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-06T13:10:56Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-06T13:11:06Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-06T13:11:40Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

## Benchmark

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 39)
</details>

Using a Linux optimized (`optimize=speed lto=full`) editor build.

| image | CVTT | Betsy |
|--------|------|-------|
| <a href=https://hdri-haven.com/hdri/french-type-garden>French graden 8k with mipmaps</a> | 52.3s | 4.2s |
| <a href=https://hdri-haven.com/hdri/german-town-corner-at-night>German town at night 4k with mipmaps</a>| 14.1s | 1.1s |
| <a href=https://hdri-haven.com/hdri/church-at-starry-night>Church at starry night 8k with mipmaps</a>| 56.7s | 4.1s |

This is on average a speedup of **13.1√ó**.

It's strange how my import speeds are quite a bit slower than @BlueCube3310's though, considering my GPU is significantly faster. I measured the times by starting the editor with `--verbose`, which prints the time taken after every reimport. The texture was assigned to a StandardMaterial3D so it was detected as used in 3D, which enables VRAM compression and mipmaps.

Output quality seems pretty much identical ‚Äì¬†I can't spot any differences.

Impact on stripped binary size:

```
115,089,512  godot.linuxbsd.editor.x86_64
115,118,184  godot.linuxbsd.editor.x86_64.betsy-bc6h
```

This is only 30 KB and only affects editor builds, so it's pretty reasonable.

Great work :slightly_smiling_face: 

PS: hdri-haven.com is a typosquatting site, use [hdrihaven.com](https://hdrihaven.com) (which redirects to [polyhaven.com](https://polyhaven.com)) instead.","2024-05-06T16:56:48Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-06T16:59:48Z",false,"APPROVED"
"fire","MEMBER","","2024-05-09T19:18:07Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-09T19:20:02Z",false,"COMMENTED"
"BlueCube3310","CONTRIBUTOR","","2024-05-10T08:20:02Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-10T09:54:14Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-10T10:47:36Z",false,"COMMENTED"
"BlueCube3310","CONTRIBUTOR","","2024-05-10T11:17:42Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-10T11:49:17Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-05-10T14:28:39Z",false,"COMMENTED"
"BlueCube3310","CONTRIBUTOR","","2024-05-11T11:28:21Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-18T01:54:52Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-18T01:57:46Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-18T17:15:15Z",false,"COMMENTED"
"clayjohn","MEMBER","Everything looks good to me! Thank you very much for moving this forward","2024-08-20T16:15:04Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-05-03T19:56:35Z",false,"APPROVED"
"fire","MEMBER","","2024-05-03T19:03:05Z",false,"APPROVED"
"fire","MEMBER","Having that amount of warning messages sounds like it causes other problems of causing editor stuttering. I am not sure how to resolve.","2024-05-04T09:33:08Z",false,"DISMISSED"
"lyuma","CONTRIBUTOR","","2024-05-07T09:09:55Z",false,"APPROVED"
"bqqbarbhg","CONTRIBUTOR","","2024-05-03T18:32:00Z",false,"COMMENTED"
"bqqbarbhg","CONTRIBUTOR","","2024-05-03T18:34:31Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-03T18:40:32Z",false,"COMMENTED"
"bqqbarbhg","CONTRIBUTOR","","2024-05-03T18:44:05Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-05T04:00:08Z",false,"COMMENTED"
"bqqbarbhg","CONTRIBUTOR","","2024-05-05T10:32:14Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-06T21:44:59Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-07T11:30:19Z",false,"APPROVED"
"fire","MEMBER","@lyuma looks good to me.","2024-05-03T18:34:48Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-05T23:00:24Z",false,"APPROVED"
"BSChad","NONE","","2024-05-06T13:07:37Z",false,"COMMENTED"
"paddy-exe","CONTRIBUTOR","LGTM. The const could be added in the already specified section","2024-05-06T22:31:03Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-05-06T22:35:21Z",false,"COMMENTED"
"paddy-exe","CONTRIBUTOR","","2024-05-06T22:55:38Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-07T07:13:53Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-07T07:59:20Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-05-07T08:41:10Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-05-07T15:25:27Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-07T15:37:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-07T15:38:24Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-05-10T20:18:02Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-05-10T23:23:41Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-05-11T04:04:17Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-05-13T13:20:56Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great! Let's go ahead and merge. 

For maintainers, this shouldn't be cherrypicked","2024-05-13T16:25:29Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-03T12:30:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","Makes sense to me, haven't tried but the logic is valid","2024-05-03T12:30:48Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-03T12:32:38Z",false,"COMMENTED"
"raulsntos","MEMBER","Works as expected, thanks!","2024-05-03T17:31:21Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-05-04T06:56:14Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-05-08T07:34:36Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-05-08T10:10:08Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-05-09T08:27:41Z",false,"COMMENTED"
"TokageItLab","MEMBER","LGTM from point of view of implementation","2024-05-09T08:41:57Z",false,"APPROVED"
"dalexeev","MEMBER","A test should be added to `modules/gdscript/tests/scripts/parser/errors/`.","2024-05-03T11:00:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-03T17:29:37Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-14T18:45:05Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-14T18:45:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-15T08:00:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-03T08:14:53Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-03T08:28:10Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-03T08:28:21Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-03T10:27:15Z",false,"COMMENTED"
"aaronp64","CONTRIBUTOR","","2024-05-03T12:36:02Z",false,"COMMENTED"
"aaronp64","CONTRIBUTOR","","2024-05-03T12:37:35Z",false,"COMMENTED"
"fire","MEMBER","I support this pr enhancement. What is needed to get this mergable for a future release?

Reduz wrote unit tests, but traditionally that has not been a blocker.

Edited:

Did some thinking, if we know the types of the Variant, we can coherce the float into int and int into floats. The minimal epsilon between floats is small until we use the exponential scientific notation in floats to scale.","2024-06-01T17:18:29Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-04T07:52:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-04T07:53:21Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-05-04T08:38:49Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-05-04T08:39:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-04T08:39:33Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-04T08:40:17Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-05-04T08:54:36Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-05-04T08:55:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-04T08:56:49Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-29T23:13:27Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-30T08:29:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-30T08:49:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-30T08:50:34Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-30T08:56:31Z",false,"COMMENTED"
"wenqiangwang","NONE","","2024-09-08T23:18:33Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-09T07:25:32Z",false,"APPROVED"
"akien-mga","MEMBER","Let's go with the workaround for now, but it would be good to find a more robust solution later on.","2024-05-13T15:14:12Z",false,"APPROVED"
"KoBeWi","MEMBER","It's a hack, but at least it fixes the issue.","2024-05-05T04:50:12Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/84dcdde9088d512efebb0033fb881d8f7fd9c107), it works as expected on Windows 11 23H2. Window modes other than Minimized are unaffected by this PR (as expected).

This makes for a nice easy way to [hide the boot splash](https://github.com/godotengine/godot-proposals/issues/3144) (albeit with a taskbar entry still being visible during boot), since you can set the window mode to **Minimized** in the Project Settings and restore the window in an autoloaded script's `_ready()` method.","2024-09-18T13:13:28Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-10-04T10:22:57Z",false,"APPROVED"
"RandomShaper","MEMBER","LGTM.","2024-05-06T09:24:33Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-07T12:20:42Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-07T12:23:52Z",false,"COMMENTED"
"devloglogan","CONTRIBUTOR","","2024-05-03T16:24:35Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-03T17:12:11Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","Just a few nit-picking things, looks good! ","2024-05-07T00:40:45Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Looks good!","2024-05-07T07:31:54Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-07T07:54:58Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-05-07T09:17:49Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-07T14:51:14Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-07T14:51:20Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-07T14:51:46Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-07T14:56:28Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","Looks good!","2024-05-07T16:04:35Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-10T14:25:08Z",false,"COMMENTED"
"KoBeWi","MEMBER","I wonder if it wouldn't be better to make `focus_dock()` return a `bool` instead of partially duplicating it, but it's fine this way too.","2024-05-10T14:26:06Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-10T19:12:28Z",false,"APPROVED"
"Geometror","MEMBER","","2024-07-12T11:22:15Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-08-17T22:28:21Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-08-17T22:30:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-02T21:52:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-02T21:55:04Z",false,"APPROVED"
"MBCX","CONTRIBUTOR","","2024-05-02T21:58:38Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-05-02T22:07:09Z",false,"COMMENTED"
"YeldhamDev","MEMBER","LGTM","2024-05-02T22:18:32Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-05-07T12:12:04Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-05-02T21:42:53Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-05-02T22:00:37Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-03T16:49:31Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-03T17:04:42Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-05-03T17:05:39Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-03T17:18:37Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-05-03T17:23:55Z",false,"COMMENTED"
"raulsntos","MEMBER","LGTM. Thanks!","2024-05-04T02:12:50Z",false,"APPROVED"
"dalexeev","MEMBER","Looks good to me.","2024-05-02T18:29:23Z",false,"APPROVED"
"KoBeWi","MEMBER","Interestingly, last time this line was modified was in #87121, which fixed a similar issue ü§î
The change looks safe. I tried all file dock positions and it works.","2024-05-10T19:19:22Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-02T16:16:56Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-03T06:34:06Z",false,"APPROVED"
"smix8","CONTRIBUTOR","Tested and so far both TileMap and TileMapLayer node bake as expected.","2024-05-02T16:03:44Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-02T16:04:02Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-02T14:43:11Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","","2024-05-02T13:53:05Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-02T13:54:52Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-02T11:28:57Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-02T11:30:08Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-05-02T18:39:17Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-05-04T07:01:49Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-05-04T09:39:15Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-05-04T09:49:07Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-05-04T09:50:25Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-31T07:51:02Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-31T07:51:11Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-31T07:52:55Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-05-02T20:23:12Z",false,"COMMENTED"
"Arnklit","CONTRIBUTOR","","2024-05-14T10:43:18Z",false,"COMMENTED"
"kleonc","MEMBER","Haven't tested but calculations look good. :+1:","2024-05-14T11:46:24Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-02T10:07:09Z",false,"APPROVED"
"YeldhamDev","MEMBER","Seems to be working well, great job!

On a slightly unrelated note, the docs on `play_with_capture()` states:
> If name is blank, it specifies [member assigned_animation].

Besides ""name"" needing to be changed to ""[param name]"", `name` should likely allow to be left blank, like its `play()` counterpart.","2024-05-02T05:01:04Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-02T07:38:50Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-05-02T10:59:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-02T11:00:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-02T20:26:19Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-02T20:29:00Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good! I was wondering if we should backport those PRs to 4.2 and 4.1 indeed, a minimal pick like this for Apple devices only sounds great.","2024-05-02T07:55:19Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-12T21:04:29Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-05-01T23:43:09Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-02T07:38:02Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-02T07:29:31Z",false,"APPROVED"
"fire","MEMBER","","2024-05-01T23:33:47Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-11T10:46:05Z",false,"COMMENTED"
"KoBeWi","MEMBER","I can't really comment on the core changes, other than they are necessary for this fix. It does work correctly though (aside from the 2 containers mentioned above).","2024-05-11T11:13:03Z",false,"APPROVED"
"ArchieVillain","NONE","","2024-05-11T20:46:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-11T20:49:10Z",false,"COMMENTED"
"ArchieVillain","NONE","","2024-05-11T22:15:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-29T09:51:52Z",false,"COMMENTED"
"raulsntos","MEMBER","Thanks for contributing to the .NET module!

I think we need some kind of indicator when the build is ongoing, at least to reassure users after they press the build button that their input was recognized.

Also, since you are a new contributor, make sure to read [CONTRIBUTING.md](https://github.com/godotengine/godot/blob/cdd2313ba27d0a2600a18e849b4c5d1fd6a6e351/CONTRIBUTING.md) and the [contributing documentation](https://docs.godotengine.org/en/latest/contributing/workflow/pr_workflow.html) if you haven't already.

You'll need to squash the commits before this PR can be merged. The [contributing documentation](https://docs.godotengine.org/en/latest/contributing/workflow/pr_workflow.html#the-interactive-rebase) contains information about squashing in case you need it.

Feel free to reach out in the [development chat](https://chat.godotengine.org) if you need help.","2024-05-05T03:58:09Z",false,"COMMENTED"
"akien-mga","MEMBER","Makes sense for now, but actually the `env.CHANGED_FILES` system is pretty hacky and something I'd be happy to remove eventually.

It seems to me like `pre-commit` has features to properly assess whether the actual files modified locally should be a match for each check, so we may want to look into this to optimize further, especially for running the checks locally.","2024-05-01T17:22:15Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-05-02T09:12:41Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-05-02T18:47:07Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-05-07T12:13:20Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-05-15T10:45:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-15T11:52:30Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-01T14:42:40Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-01T15:14:49Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-05-01T16:48:12Z",false,"APPROVED"
"clayjohn","MEMBER","This makes sense! It looks like the compatibility renderer uses the same code. Can you make this change there as well?

https://github.com/godotengine/godot/blob/d4f726f3ef21cef3e7936b2c9770cdac6478b8ee/drivers/gles3/storage/material_storage.cpp#L1968-L1980","2024-05-01T16:25:22Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great! 

Tested locally and it also removes the `!global_shader_uniforms.variables.has(p_name)` error that you often get at startup when using textures in a global shader. ","2024-05-01T17:28:01Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-05-01T18:42:08Z",false,"COMMENTED"
"vnen","MEMBER","","2024-05-02T14:14:55Z",false,"COMMENTED"
"vnen","MEMBER","LGTM","2024-05-02T14:22:23Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-01T11:21:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-01T16:42:15Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-09-29T12:50:40Z",false,"COMMENTED"
"Lu-TheCoder","NONE","","2024-09-30T19:31:13Z",false,"COMMENTED"
"WhalesState","CONTRIBUTOR","","2024-10-01T05:53:35Z",false,"COMMENTED"
"Lu-TheCoder","NONE","","2024-10-04T19:16:28Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-01T11:23:21Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-05-01T11:25:49Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-05-01T11:39:45Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-01T11:45:26Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-01T09:25:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-01T09:15:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-01T09:24:42Z",false,"APPROVED"
"Geometror","MEMBER","","2024-05-01T11:05:17Z",false,"APPROVED"
"clayjohn","MEMBER","Looks good to me. This aligns with the naming of the CanvasItem blend mode (which is admittedly inconsistent). ","2024-05-01T19:30:31Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great. We now need add `blend_premul_alpha` and `PREMUL_ALPHA` to the spatial shader docs https://docs.godotengine.org/en/latest/tutorials/shaders/shader_reference/spatial_shader.html","2024-05-01T20:59:41Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-01T10:05:13Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-05-01T10:46:41Z",false,"COMMENTED"
"2nafish117","CONTRIBUTOR","","2024-05-01T10:52:43Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","I never wrote proper unit tests for Godot before, so I'm trying to figure it out based on looking at other tests haha. Maybe someone with more of an idea can help you out, e.g. in the godot developers chat...","2024-05-03T06:26:58Z",false,"COMMENTED"
"2nafish117","CONTRIBUTOR","","2024-05-03T06:37:25Z",false,"COMMENTED"
"2nafish117","CONTRIBUTOR","","2024-05-03T16:08:52Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","Seems fine, but you should wait for a maintainer to approve the workflow run, so you can see if the tests succeed in the CI/CD as well. Maybe you can ask in the [Godot Contributors chat](https://chat.godotengine.org/), if you don't want to wait. ","2024-05-06T08:06:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-06T20:33:21Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Low processor mode does work on Android, so this update makes sense.","2024-05-01T17:59:02Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-14T08:38:20Z",false,"COMMENTED"
"Paulb23","MEMBER","","2024-06-07T19:48:07Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-01T11:38:03Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-23T21:23:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-24T07:36:53Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-24T07:44:07Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-05-02T05:23:29Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","I really cannot speak on the code itself or how useful this feature may be, but I can certainly give feedback on the rest.","2024-06-28T14:37:02Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

One issue I noticed though is that there's no blank line above comments. This can make multiple lines hard to distinguish, particularly if a followup line has no comment:

```ini
[graphics]

; Whether to enable graphics.
enable=true
; Whether to enable water.
water=false
foliage=true
```

```gdscript
extends Node2D


func _ready() -> void:
	var config := ConfigFile.new()
	config.set_value(""graphics"", ""enable"", true)
	config.set_section_key_comment(""graphics"", ""enable"", ""Whether to enable graphics."")
	
	config.set_value(""graphics"", ""water"", false)
	config.set_section_key_comment(""graphics"", ""water"", ""Whether to enable water."")
	
	config.set_value(""graphics"", ""foliage"", true)
	config.set_section_key_comment(""graphics"", ""foliage"", ""Whether to enable foliage."")
	print(config.has_section_key_comment(""graphics"", ""foliage""))
	print(config.get_section_key_comment(""graphics"", ""foliage""))
	config.erase_section_key_comment(""graphics"", ""foliage"")
	
	config.save(""user://config.ini"")
	OS.shell_open(ProjectSettings.globalize_path(""user://config.ini""))
	get_tree().quit()
```

To improve readability of the generated file, I suggest always adding a blank line above comments (unless there's already a blank line above it, e.g. for the first key of a section).","2024-06-28T17:42:27Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-28T17:44:20Z",false,"COMMENTED"
"raulsntos","MEMBER","I'm only reviewing the C# code in the documentation example.","2024-07-14T04:58:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-01T12:18:10Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-05-01T12:41:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-01T12:42:53Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-05-01T13:09:40Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-01T13:11:50Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected on a Samsung Galaxy Z Fold 4 on Firefox 125 and on a Samsung Galaxy Tab S9 Ultra on [Cromite](https://github.com/uazo/cromite) 124.

[Bromite](https://www.bromite.org/) 108 doesn't work (I get a `Could not load sample ...` error at load that prevents running the game altogether), but it's quite old by now. The main thread variant works correctly, but only when playing in the background: sound playback is heavily distorted when the page is focused.

Either way, it's not very important to have this working on an outdated browser, especially since Bromite was superseded by Cromite.

Remember to add descriptions for newly exposed classes/properties/methods in the class reference. Also, are there are any advantages to using sample playback on non-web platforms? If so, this should be documented.","2024-05-06T19:52:37Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-07T11:22:35Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-05-07T17:14:05Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-17T12:39:58Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-23T13:34:39Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-05-30T23:42:06Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-05-31T16:17:36Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-05-31T16:20:05Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-02T05:33:51Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-02T05:53:47Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-06T15:22:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-09T15:28:47Z",false,"COMMENTED"
"Faless","COLLABORATOR","Amazing work :rocket:  :trophy: :cookie: !

I've tested this for a while and with all (I hope) possible combinations of threads/nothreads/dlink/nodlink/sample/stream (emcc 3.1.39).

It's working great on all of them in my tests.

I've added one last suggestion (and long explainer), but it's otherwise good to go.

Thank you so much :blue_heart:  for the incredible work and effort in getting this so far!","2024-06-10T19:39:07Z",false,"APPROVED"
"AThousandShips","MEMBER","Haven't tested but the code I've read looks good, still needs that api validation addition to pass CI though, the docs look good as well üéâ ","2024-06-10T19:43:57Z",false,"APPROVED"
"adamscott","MEMBER","","2024-06-10T20:06:30Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-10T20:55:01Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-06-10T21:32:08Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me overall, let's go!","2024-06-17T09:34:20Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-17T11:55:47Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-17T15:03:56Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-17T15:09:19Z",false,"APPROVED"
"Calinou","MEMBER","","2024-06-17T15:17:58Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-17T15:19:02Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-17T15:19:55Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-17T15:21:12Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-17T16:06:36Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-17T19:20:31Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-17T19:41:47Z",false,"COMMENTED"
"clayjohn","MEMBER","I'm not so sure about this PR. Its seems way too hacky to me. It is making huge changes in our shader compiler and internal shader to support something in the standard material. 

Also, It looks like the new hint isn't even used in the StandardMaterial3D? So won't it remain broken for everyone?

It also relies on users manually passing in another matrix as a uniform and then secretly inserting that matrix into the backend code. 

I think its worthwhile to see if we can improve this behaviour with a much simpler approach

ALso keep in  mind our best practices https://docs.godotengine.org/en/latest/contributing/development/best_practices_for_engine_contributors.html#prefer-local-solutions particularly ""Prefer local solutions"". ","2024-08-21T18:13:11Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-30T22:41:59Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-14T18:38:19Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-04-30T21:00:57Z",false,"APPROVED"
"raulsntos","MEMBER","LGTM. Thanks!","2024-05-02T03:13:51Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-05-01T13:39:05Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-01T06:51:43Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-04-30T22:41:03Z",false,"COMMENTED"
"GrammAcc","CONTRIBUTOR","","2024-05-01T00:47:18Z",false,"COMMENTED"
"Faless","COLLABORATOR","Great work :trophy:  ! Thank you!","2024-05-01T11:40:02Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-01T11:45:01Z",false,"APPROVED"
"paulloz","MEMBER","","2024-04-30T19:39:17Z",false,"APPROVED"
"dalexeev","MEMBER","Looks good to me. We could add this test:

```gdscript
class A extends Node:
    @onready var a := get_value(""a"")

    func get_value(var_name: String) -> String:
        print(var_name)
        return var_name

class B extends A:
    @onready var b := get_value(""b"")

    func _ready():
        pass

func test():
    var node := B.new()
    node._ready()
    node.free()
```

> This commit implements this behavior for the implicit ready function (`@onready` annotation) to make it consistent with the expectations.

This is not only expected, but also consistent with core, since `NOTIFICATION_READY` is sent in direct order (`Object -> Node -> Node2D`).","2024-04-30T17:31:51Z",false,"APPROVED"
"akien-mga","MEMBER","#91112 was approved, so approving this one to merge first.","2024-05-07T11:37:53Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-30T10:57:30Z",false,"APPROVED"
"kus04e4ek","CONTRIBUTOR","","2024-04-30T11:26:04Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-04-30T12:54:52Z",false,"COMMENTED"
"fire","MEMBER","","2024-04-30T13:40:23Z",false,"APPROVED"
"AThousandShips","MEMBER","And you need to run clang-format to make sure your code follows the style guide

Also the cases that just are placeholders now should be fixed, this shouldn't be merged in a half finished state IMO","2024-04-30T08:13:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-30T08:15:57Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-04-30T10:22:06Z",false,"COMMENTED"
"AdeptusForge","NONE","","2024-04-30T11:10:12Z",false,"COMMENTED"
"AdeptusForge","NONE","","2024-05-01T06:06:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-01T11:33:24Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-05-01T12:00:46Z",false,"COMMENTED"
"AdeptusForge","NONE","","2024-05-01T13:01:38Z",false,"COMMENTED"
"AdeptusForge","NONE","","2024-05-01T13:06:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-01T13:09:58Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-05-06T12:27:33Z",false,"COMMENTED"
"AdeptusForge","NONE","","2024-05-08T02:49:42Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-30T14:40:23Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-30T14:40:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-30T14:40:45Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-05-08T10:53:52Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-04-30T19:59:47Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-01T11:42:40Z",false,"DISMISSED"
"KoBeWi","MEMBER","","2024-05-11T11:14:50Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-11T18:39:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-11T18:40:33Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-11T18:43:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-11T18:44:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-11T20:16:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-11T20:24:40Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-11T20:31:55Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-13T22:32:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-14T22:04:48Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-14T22:13:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-14T22:15:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","Looks fine overall and also works correctly.

I realized the new `__custom_type_script` name can be moved to scene string names instead, as it's not really related to core.","2024-05-14T22:23:25Z",false,"DISMISSED"
"KoBeWi","MEMBER","","2024-05-14T23:32:13Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-14T23:33:18Z",false,"COMMENTED"
"bjornmp","NONE","","2024-05-14T23:45:12Z",false,"COMMENTED"
"bjornmp","NONE","","2024-05-14T23:47:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-15T08:04:15Z",false,"DISMISSED"
"KoBeWi","MEMBER","","2024-10-05T21:25:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","Now it works correctly.

I still think it's a nice feature. It improves usability of custom Nodes, though the drawback is that every newly created custom node has an additional metadata property for the base script.

It's safe to merge, because it can be reverted at any time without breaking compatibility. It's only relevant to editor.","2024-10-05T21:33:18Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-04-30T13:01:31Z",false,"CHANGES_REQUESTED"
"TCROC","CONTRIBUTOR","","2024-04-30T13:11:24Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-30T13:59:08Z",false,"COMMENTED"
"TCROC","CONTRIBUTOR","","2024-04-30T15:18:33Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-30T16:57:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-07T14:23:01Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-25T10:03:10Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-25T11:58:34Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-04-29T21:20:40Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-30T08:06:53Z",false,"APPROVED"
"devloglogan","CONTRIBUTOR","","2024-04-30T14:01:14Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks!

In my testing, this works perfectly, fixing the regression. (I tested with the 'godot_openxr_vendors' demo on Quest 3.)

The code looks good too! The one thing I wonder is if we should have an option to turn off this behavior or a way clear the previous data? Although, I can't fully picture the use-cases for that now, so I don't think we should hold up the PR on that.","2024-04-30T14:23:48Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-02T15:48:48Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-05-02T15:51:14Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-05-02T15:54:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-02T15:55:25Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-05-02T15:59:33Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-02T16:02:03Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-05-02T16:10:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-02T16:11:19Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-05-02T16:13:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-02T16:16:10Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-05-02T16:22:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-02T16:23:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-13T09:26:21Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-07-13T12:30:48Z",false,"COMMENTED"
"passivestar","CONTRIBUTOR","Works great on my end, can confirm that clicking on shadows closes popups now! Can't wait for this to be merged

<img width=""650"" alt=""s"" src=""https://github.com/user-attachments/assets/4e03eda2-1af7-4849-b509-897c93d038eb"">

<img width=""620"" alt=""s2"" src=""https://github.com/user-attachments/assets/99ee46be-bf6b-44f6-93bc-f0e282d1d2a9"">
","2024-10-10T22:07:15Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-30T08:02:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-05T22:09:52Z",false,"APPROVED"
"Calinou","MEMBER","","2024-04-29T21:33:43Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-04-30T05:58:13Z",false,"COMMENTED"
"mhilbrunner","MEMBER","Looks good to go to me.","2024-04-30T15:26:04Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-12T16:24:55Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-12T16:32:36Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-13T10:19:12Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-07T10:11:28Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-29T18:27:52Z",false,"COMMENTED"
"dalexeev","MEMBER","In my opinion this is not a good idea. Auto-generation may cause collisions for files with the same name in different folders. And the proposal mentions reasons why we don't want to always use class names.","2024-04-29T18:41:08Z",false,"COMMENTED"
"fkeyzuwu","CONTRIBUTOR","","2024-04-29T18:45:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-29T18:46:36Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-04-29T18:47:46Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-05-02T09:15:55Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-05-02T09:17:23Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-05-02T19:15:17Z",false,"COMMENTED"
"fire","MEMBER","","2024-05-02T23:14:14Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-02T23:18:16Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-29T17:38:13Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-04-29T17:42:21Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM! ","2024-04-29T17:42:34Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-04-30T03:18:58Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-04-30T09:33:46Z",false,"COMMENTED"
"fire","MEMBER","","2024-04-30T13:41:35Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-29T17:06:24Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-06T21:21:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-07T09:27:37Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected (Linux).","2024-04-30T00:33:19Z",false,"APPROVED"
"Calinou","MEMBER","","2024-04-29T21:24:38Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-29T14:45:01Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-04-29T17:15:02Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-29T13:45:24Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-04-29T13:54:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-29T13:56:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-30T13:32:56Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-04-30T13:43:30Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-29T12:46:13Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-04-29T11:04:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-29T08:33:34Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-04-29T08:45:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-29T08:45:55Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-04-29T08:46:14Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-29T08:49:01Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-04-30T04:41:17Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Doing this makes sense but I'm not too fond of the wording.

I'm aware the following would practically turn this PR into my own but- ","2024-07-05T21:32:40Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-07-08T03:00:06Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-08T06:45:01Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-29T08:13:52Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-29T08:15:03Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-04-29T08:18:47Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-04-29T15:27:17Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-04-30T03:57:07Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-04-30T03:22:17Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-30T07:45:00Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-19T20:32:00Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-28T19:47:52Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-04-28T20:11:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-28T20:14:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-28T20:16:21Z",false,"COMMENTED"
"AThousandShips","MEMBER","The above issues with `_get_alloc_size_checked` need to be resolved, needs to either be reverted or confirmed that it does *not* reintroduce:
* https://github.com/godotengine/godot/issues/81911

The other details are for discussion but this part is breaking and reverting important safety checks","2024-04-28T20:26:12Z",false,"DISMISSED"
"AThousandShips","MEMBER","","2024-05-02T15:32:24Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-05-02T15:44:32Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-02T15:47:01Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-05-02T16:09:30Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-04-28T17:59:28Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-04-28T17:59:36Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/811ce36c6090013f1a48676c0388892bf1621288), it works as expected. Code looks good to me.

[This proposed usecase](https://github.com/godotengine/godot-proposals/issues/9618#issuecomment-2084315825) (being able to see icons on a bright background) seems reasonable, although note that it makes the most sense when using a light theme (in the editor or in your OS file manager). The original problem comes back if you use a dark theme in either. When working in a team, not everyone will be using the same theme options at a given time :slightly_smiling_face: 

It's true that many icon downloads are available in black, but I regularly see them available with alternate white variants too (like Kenney's icon packs). That said, Font Awesome's SVGs are only available in black from official sources to my knowledge.","2024-06-28T18:29:57Z",false,"APPROVED"
"KoBeWi","MEMBER","Now that we have ThemeDB we could run some validation for default themes ü§î","2024-05-05T04:53:11Z",false,"APPROVED"
"Calinou","MEMBER","","2024-04-28T15:54:28Z",false,"COMMENTED"
"Mitten-O","CONTRIBUTOR","","2024-04-28T17:00:27Z",false,"COMMENTED"
"akien-mga","MEMBER","Tested with command line gdb, works great!","2024-05-06T08:55:45Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-04-28T16:08:14Z",false,"COMMENTED"
"toadkarter","NONE","Thanks for letting me know - I ran clang-format on my changes and amended the PR accordingly, will make sure to do so going forward! ","2024-04-28T16:26:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-28T17:14:11Z",false,"COMMENTED"
"toadkarter","NONE","","2024-04-28T17:39:44Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-29T05:58:54Z",false,"APPROVED"
"raulsntos","MEMBER","Can't speak for the Android team, but this looks reasonable to me and helps me implement https://github.com/godotengine/godot/pull/88803. Thank you!","2024-04-28T16:17:02Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-05-13T15:28:46Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-16T08:11:51Z",false,"APPROVED"
"KoBeWi","MEMBER","The changes look fine. There is a minor issue where the inspected node does not appear at the top, but it can be fixed later:

https://github.com/godotengine/godot/assets/2223172/15d6f372-8a02-46a7-929d-a9c2186483c7

","2024-05-31T11:13:36Z",false,"APPROVED"
"ajreckof","MEMBER","This looks really good! There is a problem with selection history but this can be fixed later as it is non blocking and only slightly related","2024-05-31T12:34:41Z",false,"APPROVED"
"AeioMuch","CONTRIBUTOR","","2024-05-31T12:38:29Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-04-28T17:10:40Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-04-28T17:10:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-28T17:12:04Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally on https://github.com/Calinou/godot-movie-maker-demo, it works as expected. Using an optimized editor build (`optimize=speed lto=full`).

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 39)
</details>

Results:

Format | Time to record 30s | Total file size (audio + video)
-|-|-
AVI MJPEG quality 75 | 27s | 166.8 MiB
AVI MJPEG quality 100 | 51s | 861.2 MiB
PNG | 6m19s | 1.7 GiB
**QOI** | **22s** | **1.9 GB**

The output file size is a bit larger, but it's greatly made up for by having much faster write speeds ‚Äì¬†faster than MJPEG at quality 75, while being lossless. This makes QOI the best format for Movie Maker output now.

Stripped binary size grows by 12 KB with this PR, which is pretty reasonable considering the big difference in Movie Maker usability this PR provides.

I took a quick look at the code and it looks good to me.","2024-05-06T23:41:30Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-07T08:17:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-07T09:25:36Z",false,"COMMENTED"
"jonbonazza","CONTRIBUTOR","Similar to the other PR, functionally its straightforward and simple and seems fine. My only comment is for the sake of readability.","2024-05-24T04:25:57Z",false,"CHANGES_REQUESTED"
"GrammAcc","CONTRIBUTOR","","2024-05-24T18:54:53Z",false,"COMMENTED"
"GrammAcc","CONTRIBUTOR","","2024-05-24T23:43:59Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-04-27T16:02:26Z",false,"APPROVED"
"akien-mga","MEMBER","Looks great!","2024-04-29T07:18:45Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-30T06:25:06Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-27T10:00:05Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-27T14:22:34Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-29T07:21:24Z",false,"APPROVED"
"fire","MEMBER","","2024-04-28T22:12:53Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-27T12:50:45Z",false,"COMMENTED"
"Frozenfire92","CONTRIBUTOR","","2024-04-27T12:51:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-27T12:53:17Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-29T07:02:21Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-29T07:02:54Z",false,"APPROVED"
"Calinou","MEMBER","Looks good to me. The underline helps make it more obvious which buttons are pressed, although we could opt for a translucent background instead (like we do for active buttons in the 2D/3D editor viewport menu bar).","2024-04-29T21:26:12Z",false,"APPROVED"
"Calinou","MEMBER","","2024-04-29T21:26:32Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-27T07:44:26Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM, let's fix the CI errors and make sure it runs correctly ","2024-04-27T08:37:53Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-27T08:38:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-27T08:39:02Z",false,"COMMENTED"
"akien-mga","MEMBER","Makes sense to me, I always found this giant orange AABB annoying.","2024-05-07T14:24:20Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-04-30T21:00:43Z",false,"APPROVED"
"Calinou","MEMBER","","2024-04-30T21:07:08Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-07-24T20:26:54Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-24T23:52:45Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","Holy moly you rock!

Took a look and the diff looks fine!","2024-04-26T22:00:03Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (Windows 11 23H2, MSVC 2022, Python 3.12.3), it works as expected. Code looks good to me.","2024-04-28T21:04:09Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-29T07:59:43Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great! Thank you","2024-04-26T19:04:36Z",false,"APPROVED"
"Calinou","MEMBER","","2024-04-26T22:20:40Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-26T16:19:41Z",false,"APPROVED"
"fire","MEMBER","","2024-04-26T16:20:26Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-26T09:56:10Z",false,"APPROVED"
"raulsntos","MEMBER","Thanks a lot for contributing to the .NET module!

This looks great already, I'm only requesting a few changes based on the discussion in https://github.com/godotengine/godot/issues/91118.","2024-04-28T14:00:35Z",false,"CHANGES_REQUESTED"
"raulsntos","MEMBER","Just a few comments about the documentation to make it sound a bit less repetitive, taking inspiration from the C# documentation.","2024-05-01T19:15:12Z",false,"COMMENTED"
"raulsntos","MEMBER","Looks good to me, thanks! Just want to confirm that we agree on the new implementation.","2024-05-03T17:10:10Z",false,"APPROVED"
"paulloz","MEMBER","","2024-05-03T17:15:25Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-05-04T16:04:07Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-05-04T16:13:07Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-05T01:14:00Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-26T08:15:06Z",false,"APPROVED"
"Faless","COLLABORATOR","","2024-04-26T11:19:42Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-26T13:08:05Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-26T08:57:09Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-26T08:58:29Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-04-28T04:23:34Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-04-28T04:34:08Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-04-26T06:16:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-26T08:53:55Z",false,"COMMENTED"
"GrammAcc","CONTRIBUTOR","","2024-04-26T13:00:23Z",false,"COMMENTED"
"GrammAcc","CONTRIBUTOR","","2024-04-26T13:00:59Z",false,"COMMENTED"
"jonbonazza","CONTRIBUTOR","From a functionality perspective, it seems fine, however I've made a couple comments requesting some changes for readability sake.","2024-05-24T04:23:35Z",false,"CHANGES_REQUESTED"
"Faless","COLLABORATOR","","2024-05-24T07:40:31Z",false,"COMMENTED"
"GrammAcc","CONTRIBUTOR","","2024-05-24T18:41:16Z",false,"COMMENTED"
"GrammAcc","CONTRIBUTOR","","2024-05-24T18:42:41Z",false,"COMMENTED"
"GrammAcc","CONTRIBUTOR","","2024-05-24T18:43:12Z",false,"COMMENTED"
"GrammAcc","CONTRIBUTOR","","2024-05-24T23:50:56Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-26T07:23:45Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-26T06:56:33Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-26T06:58:35Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-26T07:00:49Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-04-26T13:18:23Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-04-26T13:40:17Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-04-26T13:40:22Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-26T08:04:17Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-26T08:48:02Z",false,"APPROVED"
"Bromeon","CONTRIBUTOR","I tested this in Rust, and it works, great job!

Interesting discovery: before this PR, static methods _do_ use `ptrcall` _if_ they are called as instance methods (on an object, rather than a type).","2024-04-30T20:42:08Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","LGTM","2024-04-26T00:29:17Z",false,"APPROVED"
"Meeklowg","NONE","...Dowload...ALLfiles","2024-04-26T09:06:20Z",false,"CHANGES_REQUESTED"
"akien-mga","MEMBER","","2024-04-26T08:02:04Z",false,"APPROVED"
"akien-mga","MEMBER","Makes sense!","2024-04-26T07:42:24Z",false,"APPROVED"
"jsjtxietian","CONTRIBUTOR","","2024-04-26T03:13:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-01T23:13:26Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-25T22:37:39Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-04-26T00:26:46Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-04-26T00:27:28Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-04-26T01:57:03Z",false,"COMMENTED"
"anniryynanen","CONTRIBUTOR","I reproduced the bug in v4.3.rc1.official [e343dbbcc] and confirm that this PR fixes it.

I'm not super familiar with the functions being called but the added code look solid enough. Even though it is in Viewport, I think regression risk is small because the change is very local.

I'm not sure what's up with the compare link in the force push, but I'm guessing it's ok since ""files changed"" includes the scale factor check.","2024-08-01T14:25:38Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-04-26T16:19:15Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-26T17:37:55Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks!

Overall, the code looks great to me! (Although the nit that Raul points out should be fixed.)

I tested this with godot-cpp `master` (plus PR https://github.com/godotengine/godot-cpp/pull/1450) and with the Godot 4.2 version of godot-cpp, in order to test that the legacy support is working. Everything seemed to work fine!

I agree that it would be nice to get this in Godot 4.3, both so we don't have to make a new struct and because it matches the script instance changes also made for Godot 4.3. I think this change is simple and small enough that it should be safe to do.","2024-04-26T18:48:50Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-04-26T18:57:45Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-26T19:03:33Z",false,"COMMENTED"
"lilizoey","NONE","","2024-04-26T19:52:03Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-26T19:57:10Z",false,"COMMENTED"
"lilizoey","NONE","","2024-04-27T05:48:42Z",false,"COMMENTED"
"Bromeon","CONTRIBUTOR","","2024-04-27T12:13:41Z",false,"COMMENTED"
"Bromeon","CONTRIBUTOR","","2024-04-27T12:21:53Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-04-26T22:19:26Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-04-25T19:28:44Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","LGTM","2024-04-26T00:23:19Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me overall but I wonder if the new color isn't too dark/dim.

How about a 0.6 or 0.7 multiplier instead of 0.5?","2024-05-07T14:26:53Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-08-18T08:02:39Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-19T06:19:09Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-08-19T21:27:20Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-08-20T02:36:49Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-08-20T16:11:25Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-08-20T22:07:37Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","Looks great!","2024-08-20T22:09:54Z",false,"APPROVED"
"Calinou","MEMBER","","2024-08-20T22:11:42Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally on Linux + NVIDIA, it works as expected. Code looks good to me.","2024-08-21T02:37:04Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great. 

This is an easy thing to validate so I trust that it works. ","2024-04-25T17:18:33Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-29T18:49:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","This is basically same as #90816, but with a safeguard against exit crash.","2024-04-29T18:53:59Z",false,"APPROVED"
"akien-mga","MEMBER","Seems to work fine on Linux.","2024-04-30T14:49:43Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks!

Overall, this looks wonderful! It matches what I was imagining for the the `GDExtensionLoader` concept.

I tested it with the project I use to test hot-reload, and everything seemed to work just fine.

This should get discussed with the rest of the GDExtension team - I've added it to the agenda for the next meeting.","2024-04-26T21:29:42Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-04-26T22:08:23Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-04-26T22:12:29Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-04-26T22:17:38Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-04-26T22:45:56Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-26T22:58:35Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-26T23:01:57Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-05-16T17:12:44Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-16T21:17:35Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-17T20:10:32Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-05-17T22:42:15Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-18T13:43:17Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-18T14:21:09Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-05-18T19:08:03Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-05-18T19:41:11Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-22T18:33:35Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-05-22T19:12:53Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-24T00:51:39Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","I re-reviewed this and it still looks great! Now that Godot 4.4 development has opened up, I think now is the time to finally merge it. :-)

I only did minimal testing this time (running the godot-cpp automated tests), but I previously did more in-depth testing, and not much has changed here since then.","2024-08-21T17:59:53Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-21T18:20:36Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-25T15:49:44Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-04-25T18:08:16Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-04-25T14:19:56Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-25T14:00:51Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-04-25T14:04:51Z",false,"CHANGES_REQUESTED"
"mihe","CONTRIBUTOR","","2024-04-25T14:35:56Z",false,"COMMENTED"
"Arnklit","CONTRIBUTOR","","2024-04-25T15:18:16Z",false,"COMMENTED"
"Arnklit","CONTRIBUTOR","","2024-04-25T15:18:33Z",false,"COMMENTED"
"Arnklit","CONTRIBUTOR","","2024-04-25T15:19:31Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-04-25T16:09:22Z",false,"COMMENTED"
"Arnklit","CONTRIBUTOR","","2024-04-26T08:05:57Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","Looks good to me (whatever that's worth) from a code perspective.","2024-04-26T08:39:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-26T08:41:28Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-26T08:58:40Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-29T09:06:07Z",false,"APPROVED"
"AThousandShips","MEMBER","I think it'd be good to get at least the CI fixes in to help any PRs on 4.2","2024-04-29T07:39:42Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-25T12:46:59Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-25T13:32:55Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-25T13:06:44Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-04-25T13:59:56Z",false,"APPROVED"
"fire","MEMBER","","2024-04-25T17:31:37Z",false,"COMMENTED"
"fire","MEMBER","","2024-04-25T17:34:04Z",false,"COMMENTED"
"fire","MEMBER","","2024-04-25T18:48:26Z",false,"COMMENTED"
"bruvzg","MEMBER","Bundled app (and Godot should be always bundled to function properly) always assumed to have regular activation policy by default, this will cause icon to blink in and out multiple times every time the engine is started, and also reset icon set by display server. To start in the accessory mode, `<key>LSUIElement</key>` can be added to `Info.plist` instead (and later switched to regular mode when the first window is shown).

See also https://github.com/godotengine/godot/pull/91262, which is doing similar stuff for exported projects.","2024-04-29T05:58:06Z",false,"COMMENTED"
"ogapo","CONTRIBUTOR","","2024-04-29T12:47:33Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good. Thanks for the overview of what works for each build type.

Do we still need the console wrapper after all this? If things like printing normal output to the host terminal works fine with the normal `windows` subsystem build, I feel like the console.exe might not add much value (but does add confusion for users on what it's for and whether to ship it).","2024-04-29T10:40:19Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me from a copyright/license point of view.
No idea about the .NET ecosystem integration, I'll let the team assess.","2024-04-25T09:53:45Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-26T09:45:31Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-04-26T13:05:46Z",false,"APPROVED"
"AThousandShips","MEMBER","You also need to register compatibility methods, I'll write a diff for you later today if needed, you can see this as a reference for how to do it:
* https://github.com/godotengine/godot-docs/pull/9158","2024-04-25T10:06:05Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-26T14:03:25Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-04-26T14:03:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-26T14:03:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-26T14:05:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-26T16:58:53Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-27T20:21:30Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","","2024-04-27T21:47:26Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-30T17:25:10Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-04-30T18:22:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-30T18:27:53Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","Looks good!","2024-04-30T19:00:36Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-01T07:47:43Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-05-01T09:59:06Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-01T10:20:18Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-05-01T13:31:51Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-05-01T19:07:24Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-02T08:45:54Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-25T08:58:59Z",false,"COMMENTED"
"akien-mga","MEMBER","Nice catch!","2024-04-25T08:59:12Z",false,"APPROVED"
"kus04e4ek","CONTRIBUTOR","","2024-04-25T09:02:51Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-25T09:27:56Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-04-25T09:41:23Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","I don't have any problems with making this change, it would be good to have some more info in the OP about phones that are effected. ","2024-05-01T23:24:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-02T07:39:35Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me.

Could you rebase to fix CI? There was a temporary test failure in master.","2024-04-25T07:17:02Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","LGTM, pretty much matches what we discussed during todays rendering meeting, that was quick :)","2024-04-25T10:59:52Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great! Thank you for bearing with us through a long discussion. 

For posterity sake, here are our notes from the meeting

> 1. We aren't sure if there is a case for writing to DEPTH and not updating lighting positions. But we don't want to add a cost and change behaviour in case it breaks someone's workflow
> 
> 2. Writing directly to VERTEX + VIEW may be confusing for beginners who don't realize that VERTEX won't move the pixel position. Also, in multiview (XR) VIEW needs a special calculation, it isn't just -vertex. So we don't want to make users responsible for writing it
> 
> 3. Instead create a new built in LIGHT_VERTEX. When written to it updates vertex and view","2024-04-25T15:06:44Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-04-25T01:59:37Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-25T02:00:59Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-04-25T02:21:36Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-04-25T02:21:46Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","LGTM, just need to fix the issue david found.","2024-04-25T02:22:04Z",false,"APPROVED"
"fire","MEMBER","I accepted this reasoning when we discussed during the xr meeting.","2024-04-25T05:24:24Z",false,"APPROVED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-26T00:09:11Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-26T00:09:29Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-26T00:12:01Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-25T08:08:32Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-25T09:41:24Z",false,"APPROVED"
"Calinou","MEMBER","","2024-04-26T22:24:58Z",false,"COMMENTED"
"Faless","COLLABORATOR","Amazing work! :blue_heart: 

The only comment I have, is that between this change, and the change in #85939 we are again starting to add more and more substitution variables to the template, which is something we tried to avoid since #46200 .

That said, I don't think this is a blocker for the PR given it won't break the existing templates (that substitution is ""optional"").

Again, this looks fantastic, so I think it's worth merging as is!","2024-04-29T13:10:18Z",false,"APPROVED"
"adamscott","MEMBER","","2024-04-30T13:47:10Z",false,"COMMENTED"
"adamscott","MEMBER","Great PR, thanks!","2024-04-30T13:47:56Z",false,"APPROVED"
"AThousandShips","MEMBER","If we are to remove this I'd say it should be done so the enums don't break, but keeping the value as a reserved index in the declaration

You also need to rebase your branch to fix CI","2024-04-25T10:28:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-25T17:52:44Z",false,"COMMENTED"
"CrayolaEater","CONTRIBUTOR","","2024-04-25T17:57:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-25T19:02:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","Makes sense and looks correct, but will leave the final decision to the appropriate team if we want to deprecate this or just leave it","2024-04-27T11:45:32Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me.

I agree that deprecating is better than outright removing the property, as it's not worth a compatibility breakage at this stage. There will probably be more deprecated APIs once we start making godot-jolt the default 3D physics backend.","2024-04-29T07:14:55Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","Looks simple and straight-forward :D","2024-04-25T17:39:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-03T13:15:12Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","","2024-05-03T11:27:40Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-24T18:16:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-24T16:44:29Z",false,"COMMENTED"
"Koyper","CONTRIBUTOR","","2024-04-24T16:48:19Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-24T18:14:44Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-24T15:44:18Z",false,"APPROVED"
"KoBeWi","MEMBER","Seems to work correctly now, tested on Windows.","2024-05-01T20:19:19Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-05-07T07:25:16Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-05-07T07:59:10Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-05-07T08:05:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-24T14:27:46Z",false,"APPROVED"
"fire","MEMBER","","2024-04-24T14:16:32Z",false,"APPROVED"
"fire","MEMBER","","2024-04-24T13:42:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-24T11:09:01Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-24T11:10:56Z",false,"APPROVED"
"fire","MEMBER","","2024-04-24T13:43:43Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","This is more or less what [`remove_cvref`](https://en.cppreference.com/w/cpp/types/remove_cvref) will achieve in C++20, but that's a ways off so I see no harm in letting this rock.","2024-05-08T01:36:42Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-08T07:15:37Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-24T09:40:58Z",false,"APPROVED"
"clayjohn","MEMBER","The code here looks good. I am wondering where the code that resets the uniform when the checkbox is clicked is? If we are going to replace this functionality, then we should replace everything. 

That being said, I'm not sure this PR fully replaces the checkboxes anyway. One thing the checkbox communicated was whether or not the instance contains data to replace the default value. Although it appears that part of the functionality is missing. 

I'm not 100% certain, but this is what I think the behaviour was supposed to be.
1. When a new instance shader parameter is added and it has a default in the shader, the box is unchecked indicating that it doesn't have a value in the instance, but it can be reset to the default value in the shader
2. If the value is changed, then the box becomes checked because the instance now has a value
3. if the box is clicked on, then the value is reset to the default from the shader and the instance now has a value
4. if a new instance shader parameter is added without a default, there is no box and no ability to reset the value, but the value can be set manually. 

Testing locally, I can reproduce those 4 behaviors above. What I am unsure about is if that behaviour is worth keeping. I don't think it is obvious to users anyway.","2024-04-26T23:55:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-28T12:29:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-29T10:41:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-25T07:26:53Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-25T07:27:00Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-25T09:40:48Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks so much! This works great in my testing with the Compatibility renderer :-)

The only suggestion I'd make is changing the PR title and commit message, because this fixes the Forward+ renderer as well, not just GLES3.","2024-04-24T16:01:59Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-24T18:17:51Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-24T18:18:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-24T18:20:55Z",false,"COMMENTED"
"KoBeWi","MEMBER","Left some comments, but otherwise looks ok.
(I didn't test extensively though)","2024-04-24T19:09:18Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-04-24T23:35:42Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-04-24T15:28:41Z",false,"COMMENTED"
"basilicon","NONE","","2024-04-24T19:16:40Z",false,"COMMENTED"
"AThousandShips","MEMBER","This looks good to me, useful","2024-04-27T08:34:15Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Docs are a bit off","2024-07-05T19:43:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-24T08:42:43Z",false,"COMMENTED"
"SommAid","NONE","","2024-04-30T21:25:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-01T11:43:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-01T11:43:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-24T10:18:54Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-04-24T07:12:51Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-24T07:43:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-24T08:45:34Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-04-24T14:23:05Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-05-21T23:28:03Z",false,"APPROVED"
"Faless","COLLABORATOR","Really sorry I missed this before.

Looking great :trophy: ! Thanks for spotting this!","2024-06-20T16:30:30Z",false,"APPROVED"
"Naros","CONTRIBUTOR","","2024-04-23T22:16:47Z",false,"APPROVED"
"Rindbee","CONTRIBUTOR","","2024-04-23T23:17:47Z",false,"COMMENTED"
"nagidev","CONTRIBUTOR","","2024-04-24T08:00:40Z",false,"COMMENTED"
"nagidev","CONTRIBUTOR","","2024-04-24T08:01:10Z",false,"COMMENTED"
"nagidev","CONTRIBUTOR","","2024-04-24T08:01:49Z",false,"COMMENTED"
"Rindbee","CONTRIBUTOR","","2024-04-24T10:45:54Z",false,"APPROVED"
"Geometror","MEMBER","Looks good!","2024-04-24T18:16:58Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-24T06:35:06Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","Have tested the PR rebased on c7f56d327
System: Debian GNU/Linux 12 (bookworm) 12 - X11 - GLES3 (Compatibility) - NVIDIA - AMD

Can confirm, that with these changes I can compile Godot again.
Can't say anything about the implementation.","2024-04-23T21:44:04Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good. Could indeed rename to `scons_version` as suggested now that's it's not just a local variable.","2024-04-24T06:32:40Z",false,"APPROVED"
"raulsntos","MEMBER","Thanks, looks great. I imagine most contributors have upgraded to 8.0 by now.","2024-04-24T01:30:47Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-25T11:14:50Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-25T11:14:56Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-25T11:15:24Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-04-24T02:15:30Z",false,"COMMENTED"
"bs-mwoerner","CONTRIBUTOR","","2024-04-24T08:30:35Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-04-24T08:34:28Z",false,"COMMENTED"
"bs-mwoerner","CONTRIBUTOR","","2024-04-24T20:00:32Z",false,"COMMENTED"
"MJacred","CONTRIBUTOR","","2024-08-17T17:29:06Z",false,"COMMENTED"
"bs-mwoerner","CONTRIBUTOR","","2024-08-21T20:17:29Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-21T21:05:38Z",false,"COMMENTED"
"bs-mwoerner","CONTRIBUTOR","","2024-08-21T23:12:18Z",false,"COMMENTED"
"MJacred","CONTRIBUTOR","","2024-08-23T11:08:16Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-24T07:30:43Z",false,"APPROVED"
"fire","MEMBER","This will fix our problems today, but it still leaves work to handle switching between two versions of macos builders.","2024-04-23T19:33:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-23T19:37:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-23T17:17:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-23T16:46:15Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-23T16:51:02Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-24T07:09:51Z",false,"APPROVED"
"akien-mga","MEMBER","Looks great to me!","2024-09-28T22:33:29Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-23T13:39:28Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me, let's merge early on for 4.4.","2024-05-29T09:44:36Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-04-23T15:29:12Z",false,"APPROVED"
"bruvzg","MEMBER","This will break documentation updates, and will make it impossible to change DX/Vulkan settings if you are working on the same project from multiple platforms.

All properties and editor/project setting should be always defined regardless of platform and build config.","2024-04-23T12:27:12Z",false,"DISMISSED"
"akien-mga","MEMBER","Seems fine to me. Needs rebase.","2024-05-29T09:43:29Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-23T10:28:32Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-23T10:28:46Z",false,"APPROVED"
"fire","MEMBER","","2024-04-23T13:31:25Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-23T09:23:05Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-04-23T13:35:37Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","The ci checks are failing to detect the Android sdkmanager path, can you check the issue.","2024-04-23T13:39:31Z",false,"CHANGES_REQUESTED"
"m4gr3d","CONTRIBUTOR","@divshekhar There are additional build failures that remain.","2024-04-27T20:29:51Z",false,"CHANGES_REQUESTED"
"kitbdev","CONTRIBUTOR","","2024-04-25T18:59:12Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-25T20:09:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-25T20:09:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-25T20:14:29Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-25T20:22:39Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-04-26T00:16:54Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-04-26T00:23:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-08T11:08:02Z",false,"APPROVED"
"akien-mga","MEMBER","Code looks good, and the feature makes sense to me.","2024-05-08T12:28:42Z",false,"APPROVED"
"YeldhamDev","MEMBER","","2024-04-23T02:43:42Z",false,"APPROVED"
"fire","MEMBER","","2024-04-23T00:21:18Z",false,"COMMENTED"
"bqqbarbhg","CONTRIBUTOR","","2024-04-23T01:02:30Z",false,"COMMENTED"
"fire","MEMBER","FBX2GLTF doesn't use bind poses because of invalid data, this alternative approach is cool, and I like how it fetches the bind pose from either two successive skin clusters or a top-level bone.

@lyuma mentioned wanted to review it","2024-04-23T15:00:52Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","Looks great! The added check gives me more confidence it will not tear my armature apart in the rest.
We still need to discuss making an option for this behavior and what the default should be but again we should do this in a separate change.

please rebase as ifire said and squash your commits into one. I kept a copy of the history in my own fork so don't worry about losing history.","2024-04-25T15:47:52Z",false,"APPROVED"
"bqqbarbhg","CONTRIBUTOR","","2024-04-25T17:51:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-23T08:49:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-05T11:18:14Z",false,"COMMENTED"
"bpseudopod","CONTRIBUTOR","","2024-05-08T07:19:30Z",false,"COMMENTED"
"akien-mga","MEMBER","I'm not an expert on this class, so I trust your analysis. The language looks good to me.","2024-06-28T08:46:30Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-26T07:51:11Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-26T07:52:09Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-26T07:56:59Z",false,"COMMENTED"
"passivestar","CONTRIBUTOR","","2024-04-26T08:09:04Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-04-26T09:22:11Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-04-26T09:34:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-24T16:06:37Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-24T16:08:56Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-05-24T16:11:33Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-24T16:13:18Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-05-24T16:19:05Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-24T16:32:51Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-05-24T16:34:36Z",false,"COMMENTED"
"Hilderin","CONTRIBUTOR","","2024-05-24T16:41:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-24T17:17:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-24T17:18:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-24T17:18:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-24T18:23:12Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

I think this new default makes sense, but I'm worried about users potentially not noticing where their `print()` output goes (particularly for beginners). I wonder if we should make it so the Output panel is opened if you currently don't have any panel open.

Perhaps this could also be alleviated by adding an ""unread messages count"" to the Output panel button's text, like Debugger already gets when warnings/errors are printed. I'd prefer this solution personally, but it should probably be implemented in a separate PR.","2024-05-27T16:34:31Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks! Looks good to me :-)","2024-04-22T22:46:04Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","lgtm","2024-04-23T01:05:02Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-22T20:36:46Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-22T20:47:34Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-22T20:53:30Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-22T20:05:13Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-23T17:25:47Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-23T17:46:02Z",false,"COMMENTED"
"ajreckof","MEMBER","","2024-04-23T17:53:05Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-04-23T20:03:12Z",false,"CHANGES_REQUESTED"
"raulsntos","MEMBER","","2024-04-24T01:47:27Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-30T21:15:27Z",false,"COMMENTED"
"KoBeWi","MEMBER","Looks fine on editor side.","2024-04-30T22:04:05Z",false,"APPROVED"
"raulsntos","MEMBER","The C# changes look good to me. It works as expected when using it with C# scripts.","2024-05-01T01:40:52Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-01T11:26:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-22T15:39:57Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks for finding this issue!

Compared to PR https://github.com/godotengine/godot/pull/91018, I like this one better. However, I'm not yet sure if this is the right solution either.

It was PR https://github.com/godotengine/godot-cpp/pull/1321 that has lead to godot-cpp sending `NOTIFICATION_POSTINITIALIZE` twice in some situations. I wonder if there's a better way to implement that which won't have this problem?

For example, notifications are called parent first, and we will have already sent it for the full hierarchy of the ""owner class"" - maybe we could send it only for the classes on the extension side?","2024-04-23T19:26:08Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-01T20:50:24Z",false,"COMMENTED"
"Daylily-Zeleen","CONTRIBUTOR","","2024-05-02T06:03:55Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-02T15:06:21Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-02T15:10:33Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-24T11:11:39Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks for your continued work on this!

> If we can merge this pr in 4.3, I think we should merge GDExtensionClassCreationInfo4 into GDExtensionClassCreationInfo3.

I think we should save this for 4.4 - Godot 4.3 is basically in feature freeze at this point (with a couple of specific possible exceptions, but this PR isn't among them).

> I would try to implement similar feature for https://github.com/godotengine/godot/pull/91019 later.

At this point, I think I personally favor the approach in this PR over the other one. It would be nice to get some feedback from other GDExtension team members, though.","2024-05-16T15:29:25Z",false,"COMMENTED"
"Daylily-Zeleen","CONTRIBUTOR","","2024-05-16T17:50:09Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-17T20:59:54Z",false,"COMMENTED"
"Daylily-Zeleen","CONTRIBUTOR","","2024-05-18T08:25:22Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-18T13:17:38Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks! This is looking great to me now :-)

**However, we should wait until the Godot 4.4 development cycle starts to merge this.**","2024-05-18T16:15:41Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-18T17:10:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-18T17:12:29Z",false,"APPROVED"
"raulsntos","MEMBER","The changes to GodotSharp look good to me.

Does this need a follow-up in `godot-cpp`? As I understand it, this is an alternative to https://github.com/godotengine/godot-cpp/pull/1447 so should that be reverted after merging this one? Or, to put it another way, what should GDExtension language bindings do regarding the POSTINITIALIZED notification after this PR is merged?","2024-05-19T00:49:55Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-05-20T13:22:43Z",false,"COMMENTED"
"Daylily-Zeleen","CONTRIBUTOR","","2024-05-20T17:03:56Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-23T14:56:08Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-23T20:55:28Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks! This is looking really great to me :-)

**(Reminder: Please don't merge this until the Godot 4.4 development cycle opens)**","2024-05-28T14:20:30Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-16T21:07:52Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-22T20:25:28Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-22T15:32:51Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-04-22T21:33:01Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-04-22T21:33:11Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected. Same MRP as here: https://github.com/godotengine/godot/pull/88646#pullrequestreview-1917839320

File sizes of the imported WAV (converted to QOA on import) match the one from the previous PR.","2024-04-22T21:48:15Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","Just took a look, and everything looks fine! I'm not an audio person so some thing flew over my head but they didn't raise any obvious red flags.

Small nitpick: the patch comments a bit of stuff. I suppose that those lines might as well be removed altogether.","2024-04-23T01:51:39Z",false,"COMMENTED"
"DeeJayLSP","CONTRIBUTOR","","2024-04-23T02:42:21Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-23T08:35:28Z",false,"COMMENTED"
"DeeJayLSP","CONTRIBUTOR","","2024-04-25T19:17:04Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-04-25T21:51:06Z",false,"COMMENTED"
"DeeJayLSP","CONTRIBUTOR","","2024-04-25T22:47:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-27T17:00:48Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-27T17:33:13Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-29T07:33:54Z",false,"COMMENTED"
"reduz","MEMBER","","2024-05-02T08:15:11Z",false,"APPROVED"
"Calinou","MEMBER","","2024-04-22T18:30:57Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-04-22T22:49:35Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it has some issues with flickering when the limit is reached. Here, I `print(delta)` in `_process(delta)` with the limit configured to 1000:

**:warning: Epilepsy warning due to flashing text :warning:**

https://github.com/godotengine/godot/assets/180032/abdfd0dc-25dd-41b8-817a-f2563b74f0b4

","2024-04-22T22:55:01Z",false,"CHANGES_REQUESTED"
"TheSofox","CONTRIBUTOR","","2024-04-23T15:35:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-23T16:28:26Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-04-23T16:36:55Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-04-23T16:37:51Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/b9e022302aa4a5d97f8b25a1db809e64b46b6f96), it works as expected now.

Note that the **Debugger > Errors** bottom panel still has no limit on the number of errors and warnings stored in its Tree, which can cause performance issues if errors or warnings are spammed. We should look into addressing this in a different PR by limiting the number of errors/warnings present in that panel (perhaps to a lower value like 2,000, as a TreeItem is more expensive than a line in RichTextLabel).","2024-05-02T23:06:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-07-31T18:13:11Z",false,"APPROVED"
"mihe","CONTRIBUTOR","","2024-04-22T11:10:12Z",false,"COMMENTED"
"reduz","MEMBER","","2024-04-22T11:21:52Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-04-22T18:20:28Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-04-30T13:41:07Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-04-30T14:04:20Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-05-06T18:44:23Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

```gdscript
extends Node2D

var iteration := 0

func _ready() -> void:
	recurse()


func recurse() -> void:
	iteration += 1
	if iteration < 5:
		recurse()
	else:
		print(script_backtrace())
		for i in 20:
			# Needed so the print shows up reliably in the Output panel.
			await get_tree().process_frame
		get_tree().quit()
```

Results in:

```
stack_language: GDScript
0: recurse (res://node_2d.gd : 14)
1: recurse (res://node_2d.gd : 12)
2: recurse (res://node_2d.gd : 12)
3: recurse (res://node_2d.gd : 12)
4: recurse (res://node_2d.gd : 12)
5: _ready (res://node_2d.gd : 6)
```

Some remarks:

- Should the method be renamed to `get_script_backtrace()`, since it's a getter and has no side effects in itself?
- Printed stack traces seem to go to stdout, but I'd generally expect them to go to stderr like in most other languages.
- The stacktrace could have a note of the form `Traceback (most recent call last)` on the first line, like in Python.
  - To avoid making the stack trace longer, we can format the first line as follows:
  - `GDScript traceback (most recent call last):`
- Colored printing in errors seems to be missing a reset color code at the end. Here, I use `push_error()` then manually print some text afterwards (which shouldn't appear colored as a result):

![image](https://github.com/godotengine/godot/assets/180032/4945ca70-3dd8-4b1a-b86d-4b4cf6228c96)

- In error traces, I'd indent each line with 4 spaces so the entire error message is indented (except its first line).
","2024-05-06T23:57:34Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me.

Amended to fix a style issue to pass CI.","2024-04-25T09:48:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-22T09:34:55Z",false,"APPROVED"
"AThousandShips","MEMBER","Glanced at the code for the project settings and it doesn't seem like it expects binary explicitly in exports, I'd argue the original issue comes from invalid documentation references rather than faulty code, but dont think it hurts to respect this setting here, though I also don't necessarily think there's any reason to not store it as binary

But for my part I'd say to go with this

A second pair of eyes from someone would be good though on the relevant area","2024-04-22T07:33:45Z",false,"APPROVED"
"groud","MEMBER","LGTM.","2024-04-22T08:29:03Z",false,"APPROVED"
"DarioSamo","CONTRIBUTOR","","2024-04-21T23:53:25Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-21T23:57:29Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-22T00:01:34Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-22T00:02:59Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-22T08:59:26Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-22T09:06:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-22T09:10:57Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-04-22T20:39:28Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T15:14:17Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:16:57Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:17:01Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:17:08Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:17:27Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:17:39Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:17:48Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:17:56Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:18:08Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:18:17Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:18:26Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:19:40Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:19:51Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:19:56Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:20:38Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:20:43Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:20:48Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:21:24Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:21:31Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:21:42Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-27T20:21:47Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-28T17:07:03Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-28T18:32:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-28T18:42:23Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-28T19:10:28Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-05-15T21:29:13Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks good to me to merge for Beta 1 pending the small changes suggested by Bruvzg. 

I would like to get this in to Beta 1 as it will help massively for debugging Vulkan issues. We fixed a lot of the significant bugs in 4.3 already, the rest are going to be nearly impossible to track down without this additional info. So IMO, its best to get this in now so that users of 4.3 that still run into Vulkan bugs can give us a sensible report by running a debug build","2024-05-15T21:34:00Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-05-15T21:34:31Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-05-15T21:34:39Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-05-17T03:04:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-17T10:24:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","See above with compat","2024-05-17T10:26:58Z",false,"DISMISSED"
"AThousandShips","MEMBER","","2024-05-17T10:30:45Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-05-17T14:18:32Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-17T14:34:26Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-17T15:17:27Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-17T15:25:54Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-05-18T14:45:12Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-05-18T20:08:49Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-05-18T20:10:53Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-05-18T20:35:53Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-05-18T20:39:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-19T11:08:33Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-19T13:57:19Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-05-20T08:18:20Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-28T16:19:02Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-06-01T21:11:34Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-06-11T01:44:07Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-06-14T07:52:36Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-06-14T14:30:33Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-06-21T08:04:56Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-21T21:49:58Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-21T21:50:09Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-08-22T06:49:53Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-08-22T16:04:51Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-30T21:15:40Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-02T14:17:21Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-22T13:33:05Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-04-22T13:52:13Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-22T15:28:16Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-22T15:29:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-22T15:31:36Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-22T15:32:10Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-04-22T16:13:48Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-04-22T16:14:05Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-04-22T16:14:17Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-04-22T16:32:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-22T16:42:42Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-04-22T16:43:25Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-04-22T17:17:13Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-22T19:18:39Z",false,"COMMENTED"
"TheSofox","CONTRIBUTOR","","2024-04-22T19:44:52Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-22T20:26:24Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-21T16:07:15Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-04-21T17:01:55Z",false,"COMMENTED"
"Fulanko","CONTRIBUTOR","","2024-04-21T18:32:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-21T18:33:06Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-04-22T15:32:21Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-22T15:38:41Z",false,"APPROVED"
"limbonaut","NONE","","2024-04-22T14:21:12Z",false,"COMMENTED"
"limbonaut","NONE","","2024-04-22T14:32:06Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-23T19:42:04Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T14:13:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T14:17:05Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-06-04T14:45:15Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T15:03:48Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T15:04:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-04T15:04:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T15:04:45Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T15:08:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T15:17:25Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T15:20:46Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-06-04T15:25:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-04T15:29:02Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T15:37:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T15:39:37Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T15:40:53Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T15:42:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T15:43:55Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T15:47:25Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-06-04T15:48:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T15:48:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T15:51:41Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T15:52:53Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-06-04T15:59:59Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-06-04T16:04:06Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-06-04T16:04:32Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T16:06:39Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-06-04T16:06:47Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-06-04T16:09:11Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-06-04T16:29:36Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-06-04T16:29:49Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-06-04T16:30:13Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-06-04T16:31:33Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T16:32:09Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-06-04T16:32:51Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-06-04T16:33:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T16:40:19Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-06-04T16:45:30Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-06-04T16:45:59Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T16:47:50Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-06-04T16:48:57Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T16:56:34Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-06-04T17:00:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T19:09:53Z",false,"COMMENTED"
"KoBeWi","MEMBER","This could still use some improvements (like compilation responsiveness), but the most import problems were resolved and overall it's functional.","2024-06-04T19:57:32Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master`), it works as expected.

Some feedback:

- [ ] SCons' stdout appears in the terminal but not in the editor Output panel. With the new process management classes, would it be possible to display it in the editor Output panel? https://github.com/godotengine/godot/pull/92209 will take care of the ANSI escape codes from the colored prints.

- [x] Should the **Library Name** field use the `is_valid_identifier()` method to check for validity? Its tooltip says it must be a valid identifier on its own, unlike **Base Name**. I believe *most* programming languages are aligned on GDScript's requirements for identifiers, so enforcing this probably makes sense. Note that `is_valid_identifier()` allows non-ASCII characters, so another method must be used as well to check whether only ASCII characters were entered (if this is required).

- [x] Adding multiple extensions in the same project with this dialog will result in errors:
   - > Attempt to register extension class 'ExampleNode', which appears to be already registered.
   - > Attempt to register extension method 'hello' for unexisting class 'ExampleNode'.`

To avoid this, I suggest using the plugin path as a suffix to the the node name created by the extension numeric suffix (e.g. `ExampleNodeExtensionDemo` for an add-on in the `extension_demo` folder).

- [ ] The example extension code should probably print something in its constructor (or `NOTIFICATION_READY`), so you see it having an effect right away when it's added to the scene tree. Also, its `hello()` method should either print text directly (and return `void`), or be renamed to something like `get_greeting_text()` as it currently doesn't print and returns a String instead.

- [x] The line ""Both Git and SCons were found."" should also tell you that you need a C++17-compatible compiler (GCC, Clang or MSVC). The ""or MSVC"" part should only be displayed on Windows. Something like this:
  - > Both Git and SCons were found. You will also need a C++17-compatible compiler such as (GCC or Clang|GCC, Clang or MSVC).

- [x] When using the C++ as GDExtension or engine module option, the last line of the creation dialog should be yellow, as it's a warning:

![image](https://github.com/godotengine/godot/assets/180032/ec20c9e2-1223-4755-b60e-2dfc1838fc12)

- [x] The form considers it valid to use non-digit characters in the compatibility minimum/maximum version fields. Also, using a minimum version (`4.4`) greater than the current editor version (`4.3`) is currently not prevented. This leads to an error if you confirm the dialog.

![image](https://github.com/godotengine/godot/assets/180032/4bfe893a-999f-409e-9fce-b3ca95708b93)

- [ ] We should figure out how to handle this in the [Flatpak](https://github.com/flathub/org.godotengine.Godot), as there won't be a C++ compiler, Git or SCons available for it to run. I suppose the Flatpak will need a patch to run these tools using flatpak-spawn from the host system.

- [ ] On the Android and web editors, this functionality should be disabled as there's no way the user can run a C++ compiler toolchain on those (due to sandboxing restrictions).","2024-06-05T14:12:29Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-19T08:42:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-19T08:43:28Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-19T08:43:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","Haven't tested but the code looks good to me","2024-06-25T16:44:16Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks, this is looking really awesome! This provides a great base to build even more functionality on top of.

I tested it a bunch locally, and reviewed the code in the ""cpp_scons"" template in detail, but only really skimmed the editor code. All looks good to me :-)","2024-09-10T16:03:54Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-22T12:44:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-26T10:55:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","Plugin config dialog changes look fine.","2024-04-26T11:49:44Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-29T07:37:24Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-29T07:44:10Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-04-21T11:05:41Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-04-21T15:24:58Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-30T09:37:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-30T09:37:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-30T09:41:50Z",false,"CHANGES_REQUESTED"
"RandomShaper","MEMBER","","2024-04-23T07:51:10Z",false,"COMMENTED"
"Naros","CONTRIBUTOR","","2024-04-23T10:47:01Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-24T08:50:54Z",false,"COMMENTED"
"Naros","CONTRIBUTOR","","2024-04-24T19:19:37Z",false,"COMMENTED"
"Naros","CONTRIBUTOR","","2024-06-19T00:30:34Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-06-19T03:48:24Z",false,"APPROVED"
"akien-mga","MEMBER","There's one issue to fix, but I'd like to see more justification for why these methods should be exposed.

There's no linked proposal, nor any explanation about what you need those methods for.","2024-09-08T21:02:07Z",false,"CHANGES_REQUESTED"
"akien-mga","MEMBER","","2024-09-08T21:03:01Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-09-09T06:34:30Z",false,"COMMENTED"
"Naros","CONTRIBUTOR","","2024-09-15T17:52:15Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-16T10:24:50Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-16T10:25:04Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-16T10:25:19Z",false,"APPROVED"
"paulloz","MEMBER","It works fine üëå

Now, I'm not the one to judge whether the downside outweighs the benefits here, or not.","2024-04-21T17:49:53Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great! The final step before merging is to squash all the commits together so that the whole PR only contains 1 big commit with all your changes. We like to merge one commit at a time to keep the git history clean and navigable. 

If you don't know how to do that, we have a helpful tutorial in the official documentation https://docs.godotengine.org/en/latest/community/contributing/pr_workflow.html#the-interactive-rebase","2024-04-22T20:43:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-22T20:46:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-26T08:56:29Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-07T14:31:37Z",false,"APPROVED"
"fire","MEMBER","","2024-04-20T21:36:26Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-20T22:38:24Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-04-21T23:12:12Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Good catch, thanks!

It looks like I missed this in my review of PR https://github.com/godotengine/godot/pull/87117: we used to pass `&library_path` into `OS::open_dynamic_library()` which would lead to it getting set, but now its being stored in an intermediate variable, so we need to explicitly set it.","2024-04-22T13:29:37Z",false,"APPROVED"
"fire","MEMBER","I don't know about how internal seeking works to review, need some test cases and a video.

However, it does seem useful to approve.","2024-04-30T15:35:07Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-30T15:45:20Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-20T18:33:47Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected (even if **Disable Stdout** is initially enabled in the project settings).

However, if you start the engine with the `--quiet` command line argument, the project can make itself ""unquiet"" at runtime. This is not necessarily a dealbreaker (use `godot &> /dev/null` or `godot > NUL` if you want a strict quiet mode), but it's worth documenting.

**Testing project:** [test_pr_90955.zip](https://github.com/user-attachments/files/16200040/test_pr_90955.zip)
","2024-07-12T23:51:45Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-12T23:52:09Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-12T23:52:19Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-07-12T23:54:05Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-13T12:16:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-13T12:28:26Z",false,"COMMENTED"
"Calinou","MEMBER","Docs look good to me.","2024-07-15T20:27:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-23T14:10:15Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it mostly works as expected. I've tested various classes such as HTTPClient, AnimatedSprite2D and so on. This feature makes sense to quickly access the online docs for the current class, which makes it easier to link to people (e.g. on forums).

One issue is that in user-defined classes, clicking **Open in Online Docs** will point to a nonexisting page. For instance, a class named `Test` will point me to `https://docs.godotengine.org/en/latest/classes/class_test.html` which doesn't exist. I suggest finding a way to disable this button for user-defined classes.","2024-05-07T23:45:18Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","The button now correctly displays **Online Docs** (instead of **Open in Online Docs**) when selecting a custom class named `Test`, but clicking it still opens the page `https://docs.godotengine.org/en/latest/classes/class_test.html` which doesn't exist.","2024-05-13T17:22:41Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","Tested locally, it works as expected now. Code looks good to me.","2024-05-16T11:08:14Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-20T14:58:29Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me.","2024-04-29T07:16:55Z",false,"APPROVED"
"smix8","CONTRIBUTOR","","2024-08-28T19:52:37Z",false,"APPROVED"
"YeldhamDev","MEMBER","","2024-04-20T21:37:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-22T06:54:22Z",false,"APPROVED"
"Scony","CONTRIBUTOR","","2024-04-20T12:56:12Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-04-20T13:31:40Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-04-20T13:41:55Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-04-20T18:35:03Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-20T18:36:04Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-20T09:54:18Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-20T13:36:03Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-21T16:25:04Z",false,"APPROVED"
"YeldhamDev","MEMBER","","2024-04-20T21:38:03Z",false,"APPROVED"
"kitbdev","CONTRIBUTOR","","2024-08-16T22:29:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-13T09:22:54Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-07-13T12:27:43Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-04-20T12:42:49Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-04-20T18:33:55Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-20T18:38:08Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-04-21T03:01:17Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-22T10:41:51Z",false,"COMMENTED"
"lawnjelly","MEMBER","Shaders look fine to me, although as said it would be nice to get some more testing on low end mobile and dedicated GPU.","2024-04-20T04:05:26Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

|        | llvmpipe RD (1080p) | llvmpipe compatibility[^1] | 4090 RD (4K)     | 4090 compatibility (4K) |
|--------|---------|--------------------|-----------------|-----------------------|
| Before | 22 FPS | N/A | 2667 FPS  | 2584 FPS                |
| After  | 27 FPS | N/A  | 3520 FPS | 3646 FPS |

[^1]: I couldn't figure out how to benchmark this one reliably (I can use Xephyr but this breaks any performance expectations due to its own overhead). `LIBGL_ALWAYS_SOFTWARE=1` does not work on NVIDIA; it only has an effect on Mesa drivers.","2024-04-22T23:42:21Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Makes sense to me! Implement looks good, although, I didn't do any testing.","2024-04-22T14:21:42Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-22T15:07:27Z",false,"APPROVED"
"fabriceci","CONTRIBUTOR","Great job!

I had a bit of free time and I was looking to fix this problem, I found the PR while looking for the issues :)

To add a bit of context, this line belongs to a block of code that cancels a movement when you run against a surface considered to be a wall. 

If the speed is too fast, the movement cannot be reversed as this would create a gap between the wall and the body.


(Prepare yourself for a very high quality graphic)
![Screenshot 2024-04-24 at 22 22 58](https://github.com/godotengine/godot/assets/6397893/c22fe60e-8621-4845-bf09-cf6ac25e8a3e)

It was a case I hadn't anticipated!

I tested the reproduction project of the bug as well as the scenario I illustrated to see if it still works properly, and everything is perfect!

","2024-04-24T20:28:34Z",false,"APPROVED"
"reduz","MEMBER","","2024-04-30T16:25:18Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-30T16:35:19Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-30T16:43:21Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me. Needs a rebase.","2024-05-07T15:02:04Z",false,"APPROVED"
"BlueCube3310","CONTRIBUTOR","LGTM","2024-04-21T08:47:17Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-22T06:59:45Z",false,"APPROVED"
"RandomShaper","MEMBER","Makes sense!","2024-04-23T08:04:00Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-19T17:12:49Z",false,"COMMENTED"
"Dams4K","NONE","","2024-04-19T18:27:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-19T18:33:31Z",false,"COMMENTED"
"Dams4K","NONE","","2024-04-19T18:47:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-19T19:46:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-20T13:03:37Z",false,"COMMENTED"
"groud","MEMBER","","2024-04-22T08:44:24Z",false,"APPROVED"
"Calinou","MEMBER","","2024-04-19T21:16:02Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-21T16:19:36Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-21T16:21:38Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-21T16:23:32Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-04-22T20:40:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-23T08:56:35Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-23T09:00:25Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-23T10:22:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-23T10:24:04Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good.

At some point we might have to consider making RegEx a core component instead of a module, as we're starting to use it in more and more places and these conditional behaviors are error prone. (It might be the case already that a build without the regex module, while it should compile fine, might have bugs in some features that are not expected.)","2024-04-23T10:25:09Z",false,"APPROVED"
"Calinou","MEMBER","","2024-04-19T15:59:22Z",false,"COMMENTED"
"Calinou","MEMBER","Makes sense to me.","2024-04-19T15:59:52Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-04-22T21:43:18Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-30T15:33:53Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-19T10:34:36Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-19T10:38:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-19T10:39:35Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-04-19T10:54:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-19T15:48:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-19T15:50:15Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-04-19T15:51:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","It's still somewhat hacky, but at least it's no longer hard-coded to one class. It's a nice solution.","2024-04-19T15:56:28Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-19T15:57:21Z",false,"COMMENTED"
"akien-mga","MEMBER","That approach looks fine to me overall.

I discussed it with @reduz, and we agreed to merge this for now to address the immediate issue, and then:
- Backport support for parsing the new base64 PackedByteArray to 4.1.5 and 4.2.3 (but not saving - so keeping version format 3 there, but being able to parse version 4).
- Eventually consider reverting this compat handling once the currently supported stable versions no longer need it.","2024-04-23T15:16:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-19T08:48:04Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great! The final step before merging is to squash all the commits together so that the whole PR only contains 1 big commit with all your changes. We like to merge one commit at a time to keep the git history clean and navigable. 

If you don't know how to do that, we have a helpful tutorial in the official documentation https://docs.godotengine.org/en/latest/community/contributing/pr_workflow.html#the-interactive-rebase","2024-04-22T20:42:43Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","","2024-04-19T05:48:07Z",false,"COMMENTED"
"basicer","CONTRIBUTOR","","2024-04-19T07:17:16Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-04-25T03:25:19Z",false,"COMMENTED"
"fire","MEMBER","I did not do a technical review.

> Would be good to squeeze into 4.3 as it would be many more months of hanging dry addons and extensions that can not really get their users to use the hot master build.

Would be good for gdextension authors as a quality of life enhancement.","2024-04-18T22:55:18Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-19T07:44:29Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me.

I agree with this approach, we've had a few issues due to reusing the same file across minor releases, and this will grow as the 4.x series keeps getting more and more features.","2024-04-23T15:18:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-18T22:12:08Z",false,"APPROVED"
"Geometror","MEMBER","","2024-04-19T10:40:23Z",false,"APPROVED"
"fire","MEMBER","","2024-04-18T18:48:47Z",false,"APPROVED"
"YeldhamDev","MEMBER","","2024-04-18T19:39:51Z",false,"APPROVED"
"timothyqiu","MEMBER","","2024-04-19T01:23:00Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-04-23T08:25:00Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-18T21:56:04Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-18T16:38:36Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-19T14:07:35Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-18T15:51:13Z",false,"APPROVED"
"fire","MEMBER","What about is_finite()? Like would you also want to block infinities?","2024-04-18T17:06:24Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me.

I wonder to what extent this may solve or help address some of the issues we're having with refactoring named classes with circular dependencies, or first-time load of projects before the class name cache has been created.","2024-04-29T10:05:14Z",false,"APPROVED"
"fire","MEMBER","","2024-04-18T17:01:41Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-19T14:08:27Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","You're a SCons wizard :)","2024-04-19T22:24:34Z",false,"APPROVED"
"akien-mga","MEMBER","Neat, thanks for looking that up!","2024-04-19T22:34:19Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-04-19T23:18:08Z",false,"APPROVED"
"kleonc","MEMBER","Makes sense!","2024-04-18T14:20:05Z",false,"APPROVED"
"paddy-exe","CONTRIBUTOR","Looks good code-wise. This should be back-ported though I assume","2024-06-06T14:38:53Z",false,"APPROVED"
"groud","MEMBER","","2024-05-27T12:37:40Z",false,"APPROVED"
"DarioSamo","CONTRIBUTOR","Nice catch. I haven't tested the modification myself but the change makes plenty of sense.","2024-04-18T12:35:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-18T13:13:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-18T09:51:00Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-19T18:28:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-18T08:53:47Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-18T09:00:51Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-18T09:01:58Z",false,"APPROVED"
"raulsntos","MEMBER","I think this makes sense, although I agree that the double subscription is not ideal. It seems like a niche use case though, since it would only affect connections done in serialized properties.

Still, it would be great to get some user testing so we can evaluate how disruptive this change is, maybe since we have `ISerializationListener` as a escape hatch it may be good enough.

Thanks!","2024-04-19T02:36:45Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-18T06:57:35Z",false,"APPROVED"
"fire","MEMBER","","2024-04-19T19:05:37Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-19T19:58:05Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-18T06:48:12Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-18T06:37:17Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-04-18T15:44:33Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-04-18T17:27:58Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-04-18T18:16:38Z",false,"APPROVED"
"groud","MEMBER","","2024-04-24T07:49:10Z",false,"APPROVED"
"KoBeWi","MEMBER","Aside from a minor error it works fine now.","2024-04-19T21:23:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-17T18:17:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-17T18:34:38Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-17T18:36:15Z",false,"APPROVED"
"kleonc","MEMBER","","2024-04-18T15:11:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-18T15:15:02Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-17T18:11:59Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","","2024-04-18T01:34:51Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-04-18T01:36:03Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-04-18T01:51:00Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-04-18T01:53:04Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-04-18T01:54:30Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-04-18T04:44:56Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-04-18T04:46:41Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-04-18T04:48:25Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-04-18T04:49:19Z",false,"COMMENTED"
"clayjohn","MEMBER","Makes sense!","2024-04-17T17:48:54Z",false,"APPROVED"
"akien-mga","MEMBER","I can't fully evaluate this myself, but trust RandomShaper :D
Let's merge and see if the CI stops having spurious errors.","2024-04-17T17:20:45Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good.","2024-04-17T16:31:34Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-17T16:49:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-18T08:45:09Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-18T08:46:54Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-04-18T09:57:31Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-18T10:04:11Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","","2024-04-18T10:19:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-17T15:32:51Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-17T14:46:16Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-17T14:51:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-17T14:53:12Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-17T15:39:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-17T15:56:26Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-22T10:51:14Z",false,"APPROVED"
"smix8","CONTRIBUTOR","","2024-04-17T17:42:29Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-17T13:07:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","Looks good otherwise!","2024-04-17T13:08:32Z",false,"APPROVED"
"Geometror","MEMBER","","2024-04-17T13:13:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-17T13:16:07Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-04-17T13:16:33Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-17T13:17:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-17T13:18:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-17T13:18:29Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-04-17T13:20:58Z",false,"COMMENTED"
"AThousandShips","MEMBER","Thank you for bearing with me","2024-04-17T13:22:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-17T13:37:20Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-04-17T14:07:28Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-04-17T14:09:45Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-17T14:12:00Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-17T14:19:52Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-04-17T15:08:06Z",false,"COMMENTED"
"akien-mga","MEMBER","Perfect!

BTW, hello Geometror from the future :wave: 
```
Date: Wed, 17 Apr 2024 19:00:41 +0200
```","2024-04-17T15:10:13Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-17T15:10:40Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-17T15:21:50Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-04-17T15:25:52Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-17T13:41:10Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-04-17T14:08:23Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-04-17T14:10:02Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-24T08:55:11Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-04-25T03:31:50Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-07-23T08:19:20Z",false,"COMMENTED"
"Chaosus","MEMBER","Also, please add

```
else {
_set_expected_error(""("");
}
```

after the 

https://github.com/godotengine/godot/blob/4e5ed0bbfb56f0a71eb61c868f965476652c23df/servers/rendering/shader_language.cpp#L7359-L7402

(its local function case of the same problem)","2024-07-23T08:59:36Z",false,"CHANGES_REQUESTED"
"jsjtxietian","CONTRIBUTOR","","2024-07-23T09:43:12Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-07-23T10:07:33Z",false,"APPROVED"
"Chaosus","MEMBER","","2024-07-23T12:04:31Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-07-26T03:53:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-17T12:21:04Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-17T12:22:57Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-04-17T16:49:46Z",false,"APPROVED"
"fire","MEMBER","","2024-04-17T14:55:12Z",false,"COMMENTED"
"fire","MEMBER","","2024-04-17T14:56:07Z",false,"COMMENTED"
"fire","MEMBER","The feature is good. Haven't fully reviewed the code implications. Added some code formatting nitpicks.","2024-04-17T17:39:47Z",false,"APPROVED"
"Geometror","MEMBER","","2024-04-17T11:34:30Z",false,"APPROVED"
"clayjohn","MEMBER","Makes sense!","2024-04-23T01:34:41Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-06-23T22:13:56Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-06-24T03:29:24Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","It's my whole suggestion so of course I agree.","2024-06-24T07:48:55Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-17T09:14:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-17T09:14:43Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-17T09:17:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-17T09:20:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-17T09:23:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-17T09:24:31Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-17T08:15:12Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-19T06:43:47Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-19T15:52:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-29T15:48:41Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-04-29T15:54:16Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-04-29T15:56:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-29T15:57:44Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","Have yet to test it but the logic looks good.","2024-05-13T08:30:14Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks for your epic work on this! It's looking really great :-)

I haven't tested it, but all the important code looks good to me - I just have two little notes.","2024-05-13T17:00:42Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-05-13T17:10:24Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-05-13T17:10:58Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-05-13T17:20:21Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-05-13T18:36:53Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-05-13T18:38:16Z",false,"APPROVED"
"reduz","MEMBER","Looks great","2024-08-28T07:25:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-17T07:36:22Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-17T08:13:19Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-17T09:59:16Z",false,"APPROVED"
"akien-mga","MEMBER","Aside from David's comment, looks good to me.","2024-04-17T15:35:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-18T08:23:45Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-18T08:24:10Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-18T08:24:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-18T08:28:10Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-18T08:48:49Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks great now, should pass checks.","2024-04-18T08:49:08Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","Really cool approach to enable viewing a camera preview without splitting the viewport.","2024-05-01T05:29:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-01T21:15:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-01T21:20:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-01T21:21:57Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-01T21:24:03Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-05T21:17:50Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/557f63d03796db78255f055b6d06cb5f9195ff7e), it works as expected in all rendering methods.

I'd like to be able to resize the preview vertically (so it can be made larger/smaller depending on dock width), but this isn't essential for a first iteration of the feature.","2024-05-13T17:16:23Z",false,"APPROVED"
"vnen","MEMBER","I wonder if there's a better time to do this, maybe some other notification. But I cannot think of anything at the moment, so this is a good compromise.","2024-04-18T18:31:37Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-17T08:41:50Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-04-18T20:41:35Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-04-19T00:54:28Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-04-19T00:54:42Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/214968243c442c0fdcbdfef23943c1547aeafdbc), it works as expected.

UI looks good to me. We could perhaps colorize version numbers later (use the warning color if different than the current version), but this should suffice for now.

Before | After
-|-
![image](https://github.com/godotengine/godot/assets/180032/68797ab7-ce1d-4d70-904f-cb328403c6a1) | ![image](https://github.com/godotengine/godot/assets/180032/319ca3cc-1c15-461d-8484-42fb36367f25)

On projects with a warning (due to requiring conversion or being C# projects in a non-C# build), the warning icon is displayed like this:

![image](https://github.com/godotengine/godot/assets/180032/42b5bcfc-23cc-42db-b590-7b937f5ea211)
","2024-05-21T23:50:03Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-16T17:22:05Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-04-16T20:38:45Z",false,"APPROVED"
"fire","MEMBER","This feature makes sense to me.","2024-04-16T16:53:19Z",false,"APPROVED"
"smix8","CONTRIBUTOR","","2024-04-16T18:18:17Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Agree on the approach!

Are we doing the same for the XR nodes introduced in 4.3? If not, I think we should standardize on that approach to give us the flexibility to make changes if needed.","2024-04-16T16:50:33Z",false,"APPROVED"
"reduz","MEMBER","","2024-04-30T16:27:05Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","The code looks good to me! ","2024-04-16T16:27:25Z",false,"APPROVED"
"TokageItLab","MEMBER","For now I approve this, although it is not recommended to keep dangerous Nodes that do not match Godot's architectural design, but during the development and redesign of XRModifier it may be desirable for comparison purposes to have this work. 

To prevent users from making new use of deprecated classes in the future, we may want to add an option to hide them from the Node Manager.","2024-04-16T17:04:47Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-17T06:51:12Z",false,"APPROVED"
"zulian-dev","NONE","","2024-04-16T14:59:03Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-16T15:16:53Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-16T15:08:12Z",false,"APPROVED"
"akien-mga","MEMBER","Works well on my test project.","2024-04-17T08:02:45Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-16T12:31:38Z",false,"APPROVED"
"clayjohn","MEMBER","Seems fine to me. This essentially reverts this line back to what it was before 2D interpolation. 

Would be good to have @rburing's thoughts too","2024-04-16T19:26:16Z",false,"APPROVED"
"rburing","MEMBER","Looks good, thanks!","2024-04-16T21:16:45Z",false,"APPROVED"
"AThousandShips","MEMBER","Makes sense, though I think we could use a more clear naming perhaps, depending on assumptions of it, maybe something like `get_scale_transposed`","2024-04-16T15:28:39Z",false,"APPROVED"
"Scony","CONTRIBUTOR","","2024-04-16T19:05:51Z",false,"APPROVED"
"fire","MEMBER","","2024-04-16T23:38:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-16T09:59:50Z",false,"APPROVED"
"kitbdev","CONTRIBUTOR","","2024-04-16T16:21:29Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","Maybe we should have a test for it, for copy and cut in `test_text_edit` and for cut in `test_code_edit`.","2024-09-13T01:02:13Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-09-13T16:55:25Z",false,"COMMENTED"
"Geometror","MEMBER","Works great! (expected behavior with both single and multicaret editing)
Code looks fine too.","2024-09-23T10:17:33Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-16T08:50:25Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-02T14:50:04Z",false,"APPROVED"
"Faless","COLLABORATOR","Thank you for spotting this, and looking into the fix.

This looks great! :rocket: ","2024-04-16T10:36:47Z",false,"APPROVED"
"Calinou","MEMBER","I suggest adding [unit tests](https://docs.godotengine.org/en/stable/contributing/development/core_and_modules/unit_testing.html) to `tests/test_expression.h` to make sure this doesn't regress in the future :slightly_smiling_face:","2024-04-17T22:01:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-22T08:00:15Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-22T09:40:10Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-22T09:40:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-16T08:23:07Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-16T08:23:11Z",false,"APPROVED"
"smix8","CONTRIBUTOR","","2024-04-16T07:56:49Z",false,"APPROVED"
"bruvzg","MEMBER","Ideally this should be generated from UCD (https://www.unicode.org/reports/tr21/tr21-5.html#UnicodeData, for these functions only singe character mappings are useful, TextServer already do the rest via ICU), not from python (which might use different UCD versions).","2024-04-16T07:59:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-16T08:27:33Z",false,"CHANGES_REQUESTED"
"fire","MEMBER","This feature isn't in so I'm ok hiding it. Does anyone know when it was added. We might have to delete and add back with a new name though. So maybe leave a comment to show it was here.","2024-04-15T22:19:49Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-04-16T01:54:29Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-16T19:12:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-16T19:13:20Z",false,"COMMENTED"
"tbreese3","CONTRIBUTOR","","2024-04-16T19:47:06Z",false,"COMMENTED"
"tbreese3","CONTRIBUTOR","","2024-04-16T19:47:12Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-16T19:48:55Z",false,"COMMENTED"
"tbreese3","CONTRIBUTOR","","2024-04-16T19:52:31Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-16T20:04:11Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-16T20:04:20Z",false,"COMMENTED"
"KoBeWi","MEMBER","Left some more style comments, but the implementation looks alright now.","2024-04-16T20:07:36Z",false,"APPROVED"
"tbreese3","CONTRIBUTOR","","2024-04-16T20:08:23Z",false,"COMMENTED"
"vnen","MEMBER","LGTM","2024-05-18T20:14:26Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-20T09:27:19Z",false,"APPROVED"
"zulian-dev","NONE","","2024-04-16T15:00:43Z",false,"APPROVED"
"groud","MEMBER","LGTM!","2024-04-16T15:02:27Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-15T16:27:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-15T16:28:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-15T16:28:32Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-15T16:29:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-15T16:30:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-15T16:31:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-15T16:33:09Z",false,"COMMENTED"
"index1207","NONE","","2024-04-16T01:48:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-16T07:52:23Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-05-04T13:19:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-04T13:20:22Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-05-04T13:25:51Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-05-04T13:31:07Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-05-04T13:35:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-04T13:37:17Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-05-04T13:39:15Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-05-04T13:42:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-04T13:43:51Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-05-04T13:46:36Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-05-04T13:50:38Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-05-04T13:57:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-04T13:58:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-04T13:59:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-04T14:01:34Z",false,"COMMENTED"
"lawnjelly","MEMBER","Looks okay from looking through as best I could (quite long PR), although not tested.
","2024-05-04T14:12:07Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-04T14:14:12Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-07T06:56:58Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-15T16:09:36Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks!

I think this change makes sense, and the code looks good.

However, this will need to be squashed into a single commit, per Godot's pull request workflow. See the docs for a way to do that using `git rebase`: https://docs.godotengine.org/en/latest/contributing/workflow/pr_workflow.html#the-interactive-rebase

I'll take a look at fixing the godot-cpp issue.","2024-04-23T15:36:35Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-23T15:38:05Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-25T18:16:35Z",false,"COMMENTED"
"ZerxZ","CONTRIBUTOR","","2024-04-25T22:22:49Z",false,"COMMENTED"
"ZerxZ","CONTRIBUTOR","","2024-04-25T22:38:01Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-26T20:53:19Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","The tests are now passing - yay!

This looks good to me, however, it would probably be good to update the PR title and commit message with the right method names.","2024-05-28T19:13:41Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-28T19:20:34Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-03T14:33:11Z",false,"COMMENTED"
"ZerxZ","CONTRIBUTOR","","2024-09-03T14:37:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-03T14:38:36Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-18T09:12:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-18T09:12:49Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (with #90702 applied on top), it works as expected.

This testing project previously resulted in 200+ warnings being printed on every bake, now it doesn't result in any warning: [test_lightmap_preview_bake_4.x.zip](https://github.com/godotengine/godot/files/14981644/test_lightmap_preview_bake_4.x.zip)[^1]

Code looks good to me at a glance.

[^1]: I intentionally placed multiple probes at the same location in the testing project to see if it breaks, but it appears to bake just fine and dynamic object lighting still behaves correctly.","2024-04-15T16:14:32Z",false,"APPROVED"
"Calinou","MEMBER","","2024-04-15T16:14:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-15T16:15:39Z",false,"COMMENTED"
"permelin","CONTRIBUTOR","","2024-04-15T16:30:49Z",false,"COMMENTED"
"permelin","CONTRIBUTOR","","2024-04-15T16:39:03Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-15T16:40:55Z",false,"COMMENTED"
"permelin","CONTRIBUTOR","","2024-04-15T16:59:30Z",false,"COMMENTED"
"clayjohn","MEMBER","looks good to me! Let's go ahead with this","2024-04-18T01:13:47Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (with #90701 applied on top), it works as expected.

This testing project previously resulted in 200+ warnings being printed on every bake, now it doesn't result in any warning: [test_lightmap_preview_bake_4.x.zip](https://github.com/godotengine/godot/files/14981644/test_lightmap_preview_bake_4.x.zip)[^1]

Code looks good to me at a glance. Thanks for commenting it thoroughly :slightly_smiling_face: 

[^1]: I intentionally placed multiple probes at the same location in the testing project to see if it breaks, but it appears to bake just fine and dynamic object lighting still behaves correctly.","2024-04-15T16:13:55Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-15T16:16:42Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-04-20T06:43:55Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-15T16:04:09Z",false,"COMMENTED"
"akien-mga","MEMBER","Not tested, but the code looks fine to me.","2024-04-15T16:04:21Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-15T10:33:55Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-15T10:55:48Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-15T10:26:45Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-15T10:26:50Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected. Both Keep Height and Keep Width orthgographic gizmos render correctly now, even if the base aspect ratio is changed in the project settings (when changing the window width/height project settings).

Code looks good to me.

Before | After
-|-
![Before](https://github.com/user-attachments/assets/bbd94442-6982-4372-9685-9262d7ca43e0) | ![After](https://github.com/user-attachments/assets/5fd1858d-151a-4cc4-8fa1-c860537045c4)

Example of the sizes being correct now:

![Screenshot_20240807_015230 png webp](https://github.com/user-attachments/assets/3a41a362-a7cb-4208-bba0-3b246e2dc339)

![Screenshot_20240807_015240 png webp](https://github.com/user-attachments/assets/67e8003e-737d-4116-ab35-016ce988a6fe)
","2024-08-06T23:57:25Z",false,"APPROVED"
"Capewearer","NONE","","2024-04-15T09:54:15Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-04-15T10:49:11Z",false,"COMMENTED"
"ellenhp","CONTRIBUTOR","I don't think this should be merged. Some of these changes seem pretty error-prone, and it introduces some code-duplication that I don't like. Also, indexing into arrays in an unsafe language like C++ is really important to get right, and a lot of the code being changed is fairly well tested at this point. I don't think we should change it without good reason. As an end-user I'd rather have a working product that's a bit slower than an unstable (or worse: remotely exploitable) product that's imperceptibly faster, and I'm not even sure this will end up being faster. It's hard to say without profiling data.","2024-04-15T18:08:38Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-04-15T06:14:03Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-17T10:59:14Z",false,"APPROVED"
"paulloz","MEMBER","Looks good to me.  

Would be nice to have a test suite for that kind of thing.","2024-04-15T12:23:02Z",false,"APPROVED"
"fire","MEMBER","","2024-04-14T20:42:01Z",false,"APPROVED"
"ajreckof","MEMBER","Except for small details the rest seems good","2024-04-14T21:54:51Z",false,"APPROVED"
"ajreckof","MEMBER","","2024-04-14T21:56:11Z",false,"COMMENTED"
"RadiantUwU","CONTRIBUTOR","","2024-04-14T21:57:41Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-17T19:48:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-17T19:50:11Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good! Could you squash the commits? See [PR workflow](https://docs.godotengine.org/en/latest/contributing/workflow/pr_workflow.html#the-interactive-rebase) for instructions.","2024-04-17T19:50:25Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-18T08:19:09Z",false,"APPROVED"
"RadiantUwU","CONTRIBUTOR","","2024-04-18T08:22:21Z",false,"COMMENTED"
"melquiadess","CONTRIBUTOR","","2024-04-14T22:56:49Z",false,"COMMENTED"
"melquiadess","CONTRIBUTOR","","2024-04-14T23:09:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-15T08:06:15Z",false,"COMMENTED"
"melquiadess","CONTRIBUTOR","","2024-04-15T08:30:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-15T08:31:48Z",false,"COMMENTED"
"Bromeon","CONTRIBUTOR","","2024-04-16T07:07:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-16T07:52:52Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-04-16T12:20:37Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-04-16T12:49:09Z",false,"APPROVED"
"akien-mga","MEMBER","Makes sense, storing Node pointers is always asking for trouble.","2024-04-14T15:31:48Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-14T16:27:46Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-14T14:23:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-14T14:26:16Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-30T09:45:42Z",false,"APPROVED"
"Calinou","MEMBER","Looks good to me. Please add a note to the class reference (`doc/classes/Image.xml`) to denote that `save_png` will reduce precision to 8 bits per channel regardless of the source Image format.

I think supporting the saving of high bit depth PNGs makes sense, but it should be tackled in a separate PR. While useful in many cases, saving high bit depth PNG isn't always necessary ‚Äì¬†it can just waste file size if it's not needed.

Therefore, I think it should be something you explicitly opt into. This could be achieved with a new optional parameter to the Image `save_png()` function. The same applies to [PNG loading/importing](https://github.com/godotengine/godot-proposals/issues/5418) to avoid wasting memory (e.g. a `max_bit_depth` import option that defaults to 8 bpc).","2024-04-15T22:34:08Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","That extra note in the class reference is mostly fine by me","2024-07-05T23:27:59Z",false,"APPROVED"
"bruvzg","MEMBER","This will use shebang in the scripts, so on macOS `dotnet_format.py` will fail since it's using `python` (it's also missing `+x` so won't run at all). I do not think `default_language_version` do anything at all.","2024-04-14T18:39:11Z",false,"COMMENTED"
"akien-mga","MEMBER","The discussion stalled but I think this is already a good intermediate step to improve the UX of this dialog. We can iterate further if someone comes up with a better design.","2024-05-28T16:27:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-14T12:19:31Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-14T12:20:02Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-14T12:20:22Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-14T12:21:01Z",false,"COMMENTED"
"ajreckof","MEMBER","","2024-04-14T12:56:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-17T11:38:55Z",false,"APPROVED"
"ajreckof","MEMBER","","2024-04-14T20:10:17Z",false,"CHANGES_REQUESTED"
"Muller-Castro","CONTRIBUTOR","","2024-04-15T15:00:08Z",false,"COMMENTED"
"ajreckof","MEMBER","","2024-04-15T17:38:58Z",false,"COMMENTED"
"Muller-Castro","CONTRIBUTOR","","2024-04-15T17:58:32Z",false,"COMMENTED"
"ajreckof","MEMBER","","2024-04-15T18:28:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-16T16:34:25Z",false,"COMMENTED"
"ajreckof","MEMBER","With the few last details this should be good","2024-04-16T16:36:06Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-16T18:51:35Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-16T18:55:22Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-16T19:32:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-16T19:32:40Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-14T18:28:45Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-05-16T18:31:22Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","I think this is a good restructure. We have some remarks on RocketChat that may need to be added here, but they can be part of a follow up PR as well.","2024-04-15T13:38:31Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-04-15T13:59:47Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","I went through the code in-depth, and left some inline review comments.

I also did testing with hand tracking in both WebXR and OpenXR, and some small changes were necessary to get it working for me. Some are generic (like making `XRHandModifier3D` use the right signals) and some are WebXR-specific. Here's the patch:

[pr-90645-drs-fixes.diff.txt](https://github.com/godotengine/godot/files/14981685/pr-90645-drs-fixes.diff.txt)

Anyway, with those changes, hand tracking appears to be working great! I haven't had a chance to test body or face tracking yet.","2024-04-15T16:17:00Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-16T02:26:42Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-16T02:29:21Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-16T02:29:47Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-16T02:30:09Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-16T14:51:28Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-17T01:31:38Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-17T01:33:53Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-17T01:34:09Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-17T01:38:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-17T11:55:24Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-17T11:55:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-17T11:56:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-17T12:00:03Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-04-17T13:58:47Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks, Malcolm! This is looking really great.

I did another code review, which is mostly just nitpicks (with one exception). In my opinion, this PR is very, very close to being ready! :-)

I also re-tested hand tracking with WebXR and OpenXR, it worked!

One more thing I noticed in my testing: the `XRHandModifier3D` node is still has `/user/left` and `/user/right` as its suggestions for the ""tracker"" property - this should be updated to the new names. (In my testing, I had to manually input the new names.)

Looking at the code for `XRBodyModifier3D`, it also still has `/user/body` as its suggestion, and `XRFaceModifier3D` still has `/user/head`. So, all those suggestions need to be updated.","2024-04-17T14:36:35Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-04-17T14:56:53Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","I'm currently on holiday so, my writeup in response to Tokages questions not withstanding, I've mostly only gave this PR a quick read through.

Matches what we discussed on Discord and seems to be a step in the right direction if we want to adhere to the approach of `SkeletonModifier3D` being child nodes of `Skeleton3D`.

Still not 100% sure if this is the best direction but I'll trust you guys judgment on this.","2024-04-17T15:08:49Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-04-17T15:14:23Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-17T23:33:21Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-17T23:33:36Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-17T23:34:16Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-17T23:35:15Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-17T23:35:27Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-17T23:36:35Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-17T23:36:45Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-17T23:36:53Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-17T23:39:07Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-17T23:39:20Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-04-18T01:07:37Z",false,"APPROVED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-18T01:24:00Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-18T01:29:45Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-18T03:16:25Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-18T03:18:30Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks, Malcolm!

The latest code changes look great. And, I re-tested hand-tracking with OpenXR and WebXR, and everything is still working great.

However, there's two little places where the tracker name suggestions still need to be updated (see below).

But I have no other comments aside from that, and once that's fixed, this PR has my wholehearted approval. :-) You've done phenomenal work on this!","2024-04-18T13:42:19Z",false,"COMMENTED"
"TokageItLab","MEMBER","About above, I have received a reply from @dsnopek in https://github.com/godotengine/godot/pull/90361#issuecomment-2064224620and agree with them, so I approve this for now. It would be better if @Malcolmnixon could confirm that the information is correct.","2024-04-18T15:43:26Z",false,"APPROVED"
"Malcolmnixon","CONTRIBUTOR","","2024-04-18T23:45:10Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks, Malcolm! This looks perfect to me now :-)","2024-04-19T00:40:47Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-06-10T13:09:45Z",false,"COMMENTED"
"BattyBovine","NONE","","2024-06-10T21:58:46Z",false,"COMMENTED"
"BattyBovine","NONE","","2024-06-10T22:03:33Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` 292e50e17e3f6e2509d3178a00204f964a907460), the base feature mostly works so far. This is encouraging :slightly_smiling_face: 

I noticed some issues though:

**Testing project:** [test_pr_90644.zip](https://github.com/user-attachments/files/15791900/test_pr_90644.zip)

- At runtime, instead of following the properties set for each shape in the editor, the collision shape color is defined by the *last* collision shape that is parented to a PhysicsBody3D in the scene tree:

Editor | Runtime
-|-
![Screenshot_20240611_180922](https://github.com/godotengine/godot/assets/180032/ba5a2f0e-4666-4941-bef8-698bc5549046) | ![Screenshot_20240611_180914](https://github.com/godotengine/godot/assets/180032/ce573395-9c37-4823-aa8b-95db1f2e076f)

- The default shape opacity is lower, which makes their outlines less visible than in `master`;

`master` | This PR
-|-
![Screenshot_20240611_181128](https://github.com/godotengine/godot/assets/180032/1bffe1e7-13c8-463b-a0b6-461fc71981d8) | ![Screenshot_20240611_181219](https://github.com/godotengine/godot/assets/180032/23afdfd4-2674-494e-af93-c9ac558e09f6)

I suggest leaving the default color's opacity at 255 to avoid this. That said, even with opacity set to 255, collision shape lines become slightly less opaque than in `master`:

![Screenshot_20240611_181328](https://github.com/godotengine/godot/assets/180032/745c743e-a510-4274-a0a3-22eec5ee4fb1)

- Trimesh collision shape drawing seems to break under certain conditions, as seen in the above screenshot.","2024-06-11T16:16:02Z",false,"CHANGES_REQUESTED"
"Mickeon","CONTRIBUTOR","Documentation is completely fine now. Something similar to this feature has been **heavily** requested, too.

The PR and commit title should probably be changed, as this PR modifies **Shape3D**.

https://github.com/godotengine/godot/pull/78273 also exists, but it's not as maintained, at all. I am to assume this PR would essentially make it redundant, but there are benefits in tying the debug color to **CollisionShape3D**, so it's worth keeping in mind.

","2024-07-05T23:01:21Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-08-24T16:34:03Z",false,"COMMENTED"
"BattyBovine","NONE","","2024-08-24T19:17:51Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/5ccbf6e4c794a4e47456edd9434b75fcd6096a2f) with [Truck Town](https://github.com/godotengine/godot-demo-projects/tree/master/3d/truck_town), there's an issue where **Visible Collision Shapes** has no effect when running a project now (it works in the same conditions in 4.3.stable). The same happens when using `--debug-collisions` on the command line.

The debug collision shapes are correctly rendered in the editor.

PS: I wonder if **Debug Fill** should be enabled by default, so that 3D behavior matches 2D. Having a visible fill helps a lot when trying to spot intersections between shapes, so it's important to have good usability out of the box.","2024-10-04T00:07:15Z",false,"CHANGES_REQUESTED"
"RadiantUwU","CONTRIBUTOR","Tested and working on  4.3.1 for weeks with no issues","2024-10-04T18:04:10Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected. Code looks good to me.

![image](https://github.com/user-attachments/assets/c8924a40-1525-497a-8f94-d7d95221b59d)

I suggest enabling Debug Fill by default, then this should be good to merge.","2024-10-10T14:27:05Z",false,"APPROVED"
"Calinou","MEMBER","","2024-10-10T14:28:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-10T14:35:33Z",false,"APPROVED"
"fire","MEMBER","Approving since all the testers approved and the newer changes were only documentation.","2024-10-10T20:22:53Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-16T19:27:20Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-14T18:31:15Z",false,"APPROVED"
"fire","MEMBER","","2024-04-14T04:32:00Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-13T17:47:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-13T16:50:26Z",false,"APPROVED"
"Nazarwadim","CONTRIBUTOR","","2024-04-13T15:40:36Z",false,"APPROVED"
"zaevi","CONTRIBUTOR","","2024-04-13T15:48:12Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-13T16:41:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-13T14:35:55Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-13T13:51:25Z",false,"APPROVED"
"clayjohn","MEMBER","Makes sense!","2024-04-23T01:18:00Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-04-23T07:44:37Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-16T16:01:57Z",false,"APPROVED"
"AThousandShips","MEMBER","Would be interesting to investigate why it fails on macOS specifically (or rather, why it's more likely to fail there)

Alternatively we could comment it out with a FIXME, but this looks good","2024-04-13T08:25:27Z",false,"APPROVED"
"smix8","CONTRIBUTOR","","2024-04-13T08:38:09Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-22T10:50:46Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks, this looks good to me!","2024-04-13T13:11:58Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-04-14T14:55:34Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-14T14:56:10Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-04-14T15:28:06Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-02T08:34:00Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-02T08:37:00Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-05T03:09:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-05T03:59:55Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-05T04:15:56Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-13T15:35:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-13T17:44:52Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-13T18:45:12Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-13T19:06:09Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-13T08:42:49Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-13T08:26:23Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-04-13T00:34:13Z",false,"COMMENTED"
"aaronfranke","MEMBER","I'm not familiar with this code but it looks good to me, and it meets the stated goals in the PR description.","2024-04-13T01:53:51Z",false,"APPROVED"
"vnen","MEMBER","LGTM","2024-04-22T15:33:12Z",false,"APPROVED"
"akien-mga","MEMBER","Good catch, thanks.

I checked the history and:
- `root_lock` was never used since Godot was open sourced
- `tree_version` stopped being used in d61b91cbe0c05466182b15a6dd1899e92fcac749
- `processing` was added in 98c655ec8db17e50afa58284b1dcad754034db4b but then not used in the end","2024-04-13T08:12:30Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-07-05T19:08:18Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Docs are fine now and the feature is intriguing by itself, but the TODO is intriguing, as well:

> Move saving to disk to a different method","2024-07-05T21:40:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-12T17:46:00Z",false,"APPROVED"
"nlupugla","CONTRIBUTOR","","2024-04-12T21:32:04Z",false,"COMMENTED"
"ajreckof","MEMBER","","2024-04-12T22:02:58Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-04-12T22:14:01Z",false,"COMMENTED"
"ajreckof","MEMBER","","2024-04-12T22:29:02Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-04-12T22:38:28Z",false,"COMMENTED"
"ajreckof","MEMBER","","2024-04-12T22:43:02Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","LGTM, hopefully it will help some people make the needed changes.","2024-04-15T23:13:32Z",false,"APPROVED"
"ajreckof","MEMBER","LGTM","2024-04-12T19:13:42Z",false,"APPROVED"
"fire","MEMBER","@aaronfranke I think this is correct?","2024-04-16T09:58:15Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-04-16T11:13:54Z",false,"CHANGES_REQUESTED"
"aaronfranke","MEMBER","","2024-04-16T11:22:47Z",false,"APPROVED"
"AThousandShips","MEMBER","Makes sense","2024-04-12T16:08:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-25T07:40:38Z",false,"APPROVED"
"fire","MEMBER","I love the way the test cases help review the code. We could write more test cases in other prs.","2024-04-12T15:16:05Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-04-12T22:00:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-12T14:18:52Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-04-12T14:26:59Z",false,"APPROVED"
"fire","MEMBER","","2024-04-12T14:54:20Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-12T14:57:36Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","Approve in a technical sense. It's going to be a really big performance improvement for rigs with lots of bones and lots of bone attachments.

I think we need to understand the overall design regarding the update order. Also, is it okay from the user perspective for bone attachment to only update once per frame?

I think it might be good to first figure out if the skeleton modifier design changes before merging this.","2024-04-12T11:51:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-12T10:13:55Z",false,"APPROVED"
"fire","MEMBER","","2024-04-12T14:56:53Z",false,"COMMENTED"
"fire","MEMBER","","2024-04-12T14:57:41Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-04-13T17:13:46Z",false,"COMMENTED"
"akien-mga","MEMBER","That's a bit better indeed.","2024-04-12T09:58:02Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-15T10:28:45Z",false,"APPROVED"
"Calinou","MEMBER","","2024-04-15T23:52:24Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-12T11:59:45Z",false,"DISMISSED"
"KoBeWi","MEMBER","","2024-04-16T14:30:08Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-16T14:30:41Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-16T14:31:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-16T14:31:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-16T14:31:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-14T19:27:16Z",false,"APPROVED"
"fire","MEMBER","","2024-04-12T13:50:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-12T05:38:39Z",false,"APPROVED"
"shana","CONTRIBUTOR","Yup, this will work out well enough for the consoles needs right now, where we really need a way for export plugins to know what platform they're currently exporting for without having to guess. I can work with this :+1:","2024-04-12T14:59:21Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-17T08:57:08Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-12T05:08:56Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-04-12T17:06:23Z",false,"COMMENTED"
"bqqbarbhg","CONTRIBUTOR","","2024-04-12T01:16:14Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-04-12T01:18:11Z",false,"COMMENTED"
"fire","MEMBER","Fixing materials colors is great work. Let us know if this is ready to merge.","2024-04-12T14:55:11Z",false,"APPROVED"
"bqqbarbhg","CONTRIBUTOR","","2024-04-13T00:14:10Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-29T10:03:03Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected (Windows 11 23H2, MSVC 2022). I also checked error messages still appear when they should by introducing an error and compiling.

A small nitpick is that the filename is still displayed on its own line when there's an error:

```
scons: Building targets ...
Compiling main\main.cpp ...
main.cpp
main\main.cpp(31): error C2006: '#include': expected ""FILENAME"" or <FILENAME>
main\main.cpp(31): fatal error C1083: Cannot open include file: '': No such file or directory
scons: *** [main\main.windows.editor.x86_64.obj] Error 2
scons: building terminated because of errors.
```

It could be interesting to strip the lone `main.cpp` from the error message, but it's not critical.","2024-04-11T23:33:13Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-12T09:02:11Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Added feedback in comments.","2024-04-12T14:19:31Z",false,"CHANGES_REQUESTED"
"m4gr3d","CONTRIBUTOR","","2024-04-12T16:48:55Z",false,"APPROVED"
"Calinou","MEMBER","","2024-04-12T17:04:39Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-04-12T23:58:23Z",false,"COMMENTED"
"aaronfranke","MEMBER","This isn't my area and I haven't tested it but the change is very straightforward and looks good to me.","2024-04-13T20:25:07Z",false,"APPROVED"
"bruvzg","MEMBER","Adding stubs to the headless DS should be fine.","2024-05-13T09:28:08Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-13T10:01:58Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Added some feedback in the comments.","2024-04-12T14:13:35Z",false,"CHANGES_REQUESTED"
"m4gr3d","CONTRIBUTOR","Looks great!","2024-04-11T20:54:56Z",false,"APPROVED"
"RandomShaper","MEMBER","I support this.

In fact, I have been working on #91104 and this has made me want to finish it.","2024-04-24T09:45:32Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-11T19:23:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-11T19:25:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-12T11:40:12Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-11T13:57:01Z",false,"APPROVED"
"Bromeon","CONTRIBUTOR","I also encountered this problem, both locally and in [CI](https://github.com/Bromeon/godot4-nightly/actions/runs/8656240843/job/23745129613#step:14:70).

Can confirm this PR fixes it, thanks a lot!","2024-04-12T09:13:03Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-26T18:12:12Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it mostly works as expected. The main issue I noticed is that if you leave a reroute port connected with no input, it'll result in what I assume is an infinite or NaN value:

![image](https://github.com/godotengine/godot/assets/180032/f595e70a-2dda-4a5f-93b9-609eb4f89f5e)

**Testing project:** [test_vs_reroute.zip](https://github.com/godotengine/godot/files/15140051/test_vs_reroute.zip)

Also, it might be worth speeding up the fade animation for the move icon that appears when you hover above the point's hotspot.","2024-04-27T21:22:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-07T11:45:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-07T11:54:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-07T11:55:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-07T11:57:31Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-07T12:12:08Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-07T12:14:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-07T12:16:31Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-05-07T13:18:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-07T13:50:27Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-07T13:56:12Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-05-07T14:40:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-07T14:49:26Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-05-07T15:08:54Z",false,"COMMENTED"
"QbieShay","CONTRIBUTOR","LGTM! Thank you for this work!","2024-05-08T13:15:21Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-12T20:15:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-12T20:23:43Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","I'll admit I don't understand this code very well, but currently I get randomly duplicated nodes and this crash constantly and it's driving me nuts.

If this PR has even a remote chance of solving that, I'm in. It can't possibly make things worse than they are now.","2024-05-07T09:14:25Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-30T10:02:49Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-11T16:22:22Z",false,"COMMENTED"
"berarma","CONTRIBUTOR","","2024-04-11T16:27:25Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-11T10:27:18Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-12T10:35:38Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-12T10:37:21Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-13T09:17:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-11T09:31:42Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-11T09:32:08Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-04-11T14:33:55Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-11T14:35:10Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-04-11T19:03:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-22T09:34:11Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","","2024-05-03T16:20:57Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-03T16:21:55Z",false,"APPROVED"
"akien-mga","MEMBER","The rationale makes sense to me 

I'm curious to know what PR caused the regression though to see why this was written/changed this way.","2024-04-11T06:39:22Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks! I'm so excited to finally see this PR :-)

I looked only at the GDExtension-related changes so far. There's a bunch of rendering and display server related changes that I haven't looked at.

At high-level, this seems like a pretty good approach. Also, I really appreciate that the code changes to GDExtension are fairly minimal. :-)

On PR https://github.com/godotengine/godot/pull/72883, we discussed the possibility of introducing a new concept, perhaps called `GDExtensionLoader`, that would encapsulate the loading behavior, so that we could have `GDExtensionLibraryLoader` that used `OS::open_dynamic_library()` (so the current way) and then maybe a `GDExtensionEmbeddedLoader` that would just take an initialization function.

However, given how simple the changes are here, I think we could perhaps save something like that for a future refactor? It could make things a little cleaner by not having to constantly check if `GDExtension::library` is null or not, though.","2024-04-11T14:37:56Z",false,"COMMENTED"
"fire","MEMBER","","2024-04-11T17:50:22Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-12T17:33:17Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-04-12T22:58:49Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-04-12T23:06:39Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-04-12T23:32:31Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-04-12T23:36:24Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-04-12T23:37:34Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-04-12T23:38:07Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-04-12T23:39:26Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-16T16:35:30Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-16T16:50:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-04T17:23:54Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-06-10T23:49:03Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-06-10T23:50:10Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-06-10T23:51:00Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-06-10T23:51:37Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-06-10T23:51:49Z",false,"COMMENTED"
"kisg","CONTRIBUTOR","","2024-06-10T23:53:25Z",false,"COMMENTED"
"YakoYakoYokuYoku","NONE","Overall, this is a pretty good job, there's some suggestions I've made to improve this PR.","2024-07-24T14:14:43Z",false,"CHANGES_REQUESTED"
"YakoYakoYokuYoku","NONE","","2024-07-24T15:12:50Z",false,"CHANGES_REQUESTED"
"fire","MEMBER","","2024-07-29T03:32:59Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-12T21:12:54Z",false,"COMMENTED"
"fire","MEMBER","","2024-08-12T21:13:29Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","From the perspective of GDExtension, this PR is looking really good now!

Now that it's built on top of the Raul's ""GDExtension loaders"" PR, the changes here are really pretty minimal.

I'm still not crazy about exposing `GodotInstance`, but now that it's abstract, there shouldn't be any risk of developers getting ahold of one when they shouldn't. I think I can live with that.

At this point, I think it's primarily the rendering and platform-related code that needs review and discussion.","2024-09-11T22:59:04Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-11T06:56:19Z",false,"COMMENTED"
"bruvzg","MEMBER","I would keep init change to it own PR (#89684), since it's unrelated to this.","2024-04-11T07:17:36Z",false,"COMMENTED"
"fire","MEMBER","I am not sure of the implications but the feature is useful.","2024-04-11T19:54:03Z",false,"APPROVED"
"fire","MEMBER","","2024-04-10T22:45:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-29T09:41:33Z",false,"APPROVED"
"fire","MEMBER","","2024-04-10T21:28:16Z",false,"APPROVED"
"rburing","MEMBER","","2024-04-10T20:02:00Z",false,"APPROVED"
"Scony","CONTRIBUTOR","","2024-04-10T20:43:14Z",false,"APPROVED"
"smix8","CONTRIBUTOR","","2024-04-10T20:04:18Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-10T20:58:30Z",false,"APPROVED"
"Geometror","MEMBER","","2024-07-12T11:11:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-27T21:37:32Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-29T10:02:37Z",false,"APPROVED"
"aaronfranke","MEMBER","Yeah, this is what Visual Studio does so it's best to be consistent with that (unless we can convince Microsoft to see the light and switch to LF). I'll approve but I have not tested.

> VS generates sln files with 4 tab indentation

The indentation is tabs, not 4 tabs. Tab size is not encoded in the file.","2024-04-10T16:39:19Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-10T16:44:36Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-10T12:51:06Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-04-10T13:47:10Z",false,"COMMENTED"
"preslavnpetrov","CONTRIBUTOR","","2024-04-10T14:59:07Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-04-11T07:47:56Z",false,"COMMENTED"
"preslavnpetrov","CONTRIBUTOR","","2024-04-11T12:02:41Z",false,"COMMENTED"
"preslavnpetrov","CONTRIBUTOR","","2024-05-10T07:32:28Z",false,"COMMENTED"
"preslavnpetrov","CONTRIBUTOR","","2024-05-30T15:33:58Z",false,"COMMENTED"
"dalexeev","MEMBER","Sorry for delay. Here's my suggestion for making `CLASS` and `SCRIPT` cases consistent:

<details>
<summary>Patch</summary>

```diff
diff --git a/modules/gdscript/gdscript_parser.cpp b/modules/gdscript/gdscript_parser.cpp
index da599bf57b..771ccf47b7 100644
--- a/modules/gdscript/gdscript_parser.cpp
+++ b/modules/gdscript/gdscript_parser.cpp
@@ -4327,11 +4327,11 @@ bool GDScriptParser::export_annotations(const AnnotationNode *p_annotation, Node
 				if (ClassDB::is_parent_class(export_type.native_type, SNAME(""Resource""))) {
 					variable->export_info.type = Variant::OBJECT;
 					variable->export_info.hint = PROPERTY_HINT_RESOURCE_TYPE;
-					variable->export_info.hint_string = export_type.to_string();
+					variable->export_info.hint_string = class_name;
 				} else if (ClassDB::is_parent_class(export_type.native_type, SNAME(""Node""))) {
 					variable->export_info.type = Variant::OBJECT;
 					variable->export_info.hint = PROPERTY_HINT_NODE_TYPE;
-					variable->export_info.hint_string = export_type.to_string();
+					variable->export_info.hint_string = class_name;
 				} else {
 					push_error(R""(Export type can only be built-in, a resource, a node, or an enum.)"", p_annotation);
 					return false;
@@ -4340,27 +4340,24 @@ bool GDScriptParser::export_annotations(const AnnotationNode *p_annotation, Node
 
 			case GDScriptParser::DataType::SCRIPT: {
 				StringName class_name;
-				StringName native_base;
 				if (export_type.script_type.is_valid()) {
-					class_name = export_type.script_type->get_language()->get_global_class_name(export_type.script_type->get_path());
-					native_base = export_type.script_type->get_instance_base_type();
+					class_name = export_type.script_type->get_global_name();
 				}
 				if (class_name == StringName()) {
 					Ref<Script> script = ResourceLoader::load(export_type.script_path, SNAME(""Script""));
 					if (script.is_valid()) {
-						class_name = script->get_language()->get_global_class_name(export_type.script_path);
-						native_base = script->get_instance_base_type();
+						class_name = script->get_global_name();
 					}
 				}
 				if (class_name == StringName()) {
 					push_error(R""(Script export type must be a global class.)"", p_annotation);
 					return false;
 				}
-				if (native_base != StringName() && ClassDB::is_parent_class(native_base, SNAME(""Resource""))) {
+				if (ClassDB::is_parent_class(export_type.native_type, SNAME(""Resource""))) {
 					variable->export_info.type = Variant::OBJECT;
 					variable->export_info.hint = PROPERTY_HINT_RESOURCE_TYPE;
 					variable->export_info.hint_string = class_name;
-				} else if (native_base != StringName() && ClassDB::is_parent_class(native_base, SNAME(""Node""))) {
+				} else if (ClassDB::is_parent_class(export_type.native_type, SNAME(""Node""))) {
 					variable->export_info.type = Variant::OBJECT;
 					variable->export_info.hint = PROPERTY_HINT_NODE_TYPE;
 					variable->export_info.hint_string = class_name;
```

</details>","2024-06-03T08:40:17Z",false,"COMMENTED"
"preslavnpetrov","CONTRIBUTOR","","2024-06-03T09:59:47Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-06-03T10:58:34Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-03T11:25:41Z",false,"COMMENTED"
"preslavnpetrov","CONTRIBUTOR","","2024-06-03T12:19:42Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-24T09:22:14Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-24T09:23:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-25T15:40:35Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-25T15:41:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-10T11:40:08Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","","2024-04-10T12:30:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-10T11:23:06Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-10T11:24:17Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-10T11:25:15Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-10T11:27:44Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-04-10T12:56:12Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-04-10T12:57:02Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-04-10T12:57:34Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-04-10T12:58:29Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks great!","2024-04-10T20:52:05Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-10T10:38:11Z",false,"COMMENTED"
"reduz","MEMBER","","2024-07-17T16:53:47Z",false,"COMMENTED"
"reduz","MEMBER","","2024-07-17T16:54:24Z",false,"COMMENTED"
"reduz","MEMBER","","2024-07-17T16:54:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-17T16:55:36Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-17T17:27:34Z",false,"APPROVED"
"ajreckof","MEMBER","","2024-04-10T13:14:21Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-10T11:43:34Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-10T11:42:06Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-10T08:31:30Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-10T21:13:53Z",false,"APPROVED"
"clayjohn","MEMBER","Lets go forward with this for now. It does fix the crash and most likely will work fine in most cases. 

But we need to decide if the implied ordering of commands resulting from this PR is what we want (I think it is).","2024-04-11T00:10:57Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-10T07:46:07Z",false,"DISMISSED"
"lawnjelly","MEMBER","","2024-05-27T18:46:06Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-06-12T10:05:02Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-06-12T12:38:53Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-06-12T12:43:48Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-04-10T11:24:30Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","Cool! Glad I was on the right track, thanks for trying it out. I wonder if we have other places where we're making the same mistake.","2024-04-10T00:56:55Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-10T06:17:50Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","After some adjustments to ensure this is synced with `pyproject.toml` & suppressing certain rules in `SConstruct`/`SCsub` files, everything looks good to go!

We can revisit those suppressed rules once this is established as a baseline, probably around the same point we decide which [extra rules](https://docs.astral.sh/ruff/linter/#rule-selection) we should enable.","2024-05-21T16:05:45Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","Looks quite nice!","2024-05-21T20:03:41Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-21T21:02:26Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-21T21:03:35Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me overall.","2024-05-21T21:44:25Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","","2024-05-21T21:53:15Z",false,"COMMENTED"
"qarmin","CONTRIBUTOR","","2024-05-22T06:07:11Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-22T06:28:09Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-22T06:32:46Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-22T06:33:50Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-22T06:34:03Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","","2024-05-22T10:55:48Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-10T14:43:09Z",false,"APPROVED"
"KoBeWi","MEMBER","Fixes the issue for me.","2024-04-09T20:21:07Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-04-09T20:23:05Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-19T14:18:07Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-04-10T06:12:48Z",false,"APPROVED"
"vnen","MEMBER","LGTM","2024-04-19T13:45:05Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-16T13:40:39Z",false,"APPROVED"
"dalexeev","MEMBER","The new behavior makes more sense to me. I guess we can break compatibility here?","2024-04-10T09:22:25Z",false,"APPROVED"
"vnen","MEMBER","","2024-04-10T14:55:53Z",false,"COMMENTED"
"vnen","MEMBER","","2024-04-10T15:00:15Z",false,"COMMENTED"
"fire","MEMBER","","2024-04-09T18:42:11Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-10T12:01:14Z",false,"APPROVED"
"clayjohn","MEMBER","I guess the issue here is that the custom_aabb is being loaded before the base (mesh etc.) is set on the object. 

It seems this code has been present since `instance_set_custom_aabb()` was added https://github.com/godotengine/godot/pull/12645. Which means this bug has probably been around since `custom_aabb` was exposed https://github.com/godotengine/godot/pull/70114","2024-04-09T23:43:16Z",false,"APPROVED"
"akien-mga","MEMBER","Still need to test, but approving code already.

*Edit:* Also tested and issues are fixed in my project.","2024-04-15T22:27:36Z",false,"APPROVED"
"mhilbrunner","MEMBER","Approving the docs. The feature is useful to me, and the implementation looks clean and self-contained, and I didn't spot anything wrong or surprising during a brief code review. I however didn't build and test this.","2024-04-09T15:36:06Z",false,"APPROVED"
"fire","MEMBER","Approving the feature, did not test the code yet.","2024-04-09T16:44:50Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-04-09T17:38:45Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-04-09T18:03:59Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-04-10T15:09:56Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","Looks good - just an optional suggestion - I'd extend descriptions in `.xml` files so that ""reason why this useful"" is added. At the moment descriptions like:

> If [code]true[/code] a simplified version of the path will be returned with less critical path points removed. The simplification amount is controlled by [member simplify_epsilon].

just explain what it does. Some users may find it useful if there's a one sentence summarizing when it's worth enabling that path optimization.","2024-04-10T19:04:02Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-04-11T12:15:34Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-10T08:12:45Z",false,"COMMENTED"
"Rindbee","CONTRIBUTOR","","2024-04-10T08:29:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","Looks fine.
The third commit should likely be merged with the first one.","2024-04-10T09:26:06Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-10T09:27:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-10T09:39:08Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-10T11:51:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-10T11:53:47Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-09T13:17:43Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks very straightforward. That's in line with the kind of implementation I've often suggested over the years.

I thought it would require a bit more changes on the EditorFileSystem side but reusing `first_scan` seems like a good option. The EFS code around it seems a bit convoluted in some parts, so I wonder if this will fully cover all use cases when doing e.g. multithreaded imported of some resource types. But testing should confirm that.","2024-04-09T13:29:12Z",false,"APPROVED"
"fire","MEMBER","Approving the feature.","2024-04-09T16:34:28Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-10T07:30:44Z",false,"COMMENTED"
"theromis","CONTRIBUTOR","","2024-04-10T07:36:12Z",false,"COMMENTED"
"theromis","CONTRIBUTOR","","2024-04-10T07:37:57Z",false,"COMMENTED"
"theromis","CONTRIBUTOR","","2024-04-10T07:43:40Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-10T07:44:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-10T07:47:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-10T07:47:21Z",false,"COMMENTED"
"theromis","CONTRIBUTOR","","2024-04-10T08:22:04Z",false,"COMMENTED"
"theromis","CONTRIBUTOR","","2024-04-10T08:22:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-10T08:23:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-10T08:23:50Z",false,"COMMENTED"
"theromis","CONTRIBUTOR","","2024-04-10T08:23:56Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-10T08:25:22Z",false,"COMMENTED"
"theromis","CONTRIBUTOR","","2024-04-10T08:41:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-10T09:32:51Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-29T10:44:46Z",false,"APPROVED"
"scgm0","CONTRIBUTOR","","2024-04-09T18:22:29Z",false,"COMMENTED"
"tracefree","CONTRIBUTOR","","2024-04-09T22:03:43Z",false,"COMMENTED"
"tracefree","CONTRIBUTOR","","2024-04-10T05:50:33Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","The logic looks good to me!

Worth calling out that the touched code is not specific to Android, so an additional review from `#platforms` and `#core` may be needed.","2024-04-25T16:24:57Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-26T09:04:23Z",false,"APPROVED"
"tracefree","CONTRIBUTOR","","2024-04-26T09:43:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-26T09:54:52Z",false,"COMMENTED"
"raulsntos","MEMBER","This looks good to me, although I'm not sure how the platform maintainers feel about adding more .NET-specific code to their areas. I think there's precedent in https://github.com/godotengine/godot/pull/88245 that supports this.","2024-04-09T14:44:05Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-09T14:52:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-10T09:38:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-09T08:31:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-09T06:33:49Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Thanks!

I haven't tested, but this change looks good, and matches what [the spec says](https://registry.khronos.org/OpenXR/specs/1.0/html/xrspec.html#XR_KHR_composition_layer_depth) about supporting reverse z:

![Selection_139](https://github.com/godotengine/godot/assets/191561/17259730-f516-497f-9f27-40f8acd59bd2)
","2024-04-09T13:36:40Z",false,"APPROVED"
"clayjohn","MEMBER","Makes sense!","2024-04-09T14:22:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-09T06:31:53Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-04-09T06:31:17Z",false,"APPROVED"
"Calinou","MEMBER","Since `set_active()` and `is_active()` are both exposed, we can surely expose an `active` property now. This should be feasible while preserving compatibility. Setters/getters will disappear in the class reference in favor of the property, but that's OK.","2024-04-16T00:41:47Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-25T10:11:02Z",false,"COMMENTED"
"caimantilla","NONE","","2024-04-25T21:46:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-26T10:52:53Z",false,"COMMENTED"
"groud","MEMBER","","2024-05-07T08:57:50Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-05-07T13:06:39Z",false,"COMMENTED"
"groud","MEMBER","","2024-05-07T14:28:52Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-06T07:55:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-06T08:05:33Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-15T19:29:22Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-15T19:30:51Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-15T20:11:38Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-08-15T22:40:53Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-08-15T22:43:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-16T09:34:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-16T09:51:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-16T09:54:25Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-16T09:56:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-16T10:20:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","I did some (not super-extensive) testing and it works correctly. The code looks fine overall, but it's not like I'm very familiar with SplitContainer. Would be nice if @groud can take a look too.

I spotted one *minor* issue that adding a child will add new entry to `split_offsets`, but deleting it won't delete the entry. It doesn't really have adverse effect though.","2024-08-16T10:33:28Z",false,"APPROVED"
"kitbdev","CONTRIBUTOR","","2024-08-16T18:14:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-27T09:58:51Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-09T08:54:49Z",false,"APPROVED"
"mhilbrunner","MEMBER","LGTM (besides ATS' comment)","2024-04-09T17:40:37Z",false,"APPROVED"
"KoBeWi","MEMBER","Works correctly.
I only wonder about the name. Is `uni` a standard BB code for unicode?","2024-04-09T10:45:57Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-15T08:29:07Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me.","2024-04-08T20:25:42Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-04-09T17:24:20Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-04-09T17:31:49Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-12T15:46:02Z",false,"CHANGES_REQUESTED"
"mhilbrunner","MEMBER","","2024-04-13T12:30:22Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-04-20T13:41:24Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-08T18:51:12Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally with Vulkan Forward+ and Mobile rendering methods, it works as expected. Shader compilation stutter is completely gone in the TPS demo when shooting or destroying an enemy. Runtime performance is identical to `master` when no shader compilation occurs.

The profilers that track pipeline compilations also work as expected. Docs look good to me as well.

This comes at the cost of slightly longer startup times, but I'd say it's worth it.

## Benchmark

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 39)
</details>

Using a Linux x86_64 optimized editor build (with LTO).

Startup + shutdown times when running https://github.com/godotengine/tps-demo's main menu:

### Cold driver shader cache

```
$ hyperfine -iw1 -p ""rm -rf ~/.cache/nvidia/GLCache"" ""bin/godot.linuxbsd.editor.x86_64 --path ~/Documents/Godot/tps-demo --quit"" ""bin/godot.linuxbsd.editor.x86_64.transfer_and_pipelines --path ~/Documents/Godot/tps-demo --quit""
Benchmark 1: bin/godot.linuxbsd.editor.x86_64 --path ~/Documents/Godot/tps-demo --quit
  Time (mean ¬± œÉ):      2.412 s ¬±  0.029 s    [User: 1.057 s, System: 0.294 s]
  Range (min ‚Ä¶ max):    2.371 s ‚Ä¶  2.463 s    10 runs

Benchmark 2: bin/godot.linuxbsd.editor.x86_64.transfer_and_pipelines --path ~/Documents/Godot/tps-demo --quit
  Time (mean ¬± œÉ):      2.555 s ¬±  0.247 s    [User: 1.418 s, System: 0.318 s]
  Range (min ‚Ä¶ max):    2.079 s ‚Ä¶  2.719 s    10 runs
```

### Warm shader driver cache

```
$ hyperfine -iw1 ""bin/godot.linuxbsd.editor.x86_64 --path ~/Documents/Godot/tps-demo --quit"" ""bin/godot.linuxbsd.editor.x86_64.transfer_and_pipelines --path ~/Documents/Godot/tps-demo --quit""
Benchmark 1: bin/godot.linuxbsd.editor.x86_64 --path ~/Documents/Godot/tps-demo --quit
  Time (mean ¬± œÉ):      2.152 s ¬±  0.028 s    [User: 0.831 s, System: 0.271 s]
  Range (min ‚Ä¶ max):    2.126 s ‚Ä¶  2.204 s    10 runs

Benchmark 2: bin/godot.linuxbsd.editor.x86_64.transfer_and_pipelines --path ~/Documents/Godot/tps-demo --quit
  Time (mean ¬± œÉ):      2.236 s ¬±  0.039 s    [User: 0.917 s, System: 0.294 s]
  Range (min ‚Ä¶ max):    2.193 s ‚Ä¶  2.320 s    10 runs

Summary
  bin/godot.linuxbsd.editor.x86_64 --path ~/Documents/Godot/tps-demo --quit ran
    1.04 ¬± 0.02 times faster than bin/godot.linuxbsd.editor.x86_64.transfer_and_pipelines --path ~/Documents/Godot/tps-demo --quit
```","2024-04-30T00:26:38Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-08-10T06:50:24Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-09-02T19:08:08Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/4254946de93bab0cc1fb36a7b9039c9ec43be924), it mostly works as expected.

There's no stutter at all with the TPS demo once I hide the BackgroundCache node from `menu/menu.tscn`. I've opened a PR for that: https://github.com/godotengine/tps-demo/pull/191

I noticed 2 issues:

- In the TPS demo, some of the core particles appear opaque instead of being transparent. This does not occur in `master`:

`master` | This PR
-|-
![master](https://github.com/user-attachments/assets/6ba38edd-1e95-4d19-abfe-5f2746bacf75) | ![This PR](https://github.com/user-attachments/assets/5e7cc2cd-0493-47b3-92d5-1629d123dfb9)


- I got a crash once when opening the TPS demo in the editor. I could only reproduce this once after removing `~/.cache/nvidia/`. I couldn't reproduce this again after trying to follow the same steps.

```
================================================================
handle_crash: Program crashed with signal 11
Engine version: Godot Engine v4.4.dev.custom_build (fdac73548424c59899cb8cde26c551570107ebca)
Dumping the backtrace. Please include this when reporting the bug to the project developer.
[1] /lib64/libc.so.6(+0x40d00) [0x7facce5c5d00] (??:0)
[2] bin/godot.linuxbsd.editor.x86_64() [0xa82fb2] (/usr/include/c++/14/bits/char_traits.h:427)
[3] bin/godot.linuxbsd.editor.x86_64() [0xabe70a] (/home/hugo/Documents/Git/godotengine/godot/thirdparty/glslang/glslang/MachineIndependent/Scan.cpp:933)
[4] bin/godot.linuxbsd.editor.x86_64() [0xac1850] (/home/hugo/Documents/Git/godotengine/godot/thirdparty/glslang/glslang/MachineIndependent/Scan.cpp:296 (discriminator 2))
[5] bin/godot.linuxbsd.editor.x86_64() [0xb0049b] (/home/hugo/Documents/Git/godotengine/godot/thirdparty/glslang/glslang/MachineIndependent/ParseHelper.cpp:199)
[6] bin/godot.linuxbsd.editor.x86_64() [0x99098a] (/home/hugo/Documents/Git/godotengine/godot/thirdparty/glslang/glslang/MachineIndependent/ShaderLang.cpp:1212)
[7] bin/godot.linuxbsd.editor.x86_64() [0x3bde5a4] (/home/hugo/Documents/Git/godotengine/godot/./servers/rendering/rendering_device.cpp:215)
[8] bin/godot.linuxbsd.editor.x86_64() [0x3db4338] (/home/hugo/Documents/Git/godotengine/godot/./core/templates/cowdata.h:461)
[9] bin/godot.linuxbsd.editor.x86_64() [0x48fbea6] (/home/hugo/Documents/Git/godotengine/godot/./core/object/worker_thread_pool.cpp:101)
[10] bin/godot.linuxbsd.editor.x86_64() [0x48fc6d0] (/home/hugo/Documents/Git/godotengine/godot/./core/object/worker_thread_pool.cpp:205)
[11] bin/godot.linuxbsd.editor.x86_64() [0x42c9e3d] (/home/hugo/Documents/Git/godotengine/godot/./core/os/thread.cpp:64)
[12] bin/godot.linuxbsd.editor.x86_64() [0x51558a4] (thread.o:?)
[13] /lib64/libc.so.6(+0x976d7) [0x7facce61c6d7] (??:0)
[14] /lib64/libc.so.6(+0x11b60c) [0x7facce6a060c] (??:0)
-- END OF BACKTRACE --
================================================================
[1]    53286 IOT instruction (core dumped)  bin/godot.linuxbsd.editor.x86_64 --path ~/Documents/Godot/tps-demo -e
```

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 40)
</details>","2024-09-23T21:41:41Z",false,"COMMENTED"
"clayjohn","MEMBER","This is really excellent work. Great job!

I left a few comments to address before merging. But this is very close. I've tested extensively locally and feel that it is quite solid and the overall design is great (which is expected since we extensively discussed this with each other and Juan and Pedro before and during implementation).

","2024-09-27T22:57:22Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-10-01T12:45:00Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-10-01T13:07:31Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-10-01T13:34:14Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-10-01T13:46:57Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-10-01T16:50:21Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great now! This is the final culmination of a lot of work spread over many months. I am very glad to see if finished. 

This is ready to merge, and I suggest we merge it quickly to avoid conflicts.

I have personally tested on many devices including Win10, Linux, MacOS, and Android. I tested the TPS demo on all platforms, but I also tested the Nuku Warriors demo on Windows and multiple misc. demos on Linux. I am confident at this point that this is good enough for merging. ","2024-10-02T18:27:54Z",false,"APPROVED"
"kleonc","MEMBER","","2024-04-08T19:13:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-08T16:50:38Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM","2024-04-29T16:43:52Z",false,"APPROVED"
"reduz","MEMBER","","2024-04-29T21:22:40Z",false,"APPROVED"
"Naros","CONTRIBUTOR","","2024-04-29T22:02:02Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Oops! This was my mistake, sorry. :-/

This fix looks good to me!","2024-04-08T15:48:34Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-04-09T16:00:07Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-08T14:05:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-08T14:27:08Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-08T18:53:40Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","I had a look at the Input-doc changes. They are good to go.","2024-04-08T21:47:06Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-08T12:35:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-08T13:53:54Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-08T09:51:04Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-08T10:45:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-08T10:48:18Z",false,"COMMENTED"
"fire","MEMBER","1. follow the process for squashing commits
2. The text looks fine so I'll wait for that.","2024-04-08T16:20:53Z",false,"COMMENTED"
"mhilbrunner","MEMBER","I'm not super sure whether ""the console versions of Godot"" is clear enough or going to be confused with, well, console platforms, but I also don't have a better suggestion.

Besides that, this looks good to me.","2024-04-11T14:38:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-08T09:41:29Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-09T21:41:36Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-09T21:45:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-09T21:49:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-09T21:50:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-09T21:57:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-09T22:01:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-10T13:43:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-10T14:56:19Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-10T15:00:58Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-10T15:18:32Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Thanks for the addition!","2024-04-08T14:37:00Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-08T20:00:55Z",false,"COMMENTED"
"melquiadess","CONTRIBUTOR","","2024-04-08T20:16:06Z",false,"COMMENTED"
"melquiadess","CONTRIBUTOR","","2024-04-12T09:35:30Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-29T07:08:29Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Looks good!","2024-04-08T14:51:18Z",false,"APPROVED"
"bitwise-aiden","CONTRIBUTOR","","2024-04-08T14:33:22Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-04-10T06:05:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-10T14:29:36Z",false,"COMMENTED"
"bitwise-aiden","CONTRIBUTOR","","2024-04-10T14:30:28Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-04-10T14:35:10Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-04-10T14:39:25Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-12T08:59:37Z",false,"COMMENTED"
"fire","MEMBER","Did not review the code, but enhancements helping gdextension authors have a better quality of life is a worthy goal.","2024-04-18T18:46:37Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","This makes sense to me! The code looks good. Thanks!","2024-04-18T19:14:57Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-19T07:39:11Z",false,"COMMENTED"
"Naros","CONTRIBUTOR","","2024-04-19T16:18:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-19T16:19:30Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-19T16:23:19Z",false,"COMMENTED"
"Naros","CONTRIBUTOR","","2024-04-19T16:24:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-19T16:27:00Z",false,"COMMENTED"
"Naros","CONTRIBUTOR","","2024-04-19T16:31:58Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-19T16:33:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-19T16:47:35Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-08T10:00:38Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-30T09:46:24Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-07T18:53:48Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-08T09:19:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-08T09:41:48Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-08T09:52:27Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-08T20:51:49Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-08T20:52:49Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-04-09T04:35:05Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-09T04:47:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-09T09:42:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-09T09:42:37Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-09T20:45:30Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","I am concerned about the additional complexity needed to support this order of operations. In particular, it needs to work from any thread.

Also if there is nothing to clean up data from this HashMap, will it leak?

My personal preference would be to keep the old design and document that you have to pick one or the other function. Use is_process_running only if you do not care about the exit code.","2024-04-09T21:02:35Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-09T21:08:53Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-09T21:14:52Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-04-09T21:31:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-12T13:22:37Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-16T05:06:33Z",false,"COMMENTED"
"bruvzg","MEMBER","I guess the same mutex should be added to Windows code as well. The rest seems fine.","2024-04-16T10:07:21Z",false,"APPROVED"
"bruvzg","MEMBER","Missing mutex `lock`/`unlock` around `process_map->insert(pid, pi);` (2x) and `MutextLock` in the `kill` in the Windows code.","2024-04-16T10:20:39Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-16T11:01:31Z",false,"APPROVED"
"Calinou","MEMBER","","2024-04-08T23:16:47Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/739019e4e4a6e4763e37adfd9883a1c85d5f6249), it works as expected.

https://github.com/user-attachments/assets/26ba88f0-4d67-4601-b6ee-f4858b79f7fb

One concern I have though is that the `debug_preview_resolution` property is part of the Curve2D/Curve3D resource, while I think it should be part of the Path2D/Path3D node, like https://github.com/godotengine/godot/pull/82321 does for its debug color property. The resource does not have any visual representation of its own, so a subdivision count property feels out of place (and may be confused with the existing **Bake Resolution**).

","2024-08-09T00:04:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-10T08:39:32Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-05-04T15:14:49Z",false,"COMMENTED"
"akien-mga","MEMBER","Needs rebase, but looks good to me.","2024-07-31T21:54:15Z",false,"APPROVED"
"Calinou","MEMBER","","2024-07-31T22:52:48Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

I noticed that the URL that is being served to is never printed (regardless of whether `--no-browser` is used). We should change this to make the script easier to use.","2024-07-31T22:53:16Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-08T05:40:58Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-07T13:22:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-07T10:24:22Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-04-07T10:26:44Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","With these changes, `windows[p_window_id].window_focused` and `windows[p_window_id].window_has_focus` are always identical. Wouldn't it be better to merge both variables?","2024-04-07T16:45:04Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-04-20T07:52:29Z",false,"APPROVED"
"akien-mga","MEMBER","Seems consistent with other platforms.","2024-04-23T14:06:45Z",false,"APPROVED"
"AThousandShips","MEMBER","This isn't valid, you can't expose `scale` because there's already the `scale` property ","2024-04-06T19:50:50Z",false,"DISMISSED"
"AThousandShips","MEMBER","","2024-04-07T08:20:51Z",false,"COMMENTED"
"Muller-Castro","CONTRIBUTOR","","2024-04-07T21:20:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-08T10:00:22Z",false,"COMMENTED"
"fire","MEMBER","We resolved the name overlap so I think the scale_object gdscript expose is fine.","2024-04-09T16:36:13Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-10T07:56:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","Let's add the details for this one in https://github.com/godotengine/godot/pull/87440","2024-04-10T09:24:11Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Docs are consistent and just fine, if this review is of any additional support.","2024-06-08T20:54:36Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-06T21:13:54Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-08T12:00:10Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-06T17:52:40Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-04-06T17:59:08Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-06T17:47:51Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-04-06T17:58:15Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-04-06T17:59:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-06T18:01:44Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-06T18:03:35Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-04-09T16:21:35Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-04-09T16:22:26Z",false,"COMMENTED"
"Calinou","MEMBER","Looks good to me, please squash the commits together so we can merge this. See [PR workflow](https://docs.godotengine.org/en/latest/community/contributing/pr_workflow.html#mastering-the-pr-workflow-the-rebase) for instructions :slightly_smiling_face:","2024-04-09T22:54:27Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-04-10T13:45:28Z",false,"APPROVED"
"vnen","MEMBER","","2024-04-10T16:36:27Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-10T16:40:29Z",false,"COMMENTED"
"vnen","MEMBER","","2024-04-10T17:06:07Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I have many, many thoughts, and I apologize in advance if these may seem a bit unorganized. I am trying my best.

Note that the main advantage of having a built-in method is that you don't have to keep track of the bits yourself. However:
- By relying on the name instead of the index, the main problem is not solved, rather _shifted over_ to the name.
     - If you decide to rename a layer you will have to look up every single instance of it. In which case, you *still* would want to store the names in a constant as for best practice.
- Changing layers around is not something you should do frequently.
     - Even with the above methods existing, you would still need to account for **PackedScenes** in your project, which cannot automatically change. For this case, a refactoring tool for layers would be FAR more beneficial, instead.
- The implementation sounds nice, but in actual practice it becomes quite the mouthful, due of primarily existing in the **ProjectSettings** class.
GDScript is no stranger to verbosity, but...
    ```GDScript
    func _ready():
        collision_mask |= 
    ProjectSettings.find_layer(ProjectSettings.LAYER_PHYSICS_2D, ""player"")
    ```
    Compare this to using user-defined scripts to achieve the same thing, and it does become questionable.
    ```GDScript
    func _ready():
        collision_mask |= Global.find_physics_layer(""player"")
    ```
    Or:
    ```GDScript
    func _ready():
        collision_mask |= Global.COLLISION_LAYER_PLAYER
    ```
    - This makes me question if **ProjectSettings** really is the best place for these, whereas they _could_ be static methods of the respective classes of interest.
-----------------

I see a bit of ambiguity with `get_layer_count`. You may think it's the maximum number of available layers, but it can also be interpreted as ""how many layers have been defined by the user"".

Also **very** nitpicky: I see the current code in this PR to be a bit hard to keep track of. In the (_unlikely_) case where, say, a new set of layers is added, both of the new methods would have to be modified to account for them.","2024-06-27T09:08:29Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-27T09:22:40Z",false,"COMMENTED"
"fire","MEMBER","The changes look good. Did not test every single link.","2024-04-06T17:14:46Z",false,"APPROVED"
"fire","MEMBER","","2024-04-06T16:11:40Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-04-06T16:42:43Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-07T10:04:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-07T10:05:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-07T10:06:06Z",false,"COMMENTED"
"SaracenOne","MEMBER","Thanks for this! This mostly looks good, but could you examine one issue I raised in regards to the editor losing direct node references. Also could you squash this PR into a single commit? This is generally the preferred way to merge PRs in Godot.","2024-05-22T00:33:17Z",false,"CHANGES_REQUESTED"
"SaracenOne","MEMBER","LGTM üëç ","2024-05-23T02:49:24Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-23T08:27:41Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-24T11:25:57Z",false,"COMMENTED"
"KoBeWi","MEMBER","I'm not that familiar with InstancePlaceholder, but the code seems fine.

> Is there an official/best practice way of creating and deleting temporary files created during tests?

The official practice seems to be polluting a ""cache"" directory üôÉ
https://github.com/godotengine/godot/issues/92097","2024-05-24T14:00:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-08T09:43:25Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-06T08:13:24Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-06T10:16:03Z",false,"COMMENTED"
"sambler","CONTRIBUTOR","","2024-04-06T10:27:42Z",false,"COMMENTED"
"akien-mga","MEMBER","Didn't test, but assuming it works, the changes seem fine.

Could you squash the commits? See [PR workflow](https://docs.godotengine.org/en/latest/contributing/workflow/pr_workflow.html#the-interactive-rebase) for instructions.

While doing so, you would also get a change to update your Git email to make it match your GitHub account's (with `git commit --amend --reset-author` after changing your local or global Git email).","2024-04-06T10:43:44Z",false,"APPROVED"
"Faless","COLLABORATOR","","2024-04-06T16:34:30Z",false,"COMMENTED"
"sambler","CONTRIBUTOR","","2024-04-07T00:40:19Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good! Could you squash the commits?","2024-04-08T09:06:11Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-06T08:44:43Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-06T08:45:47Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-06T08:04:46Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","Looks good, just need to make sure it works in global space.

Also needs a simple demo/test project. Just a simple XR sample that has all 3 composition layers, with a bit of code that uses the UV here to send mouse events/touch events to the viewport so we can verify the obtained UVs are correct.

Coincidentally, I just did that on stream yesterday and remembering the v needed to be 1.0 - v, which may apply here.","2024-04-06T04:35:18Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","LGTM with all the changes :)","2024-04-07T01:22:44Z",false,"APPROVED"
"bruvzg","MEMBER","Missing `thirdparty/README.md` and `COPYRIGHT.txt` updates and documentation for the new methods. Since this is not intended to be merged as is, I'm not commenting on various code style issues. But it probably should be rebased at least once to run CI and make reviewing easier.","2024-04-06T19:44:30Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-04-13T14:40:09Z",false,"COMMENTED"
"tavurth","CONTRIBUTOR","","2024-05-07T17:08:04Z",false,"COMMENTED"
"tavurth","CONTRIBUTOR","","2024-05-07T17:11:16Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-05-19T16:11:16Z",false,"COMMENTED"
"darksylinc","CONTRIBUTOR","","2024-05-19T16:12:19Z",false,"COMMENTED"
"MewPurPur","CONTRIBUTOR","I spotted the difference!

@akien-mga it's a little transparent dot right under the close button, a little to the right.

I'm a bit confused how this change addresses it, honestly.","2024-04-06T09:58:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-06T10:01:49Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-08T12:31:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-06T08:58:12Z",false,"APPROVED"
"fire","MEMBER","","2024-04-06T00:57:46Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-05T16:40:00Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-17T11:32:08Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-07-17T11:39:39Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-05T16:45:36Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-05T16:13:31Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great!","2024-04-05T18:56:52Z",false,"APPROVED"
"akien-mga","MEMBER","Looks great!","2024-04-06T08:47:33Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-06T08:59:28Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-05T16:09:34Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-05T20:30:17Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-08T08:09:49Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-08T08:10:45Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-08T08:26:07Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-09T09:29:22Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-10T09:24:58Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-10T09:53:10Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-10T11:26:39Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-10T11:53:55Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-10T14:04:37Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-10T15:42:46Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-10T16:07:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","Can't vouch for the thread pool code but the rest looks clean to me","2024-04-10T17:08:13Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-10T17:21:27Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-10T17:52:39Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-12T08:58:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","This isn't a crash, it's a case of the engine failing to load the scene, that's not a crash, and we shouldn't allow editor only nodes to be instanced just so we can not fail to load an invalid scene IMO

Regardless this is *not* the way to solve this issue, the solution, if we should solve it at all, would be to allow loading invalid scenes somehow instead","2024-04-05T16:31:14Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","LGTM, similar to how groups were fixed before","2024-04-05T14:56:54Z",false,"APPROVED"
"ajreckof","MEMBER","","2024-04-05T14:48:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-05T15:05:49Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-05T13:48:24Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-05T13:48:36Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-05T15:54:37Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-05T15:54:47Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-05T15:55:04Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-05T15:59:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","I think the added code comments are redundant, but the rewording is correct.","2024-04-05T15:59:46Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-05T16:00:03Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-05T17:08:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-05T12:55:51Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-05T12:17:12Z",false,"COMMENTED"
"RedYetiDev","NONE","","2024-04-05T12:18:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-05T12:19:33Z",false,"COMMENTED"
"RedYetiDev","NONE","","2024-04-05T12:20:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-05T12:21:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-05T11:17:19Z",false,"COMMENTED"
"ajreckof","MEMBER","","2024-04-05T11:49:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-05T11:51:16Z",false,"COMMENTED"
"ajreckof","MEMBER","","2024-04-05T11:53:58Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-05T11:57:07Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-05T11:57:27Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","The problem with this approach is, that if video_mode (window size) is smaller than screen_size, then the Viewport is displayed centered on the y-axis and both, the top and the bottom parts of the viewport are not visible within the window.
![image](https://github.com/godotengine/godot/assets/6299227/0056e601-7cb4-4785-86d0-fa48f9c37c49)

As discussed in #89578, the expected behavior would be, that in this situation the top-row of the viewport would be visible at the location of the top-row of the window. In the horizontal x-axis this is already the case and the vertical y-axis should behave in the same way.

It is likely that after this change the input-event position will need to be adjusted too.","2024-04-12T18:10:27Z",false,"CHANGES_REQUESTED"
"clayjohn","MEMBER","Looks great! ","2024-04-09T05:31:53Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-04-06T16:45:42Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-06T19:05:04Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-05T09:45:15Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-04-05T10:07:26Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","FTR, the changelogs provided are actually just a quick recap, with most commits omitted. This got me scratching my head a bit on why the changes are juicier. Full changelog: https://github.com/Dav1dde/glad/compare/v2.0.3...v2.0.6

That said, the changes themselves don't ring any bell to me so, as long as the thing builds, we should be fine.

Extra points on the EGL part which didn't change at all ;)","2024-04-07T00:35:19Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","Oops meant to approve, see above.","2024-04-07T00:35:44Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-29T11:48:56Z",false,"COMMENTED"
"mhilbrunner","MEMBER","I'll take the blame then. It is harmless enough.","2024-04-05T14:11:26Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-04-05T05:14:58Z",false,"CHANGES_REQUESTED"
"dsnopek","CONTRIBUTOR","","2024-04-05T12:08:04Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-05T12:08:50Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-05T12:12:24Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-05T12:16:10Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-05T12:19:03Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-05T13:03:36Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-05T13:06:59Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great! I left a small comment to clean up a line we don't need. Otherwise this looks great","2024-04-05T02:10:02Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great! Thank you!","2024-04-05T04:49:32Z",false,"APPROVED"
"fire","MEMBER","Tested","2024-04-05T03:00:09Z",false,"APPROVED"
"fire","MEMBER","I think it is a good enhancement, but I didn't check the code details sufficiently.","2024-04-07T22:26:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-05T06:47:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-05T11:33:50Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-05T11:36:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-05T11:36:31Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-05T11:36:52Z",false,"COMMENTED"
"akien-mga","MEMBER","@teacher: I met your student today and confirm this was a top-notch first contribution to an open source project of the scale of Godot ;)

(Also do reach out, I'm interested in your program to get students contributing to open source ;))","2024-04-20T20:36:49Z",false,"APPROVED"
"fire","MEMBER","","2024-04-04T23:10:12Z",false,"APPROVED"
"dalexeev","MEMBER","Looks good to me at a glance.","2024-04-05T05:34:44Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-04T21:09:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-04T19:54:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-04T19:54:41Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","","2024-04-04T19:57:04Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-04-04T19:38:17Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-04T19:48:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-05T11:17:39Z",false,"COMMENTED"
"fire","MEMBER","","2024-04-05T02:58:41Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-06T16:18:01Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-04-06T16:19:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-06T16:21:20Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-04-06T16:45:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-08T10:21:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-08T10:21:31Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-04T16:00:58Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-04T16:01:02Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","","2024-04-04T16:07:40Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-04T14:35:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-04T13:30:04Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-04T12:25:01Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-04T16:12:38Z",false,"APPROVED"
"clayjohn","MEMBER","Makes sense!","2024-04-05T16:23:36Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Seems good to me!

The only potential roadblock is if the editor folks don't want to expose this method for some reason, but to me it seems like it'd be useful for both GDExtension and GDScript.","2024-04-04T18:30:59Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-05T10:10:10Z",false,"COMMENTED"
"Naros","CONTRIBUTOR","","2024-04-05T11:55:23Z",false,"COMMENTED"
"Naros","CONTRIBUTOR","","2024-04-05T11:59:25Z",false,"COMMENTED"
"Naros","CONTRIBUTOR","","2024-04-05T12:05:11Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-05T12:13:00Z",false,"COMMENTED"
"Naros","CONTRIBUTOR","","2024-04-16T23:31:51Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-17T07:56:57Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks great to me!","2024-04-17T07:57:21Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-04-04T01:50:45Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-05T10:53:04Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-05T10:57:26Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-05T11:22:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-05T11:22:36Z",false,"COMMENTED"
"Maran23","CONTRIBUTOR","","2024-04-05T16:39:34Z",false,"COMMENTED"
"Maran23","CONTRIBUTOR","","2024-04-05T16:40:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-05T16:48:25Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/b2f425fe680d1ed5d5b5fa9ae289ae93fd294607), it works as expected on https://github.com/godotengine/godot/issues/44077#issuecomment-2035477110. Code looks good to me.

Toggling x-ray visibility on default gizmos still works.","2024-04-11T20:48:40Z",false,"APPROVED"
"smix8","CONTRIBUTOR","Approve for the change in general. This still needs someone code review and a rebase / snyc with https://github.com/godotengine/godot/pull/93005 that edits similar parts.

Nit imo would be good to change the `unsigned int` to `uint32_t` as that is used for all other LocalVector loops so things stay consistent.

I had time to test this PR more thoroughly with current master and because it reduced the amount of allocation it is a small net performance gain without complicating the code base too much. Might want to move things later to a struct to make the HashMaps and LocalVectors also reusable to keep the memory available but that can be done with another PR. I didnt have time to really look into the link loop but that is definitely an area that also needs improvements at some point as it is a major bottleneck that does not scale well.
","2024-09-22T15:07:05Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-22T15:34:33Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-04-04T04:25:14Z",false,"COMMENTED"
"fire","MEMBER","","2024-04-04T11:14:30Z",false,"COMMENTED"
"fire","MEMBER","","2024-04-04T15:37:29Z",false,"COMMENTED"
"fire","MEMBER","","2024-04-07T22:38:26Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-15T10:23:53Z",false,"COMMENTED"
"bruvzg","MEMBER","We probably should try checking break iterator config (or add a second iterator for `UBRK_WORD`) instead of adding custom checks.","2024-04-15T10:55:58Z",false,"COMMENTED"
"bruvzg","MEMBER","Actually, this change does not make any sense and will break proper line breaking. And the issue can't be here, since line breaking do work, something should be wrong in the `TextEdit`.","2024-04-15T11:36:47Z",false,"CHANGES_REQUESTED"
"akien-mga","MEMBER","@teacher: I met your student today and confirm this was a top-notch first contribution to an open source project of the scale of Godot ;)

Won't be merged as is as assessed by the senior maintainer in this area (not a junior task in the end), but this was a good attempt, with test suite included.

(Also do reach out, I'm interested in your program to get students contributing to open source ;))","2024-04-20T20:38:23Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected. The normal map texture (displayed on the right) seems more yellow but I don't know how close this is to ground truth, as we currently lack a way to have Lossless-compressed textures be imported as RG8 (**Normal Map** import option isn't available).

The final result (albedo with normal map) looks very close either way.

**Testing project:**

- [basisurgtctest_1.zip](https://github.com/user-attachments/files/15873748/basisurgtctest_1.zip)

APKs for quick testing on Android:

- [BasisuRGTCTest-master.zip](https://github.com/user-attachments/files/15873741/BasisuRGTCTest-master.zip)
- [BasisuRGTCTest-pr-90170.zip](https://github.com/user-attachments/files/15873742/BasisuRGTCTest-pr-90170.zip)

### Desktop

Before | After *(this PR)*
-|-
![Screenshot_20240617_174058 png webp](https://github.com/godotengine/godot/assets/180032/e5ce9fed-1b75-4b3d-a7df-b2f4ecca9c29) | ![Screenshot_20240617_174342 png webp](https://github.com/godotengine/godot/assets/180032/8e2d7df3-f366-4fd0-b827-31b8f3598470)

### Mobile

Tested on Samsung Galaxy Z Fold4 (Adreno 730).

Before | After *(this PR)*
-|-
![Screenshot_20240617_174725_BasisuRGTCTest png webp](https://github.com/godotengine/godot/assets/180032/3ef950bd-b73d-41eb-8b24-68a5add51030) | ![Screenshot_20240617_174738_BasisuRGTCTest png webp](https://github.com/godotengine/godot/assets/180032/f5c52960-8b79-4b71-899f-ee66f3581f7b)
","2024-06-17T15:51:54Z",false,"APPROVED"
"Calinou","MEMBER","","2024-06-17T15:52:28Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-06-17T15:52:43Z",false,"COMMENTED"
"BlueCube3310","CONTRIBUTOR","","2024-06-17T17:29:59Z",false,"COMMENTED"
"fire","MEMBER","","2024-06-17T20:26:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-10T10:18:11Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-05T08:44:30Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-03T10:17:23Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-08T07:20:54Z",false,"APPROVED"
"Calinou","MEMBER","","2024-04-04T20:59:40Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it mostly works as expected. This is a great start!

Some issues I noticed:

- Descriptions don't update after you save the shader more than once per editor session, even if you close and reopen the inspector on the ShaderMaterial. You need to reload the project entirely.

___

- Syntax highlighting for documentation comments should use a different color to distinguish it from regular comments. See how GDScript does it:

![image](https://github.com/godotengine/godot/assets/180032/2906c25f-0c64-47ef-a6b1-556c9187b4cb)

This uses the `text_editor/theme/highlighting/doc_comment_color` color defined in the Editor Settings.

___

- Leading asterisks (`*`) should be stripped from the description on each line, otherwise the following shader code:

```glsl
/**
 * Example description 1.
 * Example continuation line 1.
 */
uniform int foo = 1;
```

will result in:

![image](https://github.com/godotengine/godot/assets/180032/9fa80edc-c81c-4e95-8e88-5d72d6d36689)

(The asterisks should not appear in the description here.)

___

Note that for those wanting a more compact syntax, the following generates a valid tooltip:

```glsl
/** Example description 4.
  * Example continuation line 4. */
uniform int baz2 = 4;
```

We should make sure to define a guideline for the [Godot shaders style guide](https://docs.godotengine.org/en/stable/tutorials/shaders/shaders_style_guide.html) in the future.
**Edit:** Pull request opened: https://github.com/godotengine/godot-docs/pull/9300","2024-04-22T22:18:29Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected. All issues I mentioned above are now resolved. Great work :slightly_smiling_face: 

Code looks good to me.","2024-04-24T23:17:36Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-25T10:30:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-26T08:28:24Z",false,"COMMENTED"
"clayjohn","MEMBER","Seems fine to me. I am not super familiar with editor code, but this is short and self-contained.

I have no preference for the style of the comment block. The short discussion in the proposal seemed to favour the one suggested by Calinou. So I think that is fine as well. ","2024-04-26T22:03:43Z",false,"APPROVED"
"Armynator","NONE","","2024-04-29T12:39:17Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-29T12:57:54Z",false,"COMMENTED"
"geekley","NONE","","2024-08-13T20:52:09Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-08-16T12:07:48Z",false,"COMMENTED"
"rburing","MEMBER","","2024-04-02T22:28:15Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-04-02T23:22:02Z",false,"COMMENTED"
"rburing","MEMBER","","2024-04-06T11:26:07Z",false,"COMMENTED"
"rburing","MEMBER","","2024-04-06T14:20:46Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","Looks good for the Clipper2 replacements.

Not really a 2D and sprite editor user so can't say if there are some subtle differences in the results that could cause some compatibility problems for older projects.","2024-04-07T00:26:07Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-08T13:00:11Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-20T18:16:19Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-03T07:57:21Z",false,"COMMENTED"
"groud","MEMBER","","2024-04-04T10:00:30Z",false,"COMMENTED"
"SirLich","CONTRIBUTOR","","2024-04-05T16:17:15Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-05T16:23:59Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-04-02T21:09:52Z",false,"COMMENTED"
"WellHiIGuess","NONE","","2024-04-02T21:30:29Z",false,"COMMENTED"
"Calinou","MEMBER","This makes sense as per the Kotlin style guide: https://kotlinlang.org/docs/coding-conventions.html#semicolons

PS: Please double-check you've removed *all* semicolons from the Kotlin codebase (other than third-party files), so that we don't need a follow-up PR.

In the long run, we may want to set up a Kotlin linter/formatter on CI.","2024-04-02T21:59:38Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Looks good!","2024-04-02T23:15:48Z",false,"APPROVED"
"melquiadess","CONTRIBUTOR","","2024-04-02T21:07:02Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-02T23:34:25Z",false,"CHANGES_REQUESTED"
"melquiadess","CONTRIBUTOR","","2024-04-02T23:51:50Z",false,"COMMENTED"
"melquiadess","CONTRIBUTOR","","2024-04-02T23:54:49Z",false,"COMMENTED"
"melquiadess","CONTRIBUTOR","","2024-04-03T00:02:20Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-03T01:02:38Z",false,"COMMENTED"
"melquiadess","CONTRIBUTOR","","2024-04-03T21:23:53Z",false,"COMMENTED"
"melquiadess","CONTRIBUTOR","","2024-04-03T22:01:26Z",false,"COMMENTED"
"melquiadess","CONTRIBUTOR","","2024-04-03T22:02:38Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","Looks great!

> But, I am not sure whether CommandLineFileParser should be public or not...

Let's keep the class `internal` for now. This provides us with the flexibility to update the api if needed, whereas if we make it public, we have to keep the api consistent to maintain backward compatibility.","2024-04-04T06:25:34Z",false,"APPROVED"
"ryevdokimov","CONTRIBUTOR","After adding the root node, the tab for the scene will still show as [empty]. ","2024-04-02T15:38:40Z",false,"CHANGES_REQUESTED"
"ryevdokimov","CONTRIBUTOR","The tab should probably be marked as unsaved similar to as if you were creating a new scene through the GUI. ","2024-04-03T13:54:45Z",false,"CHANGES_REQUESTED"
"ryevdokimov","CONTRIBUTOR","Works great now. 

Along with https://github.com/godotengine/godot/pull/90057 this will fully implement: 

https://github.com/godotengine/godot-proposals/issues/3907, giving users the option to create a new inherited scene either over an empty scene or straight into a new tab. ","2024-04-03T18:14:21Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-21T14:43:55Z",false,"APPROVED"
"ryevdokimov","CONTRIBUTOR","
https://github.com/godotengine/godot/assets/105675984/51d42615-0aff-42bb-8092-212d417316ab

","2024-04-02T15:47:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-21T11:50:49Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-02T14:02:07Z",false,"COMMENTED"
"krazzei","NONE","","2024-04-29T18:49:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-29T18:50:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-29T18:55:15Z",false,"COMMENTED"
"krazzei","NONE","","2024-04-29T19:11:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-29T19:21:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-29T19:30:07Z",false,"COMMENTED"
"vnen","MEMBER","LGTM. Should be safe to merge too.","2024-07-25T13:52:11Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-03T09:20:17Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","I don't really see the benefit of this at the moment, but it's not exactly ""harmful"" either.","2024-06-28T15:02:54Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Fine by me","2024-06-29T18:37:30Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-08-29T17:30:39Z",false,"APPROVED"
"aaronfranke","MEMBER","I was initially against this but now I am convinced it is a good idea. Setting this to false never will be the ""recommended"" choice, but that is fine considering the option is only meant for edge cases / hacks.","2024-04-03T07:37:15Z",false,"APPROVED"
"adamscott","MEMBER","Tested out the feature, it works great.","2024-04-18T14:32:28Z",false,"APPROVED"
"paulloz","MEMBER","I have a broader redesign of this panel in a branch on my fork, I'm waiting to have more usability enhancements before opening a PR with it. So this can be merged in the meantime. 

Thanks!

<details><summary>New panel</summary>
<p>

![image](https://github.com/godotengine/godot/assets/437025/c21d57c5-c6ca-433d-a77a-8f969bb6f397)

</p>
</details> ","2024-04-04T17:05:14Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it mostly works as expected.

Some object files remain after using `scons --clean target=<target>` (with `<target>` being `editor`, `template_debug` or `template_release`):

```
$ git clean -dfXi | grep ""\.o""
  drivers/vulkan/vulkan_context.linuxbsd.editor.x86_64.o
  modules/openxr/extensions/openxr_fb_passthrough_extension_wrapper.linuxbsd.editor.x86_64.o
  modules/openxr/extensions/openxr_opengl_extension.linuxbsd.editor.x86_64.o
  modules/openxr/extensions/openxr_vulkan_extension.linuxbsd.editor.x86_64.o
  platform/linuxbsd/x11/vulkan_context_x11.linuxbsd.editor.x86_64.o
  servers/native_menu.linuxbsd.editor.x86_64.o
  servers/native_menu.linuxbsd.template_release.x86_64.o
  thirdparty/basis_universal/encoder/jpgd.linuxbsd.editor.x86_64.o
  thirdparty/etcpak/ProcessRgtc.linuxbsd.editor.x86_64.o
  thirdparty/msdfgen/core/SignedDistance.linuxbsd.editor.x86_64.o
  thirdparty/msdfgen/core/Vector2.linuxbsd.editor.x86_64.o
```

Complete list of remaining files:

```
$ git clean -dfXi
  .sconf_temp/
  .scons_env.json
  .scons_node_count
  .sconsign5.dblite
  __pycache__/
  bin/
  config.log
  core/__pycache__/
  core/authors.gen.h
  core/crypto/scu/
  core/debugger/scu/
  core/disabled_classes.gen.h
  core/donors.gen.h
  core/extension/__pycache__/
  core/extension/ext_wrappers.gen.inc
  core/extension/gdextension_interface_dump.gen.h
  core/extension/scu/
  core/input/__pycache__/
  core/input/default_controller_mappings.gen.cpp
  core/input/scu/
  core/io/certs_compressed.gen.h
  core/io/scu/
  core/license.gen.h
  core/math/scu/
  core/object/__pycache__/
  core/object/gdvirtual.gen.inc
  core/object/scu/
  core/os/scu/
  core/script_encryption_key.gen.cpp
  core/scu/
  core/string/scu/
  core/variant/scu/
  core/version_generated.gen.h
  core/version_hash.gen.cpp
  drivers/gles3/shaders/canvas.glsl.gen.h
  drivers/gles3/shaders/canvas_occlusion.glsl.gen.h
  drivers/gles3/shaders/canvas_sdf.glsl.gen.h
  drivers/gles3/shaders/copy.glsl.gen.h
  drivers/gles3/shaders/cubemap_filter.glsl.gen.h
  drivers/gles3/shaders/effects/copy.glsl.gen.h
  drivers/gles3/shaders/effects/glow.glsl.gen.h
  drivers/gles3/shaders/effects/post.glsl.gen.h
  drivers/gles3/shaders/particles.glsl.gen.h
  drivers/gles3/shaders/particles_copy.glsl.gen.h
  drivers/gles3/shaders/scene.glsl.gen.h
  drivers/gles3/shaders/skeleton.glsl.gen.h
  drivers/gles3/shaders/sky.glsl.gen.h
  drivers/png/scu/
  drivers/unix/scu/
  drivers/vulkan/vulkan_context.linuxbsd.editor.x86_64.o
  editor/__pycache__/
  editor/builtin_fonts.gen.h
  editor/debugger/debug_adapter/scu/
  editor/debugger/scu/
  editor/doc_data_class_path.gen.h
  editor/doc_data_compressed.gen.h
  editor/doc_translations.gen.h
  editor/editor_icons.gen.h
  editor/editor_translations.gen.h
  editor/export/scu/
  editor/extractable_translations.gen.h
  editor/gui/scu/
  editor/icons/__pycache__/
  editor/import/3d/scu/
  editor/import/scu/
  editor/plugins/gizmos/scu/
  editor/plugins/scu/
  editor/plugins/tiles/scu/
  editor/property_translations.gen.h
  editor/register_exporters.gen.cpp
  editor/scu/
  editor/themes/__pycache__/
  editor/themes/builtin_fonts.gen.h
  editor/themes/editor_icons.gen.h
  main/__pycache__/
  main/app_icon.gen.h
  main/splash.gen.h
  modules/__pycache__/
  modules/astcenc/__pycache__/
  modules/basis_universal/__pycache__/
  modules/bmp/__pycache__/
  modules/camera/__pycache__/
  modules/csg/__pycache__/
  modules/csg/scu/
  modules/cvtt/__pycache__/
  modules/dds/__pycache__/
  modules/enet/__pycache__/
  modules/etcpak/__pycache__/
  modules/fbx/__pycache__/
  modules/freetype/__pycache__/
  modules/gdscript/__pycache__/
  modules/gdscript/editor/script_templates/templates.gen.h
  modules/gdscript/editor/scu/
  modules/gdscript/language_server/scu/
  modules/gdscript/scu/
  modules/glslang/__pycache__/
  modules/gltf/__pycache__/
  modules/gltf/editor/scu/
  modules/gltf/extensions/physics/scu/
  modules/gltf/extensions/scu/
  modules/gltf/scu/
  modules/gltf/structures/scu/
  modules/gridmap/__pycache__/
  modules/gridmap/scu/
  modules/hdr/__pycache__/
  modules/interactive_music/__pycache__/
  modules/jpg/__pycache__/
  modules/jsonrpc/__pycache__/
  modules/ktx/__pycache__/
  modules/lightmapper_rd/__pycache__/
  modules/lightmapper_rd/lm_blendseams.glsl.gen.h
  modules/lightmapper_rd/lm_compute.glsl.gen.h
  modules/lightmapper_rd/lm_raster.glsl.gen.h
  modules/mbedtls/__pycache__/
  modules/meshoptimizer/__pycache__/
  modules/minimp3/__pycache__/
  modules/mobile_vr/__pycache__/
  modules/modules_enabled.gen.h
  modules/mono/__pycache__/
  modules/msdfgen/__pycache__/
  modules/multiplayer/__pycache__/
  modules/multiplayer/editor/scu/
  modules/multiplayer/scu/
  modules/navigation/__pycache__/
  modules/navigation/scu/
  modules/noise/__pycache__/
  modules/ogg/__pycache__/
  modules/openxr/__pycache__/
  modules/openxr/action_map/scu/
  modules/openxr/editor/scu/
  modules/openxr/extensions/openxr_fb_passthrough_extension_wrapper.linuxbsd.editor.x86_64.o
  modules/openxr/extensions/openxr_opengl_extension.linuxbsd.editor.x86_64.o
  modules/openxr/extensions/openxr_vulkan_extension.linuxbsd.editor.x86_64.o
  modules/openxr/scu/
  modules/raycast/__pycache__/
  modules/regex/__pycache__/
  modules/register_module_types.gen.cpp
  modules/squish/__pycache__/
  modules/stgS2kzX
  modules/svg/__pycache__/
  modules/text_server_adv/__pycache__/
  modules/text_server_fb/__pycache__/
  modules/tga/__pycache__/
  modules/theora/__pycache__/
  modules/tinyexr/__pycache__/
  modules/upnp/__pycache__/
  modules/vhacd/__pycache__/
  modules/vorbis/__pycache__/
  modules/webp/__pycache__/
  modules/webrtc/__pycache__/
  modules/webrtc/scu/
  modules/websocket/__pycache__/
  modules/websocket/scu/
  modules/webxr/__pycache__/
  modules/xatlas_unwrap/__pycache__/
  modules/zip/__pycache__/
  platform/android/__pycache__/
  platform/android/export/logo_svg.gen.h
  platform/android/export/run_icon_svg.gen.h
  platform/android/export/scu/
  platform/ios/__pycache__/
  platform/ios/export/logo_svg.gen.h
  platform/ios/export/run_icon_svg.gen.h
  platform/ios/export/scu/
  platform/linuxbsd/__pycache__/
  platform/linuxbsd/export/logo_svg.gen.h
  platform/linuxbsd/export/run_icon_svg.gen.h
  platform/linuxbsd/export/scu/
  platform/linuxbsd/x11/vulkan_context_x11.linuxbsd.editor.x86_64.o
  platform/macos/__pycache__/
  platform/macos/export/logo_svg.gen.h
  platform/macos/export/run_icon_svg.gen.h
  platform/macos/export/scu/
  platform/register_platform_apis.gen.cpp
  platform/web/__pycache__/
  platform/web/export/logo_svg.gen.h
  platform/web/export/run_icon_svg.gen.h
  platform/web/export/scu/
  platform/windows/__pycache__/
  platform/windows/export/logo_svg.gen.h
  platform/windows/export/run_icon_svg.gen.h
  platform/windows/export/scu/
  scene/2d/physics/joints/scu/
  scene/2d/physics/scu/
  scene/2d/scu/
  scene/3d/physics/joints/scu/
  scene/3d/physics/scu/
  scene/3d/scu/
  scene/animation/scu/
  scene/gui/scu/
  scene/main/scu/
  scene/resources/2d/scu/
  scene/resources/3d/scu/
  scene/resources/scu/
  scene/theme/__pycache__/
  scene/theme/default_font.gen.h
  scene/theme/default_theme_icons.gen.h
  scene/theme/icons/__pycache__/
  servers/audio/effects/scu/
  servers/audio/scu/
  servers/native_menu.linuxbsd.editor.x86_64.o
  servers/native_menu.linuxbsd.template_release.x86_64.o
  servers/physics_2d/scu/
  servers/physics_3d/joints/scu/
  servers/physics_3d/scu/
  servers/rendering/renderer_rd/effects/scu/
  servers/rendering/renderer_rd/environment/scu/
  servers/rendering/renderer_rd/scu/
  servers/rendering/renderer_rd/shaders/blit.glsl.gen.h
  servers/rendering/renderer_rd/shaders/canvas.glsl.gen.h
  servers/rendering/renderer_rd/shaders/canvas_occlusion.glsl.gen.h
  servers/rendering/renderer_rd/shaders/canvas_sdf.glsl.gen.h
  servers/rendering/renderer_rd/shaders/cluster_debug.glsl.gen.h
  servers/rendering/renderer_rd/shaders/cluster_render.glsl.gen.h
  servers/rendering/renderer_rd/shaders/cluster_store.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/blur_raster.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/bokeh_dof.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/bokeh_dof_raster.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/copy.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/copy_to_fb.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/cube_to_dp.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/cubemap_downsampler.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/cubemap_downsampler_raster.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/cubemap_filter.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/cubemap_filter_raster.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/cubemap_roughness.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/cubemap_roughness_raster.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/fsr2/fsr2_accumulate_pass.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/fsr2/fsr2_autogen_reactive_pass.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/fsr2/fsr2_compute_luminance_pyramid_pass.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/fsr2/fsr2_depth_clip_pass.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/fsr2/fsr2_lock_pass.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/fsr2/fsr2_rcas_pass.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/fsr2/fsr2_reconstruct_previous_depth_pass.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/fsr2/fsr2_tcr_autogen_pass.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/fsr_upscale.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/luminance_reduce.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/luminance_reduce_raster.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/motion_vectors.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/resolve.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/roughness_limiter.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/screen_space_reflection.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/screen_space_reflection_filter.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/screen_space_reflection_scale.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/shadow_frustum.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/sort.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/specular_merge.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/ss_effects_downsample.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/ssao.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/ssao_blur.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/ssao_importance_map.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/ssao_interleave.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/ssil.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/ssil_blur.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/ssil_importance_map.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/ssil_interleave.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/subsurface_scattering.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/taa_resolve.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/tonemap.glsl.gen.h
  servers/rendering/renderer_rd/shaders/effects/vrs.glsl.gen.h
  servers/rendering/renderer_rd/shaders/environment/gi.glsl.gen.h
  servers/rendering/renderer_rd/shaders/environment/sdfgi_debug.glsl.gen.h
  servers/rendering/renderer_rd/shaders/environment/sdfgi_debug_probes.glsl.gen.h
  servers/rendering/renderer_rd/shaders/environment/sdfgi_direct_light.glsl.gen.h
  servers/rendering/renderer_rd/shaders/environment/sdfgi_integrate.glsl.gen.h
  servers/rendering/renderer_rd/shaders/environment/sdfgi_preprocess.glsl.gen.h
  servers/rendering/renderer_rd/shaders/environment/sky.glsl.gen.h
  servers/rendering/renderer_rd/shaders/environment/volumetric_fog.glsl.gen.h
  servers/rendering/renderer_rd/shaders/environment/volumetric_fog_process.glsl.gen.h
  servers/rendering/renderer_rd/shaders/environment/voxel_gi.glsl.gen.h
  servers/rendering/renderer_rd/shaders/environment/voxel_gi_debug.glsl.gen.h
  servers/rendering/renderer_rd/shaders/environment/voxel_gi_sdf.glsl.gen.h
  servers/rendering/renderer_rd/shaders/forward_clustered/best_fit_normal.glsl.gen.h
  servers/rendering/renderer_rd/shaders/forward_clustered/scene_forward_clustered.glsl.gen.h
  servers/rendering/renderer_rd/shaders/forward_mobile/scene_forward_mobile.glsl.gen.h
  servers/rendering/renderer_rd/shaders/giprobe_write.glsl.gen.h
  servers/rendering/renderer_rd/shaders/particles.glsl.gen.h
  servers/rendering/renderer_rd/shaders/particles_copy.glsl.gen.h
  servers/rendering/renderer_rd/shaders/skeleton.glsl.gen.h
  servers/rendering/renderer_rd/storage_rd/scu/
  servers/rendering/scu/
  servers/rendering/storage/scu/
  servers/scu/
  thirdparty/basis_universal/encoder/jpgd.linuxbsd.editor.x86_64.o
  thirdparty/etcpak/ProcessRgtc.linuxbsd.editor.x86_64.o
  thirdparty/glslang/OGLCompilersDLL/
  thirdparty/icu4c/icudata.gen.h
  thirdparty/msdfgen/core/SignedDistance.linuxbsd.editor.x86_64.o
  thirdparty/msdfgen/core/Vector2.linuxbsd.editor.x86_64.o
```","2024-04-02T01:10:32Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-02T08:26:12Z",false,"COMMENTED"
"rburing","MEMBER","Indeed, let's apply the principle of least surprise.","2024-04-02T12:37:00Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","","2024-04-01T18:18:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-01T17:56:23Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, I can't get transparent shadows to show up for a static object regardless of its transparency mode. Shadows are always fully opaque. This is with Alpha, but the same happens with Alpha Scissor:

![Screenshot_20240404_153953 webp](https://github.com/godotengine/godot/assets/180032/a3583bfa-671c-4e23-b445-c9a14bb3b363)

The DirectionalLight3D in the scene has the Static bake mode. I'm using the Compatibility rendering method in the test project (it bakes via a local RenderingDevice that uses Vulkan), but this also happens with Forward+. I've also tried disabling **Use Texture for Bounces** in LightmapGI (then baking lightmaps again) to no avail.

**Testing project:** [test_transparent_shadows.zip](https://github.com/godotengine/godot/files/14872112/test_transparent_shadows.zip)","2024-04-04T13:42:40Z",false,"COMMENTED"
"clayjohn","MEMBER","I don't know why, but when baking with this PR in the Forward+ backend the resulting lightmap is completely black. When baking the MRP, with 4.3 dev 5 I get the same result that [Calinou did](https://github.com/godotengine/godot/issues/77590#issuecomment-1939755066), but with this PR I get a totally black lightmap. 

Have you done something to the MRP to make it work with this PR?","2024-04-17T22:55:46Z",false,"COMMENTED"
"guerro323","NONE","","2024-04-18T00:04:55Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-04-22T21:40:35Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Documentation is fine. It's gonna be really cool to implement this in due time.","2024-07-05T20:05:22Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-01T16:24:35Z",false,"COMMENTED"
"groud","MEMBER","","2024-04-02T07:53:57Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-04-02T23:58:20Z",false,"COMMENTED"
"ryevdokimov","CONTRIBUTOR","LGTM, ship it. ","2024-04-01T15:42:36Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-03T08:15:24Z",false,"COMMENTED"
"fire","MEMBER","I don't recall any reason why this would fail, but it's also a long time ago.","2024-04-02T15:09:24Z",false,"APPROVED"
"bruvzg","MEMBER","This will make the window movable by any unprocessed mouse event, which is not a desired behavior.

What's preventing window move in maximized mode is this condition:

https://github.com/godotengine/godot/blob/master/platform/macos/display_server_macos.mm#L1998-L2000

It was added specifically to prevent moving maximized windows (probably to match behavior on the other platforms, I do not remember why it was done exactly).","2024-04-01T13:59:41Z",false,"CHANGES_REQUESTED"
"bruvzg","MEMBER","","2024-04-02T06:04:29Z",false,"APPROVED"
"fire","MEMBER","I did not deeply review the implications of this but I like the idea.","2024-04-01T17:36:35Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected. This matches Blender 4.1.1 behavior.

PS: I noticed we're missing the <kbd>Shift</kbd> modifier from Blender (when not holding <kbd>Ctrl</kbd>), which divides the mouse movement speed by 10 during transformation.","2024-06-16T21:19:35Z",false,"APPROVED"
"fire","MEMBER","","2024-06-17T02:02:24Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-01T13:12:57Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-04-02T04:24:04Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-04-06T16:51:21Z",false,"APPROVED"
"clayjohn","MEMBER","Looks good to me","2024-04-01T23:11:15Z",false,"APPROVED"
"RandomShaper","MEMBER","Asking a few changes. Besides that, the changes make a lot of sense.","2024-04-03T08:17:25Z",false,"CHANGES_REQUESTED"
"ajreckof","MEMBER","","2024-04-03T08:23:02Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-03T08:29:27Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-03T08:47:18Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-24T09:13:12Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it mostly works as expected (Linux X11).

One issue is that after you click back in the editor, using freelook or panning won't do anything when you move the mouse until you left click a second time.

Note that the 2D editor doesn't have this issue, so no fix is required there.

### Before

https://github.com/godotengine/godot/assets/180032/f362f300-632d-443b-9d2e-597af514b89b

### After

https://github.com/godotengine/godot/assets/180032/13a683b3-8bc9-422e-a318-dc5c40dee684

","2024-04-29T23:49:40Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-01T08:22:55Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-01T13:12:01Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-04-01T17:34:44Z",false,"COMMENTED"
"RandomShaper","MEMBER","1. Now we're optimizing, wouldn't (`un`)`likely()` help in some checks? I'm specifically talking about the various `exists`/`!exists`.
2. Regarding `fastmod()`:
   1. I see not all uses have been replaced. Is that intended?
   2. Is every implementation of `fastmod()` problematic? Checking its implementation, I wonder if the replacement is better for every compiler/arch. If the replacement algo is superior in some/all cases, I'd rather patch the function and keep the calls.","2024-04-03T08:56:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-03T08:58:54Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-04-03T20:42:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-04T09:55:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-04T09:55:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-04T09:55:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-04T09:55:40Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-04T09:55:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-04T09:56:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-04T09:56:21Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-04-05T11:22:10Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-04-05T12:32:28Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-04-05T12:36:48Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-04-05T14:10:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-08T10:23:20Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-04-08T11:35:55Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-04-11T15:50:34Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-04-11T15:50:45Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-04-11T20:02:44Z",false,"COMMENTED"
"dhoverml","NONE","","2024-06-05T13:00:23Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-06-05T14:11:29Z",false,"COMMENTED"
"dhoverml","NONE","","2024-06-05T14:19:21Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-06-05T14:27:44Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/292e50e17e3f6e2509d3178a00204f964a907460), it works as expected.

## Benchmark

Using an optimized editor build (`optimize=speed lto=full`) for all tests. Project is kept at its default window size and the camera isn't moved after startup. The editor is **not** running in the background.

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 39)
</details>

Using [Animation_test.zip](https://github.com/godotengine/godot/files/15501000/Animation_test.zip):

`master` | This PR
-|-
90 FPS (11.11 mspf) | 95 FPS (10.52 mspf)

When coupled with https://github.com/godotengine/godot/pull/92554 and https://github.com/godotengine/godot/pull/92838, performance remains the same as before since HashMap isn't so much of a bottleneck anymore in the animation playback code.","2024-06-12T01:10:35Z",false,"APPROVED"
"AThousandShips","MEMBER","Can't really speak to the functionality of this, but would be good to get a rebase and see what CI says and see if it introduces any weirdness with hashing elsewhere as this hasn't run in a few months","2024-09-13T13:04:32Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-09-13T13:55:25Z",false,"COMMENTED"
"Calinou","MEMBER","Looks good to me.

We could consider drawing special pixel art versions of the logo for smaller scales (to be swapped in depending on editor scale), but this should be left for a future PR.","2024-04-01T21:48:20Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-03T10:19:00Z",false,"APPROVED"
"coppolaemilio","MEMBER","","2024-04-04T11:24:36Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-04T12:21:46Z",false,"APPROVED"
"Calinou","MEMBER","","2024-04-01T21:50:06Z",false,"APPROVED"
"Jordyfel","CONTRIBUTOR","","2024-04-01T00:24:01Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-04-06T16:52:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-06T16:52:35Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-04-07T08:20:52Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-31T11:59:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-31T12:03:55Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-31T14:22:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-31T14:24:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-31T18:47:47Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-31T19:03:46Z",false,"COMMENTED"
"akien-mga","MEMBER","If this prevents truncating files, I'd say it's a good improvement already, even if the UX or getting an error message like this isn't great.","2024-06-21T11:50:31Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-04-16T12:10:47Z",false,"APPROVED"
"fire","MEMBER","","2024-03-31T13:35:35Z",false,"APPROVED"
"fire","MEMBER","","2024-03-31T13:35:12Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-05-14T08:25:36Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-05-14T10:04:19Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-05-14T12:43:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","This looks good to me, the return value changes won't affect compatibility for the time being as meta information on this isn't encoded for these types, so the API doesn't change, we might want to update the equivalent methods in Godot-cpp though (the C# classes return the appropriate types)","2024-03-31T11:20:05Z",false,"APPROVED"
"reduz","MEMBER","You are awesome!","2024-03-31T11:48:38Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-04T12:36:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","Looks fine, aside from the duplicated code I commented.","2024-04-04T12:43:51Z",false,"APPROVED"
"AlexOtsuka","CONTRIBUTOR","","2024-04-04T16:30:36Z",false,"COMMENTED"
"raulsntos","MEMBER","This looks good to me, thanks.

Not sure what to do about the MIT license header. cc @akien-mga ","2024-04-05T01:18:35Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-05T07:18:51Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-07T22:28:59Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-31T16:17:13Z",false,"COMMENTED"
"passivestar","CONTRIBUTOR","Tested, it works. I managed to make a button that creates an inherited scene from gltf at the same path like so:

```gdscript
var path = EditorInterface.get_selected_paths()[0]
var new_path = path.get_basename() + "".tscn""
var main_scene_path = EditorInterface.get_edited_scene_root().scene_file_path
EditorInterface.open_scene_from_path(path, true)
EditorInterface.save_scene_as.call_deferred(new_path, false)
EditorInterface.open_scene_from_path.call_deferred(main_scene_path)
```","2024-06-28T23:11:35Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-09-05T15:54:10Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","Yes for the exposed function.

Without this the RenderingServer skeleton API can not be used in scripting with the default skin because there is no access to it.","2024-03-31T00:14:26Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-31T09:05:42Z",false,"APPROVED"
"Calinou","MEMBER","This makes sense to do for efficiency reasons.","2024-04-01T21:51:57Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-04-02T22:13:37Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","Reviewed on a call with fire. I think this is good. It can use more testing, but that's what beta is for.

What's important is this improves Mixamo and ReadyPlayerMe compatibility by adding a few heuristics, so I think it's fairly safe.","2024-04-27T04:39:52Z",false,"APPROVED"
"fire","MEMBER","","2024-04-27T13:47:56Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-27T13:53:30Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-30T19:33:12Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-03-30T19:40:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-30T19:47:00Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-08-31T11:16:36Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-09T15:18:36Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-09-09T17:12:14Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-09-09T17:12:54Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-09-09T17:18:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T18:48:19Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T18:56:13Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T18:58:20Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T19:35:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T19:38:15Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T20:54:11Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T20:59:13Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T21:09:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T21:09:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T21:40:33Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T21:46:31Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T21:55:55Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T22:04:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T22:05:34Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-09-21T22:26:15Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-09-21T22:31:13Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T22:37:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T22:39:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T22:42:16Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T22:45:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-21T22:46:15Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-22T17:00:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-22T17:03:52Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-05T15:54:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-05T16:51:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-05T16:56:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-05T17:05:48Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-05T17:22:50Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-10-05T17:30:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-05T17:33:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-05T17:42:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-05T17:49:33Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-10-05T17:53:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-05T17:54:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-05T18:05:57Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-10-05T18:50:02Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-06T17:53:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-06T17:55:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-06T17:56:15Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-06T17:56:55Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-06T17:57:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-10-06T17:58:16Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-10-06T18:38:54Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-10-06T18:43:14Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-07T10:43:56Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-10-07T17:47:12Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-10-07T18:38:26Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-10-07T18:55:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-30T16:55:17Z",false,"COMMENTED"
"timothyqiu","MEMBER","The description of `INTERNAL_MODE_*` should also be updated accordingly. They were written for `add_child()` so ""will"" is used.

https://github.com/godotengine/godot/blob/fb2bd1f227e07f7facbf2692cf9ad2e2212bd41c/doc/classes/Node.xml#L1306-L1314","2024-03-30T13:09:21Z",false,"COMMENTED"
"zaevi","CONTRIBUTOR","","2024-03-30T13:32:07Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Not particularly urgent, but the descriptions of `add_sibling()`, `find_child()`, `find_children()`, `get_child()`, and more could use an update, as they refer to this value solely as the ""internal parameter of `add_child()`""","2024-03-30T13:57:54Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-04-06T16:53:03Z",false,"APPROVED"
"ajreckof","MEMBER","","2024-04-01T08:31:26Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-04-03T09:55:42Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-30T10:26:41Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-03-30T10:05:50Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-30T10:33:40Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-30T10:47:11Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-03-30T10:50:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-30T10:57:53Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-30T11:14:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-30T11:20:00Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-30T11:36:51Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-03-30T11:44:33Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-30T11:47:11Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-03-30T11:58:10Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-30T11:59:01Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-30T12:04:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-30T12:05:54Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-03-30T12:17:38Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-30T12:25:00Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-30T12:31:32Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-03-30T12:32:27Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-30T12:33:10Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-03-30T12:39:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-30T12:41:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-13T08:58:35Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-04-13T09:20:26Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-13T09:31:45Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-04-13T09:39:33Z",false,"COMMENTED"
"ajreckof","MEMBER","Tested and it works perfectly. Code is simple and clear.","2024-04-13T18:48:23Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-13T20:47:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-24T14:39:35Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-24T14:55:21Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-09-06T21:01:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-06T22:23:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-06T22:36:54Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-23T08:56:45Z",false,"APPROVED"
"morganwesemann","NONE","","2024-03-29T20:37:19Z",false,"COMMENTED"
"morganwesemann","NONE","","2024-03-29T20:38:10Z",false,"COMMENTED"
"morganwesemann","NONE","","2024-03-29T20:38:32Z",false,"COMMENTED"
"morganwesemann","NONE","","2024-03-29T20:40:17Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-08T16:35:48Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-29T14:31:31Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-03-29T14:44:23Z",false,"APPROVED"
"Nazarwadim","CONTRIBUTOR","","2024-03-29T15:24:57Z",false,"APPROVED"
"kus04e4ek","CONTRIBUTOR","","2024-03-29T11:17:04Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-04-19T13:14:40Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-04-29T12:55:51Z",false,"COMMENTED"
"groud","MEMBER","","2024-04-02T08:22:23Z",false,"APPROVED"
"DarioSamo","CONTRIBUTOR","","2024-03-29T12:24:19Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-04-02T22:17:36Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-04-03T08:48:55Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-04-03T08:51:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-03T08:51:49Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-03T09:06:19Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-04-03T09:11:44Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-03T10:32:03Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-04T13:16:08Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-04-04T13:23:15Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-05T14:43:52Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-04-08T04:31:51Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-08T08:29:20Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-04-03T08:21:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-03T08:22:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-03T09:26:43Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-04-03T10:00:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-03T10:05:13Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-04-03T12:09:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-03T12:12:30Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","Fixes an important bug on windows, so I'm approving this because 99% of the problem cases are covered by the change as written and I want to make sure it gets in.

Just a comment but should we check if material and mesh extraction has the same problem? perhaps we should validate_filename() in all cases

I think this problem stemmed because the Extract window doesn't offer a way to rename the extracted animations. I don't think people ever want their animations to be named ""Armature|"" or ""Armature_"" or ""Take 001"", but it's hard to edit from the extract dialog.

Anyway, improving the extraction flow would require an updated design, and it's important to get this bug fixed, so I think this is a good change.","2024-03-30T23:18:01Z",false,"APPROVED"
"AlexOtsuka","CONTRIBUTOR","","2024-03-30T23:28:42Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-03-31T00:42:20Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-29T08:45:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-29T08:46:34Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-03-29T19:35:47Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-04-19T23:55:40Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Looks good!","2024-03-28T23:29:44Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","The cleanup looks good!

Added some comments to address and it should be good to go.","2024-03-28T23:26:55Z",false,"CHANGES_REQUESTED"
"melquiadess","CONTRIBUTOR","","2024-03-28T23:32:35Z",false,"COMMENTED"
"melquiadess","CONTRIBUTOR","","2024-03-28T23:38:51Z",false,"COMMENTED"
"melquiadess","CONTRIBUTOR","","2024-03-28T23:39:00Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","Looks good!","2024-03-28T23:44:24Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-29T06:02:01Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-28T19:37:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-01T09:03:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-01T09:42:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-03T08:50:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-03T08:53:27Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-03T11:00:26Z",false,"APPROVED"
"vnen","MEMBER","Makes sense to me. Maybe @RandomShaper wants to take a look (since he did the original clearing functionality)?","2024-04-18T18:52:09Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-28T18:48:16Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-28T19:29:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-28T19:29:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-28T19:30:05Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-03-28T22:10:23Z",false,"COMMENTED"
"LunaCapra","CONTRIBUTOR","","2024-03-28T22:11:14Z",false,"COMMENTED"
"LunaCapra","CONTRIBUTOR","","2024-03-28T23:04:05Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected. This change does a lot to make objects feel more grounded :slightly_smiling_face: 

All screenshots are Forward+ with SDFGI, SSAO, SSIL and glow enabled. No bent normal textures were used; I'm only testing the specular occlusion approximation.

There seems to be a small performance impact from this change, going from 360 FPS to 358 FPS in 4K on a RTX 4090. We should test this on integrated graphics as well to make sure it doesn't decrease performance too much there.

I've tested this change in Mobile as well but can't spot any visual difference there.

**Testing project:** [test_specular_occlusion.zip](https://github.com/godotengine/godot/files/14807331/test_specular_occlusion.zip)

### Metallic material

`master` | This PR
-|-
![Screenshot_20240329_182759_master png webp](https://github.com/godotengine/godot/assets/180032/adbd1d01-1994-440f-bd0b-4be077fa1ebd) | ![Screenshot_20240329_182747_with_specular_ao png webp](https://github.com/godotengine/godot/assets/180032/1c7134a0-ab09-4d52-8dc9-763eb49d93bc)

### Dielectric material

*Press <kbd>Space</kbd> in the testing project to change the material on the goblets.*

`master` | This PR
-|-
![Screenshot_20240329_183228_master png webp](https://github.com/godotengine/godot/assets/180032/afb14188-19e1-4364-9d52-3e7b9ad205cd) | ![Screenshot_20240329_183238_with_specular_ao png webp](https://github.com/godotengine/godot/assets/180032/ce6bda02-13d4-4409-a599-fc94cc3115e9)

### Metallic material 2

`master` | This PR
-|-
![Screenshot_20240329_184516_master png webp](https://github.com/godotengine/godot/assets/180032/0f73f923-a16a-42a7-8a8f-6526b4399e5b) | ![Screenshot_20240329_184502_with_specular_ao png webp](https://github.com/godotengine/godot/assets/180032/5e4f9b4a-eeb9-46a9-ab8c-79e2a498febc)


### Metallic material 2 with OmniLight3D

`master` | This PR
-|-
![Screenshot_20240329_184731_master png webp](https://github.com/godotengine/godot/assets/180032/f88cb649-6534-40a2-8d8c-924881ea1049) | ![Screenshot_20240329_184712_with_specular_ao png webp](https://github.com/godotengine/godot/assets/180032/eee681d2-b828-465c-a1e5-bbfe5d2104c4)","2024-03-29T17:53:53Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM, more appropriate wording IMO","2024-03-28T17:48:25Z",false,"APPROVED"
"coppolaemilio","MEMBER","","2024-03-28T17:57:45Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-03-28T18:02:42Z",false,"COMMENTED"
"coppolaemilio","MEMBER","","2024-03-28T18:18:44Z",false,"COMMENTED"
"Gramps","NONE","","2024-03-28T19:09:34Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-04T11:09:47Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-28T15:40:47Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-03-28T15:43:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","Looks good to me and makes sense (assuming the compile passes)","2024-03-28T15:45:30Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-04T05:58:26Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-04T12:08:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM, and makes sense, verified that the `set_image` method is now once again `public` (`get_image` was never affected by this, this doesn't happen to inherited methods)

Might be worth checking how we can make `_verify_property` work with dynamic properties in the future, but don't think there's any issue with exposing this now, I'd say that it's probably a bit more efficient to do this as well as we don't go via `set/get`","2024-03-28T17:25:33Z",false,"DISMISSED"
"akien-mga","MEMBER","","2024-03-28T13:43:29Z",false,"APPROVED"
"fire","MEMBER","","2024-03-28T15:57:36Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-28T13:40:19Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-28T15:02:37Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-30T22:11:31Z",false,"APPROVED"
"groud","MEMBER","","2024-04-04T13:03:26Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-29T07:18:37Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-28T15:53:05Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-28T17:43:44Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-28T17:43:50Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-31T21:46:17Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-31T22:03:23Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-31T22:03:29Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-31T22:03:58Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-31T22:09:33Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-31T22:09:46Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-31T22:10:51Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-04-04T06:53:14Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-04T07:02:36Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-04-04T11:05:37Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-04-04T11:06:28Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-04-04T11:06:36Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-04-04T11:09:33Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-28T08:41:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-28T08:42:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-28T08:43:10Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-28T09:49:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-28T09:50:58Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-03-30T06:07:39Z",false,"COMMENTED"
"TokageItLab","MEMBER","LGTM","2024-04-05T02:43:43Z",false,"APPROVED"
"MewPurPur","CONTRIBUTOR","","2024-03-28T13:06:10Z",false,"APPROVED"
"Geometror","MEMBER","To me, this looks much cleaner :)","2024-03-28T13:45:57Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-03-28T10:31:18Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Looks good to me!

I wonder if we should be specifically mentioning ""SteamVR"" when the ""Oculus"" runtime would also be a valid choice here? But I don't think we need to solve that on this PR - these changes would already be an improvement. :-)","2024-04-02T19:14:50Z",false,"APPROVED"
"Calinou","MEMBER","","2024-03-28T05:55:37Z",false,"COMMENTED"
"lijon","NONE","","2024-03-28T09:53:25Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-04-01T08:19:03Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-03-28T01:47:34Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-03T15:23:47Z",false,"COMMENTED"
"clubby789","CONTRIBUTOR","","2024-04-03T15:28:53Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-03T15:30:33Z",false,"COMMENTED"
"aaronfranke","MEMBER","This needs a [proposal](https://github.com/godotengine/godot-proposals/) before it can be considered.","2024-04-03T16:21:51Z",false,"COMMENTED"
"clubby789","CONTRIBUTOR","","2024-04-03T16:45:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-01T15:22:43Z",false,"COMMENTED"
"Mknsri","CONTRIBUTOR","","2024-04-01T18:46:22Z",false,"COMMENTED"
"rburing","MEMBER","","2024-04-01T18:55:03Z",false,"APPROVED"
"KoBeWi","MEMBER","Seems fine. I thought that it may cause some properties to be set twice, but it's not the case.","2024-03-28T00:45:22Z",false,"APPROVED"
"AThousandShips","MEMBER","A general control of warning display would be nice, but IMO this is a special case, many other warnings are less relevant to hide (like collision objects without shapes, which isn't really valid, scale warnings, etc.), this one is simply information, rather than something being wrong as such

We might even want to add categories to warnings in the future to distinguish ""warnings"" from ""information"", with a white triangle perhaps","2024-03-28T15:48:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-04T15:22:30Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-04T15:25:47Z",false,"APPROVED"
"Geometror","MEMBER","","2024-04-04T18:13:17Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-27T22:50:09Z",false,"APPROVED"
"groud","MEMBER","","2024-03-27T17:54:08Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-27T14:59:27Z",false,"COMMENTED"
"Chubercik","CONTRIBUTOR","","2024-03-27T15:44:24Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-27T19:07:03Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-03-27T10:09:57Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","Outside of the nitpick above, this makes perfect sense! :D","2024-03-28T10:14:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-27T08:49:42Z",false,"COMMENTED"
"divshekhar","CONTRIBUTOR","","2024-03-27T09:20:58Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-03-28T15:09:07Z",false,"COMMENTED"
"divshekhar","CONTRIBUTOR","","2024-03-29T03:35:20Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","The update looks good to me!

Can you fix the formatting issues.","2024-04-19T16:31:48Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/29b3d9e9e538f0aa8effc8ad8bf19a2915292a89), it works as expeted.

Code looks good to me.","2024-03-30T01:10:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-09T06:31:03Z",false,"APPROVED"
"Scony","CONTRIBUTOR","","2024-04-23T18:39:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-23T18:40:04Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-04-10T07:34:47Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-10T07:40:57Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-26T21:37:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-26T20:07:28Z",false,"APPROVED"
"kitbdev","CONTRIBUTOR","","2024-03-26T20:25:54Z",false,"COMMENTED"
"brno32","CONTRIBUTOR","","2024-03-26T21:15:40Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-03-27T12:28:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-28T09:41:58Z",false,"APPROVED"
"RandomShaper","MEMBER","With the customary TIWAGOS, this makes sense to me.","2024-04-03T10:36:41Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/29b3d9e9e538f0aa8effc8ad8bf19a2915292a89), it works as expected in all rendering methods. Code looks good to me at a glance.

Toggling the project setting works without having to restart the project as well, which is nice for providing graphics options in projects. (This is an upgrade from 3.x where a restart was required when using GLES2, but not GLES3.)

Disabled | Enabled
-|-
![Disabled](https://github.com/godotengine/godot/assets/180032/e1d12e5e-9b3d-4137-b29f-ccee94217dde) | ![Enabled](https://github.com/godotengine/godot/assets/180032/758387e0-4099-443e-aadd-4ba47e703cbd)

PS: I noticed toggling bicubic filtering works on existing projects with lightmaps that were baked without this PR. They seem to look fine in this scenario, though I haven't looked extensively to see if they suffer more from lightmap bleeding when bicubic filtering is enabled compared to lightmaps baked with this PR.

Should we print a warning when bicubic filtering is enabled and a LightmapGIData lacks texture size information?

Also, note that this PR prevents using lightmaps baked *after* this PR is merged from working in older builds not including this PR. The scene will still load but lightmaps won't display until you bake lightmaps again. It's not a dealbreaker, just worth keeping in mind.","2024-04-04T00:20:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-04T09:48:47Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-04T09:52:29Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-07-09T14:09:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-09T14:12:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-09T14:13:30Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-09T15:00:32Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-08-17T00:11:32Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/1bd740d18d714f815486b04bf4c6154ef6c355d9), it mostly works as expected.

**Testing project:** [test_shadowmask.zip](https://github.com/user-attachments/files/16650062/test_shadowmask.zip)

The main issue I noticed is that bicubic sampling in Compatibility works in the editor, but not in the running project. This happens regardless of the project setting's value, and regardless of whether the lightmaps were initially baked while using Compatibility.

### Forward+

Disabled | Enabled
-|-
![Screenshot_20240818_181424 png webp](https://github.com/user-attachments/assets/9cd57870-d4b5-498d-957a-ff074d067d34) | ![Screenshot_20240818_181408 png webp](https://github.com/user-attachments/assets/982b634b-313d-431c-bbf2-21b617e146e7)

### Mobile

Disabled | Enabled
-|-
![Screenshot_20240818_181503 png webp](https://github.com/user-attachments/assets/c2e9d6d1-9ed7-4dbe-8aac-70183f8425b7) | ![Screenshot_20240818_181451 png webp](https://github.com/user-attachments/assets/602c7391-3eb3-4947-97c7-d41b50bc2193)

### Compatibility

Disabled | Enabled
-|-
![Screenshot_20240818_181526 png webp](https://github.com/user-attachments/assets/ba3c561f-9f81-4dea-83a1-b11e6ebdbddc) | ![Screenshot_20240818_181518 png webp](https://github.com/user-attachments/assets/22133186-d885-44d5-94e7-4b0fc1550d53)

Also, the increase in light leaking when bicubic filtering is enabled is rather noticeable in the scene's indoor areas. We should look into increasing padding by default (e.g. from 2 to 4 pixels) to alleviate this (even if bicubic filtering is disabled on bake, so that you can enable it later without needing to bake again ‚Äì¬†and provide a runtime setting for users to toggle).","2024-08-18T16:27:38Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks amazing! I have left a few suggestions to clean things up a bit. But overall it looks fantastic. Once you make my suggestions it should be ready to merge","2024-08-19T06:09:02Z",false,"CHANGES_REQUESTED"
"clayjohn","MEMBER","Amazing work! Looks great","2024-08-19T16:06:29Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-26T17:42:15Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","The PR needs to address the above mentioned problem.","2024-03-26T18:39:21Z",false,"CHANGES_REQUESTED"
"Sauermann","CONTRIBUTOR","While I'm not familiar with Android loop callbacks, the usage of `WINDOW_EVENT_MOUSE_*` looks correct: It takes care of setting mouse-over states.
Haven't tested the PR though.

I agree, that revisiting these events will become necessary, if multi window support gets implemented.

For reference: #89920 approaches the problem from a different side, that is more aligned with the initial implementation of this PR.","2024-03-27T06:12:09Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","> I think if [multi-window-support](https://developer.android.com/guide/topics/large-screens/multi-window-support) is introduced at some point, the events will have to be revised again.

Multi-window support is on the roadmap (Godot 4.4), and we are already experimenting with it for the Godot XR Editor, so this PR will need to be revised to account for it.

If I'm reading right, in a multi-window world each window will fire the `WINDOW_EVENT_MOUSE_ENTER` event causing input focus to randomly switch back and forth between each window; is that correct?","2024-03-28T15:30:32Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-03-26T15:54:33Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-26T15:17:34Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-26T13:31:41Z",false,"APPROVED"
"bruvzg","MEMBER","The change looks OK.

But it's probably something that should be also checkable via `has_feature`. There's already `FEATURE_NATIVE_DIALOG` for the native file dialogs, it probably should be split into multiple options to allow checking for each type of dialog.","2024-03-26T10:59:57Z",false,"APPROVED"
"akien-mga","MEMBER","Didn't test, but looks like a sensible approach.","2024-03-26T10:46:20Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-26T10:44:32Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-03-26T06:44:09Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-04T14:17:39Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-04-05T14:27:40Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","> @dsnopek mind giving this another look? I've moved the logic into a helper object which solves your issue.

This looks great to me! It solves all my concerns around storing data on `XRInterface` and having a Vulkan-specific default implementation.

> VRS does work nicely on Quest 3. You can use the following project to test:
https://github.com/BastiaanOlij/godot_openxr_demo/tree/add_more_testing

I also tested on Quest 3, but using the same project I tested with last time (which is originally based on your `test_vrs_mobile` branch but updated for the latest API), rather than the project linked above.

It works great! I'm still seeing the same frame time gains as previously.

I only have a couple of nitpicks.","2024-05-02T14:27:05Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-05-02T14:34:01Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","I haven't re-tested, but with the latest changes, the code looks great to me!","2024-05-03T13:35:58Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-26T11:32:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-26T11:48:21Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-26T11:48:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-26T11:52:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-26T12:02:37Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-26T12:12:50Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-26T12:40:12Z",false,"COMMENTED"
"AyyZerrAsa","NONE","","2024-03-26T19:54:21Z",false,"COMMENTED"
"AyyZerrAsa","NONE","","2024-03-26T21:14:04Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-04-04T17:26:34Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-04-06T16:47:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-06T16:48:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-06T16:49:24Z",false,"COMMENTED"
"AyyZerrAsa","NONE","","2024-04-06T20:56:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-25T18:58:13Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Thanks for the fix!

This issue seems to have affected a couple platforms, were you able to trace the root cause and do we need to propagate this fix to other platforms?","2024-03-25T16:56:50Z",false,"APPROVED"
"fire","MEMBER","","2024-03-25T17:37:03Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good.

And my bad, thanks for the fixes. I also confirm that the other uses of `Main::start()` seem fine now.","2024-03-25T17:38:01Z",false,"APPROVED"
"adamscott","MEMBER","Discussed during the GDScript meeting. This seems a fine way to fix the issue. Thanks!","2024-04-23T14:41:55Z",false,"APPROVED"
"vnen","MEMBER","LGTM","2024-04-23T14:41:59Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-25T16:28:50Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-03-25T15:39:31Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-03-25T17:00:45Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-03-25T17:01:45Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-03-25T17:01:57Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-03-25T17:05:12Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-03-25T18:58:34Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-03-25T19:03:03Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","The code looks good to me!

I still need to perform a few rounds of testing.","2024-03-25T19:56:07Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-26T08:55:43Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-01T16:56:51Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","This is looking real good, just a few small nitpicks and some remarks for the future.
I'm happy for this to be merged once the nitpicks have been addressed. ","2024-04-02T03:05:12Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-04-02T15:29:27Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-02T15:35:54Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-02T17:45:55Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-02T17:46:20Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-04-02T23:05:44Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-04T18:59:59Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-04T19:08:28Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-05T04:23:41Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-25T08:54:08Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-25T08:54:19Z",false,"APPROVED"
"KoBeWi","MEMBER","I think I forgot to approve after testing again, sorry.","2024-04-09T11:30:05Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-03-25T06:39:35Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-29T10:49:10Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-28T15:09:49Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-28T15:16:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-25T09:36:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-25T15:41:59Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-03-25T17:37:08Z",false,"COMMENTED"
"markofjohnson","NONE","","2024-03-25T17:46:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-26T12:01:58Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-03-26T12:08:48Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-03-27T17:19:17Z",false,"COMMENTED"
"markofjohnson","NONE","","2024-03-27T17:26:55Z",false,"COMMENTED"
"markofjohnson","NONE","","2024-03-27T17:30:12Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-03-27T17:32:03Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-03-27T17:51:43Z",false,"COMMENTED"
"markofjohnson","NONE","","2024-03-27T23:41:08Z",false,"COMMENTED"
"markofjohnson","NONE","","2024-03-28T04:31:09Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-03-28T09:03:32Z",false,"COMMENTED"
"markofjohnson","NONE","","2024-03-28T18:26:41Z",false,"COMMENTED"
"markofjohnson","NONE","","2024-03-28T18:42:55Z",false,"COMMENTED"
"markofjohnson","NONE","","2024-03-28T18:58:58Z",false,"COMMENTED"
"markofjohnson","NONE","","2024-04-02T12:49:13Z",false,"COMMENTED"
"lawnjelly","MEMBER","Looks ok to me and seems to have had some testing. I don't know if we have any specific maintainers for MIDI (reduz will probably be familiar, but may be busy) but anyone else welcome to take a look. :+1: 

I don't know how many users use MIDI input so might need some testing in the wild through betas.","2024-04-03T09:54:19Z",false,"APPROVED"
"AThousandShips","MEMBER","Style and general function looks good, can't verify the validity in regards to MIDI","2024-04-03T13:23:15Z",false,"APPROVED"
"fire","MEMBER","The reasoning makes sense to remove. I did not check every single link to see if they're 3.5 though.","2024-03-25T04:06:26Z",false,"APPROVED"
"mhilbrunner","MEMBER","Makes sense, I think.

Alternatively, we could append something like ""`(3.x)`"" to the title of the links. If I was looking for something specific, it may still be useful to know some outdated tutorial is out there as a starting point to adapt from, rather than having nothing. Not sure.","2024-03-25T13:47:50Z",false,"APPROVED"
"AThousandShips","MEMBER","This is our general preference and isn't too noisy in my opinion, we might want to add this commit, or a more extensive one, to the blame ignore","2024-03-25T09:47:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-25T10:00:02Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-24T18:54:49Z",false,"APPROVED"
"skyace65","CONTRIBUTOR","","2024-03-24T18:58:48Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-29T08:33:35Z",false,"APPROVED"
"skyace65","CONTRIBUTOR","","2024-03-30T11:39:12Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-05T06:53:13Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-25T08:13:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-25T09:52:37Z",false,"APPROVED"
"fire","MEMBER","Works for me.","2024-03-24T20:06:21Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-24T20:23:09Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-24T15:57:15Z",false,"COMMENTED"
"clubby789","CONTRIBUTOR","","2024-03-24T20:35:41Z",false,"COMMENTED"
"clubby789","CONTRIBUTOR","","2024-03-24T20:37:00Z",false,"COMMENTED"
"vnen","MEMBER","","2024-04-18T19:02:41Z",false,"COMMENTED"
"vnen","MEMBER","The approach seems okay to me, just need a few changes.","2024-04-18T19:13:24Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-04-19T08:06:58Z",false,"COMMENTED"
"dalexeev","MEMBER","I have not reviewed or tested this PR in detail. Just a few notes.

What exactly is our goal with this warning? Implicit conversion causing copying is bad because:

1. It is not obvious that the result is that the source and target refer to different objects. The user may expect to be passed by reference, but the result is that the objects become independent.
2. Copying a large array can affect performance.
3. Implicit conversion can be confusing in principle. However, this also applies to types that are passed by reference, so we will not consider this issue within this PR.

I think we're primarily concerned with point 1, not 2. This has a few implications:

1. If the source is an array literal, then there should be no warning, since you will not be able to access the literal array, only the converted result. `var pba: PackedByteArray = []`, `my_func([])`, etc. are valid use cases for the implicit conversion feature. Unlike `var pba: PackedByteArray = array`, `my_func(array)`.
2. I'm not sure if there should be a warning if the target (and the source) is a constant. Yes, these will be different arrays, but you will not be able to modify the contents of the constant. However, since we have the bug #67873, we probably can't think about it for now.
3. I'm not sure if an implicit conversion when passing an argument to an annotation should raise a warning, since annotations require constant arguments and you probably won't be able to access the converted array (but it's theoretically possible in the future). In any case, there are currently no annotations that accept arrays as an argument.","2024-04-19T14:46:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-19T14:49:42Z",false,"COMMENTED"
"mihe","CONTRIBUTOR","I'm happy to see them get added. This was on my to-do list somewhere at some point.

I can't speak to the documentation part of it, but the rest seems straight-forward and LGTM.","2024-03-24T16:25:32Z",false,"APPROVED"
"fire","MEMBER","","2024-03-27T12:00:04Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-28T09:40:28Z",false,"APPROVED"
"Ansraer","CONTRIBUTOR","","2024-03-25T07:53:44Z",false,"APPROVED"
"clayjohn","MEMBER","Nice catch! This should definitely be linear","2024-04-02T22:52:26Z",false,"APPROVED"
"Calinou","MEMBER","I can confirm this is the expected behavior to match the BaseMaterial3D albedo property.

This PR will change visuals in existing projects that use Decal's Modulate for things other than just changing a decal's opacity, but it's worth it in the long run.","2024-04-03T15:34:47Z",false,"APPROVED"
"fire","MEMBER","I like the usability improvements for Path3D feature wise. I did not review the code at depth.

For example: 

Split the two types of ""extra"" handles like shape and disc helps reduce the difficult in using Path3D. Also the shift idea sounds good.

There's a process for optimizing svg, but it can be done in a later pr. https://docs.godotengine.org/en/3.6/development/editor/creating_icons.html","2024-03-27T02:00:47Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/29b3d9e9e538f0aa8effc8ad8bf19a2915292a89), it works as expected.

There are future improvements we could make (these usability issues also existed in `master`):

- You can't drag a point relative to the current view in **Select Points** mode. You can only do that in **Select Control Points** or **Select Tilt Handles** modes.
- You can't create a new handle out of a point by holding <kbd>Shift</kbd> then dragging a point in the **Select Points** mode. Again, this only works in the **Select Control Points** or **Select Tilt Handles** modes.

Both of the above could be implemented using a drag distance threshold, where dragging by `8 * EDSCALE` pixels or more would be considered a dragging operation, and dragging a lower distance before releasing the mouse would be considered a selection operation.

- Handle tilts could be displayed as degrees in the bottom-left corner when dragging one:

![image](https://github.com/godotengine/godot/assets/180032/a038f9ac-7ea7-4f64-b660-dba64f198c0a)

For reference, this is what the Node3D rotation gizmo message looks like:

![image](https://github.com/godotengine/godot/assets/180032/4d051e61-9f3f-489c-a781-6cd1a5cc1de0)
","2024-03-30T01:33:46Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-24T09:45:46Z",false,"APPROVED"
"TokageItLab","MEMBER","I remember I saw a PR similar to this for 2D (for GDScript, not C#) somewhere, but I forget. It might be better to have @aaronfranke check it as well since we discussed there.","2024-03-25T05:24:33Z",false,"APPROVED"
"aaronfranke","MEMBER","This PR is correct, and it matches C++ as noted.

Aside from everything already mentioned, also note that in Godot it's the convention that ""thing"" is parent-relative (rotation * self) and ""local thing"" is relative to the object's own transform (self * rotation), which this fix is consistent with.","2024-03-25T18:44:30Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-08T09:48:54Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-06T11:32:25Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","","2024-03-24T10:36:56Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-24T04:18:52Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-24T09:17:09Z",false,"APPROVED"
"akien-mga","MEMBER","Looks nice!","2024-03-23T23:10:10Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-03-23T22:21:22Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-25T14:35:00Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-23T19:08:14Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-03-23T19:37:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-24T21:24:49Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-03-25T09:56:36Z",false,"COMMENTED"
"dalexeev","MEMBER","This isn't great for translators and future cherry-picks, but I think it's a good change. Mixed indentation is inconvenient to edit, many text editors automatically convert it.","2024-03-25T15:22:09Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-03-25T16:36:30Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-04T10:55:16Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-04T11:06:48Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-23T19:51:56Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-04T06:08:14Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-23T17:11:53Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-03T08:32:27Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-03T08:56:40Z",false,"APPROVED"
"paddy-exe","CONTRIBUTOR","","2024-03-31T11:28:49Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-04-01T02:12:33Z",false,"COMMENTED"
"paddy-exe","CONTRIBUTOR","Works as expected. Can't say much about the usage of the `unlikely` keyword but the explanation makes sense","2024-04-01T14:01:31Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-01T14:17:58Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-01T14:19:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-01T14:31:24Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-03-23T14:20:17Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-11T07:13:34Z",false,"APPROVED"
"aromaa","NONE","","2024-04-02T19:54:12Z",false,"COMMENTED"
"roookeee","NONE","","2024-04-02T20:40:24Z",false,"COMMENTED"
"aromaa","NONE","","2024-04-02T21:10:50Z",false,"COMMENTED"
"roookeee","NONE","","2024-04-09T20:39:51Z",false,"COMMENTED"
"aromaa","NONE","","2024-04-10T10:59:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-24T14:31:52Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","lgtm","2024-03-25T04:06:27Z",false,"APPROVED"
"Calinou","MEMBER","Not tested on my end (I don't have Xfce installed), but this seems logical.","2024-04-08T23:59:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-06T11:33:21Z",false,"APPROVED"
"YeldhamDev","MEMBER","","2024-03-23T15:20:18Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-05-19T10:57:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-19T10:57:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-19T10:59:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-05-19T11:44:23Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-23T11:28:59Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-03-23T12:24:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-23T12:26:46Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me!","2024-03-23T23:19:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-29T10:50:55Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-25T13:59:55Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T14:03:59Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T14:05:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T14:13:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-25T14:14:15Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T14:14:19Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T14:16:04Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T14:18:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T14:20:17Z",false,"COMMENTED"
"Xenthera","NONE","","2024-03-25T17:54:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T19:05:27Z",false,"COMMENTED"
"Xenthera","NONE","","2024-03-25T19:13:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T22:06:30Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-21T11:47:59Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-06-21T11:50:14Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-22T18:41:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-22T15:59:56Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-22T16:09:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-22T16:10:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-22T22:28:40Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-22T10:21:19Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-22T10:49:06Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-22T09:27:59Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","","2024-03-23T20:01:51Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-03-22T05:21:28Z",false,"CHANGES_REQUESTED"
"jsjtxietian","CONTRIBUTOR","","2024-03-22T08:11:32Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-21T17:00:20Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-16T13:51:03Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-04-16T18:34:13Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-04-17T03:16:29Z",false,"APPROVED"
"paulloz","MEMBER","Good catch! I think this is fine, yep.","2024-03-21T23:52:05Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-03-21T23:52:13Z",false,"APPROVED"
"raulsntos","MEMBER","Thanks for the contribution, I'd like to understand the PR a bit better before approving.

> Returns default `Variant` (nil) if the `Span<*>` is null.

I'm not sure what you mean by this, Spans can't be null because they are value types. Can you explain why this change is needed? Do empty arrays work before/after this PR?

The current issue is probably because of checks like:

https://github.com/godotengine/godot/blob/fe01776f05b1787b28b4a270d53037a3c25f4ca2/modules/mono/glue/GodotSharp/GodotSharp/Core/Array.cs#L88-L91

I imagine this was a copy-paste mistake. But then `Array.Empty<StringName>()` should throw as well.","2024-03-22T02:25:56Z",false,"CHANGES_REQUESTED"
"zaevi","CONTRIBUTOR","","2024-03-22T04:30:06Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-03-23T08:05:43Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-03-23T08:06:05Z",false,"APPROVED"
"Arnklit","CONTRIBUTOR","Just tested this and it works as expected.","2024-04-11T12:20:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-11T12:29:53Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-21T15:52:44Z",false,"COMMENTED"
"clayjohn","MEMBER","Makes sense to me. Maybe @bitsawer could take a look as well","2024-04-04T03:57:40Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-10T12:17:16Z",false,"APPROVED"
"alesliehughes","CONTRIBUTOR","","2024-03-22T03:15:37Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-22T06:01:41Z",false,"COMMENTED"
"KrukDallan","NONE","","2024-03-22T07:10:31Z",false,"COMMENTED"
"KrukDallan","NONE","","2024-03-22T07:12:50Z",false,"COMMENTED"
"KrukDallan","NONE","","2024-03-22T07:13:27Z",false,"COMMENTED"
"alesliehughes","CONTRIBUTOR","","2024-03-22T07:24:01Z",false,"COMMENTED"
"KrukDallan","NONE","","2024-03-22T07:31:05Z",false,"COMMENTED"
"alesliehughes","CONTRIBUTOR","","2024-03-22T08:02:04Z",false,"COMMENTED"
"KrukDallan","NONE","","2024-03-22T08:29:31Z",false,"COMMENTED"
"alesliehughes","CONTRIBUTOR","","2024-03-22T08:31:53Z",false,"COMMENTED"
"KrukDallan","NONE","","2024-03-22T08:33:10Z",false,"COMMENTED"
"alesliehughes","CONTRIBUTOR","","2024-03-22T08:42:55Z",false,"COMMENTED"
"KrukDallan","NONE","","2024-03-22T09:01:38Z",false,"COMMENTED"
"alesliehughes","CONTRIBUTOR","","2024-03-22T09:06:45Z",false,"COMMENTED"
"KrukDallan","NONE","","2024-03-22T09:12:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-22T13:59:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-22T14:00:14Z",false,"COMMENTED"
"KrukDallan","NONE","","2024-03-22T14:38:41Z",false,"COMMENTED"
"KrukDallan","NONE","","2024-03-22T14:42:19Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-22T14:54:14Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-22T14:54:55Z",false,"COMMENTED"
"KrukDallan","NONE","","2024-03-22T14:59:49Z",false,"COMMENTED"
"ryevdokimov","CONTRIBUTOR","Ah, I just understood what you meant by this by going through the comments in your old PR. Makes sense now. ","2024-03-21T21:17:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-26T12:17:30Z",false,"APPROVED"
"ajreckof","MEMBER","Tested and this works as expected. Code looks good to me","2024-04-14T12:44:54Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-15T14:00:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-15T14:06:19Z",false,"COMMENTED"
"KoBeWi","MEMBER","Implementation looks ok.","2024-04-15T14:06:52Z",false,"APPROVED"
"ajreckof","MEMBER","","2024-04-15T14:19:29Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-15T14:27:17Z",false,"COMMENTED"
"adamscott","MEMBER","Discussed during the GDScript meeting. Looks fine to us! Thanks @dalexeev !","2024-04-23T14:44:23Z",false,"APPROVED"
"TokageItLab","MEMBER","It seems that the regression was caused by https://github.com/godotengine/godot/pull/80813 because the fix in https://github.com/godotengine/godot/pull/38107 was applied to AnimationPlayer but not to AnimationTree since the AnimationMixer was implemented based on the AnimationTree.

However, there are many other potential problems with the AnimationPlaybackTrack, so we are planning to rework the playback process of AnimationPlaybackTrack in the future as https://github.com/godotengine/godot-proposals/issues/8783.

Well, this fix might fine for 4.3.","2024-03-21T09:59:29Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-24T09:31:31Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T14:51:12Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T15:00:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T15:02:48Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T15:22:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-25T15:23:05Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T15:24:52Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-25T15:26:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T15:29:13Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T15:39:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T15:39:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T15:41:07Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T15:41:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T15:56:50Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-26T06:57:08Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-26T06:57:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-26T14:18:31Z",false,"COMMENTED"
"KoBeWi","MEMBER","Looks good now.","2024-03-26T14:21:09Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","","2024-03-30T14:05:08Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-03-30T14:08:42Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-03-30T14:09:41Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-03-31T13:03:39Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-01T20:42:48Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Rendering is not my area, but looking at the code, this all makes sense to me at high-level. It should definitely be reviewed by someone more knowledgeable about rendering, though.

I tested on my Quest 3 using the demo project from [godot_openxr_vendors](https://github.com/GodotVR/godot_openxr_vendors) on its `master` branch.

Everything seems to work when the using single threaded rendering, but I get a segfault on start up when using multi-threaded rendering. For some reason, the debug symbols aren't showing up in the stack trace (even though they should be there!) so I don't have much more in the way of details to share. I'll try to get some more info...","2024-04-01T21:50:54Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-04-03T04:43:29Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-04-03T04:43:38Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-04-04T06:26:54Z",false,"COMMENTED"
"clayjohn","MEMBER","Just a couple of comments. I don't see any problems with the overall approach, but I am totally lost in the XR changes. So don't count on my opinion for much","2024-04-11T19:13:49Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-11T19:17:23Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-04-23T03:40:34Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-04-23T03:41:52Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-04-23T03:42:11Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-23T12:03:29Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-23T12:32:00Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-23T13:23:20Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-04-23T15:15:11Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-23T15:24:12Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-29T06:52:52Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-04-30T01:18:50Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-04-30T03:01:44Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-30T07:44:18Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-21T11:00:24Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-03-21T18:05:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-21T18:06:48Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-03-21T18:09:33Z",false,"COMMENTED"
"jitspoe","CONTRIBUTOR","","2024-03-22T09:12:55Z",false,"COMMENTED"
"jitspoe","CONTRIBUTOR","","2024-03-22T09:13:34Z",false,"COMMENTED"
"jitspoe","CONTRIBUTOR","","2024-03-22T09:14:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-22T09:16:29Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-03-22T10:32:31Z",false,"COMMENTED"
"jitspoe","CONTRIBUTOR","","2024-03-24T07:53:32Z",false,"COMMENTED"
"lawnjelly","MEMBER","Looks fine to me.","2024-03-26T05:43:32Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/29b3d9e9e538f0aa8effc8ad8bf19a2915292a89), it works as expected in all rendering methods.

**Testing project:** [test_shadow_distance_fade_performance.zip](https://github.com/godotengine/godot/files/14797520/test_shadow_distance_fade_performance.zip)

Not only this PR improves performance, but this also improves shadow quadrant selection for nearby lights when distant lights are faded out:

master https://github.com/godotengine/godot/commit/29b3d9e9e538f0aa8effc8ad8bf19a2915292a89 | This PR
-|-
![shadow_distance_fade_master](https://github.com/godotengine/godot/assets/180032/28145ee0-5ee1-4833-9355-eb49ab5d5df2) | ![shadow_distance_fade_pr](https://github.com/godotengine/godot/assets/180032/137b390a-b145-41c3-a0a0-ecdaa00f2a6e)

Unfortunately, this PR doesn't improve the situation when light per-instance limits are reached in the Mobile and Compatibility rendering methods (I haven't checked Forward+ with low **Max Clustered Elements** project setting). We should try to make it so fully faded lights are ignored entirely at a low level, so that you can bypass per-instance light limits using distance fade. https://github.com/godotengine/godot/issues/67845 is not fixed by this PR either.

Either way, considering how much this PR improves performance, I'd say it's already in a mergeable state.

## Benchmark

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 39)
</details>

Type | master | This PR
-:|-|-
**1152√ó648 idle** | 1304 FPS (0.77 mspf) | 4208 FPS (0.24 mspf)
**1152√ó648 moving** | 582 FPS (1.72 mspf) | 2608 FPS (0.38 mspf)
**3840√ó2160 idle** | 546 FPS (1.83 mspf) | 675 FPS (1.48 mspf)
**3840√ó2160 moving** | 403 FPS (2.48 mspf) | 619 FPS (1.62 mspf)","2024-03-29T01:16:43Z",false,"APPROVED"
"clayjohn","MEMBER","Just a little nitpick to avoid the virtual function call and duplicated code. Other than that this seems great! Good job!","2024-04-02T22:48:02Z",false,"COMMENTED"
"jitspoe","CONTRIBUTOR","","2024-04-03T11:08:18Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-04-04T03:37:14Z",false,"COMMENTED"
"jitspoe","CONTRIBUTOR","","2024-04-05T08:37:44Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-04-09T22:49:39Z",false,"COMMENTED"
"clayjohn","MEMBER","Seems great! I also tested locally and confirmed that its working as intended.

Good job!
","2024-04-09T22:50:28Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","lgtm","2024-03-21T05:38:19Z",false,"APPROVED"
"TokageItLab","MEMBER","I have seen a PR somewhere that tried to extract the root motion from the hips transformation at realtime in AnimationTree, but I remember that it was rejected because it would not be good for performance.

Also, just yesterday, reduz and I were discussing moving the root motion from AnimationMixer to Skeleton3D, and in this case, using Hips as Root is also not a good idea for the same reason as above.","2024-03-21T10:48:21Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","Oh, sorry, I misunderstood the PR.

If this is a PR to ""do nothing"" instead of ""include RootMotion in Hips"", then it makes sense.","2024-03-21T10:54:42Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","","2024-03-21T00:24:06Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","Currently users get a ""shadowing"" warning for simply ""doing the right thing"". This should be fixed.

As mentioned above, compatibility is likely no problem.

While I would prefer `event_position` in `CollisionObject3D` to account for `InputEventScreenDrag` and `InputEventScreenTouch`, I guess `mouse_position` is also fine, because it covers the largest part of use-cases.","2024-03-26T20:41:01Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","LGTM","2024-03-20T22:29:09Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-03-21T07:37:02Z",false,"COMMENTED"
"Spartan322","CONTRIBUTOR","","2024-03-21T10:44:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-21T10:45:17Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-03-21T00:21:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM","2024-03-27T09:09:53Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-20T16:16:01Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-03-20T16:26:54Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/7a42afbba050822a66ea5b4c620f6db1b98c49af), this PR doesn't resolve the issue from the original MRP (https://github.com/godotengine/godot/issues/89702#issue-2196730641):

https://github.com/godotengine/godot/assets/180032/eae7360e-c1c3-4209-8a12-d74b8de187ca

*Even if the above video was recorded at 60 FPS, the **Max FPS** project setting was set to 20 for demonstration purposes.*

Disabling the **Tighter Shadow Caster Culling** project setting resolves the issue. I'm using a 16:9 aspect ratio which is identical to the base window size, so I assume it's what mrjustaguy tested this with.","2024-04-04T13:55:58Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-04-04T20:45:24Z",false,"APPROVED"
"Geometror","MEMBER","","2024-03-20T14:36:09Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","","2024-03-24T00:27:08Z",false,"APPROVED"
"paulloz","MEMBER","All of the new names are correct üëç ","2024-03-20T18:38:58Z",false,"APPROVED"
"skyace65","CONTRIBUTOR","All the names look correct!","2024-03-22T14:09:09Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","Once again the tablet code is... cursed?

I don't think velocity ever worked but knowing this code I wouldn't be surprised if it did lol.

Thanks for fixing this and thanks to @maddin200 for noticing this issue!","2024-03-20T22:31:33Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-29T10:49:40Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM","2024-04-10T09:45:53Z",false,"APPROVED"
"Maran23","CONTRIBUTOR","","2024-03-20T08:13:58Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-03-20T10:44:40Z",false,"COMMENTED"
"Maran23","CONTRIBUTOR","","2024-03-20T16:31:55Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-03-20T17:20:15Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-03-25T14:04:25Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Sounds good to me but I am not sure if it's correct or some form of misunderstanding.","2024-03-20T09:14:20Z",false,"APPROVED"
"Calinou","MEMBER","This is indeed correct. I likely added the description to the wrong constant at the time.","2024-04-04T00:25:11Z",false,"APPROVED"
"passivestar","CONTRIBUTOR","Looking good üëç

<img width=""673"" alt=""image"" src=""https://github.com/godotengine/godot/assets/60579014/d3088301-1d8b-4f4b-8500-3fe880a334da"">

<img width=""467"" alt=""image"" src=""https://github.com/godotengine/godot/assets/60579014/b4abc6e5-8768-4d12-ae2c-dc0e97c173f3""><br>

Unrelated: most dialog windows in godot are missing paddings","2024-03-20T17:18:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-17T21:52:29Z",false,"APPROVED"
"smix8","CONTRIBUTOR","","2024-03-22T00:36:48Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-22T09:39:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-22T09:39:57Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-03-21T11:14:03Z",false,"COMMENTED"
"Geometror","MEMBER","Works great! (The visualizer even opens up more quickly for me, at least in debug mode (21s -> 16s). Code looks fine too.","2024-03-21T11:20:06Z",false,"APPROVED"
"jsjtxietian","CONTRIBUTOR","","2024-05-06T03:27:22Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-05-06T22:11:49Z",false,"COMMENTED"
"reduz","MEMBER","This makes sense, I guess it was an oversight on my part","2024-03-20T08:10:02Z",false,"APPROVED"
"bruvzg","MEMBER","All other platforms initialize main loop after `Main::start()` call, so this change should be fine.

No sure why iOS was different (it's probably an oversight from OS refactoring during Vulkan support addition).","2024-03-20T09:04:43Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-11T07:14:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-25T23:22:14Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-26T07:26:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-26T07:26:18Z",false,"APPROVED"
"akien-mga","MEMBER","Amended the commit to fix the other error, should be fine now.","2024-03-25T23:14:33Z",false,"APPROVED"
"adamscott","MEMBER","Discussed in the GDScript meeting. This warrants a discussion about what the `UNUSED_SIGNAL` warning is about. Is it only linked to emitting the signal vs connecting/disconnecting from it.","2024-04-23T14:32:26Z",false,"COMMENTED"
"akien-mga","MEMBER","Seems good to me. I confirm it fixes two false positives of this warning in https://github.com/gdquest-demos/godot-4-3d-third-person-controller/pull/41 (superseded that PR).

I still have doubts on whether this warning is worth keeping giving its (apparently unsolvable) limitations, but I see no harm in doing this improvement for now to solve some known false positives.","2024-09-05T16:44:56Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-09-05T16:46:26Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-25T12:15:00Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-03-19T08:54:58Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-19T08:56:48Z",false,"COMMENTED"
"alesliehughes","CONTRIBUTOR","","2024-03-19T09:04:31Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-19T10:42:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-25T12:14:36Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-19T13:53:25Z",false,"COMMENTED"
"voylin","CONTRIBUTOR","","2024-03-21T22:42:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-21T23:19:43Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","","2024-03-19T11:54:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-19T11:58:42Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","","2024-03-19T12:04:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-19T13:39:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-19T13:42:19Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-03-19T21:40:46Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-06-27T18:40:32Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-06-28T08:52:01Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-07-07T15:11:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-08T05:32:15Z",false,"APPROVED"
"KoBeWi","MEMBER","With this, the option is added to menu in 3 different places.
We should somehow unify it ü§î","2024-03-19T15:19:21Z",false,"APPROVED"
"Nazarwadim","CONTRIBUTOR","","2024-03-18T17:59:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-18T18:00:36Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-18T18:39:58Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-18T18:41:58Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-18T18:56:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-18T18:58:44Z",false,"COMMENTED"
"raulsntos","MEMBER","This makes sense to me, it's a small change and seems consistent with other SDKs.
","2024-03-23T17:24:37Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-18T15:33:21Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-03-18T15:28:13Z",false,"COMMENTED"
"mhilbrunner","MEMBER","Documentation looks good to me.","2024-04-06T17:14:13Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-04-26T07:22:37Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-07-05T19:50:19Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-08-27T09:45:28Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-27T12:37:00Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-27T12:37:36Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I hope @dalexeev knows the documentation part is fine by me, too.","2024-08-27T19:52:56Z",false,"APPROVED"
"reduz","MEMBER","","2024-09-06T08:23:40Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-18T14:34:53Z",false,"COMMENTED"
"vnen","MEMBER","LGTM. I'm just not sure if the error message is the most clear.","2024-04-29T14:42:48Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-18T14:33:42Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-01T07:54:18Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","Have successfully tested the MRP with this PR rebased on 89850d553.
Code changes make sense to me.","2024-04-29T20:20:59Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-18T12:40:22Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-19T13:44:26Z",false,"APPROVED"
"vnen","MEMBER","Looks good, just need to remove the `TODO` comments.","2024-04-24T12:49:04Z",false,"CHANGES_REQUESTED"
"vnen","MEMBER","LGTM. Thanks!","2024-04-25T23:00:20Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-03-19T03:54:19Z",false,"APPROVED"
"Nazarwadim","CONTRIBUTOR","","2024-03-18T10:35:57Z",false,"APPROVED"
"kleonc","MEMBER","","2024-03-20T16:53:04Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-03-18T09:14:38Z",false,"COMMENTED"
"exodrifter","NONE","","2024-03-18T09:19:02Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-20T09:28:32Z",false,"COMMENTED"
"exodrifter","NONE","","2024-03-20T10:07:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-20T10:07:59Z",false,"COMMENTED"
"exodrifter","NONE","","2024-03-20T10:16:12Z",false,"COMMENTED"
"exodrifter","NONE","","2024-03-20T10:16:17Z",false,"COMMENTED"
"exodrifter","NONE","","2024-03-20T10:16:21Z",false,"COMMENTED"
"exodrifter","NONE","","2024-03-20T10:16:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-20T10:18:21Z",false,"COMMENTED"
"exodrifter","NONE","","2024-03-20T10:22:05Z",false,"COMMENTED"
"AThousandShips","MEMBER","This looks good to me but the need and approach would need a look by the core team :)","2024-03-20T10:22:38Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-03-20T10:30:16Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-20T10:31:58Z",false,"COMMENTED"
"exodrifter","NONE","","2024-03-20T17:31:22Z",false,"COMMENTED"
"KoBeWi","MEMBER","This also fixes issues in some built-in nodes, like Polygon2D which has its own `texture` section. Not sure if it was reported.","2024-03-20T14:19:54Z",false,"APPROVED"
"kleonc","MEMBER","","2024-03-18T08:28:43Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-03-18T08:36:06Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-03-18T11:15:58Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-18T11:19:57Z",false,"COMMENTED"
"MewPurPur","CONTRIBUTOR","Title of the issue could also be renamed as now it's 3 places.","2024-03-18T12:42:10Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` 214968243c442c0fdcbdfef23943c1547aeafdbc), it works as expected.

Rounding to 3 decimals is sufficient to represent any 32-bit color (e.g. in the form of `#rrggbbaa`), so it's fine.","2024-05-21T23:53:27Z",false,"APPROVED"
"TokageItLab","MEMBER","Looks good in functionality, but documentation seems to be lacking so needs to add it. ","2024-03-18T06:13:16Z",false,"APPROVED"
"fire","MEMBER","","2024-03-18T13:52:10Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Amen","2024-03-20T09:55:36Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-18T09:16:40Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-10T20:39:59Z",false,"COMMENTED"
"markdibarry","CONTRIBUTOR","","2024-04-10T20:44:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-10T20:57:48Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-14T16:41:23Z",false,"APPROVED"
"Paulb23","MEMBER","","2024-03-25T17:51:14Z",false,"APPROVED"
"kleonc","MEMBER","","2024-03-17T18:28:49Z",false,"APPROVED"
"Nazarwadim","CONTRIBUTOR","","2024-03-17T18:34:29Z",false,"APPROVED"
"Geometror","MEMBER","","2024-03-21T15:44:45Z",false,"APPROVED"
"Geometror","MEMBER","","2024-03-20T14:26:01Z",false,"COMMENTED"
"Maran23","CONTRIBUTOR","","2024-04-05T17:40:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-05T18:13:10Z",false,"APPROVED"
"Maran23","CONTRIBUTOR","","2024-04-05T19:00:17Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-03-18T06:04:49Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-04-06T17:18:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-05T14:47:27Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-17T09:05:09Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-03-24T00:47:32Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-17T09:02:30Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-05-06T08:28:37Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-06T08:34:52Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good, and I confirmed this fixes the MRP.","2024-05-06T08:37:19Z",false,"APPROVED"
"kleonc","MEMBER","","2024-05-06T12:43:53Z",false,"APPROVED"
"aXu-AP","CONTRIBUTOR","","2024-05-06T13:08:37Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-18T06:10:29Z",false,"APPROVED"
"Calinou","MEMBER","","2024-05-13T01:00:00Z",false,"COMMENTED"
"caimantilla","NONE","","2024-05-13T01:03:21Z",false,"COMMENTED"
"caimantilla","NONE","","2024-05-21T05:43:35Z",false,"COMMENTED"
"fire","MEMBER","","2024-03-17T15:32:18Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-17T08:52:38Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-03-17T19:03:00Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-17T19:10:02Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-17T19:21:46Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-17T19:29:42Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-17T19:38:20Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-17T19:46:48Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-18T14:04:44Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-20T09:43:07Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-20T09:55:43Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-20T10:01:56Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-04-11T14:15:59Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-11T15:31:28Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-04-11T15:34:29Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-04-11T21:17:59Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-04-12T07:31:12Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","Looks fine!

I'm not very experienced with the MacOS and Windows stuff but no obvious red flags appear.

I can also see, if I understand correctly, that you used the native popup menu API for MacOS, which is great!","2024-04-30T18:00:37Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-30T18:04:43Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/29b3d9e9e538f0aa8effc8ad8bf19a2915292a89), it works as expected. This noticeably improves smoothness, especially on near-parallel lines. Image sharpness isn't noticeably affected by this PR.

**Testing project:** [test_pr_89582.zip](https://github.com/godotengine/godot/files/14856438/test_pr_89582.zip)
*This uses the approach described in https://github.com/godotengine/godot/pull/89582#issuecomment-2004391226 for testing.*

No AA | FXAA Before | FXAA After *(this PR)*
-|-|-
![No AA](https://github.com/godotengine/godot/assets/180032/bd965666-c6fe-4139-abd9-0b7714fba985) | ![FXAA Before](https://github.com/godotengine/godot/assets/180032/a7c8bdbb-54f1-4012-8f4b-6f41a40fc6c9) | ![FXAA After](https://github.com/godotengine/godot/assets/180032/1c49107e-d3b8-449b-8760-e74f292d316d)

4√ó zoom:

No AA | FXAA Before | FXAA After *(this PR)*
-|-|-
![No AA](https://github.com/godotengine/godot/assets/180032/961134fc-2b07-4061-a459-1a939c97bda8) | ![FXAA Before](https://github.com/godotengine/godot/assets/180032/e0200c39-1486-4ee6-b9a8-f517053d0a30) | ![FXAA After](https://github.com/godotengine/godot/assets/180032/0823eeb7-f6f9-4a8f-8268-75fd75a59228)

Comparisons between the new FXAA and Tesseract's FXAA on Medium and Ultra quality:

FXAA PR | Tesseract FXAA Medium | Tesseract FXAA Ultra
-|-|-
![FXAA After](https://github.com/godotengine/godot/assets/180032/1c49107e-d3b8-449b-8760-e74f292d316d) | ![Tesseract FXAA Medium](https://github.com/godotengine/godot/assets/180032/100d233a-7a7f-417b-9c4f-a5b8fc5538c6) | ![Tesseract FXAA Ultra](https://github.com/godotengine/godot/assets/180032/c68694f7-2aa2-4c34-a1fa-561780cacae9)

4√ó zoom:

FXAA PR | Tesseract FXAA Medium | Tesseract FXAA Ultra
-|-|-
![FXAA PR](https://github.com/godotengine/godot/assets/180032/4356e402-1e47-4fda-a2ca-82ae1dd99222) | ![Tesseract FXAA Medium](https://github.com/godotengine/godot/assets/180032/629fbe17-7130-4307-9df9-3985e0795ce5) | ![Tesseract FXAA Ultra](https://github.com/godotengine/godot/assets/180032/3d06e633-c3e0-4a4f-be43-a6e1ae2fbf40)
","2024-04-03T18:05:33Z",false,"APPROVED"
"AThousandShips","MEMBER","Still needs proper attribution, this is not in line with the linked repo's license (i.e. regardless of the source being valid this copy of *it* isn't)

I'll defer to the legal people on he legality of this, and wash my hands of it, I'm not convinced but I defer to them

Though I'd say to check with Nvidia properly before merging, though I'd still prefer basing our version on one with proper attributation to Nvidia, like the Blender one, as this one isn't compliant with the license seen elsehwere as it doesn't reference the Nvidia license anywhere","2024-04-03T18:06:46Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-04-06T17:49:38Z",false,"DISMISSED"
"AThousandShips","MEMBER","","2024-06-22T17:26:22Z",false,"COMMENTED"
"rburing","MEMBER","Makes sense.","2024-03-16T18:40:28Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-16T18:48:01Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Thanks for tracking the issue!","2024-03-20T17:35:57Z",false,"APPROVED"
"rburing","MEMBER","Looks good to me.","2024-03-16T16:49:49Z",false,"APPROVED"
"fire","MEMBER","","2024-03-30T12:11:53Z",false,"APPROVED"
"aylamz","NONE","","2024-03-16T17:17:59Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-16T17:22:35Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-16T20:04:00Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-07T11:40:55Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-05-07T11:42:38Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-07T11:47:33Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-05-07T17:51:23Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-05-07T17:51:30Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-07T09:36:21Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-16T15:04:41Z",false,"COMMENTED"
"markdibarry","CONTRIBUTOR","","2024-03-16T15:07:43Z",false,"COMMENTED"
"clayjohn","MEMBER","Seems fine to me, but I am not very familiar with the ParallaxLayer code","2024-06-14T22:09:53Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-16T12:22:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-16T13:34:40Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-16T13:40:05Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-16T16:29:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-16T16:30:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-16T17:13:07Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

This also makes textures sharper as they no longer need to be resized by a very slight amount (which affected sharpness negatively).

**Testing project:** [test_pr_89567.zip](https://github.com/user-attachments/files/15893535/test_pr_89567.zip)

Before | After
-|-
![Before](https://github.com/godotengine/godot/assets/180032/f648ced3-ea79-4f47-abca-3f8f923c9822) | ![After](https://github.com/godotengine/godot/assets/180032/542b96e7-d973-411b-9758-442a066890c5)

## Benchmark

Using an optimized editor build (`optimize=speed lto=full`). Import times are measured with `--verbose` CLI output.

When importing a 4K texture set such as [this one](https://ambientcg.com/view?id=Bricks091), this is the time taken to import 6 textures in 4095√ó4095 size with VRAM compression:

Before | After *(this PR)*
-|-
5.31s | 2.53s (2.1√ó faster)

With this PR, the import speed of non-multiple of 4 textures is now pretty much identical to the import time of the 4096√ó4096 textures (which have a size that's a multiple of 4).

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 39)
</details>","2024-06-18T23:43:42Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-16T11:03:47Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-16T11:53:15Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-03-16T14:04:28Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","From my testing this works fine, but it'd be good to understand the use-case for this change.","2024-03-29T18:24:58Z",false,"APPROVED"
"kitbdev","CONTRIBUTOR","","2024-03-17T22:12:18Z",false,"COMMENTED"
"smnast","CONTRIBUTOR","","2024-03-18T01:38:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-19T09:40:14Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","Tested and it does work after my PR, I can apply changes like that when I rebase (assuming this one gets merged first).
Also I think we can simplify things a bit.","2024-03-29T15:35:04Z",false,"COMMENTED"
"smnast","CONTRIBUTOR","","2024-03-29T20:00:58Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-03-29T20:37:24Z",false,"COMMENTED"
"smnast","CONTRIBUTOR","","2024-03-29T21:31:20Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-09-21T18:22:51Z",false,"COMMENTED"
"smnast","CONTRIBUTOR","","2024-09-21T21:06:38Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","Looks good to me.
You can hit Resolve on all of my previous review comments, since I can't. (Only those with write access can.)","2024-09-21T21:23:39Z",false,"APPROVED"
"Paulb23","MEMBER","Changes looks good, would be ideal to add a unit test to capture this behaviour. ","2024-03-25T17:59:19Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-03-26T16:07:43Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-05-15T15:01:25Z",false,"COMMENTED"
"Paulb23","MEMBER","","2024-07-30T20:08:40Z",false,"APPROVED"
"akien-mga","MEMBER","Makes sense.","2024-03-16T07:14:59Z",false,"APPROVED"
"paulloz","MEMBER","Thanks for this üôè  
It has already been heavily discussed on Rocket.chat. Looks fine for me. I'm not sure that we usually do expression-bodied methods, but I don't really have a strong opinion. ~~I think you missed a few of `real_t` during the sweep. They're highlighted in other comments.~~ Edit: I'm simply bad at reading.","2024-03-22T00:06:17Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-03-22T03:04:16Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-03-23T08:49:49Z",false,"APPROVED"
"raulsntos","MEMBER","We discussed this to death and I think this PR represents the conclusion we reached, thank you so much for the work and being so patient.

Also, since this changes the behavior of these methods I'll add the `breaks compat` label so we remember to document it in the migration guide of whatever version this lands on.","2024-03-23T17:21:28Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-16T00:06:04Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-03-16T01:28:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-16T02:36:40Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-03-16T02:59:42Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-03-16T05:50:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-16T21:45:55Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-16T21:46:39Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-03-15T23:59:39Z",false,"COMMENTED"
"brno32","CONTRIBUTOR","","2024-03-16T00:20:00Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-03-16T00:28:21Z",false,"APPROVED"
"Paulb23","MEMBER","Small note inline otherwise looks good.","2024-03-25T18:18:13Z",false,"COMMENTED"
"brno32","CONTRIBUTOR","","2024-03-25T21:40:04Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-03-26T00:17:29Z",false,"COMMENTED"
"brno32","CONTRIBUTOR","","2024-03-26T00:50:45Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-15T23:21:54Z",false,"APPROVED"
"fire","MEMBER","","2024-03-16T04:16:40Z",false,"APPROVED"
"fire","MEMBER","","2024-03-16T04:17:12Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-15T20:54:30Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-15T20:12:27Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/a7b860250f305f6cbaf61c30f232ff3bbdfdda0b), there are issues with the gizmo shape not being updated when you change the **Custom AABB** property in the editor:

https://github.com/godotengine/godot/assets/180032/45a95810-54b9-4bf6-a90e-601f0c3ea266

The gizmo only updates if the mesh resource is changed or if you deselect and reselect the node.

The error message spam when changing **Custom AABB** if no mesh is assigned also applies to `master`, so it's not specific to this PR: https://github.com/godotengine/godot/issues/86369#issuecomment-2045661967","2024-04-09T16:40:32Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/3b1806182a3564736ad64793b203c2c13c251f56), it works as expected.

Note to others: The gizmo is only displayed when the node is selected, so it won't be too intrusive in complex 3D scenes.","2024-04-17T23:29:13Z",false,"APPROVED"
"Calinou","MEMBER","","2024-04-17T23:35:57Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-04-17T23:37:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-18T08:31:05Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-18T16:28:26Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great to me! I just left a suggestion to fill in the docs. We like to have documentation whenever we add a new feature. 

The final step before merging is to squash all the commits together so that the whole PR only contains 1 big commit with all your changes. We like to merge one commit at a time to keep the git history clean and navigable. 

If you don't know how to do that, we have a helpful tutorial in the official documentation https://docs.godotengine.org/en/latest/community/contributing/pr_workflow.html#the-interactive-rebase","2024-04-18T16:35:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-18T16:36:38Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-04-18T16:36:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-15T19:26:13Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-03-15T19:26:34Z",false,"COMMENTED"
"fire","MEMBER","","2024-03-16T04:16:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-23T23:47:14Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-15T18:38:13Z",false,"COMMENTED"
"clayjohn","MEMBER","Great work! Thank you for fixing this

Code changes look good to me, given the nature of the changes, I trust that they are good given that they are passing CI

This should be an easy cherrypick too","2024-03-15T22:24:53Z",false,"APPROVED"
"BalmundSM","NONE","","2024-03-18T16:59:23Z",false,"COMMENTED"
"sullyscience","CONTRIBUTOR","","2024-03-18T17:22:24Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-03-21T15:53:28Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-09-09T14:01:40Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-09-09T14:31:05Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-16T08:42:33Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-05-20T18:07:45Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-09-22T17:16:30Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-22T17:19:20Z",false,"COMMENTED"
"LBranco27","NONE","
https://github.com/godotengine/godot/assets/33069140/b6df1e3d-565f-40de-bb33-c5408e95318e

","2024-06-21T16:25:14Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great! Sorry this slipped through the cracks. ","2024-06-21T19:08:09Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","","2024-03-15T23:58:21Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","As noted in https://github.com/godotengine/godot/issues/24589#issuecomment-1996061396
exposing this makes sense to me. Implementation looks correct.","2024-03-17T00:16:44Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-15T16:36:10Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-15T15:04:01Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-17T20:59:01Z",false,"APPROVED"
"akien-mga","MEMBER","Makes sense to me.","2024-03-15T15:05:10Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-15T12:06:39Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-03-15T12:52:53Z",false,"COMMENTED"
"dustdfg","CONTRIBUTOR","","2024-03-15T13:00:26Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-15T14:32:25Z",false,"COMMENTED"
"dustdfg","CONTRIBUTOR","","2024-03-15T14:46:23Z",false,"COMMENTED"
"dustdfg","CONTRIBUTOR","","2024-03-15T18:09:50Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me.","2024-03-15T09:58:55Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-15T10:06:49Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-15T09:31:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-15T08:35:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-15T08:36:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-15T08:40:30Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

It won't do anything if the Output tab isn't currently visible though (e.g. if no bottom panel is opened or if you're on the Debugger bottom panel), but this is probably not a big issue.

In the future, we could consider implementing this action in the debugger protocol so you could press <kbd>Ctrl + Alt + K</kbd> while the running project is focused (this is how <kbd>F8</kBD> works while the project window is focused).","2024-03-15T17:21:34Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","","2024-03-16T22:29:13Z",false,"APPROVED"
"Rindbee","CONTRIBUTOR","Yes, now it is correct. ","2024-03-15T06:20:04Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","","2024-03-15T08:26:09Z",false,"COMMENTED"
"Rindbee","CONTRIBUTOR","","2024-03-15T08:53:19Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-15T08:54:15Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-15T09:30:48Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-14T22:58:54Z",false,"COMMENTED"
"Chubercik","CONTRIBUTOR","","2024-03-14T23:17:03Z",false,"COMMENTED"
"Chubercik","CONTRIBUTOR","","2024-03-14T23:18:20Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","","2024-03-14T23:32:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM, makes sense","2024-03-14T20:29:06Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-04-08T20:12:32Z",false,"APPROVED"
"clayjohn","MEMBER","> Would like to clarify that it works as expected, also added docs to it, which may be the reason why this hasn't been merged after a month but I am not a clairvoyant.

Sorry for the lack of comment. Most of us who regularly review PRs were away for most of the last month and we have not caught up on the PR backlog. You are not being ignored intentionally","2024-04-08T23:29:26Z",false,"APPROVED"
"KoBeWi","MEMBER","I can confirm it prevents Godot from taking infinite RAM in my case, but I can't say if the engine is doing anything else than printing errors forever. But at least it doesn't freeze the OS anymore.","2024-03-14T20:41:56Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-14T21:09:01Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-14T21:10:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-14T21:11:14Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-14T21:06:51Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-14T18:47:58Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-14T18:56:14Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-14T18:56:49Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-04-26T23:59:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-27T07:39:33Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-27T14:58:06Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-05-02T03:07:20Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-02T04:32:32Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-05-02T21:12:11Z",false,"COMMENTED"
"clayjohn","MEMBER","Seems like a nice improvement!","2024-05-02T21:13:00Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-14T16:40:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-14T16:52:26Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-03-14T17:13:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-14T17:36:22Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","I think making `buildsystem` the de-facto ""default"" environment makes the most sense. This file would fall under their jurisdiction, so any cases in the future where something isn't accounted for would alert them & subsequently let them update this file as needed.

~~Also, after reading their [documentation](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners#codeowners-file-location), it looks like this file can be moved to the `.github` folder. Maybe this PR could do that as well to help reduce root bloat, but it isn't strictly necessary.~~","2024-07-26T14:39:47Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-26T14:54:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-25T14:20:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-25T14:47:45Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-09-26T16:53:56Z",false,"APPROVED"
"AThousandShips","MEMBER","Style looks good, and trusting you on the factual statements though generally I know them to be valid","2024-03-14T15:23:31Z",false,"APPROVED"
"adamscott","MEMBER","","2024-03-14T14:43:49Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-14T14:59:52Z",false,"APPROVED"
"Calinou","MEMBER","","2024-03-14T17:49:58Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-14T14:14:00Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-03-14T14:14:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-14T14:18:07Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-03-14T14:23:19Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-03-14T14:23:37Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-14T14:58:05Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-14T14:58:55Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-14T14:58:58Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","Looks fine!","2024-03-14T15:12:23Z",false,"APPROVED"
"adamscott","MEMBER","","2024-03-14T15:56:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-14T11:02:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-14T11:08:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-14T11:08:50Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-03-14T11:12:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-14T11:14:16Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-03-14T11:54:50Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-03-14T12:18:48Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM, the signal seems to be used in only one place, and isn't exposed, so the change to the signal is safe

The protocol seems to line up with this change, but would be good to get a second pair of eyes on it too","2024-03-14T12:36:25Z",false,"APPROVED"
"rsubtil","CONTRIBUTOR","","2024-03-14T14:34:24Z",false,"COMMENTED"
"rsubtil","CONTRIBUTOR","","2024-03-14T14:34:30Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-03-14T12:32:35Z",false,"COMMENTED"
"vnen","MEMBER","","2024-04-09T17:40:21Z",false,"COMMENTED"
"vnen","MEMBER","","2024-04-15T11:43:18Z",false,"APPROVED"
"AThousandShips","MEMBER","These are not valid changes","2024-03-14T09:30:16Z",false,"CHANGES_REQUESTED"
"bruvzg","MEMBER","","2024-03-14T10:16:29Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-03-15T04:24:27Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-05-29T09:35:44Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-14T11:07:21Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-03-14T16:33:08Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-14T18:05:30Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-03-14T18:21:30Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-14T18:25:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-14T18:26:18Z",false,"APPROVED"
"rburing","MEMBER","Thanks! This is a band-aid on a wider editor issue, but this fix is fine for now.","2024-03-14T11:06:20Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

Comparison between default and Black (OLED) theme preset button size (the border is clickable). It's exactly the same as expected:

![button_size_comparison webp](https://github.com/godotengine/godot-proposals/assets/180032/b50667de-dcfd-49ab-a85d-889fc656ad70)","2024-03-14T18:21:06Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","I think it's good. we should make sure the user does not select Trimesh if the body_type is Dynamic. possibly dynamically changing the default property value in that case.","2024-05-03T16:47:52Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","LGTM, indeed a good idea to get this in early so we don't back ourselves into a corner.","2024-03-14T00:42:09Z",false,"APPROVED"
"rburing","MEMBER","","2024-03-13T22:35:59Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-13T19:10:13Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-03-13T19:57:20Z",false,"COMMENTED"
"iltenahmet","CONTRIBUTOR","","2024-03-13T20:21:49Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-03-13T20:28:56Z",false,"COMMENTED"
"iltenahmet","CONTRIBUTOR","","2024-03-13T20:51:22Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-03-13T20:52:52Z",false,"COMMENTED"
"iltenahmet","CONTRIBUTOR","","2024-03-13T21:17:58Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-03-13T23:15:45Z",false,"COMMENTED"
"aaronfranke","MEMBER","I left one comment, and the commits should be squashed, and then this is a good improvement.","2024-03-13T23:17:38Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-03-14T00:10:08Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-13T19:05:00Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-03-13T19:28:40Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

I much prefer Ninja's single-line output as well (with subsequent compilation lines replacing previous lines), so this is also an upgrade from an usability perspective.

I agree it makes sense to push users to run Ninja directly to avoid the cost of spawning a Python interpreter and SCons every time you want to compile Godot. CMake has the luxury of having a fast `cmake --build` command that redirects to `ninja` in a few milliseconds since it's a C++ program, but we don't :slightly_smiling_face: 

A small issue I noticed is that if you run SCons and Ninja once, then run SCons with no changes and run ninja again, Ninja will check 100+ files instead of exiting early. I'm not sure if this can be fixed though.

```bash
scons
ninja  # Initial build.
ninja  # Null build (very fast).
scons
ninja  # This one takes longer than the null build,
       # though not as long as the initial build.
```

## Benchmark

**OS:** Fedora 39 (GCC 13.2.1, ccache 4.8.2, mold 2.4.0)
**CPU:** Intel Core i9-13900K (`performance` governor)
**SSD:** Solidigm P44 Pro 2 TB

SCons command line:

```
scons -j32 platform=linuxbsd linker=mold optimize=none fast_unsafe=yes progress=no debug_symbols=yes builtin_embree=no builtin_enet=no builtin_freetype=no builtin_graphite=no builtin_harfbuzz=no builtin_libogg=no builtin_libpng=no builtin_libtheora=no builtin_libvorbis=no builtin_libwebp=no builtin_mbedtls=no builtin_miniupnpc=no builtin_pcre2=no builtin_zlib=no builtin_zstd=no scu_build=all
```

All tests done with a warm CCache to isolate buildsystem performance.

### Null build

SCons:

```
  Time (mean ¬± œÉ):      1.841 s ¬±  0.016 s    [User: 1.662 s, System: 0.168 s]
  Range (min ‚Ä¶ max):    1.820 s ‚Ä¶  1.871 s    10 runs
```

Ninja:

```
  Time (mean ¬± œÉ):     104.2 ms ¬±   3.8 ms    [User: 79.8 ms, System: 23.3 ms]
  Range (min ‚Ä¶ max):    98.4 ms ‚Ä¶ 110.3 ms    27 runs
```

### main.cpp change (`sd '//' '// ' main/main.cpp`[^1]):

[^1]: https://github.com/chmln/sd

SCons:

```
  Time (mean ¬± œÉ):      4.864 s ¬±  0.035 s    [User: 4.834 s, System: 0.616 s]
  Range (min ‚Ä¶ max):    4.808 s ‚Ä¶  4.924 s    10 runs
```

Ninja:

```
  Time (mean ¬± œÉ):      3.174 s ¬±  0.031 s    [User: 2.648 s, System: 0.237 s]
  Range (min ‚Ä¶ max):    3.090 s ‚Ä¶  3.199 s    10 runs
```

### editor_node.h change (`sd '//' '// ' editor/editor_node.h`[^1])

SCons:

```
  Time (mean ¬± œÉ):      3.660 s ¬±  0.035 s    [User: 12.658 s, System: 2.558 s]
  Range (min ‚Ä¶ max):    3.618 s ‚Ä¶  3.737 s    10 runs
```

Ninja:

```
  Time (mean ¬± œÉ):      2.547 s ¬±  0.044 s    [User: 14.285 s, System: 3.283 s]
  Range (min ‚Ä¶ max):    2.504 s ‚Ä¶  2.651 s    10 runs
```","2024-03-13T19:28:52Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-03-14T04:21:29Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-14T08:06:05Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-14T08:16:54Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks great!","2024-03-15T14:58:39Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-03-15T15:04:35Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-15T15:05:44Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","Despite the above hiccups, this is still a rock-solid starting point for getting ninja officially integrated! That, and the added checks/conditionals on generated files is lovely QOL.","2024-03-30T17:34:15Z",false,"APPROVED"
"reduz","MEMBER","","2024-03-19T20:58:46Z",false,"COMMENTED"
"reduz","MEMBER","Left some notes on making the implementation more efficient","2024-03-19T21:04:30Z",false,"CHANGES_REQUESTED"
"reduz","MEMBER","","2024-03-19T21:05:39Z",false,"CHANGES_REQUESTED"
"reduz","MEMBER","","2024-03-19T21:11:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-20T11:50:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-20T11:51:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-20T12:04:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-20T13:38:59Z",false,"COMMENTED"
"reduz","MEMBER","Looks fantastic, great work!","2024-03-20T17:05:28Z",false,"APPROVED"
"clayjohn","MEMBER","This makes sense to me. A pixel shouldn't be written if it is beyond the max depth and using the pipeline to do it means that we can cull the pixel before the fragment stage is reached","2024-03-13T21:03:36Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-03-13T23:00:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-13T17:10:04Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-13T17:11:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-13T18:50:34Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-13T20:17:42Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-13T20:22:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-13T20:23:12Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-14T00:21:57Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-14T00:50:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-20T22:23:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-20T22:27:51Z",false,"COMMENTED"
"ajreckof","MEMBER","","2024-03-21T23:56:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-22T03:02:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-22T03:02:13Z",false,"APPROVED"
"ajreckof","MEMBER","","2024-03-22T03:17:31Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-13T16:51:05Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-13T16:52:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-13T16:52:41Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-13T16:57:07Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-13T16:57:36Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-13T17:00:55Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-13T17:12:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-13T18:21:08Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-13T20:13:44Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-13T20:25:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-13T20:26:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-13T13:58:10Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-13T13:58:14Z",false,"APPROVED"
"groud","MEMBER","","2024-03-13T16:05:32Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-13T16:24:40Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me.","2024-03-12T18:17:03Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","Sorry I missed this one. The algorithm for resizing, padding and smearing pixels seems correct for cases where w>2 and h>2.

I will admit I am not familiar with the w=1 and w=2 cases: I would think those also need to be padded to a multiple of 4, but maybe it is handled by basisu already so we would need to test and maybe fix separately if needed.","2024-05-01T21:06:24Z",false,"APPROVED"
"fire","MEMBER","Approving for good luck.","2024-05-01T21:49:14Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","","2024-05-02T10:08:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-12T14:49:54Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-12T14:50:02Z",false,"APPROVED"
"Repiteo","CONTRIBUTOR","","2024-03-12T15:09:08Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","Nice! As you can see from the Wayland stuff, I myself have issues using `nullptr` when interacting with C APIs.","2024-03-12T23:44:37Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-12T15:02:28Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-12T15:09:24Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-12T15:12:50Z",false,"COMMENTED"
"EIREXE","CONTRIBUTOR","","2024-03-15T14:11:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-15T14:32:26Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-12T13:57:21Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-12T12:40:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-12T12:43:27Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-12T12:45:54Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-12T13:36:24Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-12T13:38:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-12T13:38:27Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-12T13:41:19Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-12T13:56:13Z",false,"COMMENTED"
"fire","MEMBER","","2024-03-12T21:32:26Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-13T10:52:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-14T09:17:57Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-13T11:07:15Z",false,"APPROVED"
"fire","MEMBER","","2024-03-13T13:18:00Z",false,"APPROVED"
"Deozaan","NONE","","2024-03-14T08:35:58Z",false,"COMMENTED"
"Deozaan","NONE","","2024-03-14T08:40:08Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-14T18:40:34Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","My suggestions use @Deozaan 's as reference. It's worth noting there is a `tile_set` property, it's not just any **TileSet** being used here.","2024-03-14T19:11:51Z",false,"COMMENTED"
"Deozaan","NONE","","2024-03-14T19:30:15Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-12T10:04:19Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-03-13T12:24:41Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","I haven't tested it, but the current version of the PR looks good to me! It seems like a fairly straight-forward disabling of XR, and it doesn't seem like it'd cause any ""collateral damage"" :-)","2024-03-13T17:28:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-13T17:30:52Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally with Forward+ and Mobile, it mostly works as expected.

One issue I noticed is that if you try to set the value to `100` in the inspector, it'll remain at 99 and this error appears in the Output panel:

```
  ./scene/3d/reflection_probe.cpp:187 - Index p_priority = 100 is out of bounds (100 = 100).
```

There appears to be an issue with the PR's branch where the most up-to-date version of https://github.com/BastiaanOlij/godot/tree/probe_importance isn't appearing on this PR, so we still see the old `priority` name in this PR. It's an ongoing issue with GitHub: https://status.github.com","2024-03-13T00:00:36Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","","2024-03-13T00:01:32Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-03-13T01:14:10Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-03-13T01:16:57Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-03-14T18:52:33Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-14T21:16:24Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-03-18T00:41:15Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-03-18T00:43:48Z",false,"COMMENTED"
"LiterallyVoid","NONE","","2024-03-12T01:26:38Z",false,"COMMENTED"
"AeioMuch","CONTRIBUTOR","","2024-03-12T01:03:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-12T12:42:33Z",false,"COMMENTED"
"AeioMuch","CONTRIBUTOR","","2024-03-12T15:07:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-12T15:09:10Z",false,"COMMENTED"
"AeioMuch","CONTRIBUTOR","","2024-03-12T15:17:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-12T15:30:46Z",false,"COMMENTED"
"AeioMuch","CONTRIBUTOR","","2024-03-12T15:51:05Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-12T15:55:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-15T12:53:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-15T13:39:02Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-15T13:47:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-15T13:49:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-15T13:51:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-15T14:21:31Z",false,"COMMENTED"
"AeioMuch","CONTRIBUTOR","","2024-03-15T15:30:38Z",false,"COMMENTED"
"AeioMuch","CONTRIBUTOR","","2024-03-15T17:19:58Z",false,"COMMENTED"
"AeioMuch","CONTRIBUTOR","","2024-03-15T17:27:20Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-15T18:46:36Z",false,"COMMENTED"
"AeioMuch","CONTRIBUTOR","","2024-03-15T19:12:51Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-15T19:21:03Z",false,"COMMENTED"
"ajreckof","MEMBER","","2024-04-01T16:46:00Z",false,"CHANGES_REQUESTED"
"AeioMuch","CONTRIBUTOR","","2024-04-04T11:33:27Z",false,"COMMENTED"
"ajreckof","MEMBER","","2024-04-04T15:13:18Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-05T12:43:50Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-05T12:48:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-05T12:52:12Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-05T12:53:08Z",false,"COMMENTED"
"KoBeWi","MEMBER","Some more style comments, but seems fine now.","2024-04-05T12:55:28Z",false,"APPROVED"
"AeioMuch","CONTRIBUTOR","","2024-04-05T18:40:55Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-05T19:44:04Z",false,"COMMENTED"
"AeioMuch","CONTRIBUTOR","","2024-04-05T20:37:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-05T21:06:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-05T21:07:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-05T21:08:13Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-05T21:08:35Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-05T21:09:55Z",false,"COMMENTED"
"AeioMuch","CONTRIBUTOR","","2024-04-05T23:52:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-06T00:02:55Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-11T23:58:41Z",false,"APPROVED"
"Calinou","MEMBER","","2024-03-12T00:01:25Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-03-12T00:01:35Z",false,"COMMENTED"
"Calinou","MEMBER","Should be good to merge after applying suggestions.

To further clarify the difference between bouncing and reflecting, I'll look into creating comparison diagrams we can commit to the godot-docs repository and link here in a future PR.","2024-03-12T00:02:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-12T12:58:37Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-10T12:07:32Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-04-10T16:29:08Z",false,"COMMENTED"
"mhilbrunner","MEMBER","","2024-04-11T14:28:51Z",false,"COMMENTED"
"hallo1126","NONE","","2024-04-29T21:47:22Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-04-29T23:17:41Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-04-30T20:17:50Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-04-30T20:31:05Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","Lgtm, just small nitpick.","2024-03-25T04:13:19Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-04-04T02:30:32Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Looks good to me! Referring to the specific setting is definitely an improvement :-)","2024-03-11T22:36:58Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-12T09:26:30Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-12T09:26:42Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-11T20:50:34Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-11T18:16:29Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-11T18:16:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-11T18:25:23Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","I think I see the idea, that this code wishes to add an additional case to disallow continuous blending if there is no continuous RESET track but not in a force continuous blend.

When there is no RESET track for a particular value, I understand it seems to default to true, but I don't understand why it is forced to true when FORCE_CONTINUOUS is set

Anyway I'll mark it approved because I trust your judgement and I'm not sure anyone is familiar enough with the track cache to give a better review.

Basically, this is introducing additional state to the track cache, and there are more cases that set it to true than set it false, so I want to make sure it is correct.","2024-04-05T17:14:02Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-04-05T20:22:21Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-04-05T20:29:41Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-04-05T20:37:27Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-04-06T02:21:03Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-11T17:41:35Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-11T18:46:48Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-12T15:29:29Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-12T16:04:09Z",false,"DISMISSED"
"AThousandShips","MEMBER","","2024-03-12T16:05:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-12T16:05:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-12T16:07:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-12T16:15:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-11T18:06:48Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-11T14:27:38Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-11T14:27:46Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-11T14:27:55Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-11T14:28:33Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-11T14:28:42Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-11T14:28:51Z",false,"APPROVED"
"HolonProduction","MEMBER","I can confirm, that the changes solve the issue :+1:

Still the location should get set correctly as well. Otherwise we might run into sorting problems.

Besides that it would be nice to have tests to ensure this working. Would be nice if you could add them. (The whole [testing system for autocompletion](https://github.com/godotengine/godot/tree/master/modules/gdscript/tests#gdscript-autocompletion-tests), is quite new and might have some rough edges. So if you don't know how, feel free to ask, or just don't do it and I'll put the issue on my todo list.)","2024-03-12T17:39:43Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-03-14T10:28:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-14T10:29:03Z",false,"COMMENTED"
"dcaoc03","CONTRIBUTOR","","2024-03-14T18:13:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-19T15:24:02Z",false,"COMMENTED"
"HolonProduction","MEMBER","Gave it another test and seems to work well with the sorting. Code makes sense as well and the tests seem to pass. LGTM

Still needs approval from the GDScript Core team though","2024-03-19T15:45:19Z",false,"APPROVED"
"vnen","MEMBER","LGTM","2024-04-09T17:31:14Z",false,"COMMENTED"
"vnen","MEMBER","","2024-04-09T17:31:47Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","","2024-03-11T10:50:58Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-11T11:35:03Z",false,"APPROVED"
"AThousandShips","MEMBER","Confirmed building and testing works (i.e. does not introduce any regressions with debug templates and running tests)","2024-03-11T11:43:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-11T09:24:26Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-11T09:23:46Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-03-11T09:30:45Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-11T09:16:55Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good! Could you squash the commits?","2024-03-11T09:12:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-10T22:06:43Z",false,"COMMENTED"
"akien-mga","MEMBER","Seems fine. Should we then remove `run_in_subprocess` from `platform_methods` if it's no longer used?","2024-03-10T19:56:53Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","Looks fine and dandy :D","2024-03-10T20:34:49Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-10T19:09:48Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","[Yes! Yes!](https://youtube.com/watch?v=P3ALwKeSEYs) Let modern Python Prevail!","2024-03-10T19:19:53Z",false,"APPROVED"
"fire","MEMBER","","2024-03-10T13:24:04Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-03-10T13:37:10Z",false,"COMMENTED"
"fire","MEMBER","","2024-03-10T16:58:34Z",false,"COMMENTED"
"fire","MEMBER","Will take https://sketchfab.com/3d-models/shibahu-2e9dffd948f747668609a5a477daad86 and test if the blend shape sizes are reduced.","2024-03-10T18:33:46Z",false,"COMMENTED"
"fire","MEMBER","","2024-03-11T15:27:17Z",false,"COMMENTED"
"fire","MEMBER","","2024-03-11T15:28:11Z",false,"COMMENTED"
"fire","MEMBER","","2024-03-11T15:30:01Z",false,"COMMENTED"
"fire","MEMBER","Please resolve the commentary items and I think it's good to go.","2024-03-11T15:36:17Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-11T17:58:59Z",false,"COMMENTED"
"fire","MEMBER","Here's a rewrite of the explanation if it's easier to understand.

We have identified a bug in Godot's GLTF exporter. The issue is with the output of blend shape vertex and normal, as well as the subsequent calculations during import. Here's an illustration of the problem:

```python
# Output
blend shape vertex: (-0.5,0,0)
normal: (0.05, 0, 0.99)

# During import
normal = (0,0,1) + (0.05, 0, 0.99) = (0.05,0,1.99)

# After normalization
result = (0.025,0,0.995)
```

The result of this process is that the normal appears less pronounced than it should be. This effect is subtle and can be difficult to detect, as it only applies to certain blend shapes under specific lighting conditions. We need to address this bug to ensure accurate representation of normals in all scenarios.","2024-03-14T01:29:55Z",false,"APPROVED"
"fire","MEMBER","Needs to pass cicd but looks good. We discussed the problem on Discord.","2024-03-10T12:20:16Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-10T19:12:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-10T10:29:00Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-03-10T08:41:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-10T16:49:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-10T16:51:24Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-29T10:52:19Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-29T09:47:02Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-05-29T10:04:29Z",false,"COMMENTED"
"KoBeWi","MEMBER","For some reason I can't reproduce the crash on master ü§î
The fix looks fine, assuming it's still relevant.","2024-05-29T11:12:54Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-10T10:30:32Z",false,"APPROVED"
"fire","MEMBER","","2024-03-10T12:22:34Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-03-10T13:20:43Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-03-11T21:08:38Z",false,"COMMENTED"
"frkntlr","NONE","The specular value that appears in the godot material appears as 0.92. The value in Blender is 0.862205. It does not take the part other than 3 digits in the value and rounds the number. It seems to be valid not only for specular but also for other values. You can understand from the pictures I attached. 

When I try to open the glb file via blender again. It converts the Specular value to 0.5. 

![resim](https://github.com/godotengine/godot/assets/14142761/54996dea-9d76-49fc-930e-30ac041904fb)![resim](https://github.com/godotengine/godot/assets/14142761/25bb1bc3-ef64-49d1-b302-feabfa5365c1)




","2024-03-12T02:41:46Z",false,"CHANGES_REQUESTED"
"fire","MEMBER","","2024-08-17T17:24:45Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-10-10T04:37:14Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-03-10T09:42:35Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-10T10:20:50Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-10T22:47:00Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-03-11T01:50:49Z",false,"COMMENTED"
"fire","MEMBER","We updated from upstream.","2024-03-10T12:24:19Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-03-09T22:23:24Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-09T20:49:25Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","nice","2024-03-09T21:12:05Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-09T20:08:58Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-09T20:11:56Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-09T20:13:29Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-03-09T20:13:55Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-09T20:18:52Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-03-09T20:18:52Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-09T20:19:03Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-03-09T20:24:03Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-09T20:38:16Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-09T21:02:03Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-09T19:41:19Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-09T19:49:36Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-03-09T19:42:27Z",false,"COMMENTED"
"pohy","CONTRIBUTOR","","2024-03-09T19:49:25Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-09T19:52:18Z",false,"COMMENTED"
"pohy","CONTRIBUTOR","","2024-03-09T19:58:14Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-09T20:00:44Z",false,"COMMENTED"
"pohy","CONTRIBUTOR","","2024-03-09T20:06:56Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-09T20:13:06Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-09T19:10:19Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-09-24T15:06:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-09-24T15:07:45Z",false,"COMMENTED"
"Calinou","MEMBER","Code looks good to me at a glance. Could you look into rebasing this on top of `master`?

PS: Is there much use in exposing `Object` in the list of types in the dropdown? As far as I know, you can't give it any useful value directly in the inspector.","2024-09-24T15:07:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T19:32:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-09-24T19:33:22Z",false,"COMMENTED"
"fire","MEMBER","I think this is a good feature. Did not review the code in depth.","2024-03-09T17:08:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-09T20:23:03Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Sure

I'd give it `check_collision` but keywords are a bit weird right now when matching for the same keyword.","2024-03-09T16:38:33Z",false,"APPROVED"
"raulsntos","MEMBER","Looks good, thanks!","2024-03-09T19:18:13Z",false,"APPROVED"
"mhilbrunner","MEMBER","LGTM. Needs a rebase though :(","2024-04-06T17:31:19Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-09T20:27:19Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-09T21:16:48Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-09T21:00:40Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","","2024-03-09T14:55:04Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-09T14:57:33Z",false,"COMMENTED"
"Chubercik","CONTRIBUTOR","","2024-03-09T15:03:00Z",false,"COMMENTED"
"bruvzg","MEMBER","Exactly the same code is used in the `TextMesh` and by `Font` to get the default font, so these might need the same change, but I have no idea if this is a correct way to fix it.","2024-03-09T15:52:26Z",false,"COMMENTED"
"Chubercik","CONTRIBUTOR","","2024-03-09T20:42:14Z",false,"APPROVED"
"KoBeWi","MEMBER","The reason why it works is that the global theme context in editor does not contain project theme:
https://github.com/godotengine/godot/blob/0ace0a129284ffc6646b199699c1607a316fcec0/scene/theme/theme_db.cpp#L278-L280
You are pushing it to front of the iterated theme list, so the Label3D checks it and finds the font (`get_font()` will always return something if a default font is assigned).

btw the `get_fallback_theme()` code below is most likely dead, as fallback theme is the same as the last theme in the List above.","2024-03-09T21:54:58Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-09T09:17:58Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","Good catch! I think that logic might've been something left over by the development of the new tablet handling stuff, although I can't remember more details unfortunately.","2024-03-09T10:45:48Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","","2024-03-09T14:56:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-09T09:15:24Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","I'm pretty sure that this should make no practical difference. That said, I suppose that this is more correct.","2024-03-09T10:47:12Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-09T10:51:55Z",false,"APPROVED"
"fire","MEMBER","Seems like a library upgrade and a stable release.

@bruvzg Might want to look, but it seems low risk.","2024-03-10T17:13:18Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-10T17:18:00Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-11T13:00:01Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-03-09T07:58:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-06-11T07:54:12Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-08T21:57:34Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-03-08T22:15:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-08T22:16:03Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-08T22:25:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-08T22:27:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-09T09:24:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-09T09:45:14Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-09T09:54:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-09T09:56:24Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-09T09:58:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-09T10:00:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM

Worth doing a future pass to see if it's something to make a debug only check, but generally we don't make that distinction unless it's very development side, if it's possible without weird side effects it'd be worth considering, but since the check is so cheap I don't think it's worth evaluating on it's own, maybe a future sweep for different checks would be something to consider ","2024-03-09T10:35:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-09T21:13:48Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-09T21:16:09Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-09T21:45:44Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-09T21:47:42Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-09T21:52:03Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-09T21:52:55Z",false,"APPROVED"
"AThousandShips","MEMBER","Re-confirming, let's take a look later at a standardized and low-clutter way to convey where errors occur as per the suggestions above, but looks good just as a cleanup","2024-03-10T08:53:11Z",false,"APPROVED"
"kleonc","MEMBER","","2024-03-10T15:45:49Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","The changes to Camera2D and Camera3D are as far as I can tell extensions to the Viewport cullmask.
So perhaps it could be an idea to split this PR up into two:
1. Introduce in a first step a cullmask to Viewport, so that we can get feedback about this feature from the community
2. If there is additional demand for detailed per-camera handling, we might go the full way of this PR.
","2024-03-08T21:58:09Z",false,"COMMENTED"
"BMagnu","CONTRIBUTOR","","2024-03-08T22:14:57Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-09T12:37:54Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","I believe, the implementation is headed in the right direction.
The proposal however did not yet attract any upvotes, so I have slight reservations, if this feature is needed by the community.","2024-04-03T08:21:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T21:13:54Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-08T16:26:15Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-03-08T16:26:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-08T16:27:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-08T16:36:14Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-08T16:37:42Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-03-08T16:48:24Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-03-08T16:49:16Z",false,"COMMENTED"
"yosoyfreeman","NONE","","2024-03-09T15:06:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-08T16:33:19Z",false,"COMMENTED"
"YeldhamDev","MEMBER","> It might even make sense to parse the whole instanced scene too

I would recommend against that, since it could lead to parsing of unwanted strings. :wink:

Overall, nice job!","2024-03-08T17:26:21Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-08T17:28:38Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-08T18:09:03Z",false,"COMMENTED"
"akien-mga","MEMBER","Code changes look good to me.

Only question is whether there's a risk of having too big a queue which could cause frame drops of the Godot process due to the `while` loop? If so, do we need some threshold to process a reasonable amount of messages per frame instead of all of them?","2024-03-08T15:50:13Z",false,"APPROVED"
"akien-mga","MEMBER","Code changes seem simple enough, so if users confirm this fixes the issue, this should be good to merge (and I'll cherry-pick it for 4.2.2 and 4.1.4).","2024-03-08T22:15:09Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-08T12:15:41Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-08T12:17:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-08T12:18:29Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-08T12:35:13Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-08T12:39:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-08T12:39:41Z",false,"APPROVED"
"DarioSamo","CONTRIBUTOR","LGTM. For the record I haven't actually modified the code relevant to this before so I could be wrong (I've modified the lightmap baker but not the part that uses the lightmap during rendering), but the math makes sense to me.","2024-03-08T22:54:11Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","This can do for now.

Although https://github.com/godotengine/godot/pull/69451 would almost supersede this PR with another example outright in the decade it gets merged.","2024-03-08T12:02:46Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-08T12:06:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-08T14:08:15Z",false,"COMMENTED"
"donn-xx","NONE","","2024-03-08T14:36:09Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-03-08T18:40:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-08T18:41:32Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T23:47:03Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-09T08:26:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-09T08:36:20Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-09T21:09:17Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","I gave a quick look.

Bunch of nitpicks:

 - While there are some `disable_*` options, I think that our general direction nowadays is to name the option like the feature and default it to `True`. So, I'm inclined to say that we should name this one `scripting` and thus also name the `#define` as `SCRIPTING_ENABLED`

- I wonder if instead of hacking inside the `ScriptServer` if we might directly get rid of it wholesale.

- There are a bunch of conditions that are split into another line due to the `#ifndef` directives. I don't think that it's allowed as per our code style, so a different solution should probably be taken.

**That said, it does not look like there's consensus on this feature yet, so I warmly recommend to wait for it before working further on this PR**","2024-03-13T00:19:34Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T09:37:35Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Aah, roger that.","2024-03-08T09:09:06Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Docs are just fine now, can't speak on implementation","2024-03-08T09:26:59Z",false,"APPROVED"
"akien-mga","MEMBER","Code looks good.","2024-03-08T09:35:37Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-05-02T14:39:04Z",false,"APPROVED"
"vnen","MEMBER","LGTM","2024-07-25T19:13:35Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-08T10:03:44Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-03-08T11:43:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","I didn't check the code, but did some brief testing and it works correctly.

The documentation could use some code examples.","2024-03-08T22:25:10Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-03-14T17:26:10Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-14T20:08:08Z",false,"COMMENTED"
"akien-mga","MEMBER","Given the discussion so far, I'm in favor of the change, it's less ambiguous this way.","2024-03-09T20:26:25Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-03-08T00:25:27Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T10:42:18Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T10:43:25Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T10:47:42Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T10:52:23Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T10:53:23Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T10:55:48Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T10:56:50Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks great overall! Some stylistic decisions to make, see my comments, but this is already a very nice improvement.","2024-03-08T10:58:02Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-03-08T23:18:07Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-09T20:28:52Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks really good! Final nitpicks, but then I think we should merge. It likely won't be perfect as there are too many conditionals to really ensure especially that vertical spacing will always be consistent. But it should be pretty close to perfect :)","2024-03-09T20:45:24Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-03-09T20:47:40Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-10T09:59:07Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-03-13T22:25:09Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-03-13T22:29:42Z",false,"COMMENTED"
"akien-mga","MEMBER","Haven't re-reviewed in depth, but I believe this is ready to go now.","2024-03-13T22:58:35Z",false,"APPROVED"
"MewPurPur","CONTRIBUTOR","","2024-03-08T10:39:19Z",false,"COMMENTED"
"MewPurPur","CONTRIBUTOR","If I'm to believe that the old code is correct, then the new code should also be correct.","2024-03-08T10:55:52Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-18T15:39:58Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-18T15:49:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-18T15:49:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-18T16:10:18Z",false,"COMMENTED"
"davthedev","CONTRIBUTOR","","2024-03-18T16:25:52Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-18T16:26:52Z",false,"COMMENTED"
"davthedev","CONTRIBUTOR","","2024-03-18T16:27:08Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-18T16:32:00Z",false,"COMMENTED"
"davthedev","CONTRIBUTOR","","2024-03-18T16:33:12Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-18T16:36:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-18T16:39:12Z",false,"COMMENTED"
"davthedev","CONTRIBUTOR","","2024-03-18T17:15:26Z",false,"COMMENTED"
"davthedev","CONTRIBUTOR","","2024-03-18T17:16:40Z",false,"COMMENTED"
"davthedev","CONTRIBUTOR","","2024-03-18T17:20:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-18T20:29:19Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-18T21:38:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-18T21:45:53Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/f6a78f83aa4b74aa5cb80ca2e3419448b1998e4f), it works as expected. This is a nice UX improvement :slightly_smiling_face:

https://github.com/godotengine/godot/assets/180032/b7c8adcd-da34-40e5-b30f-3ef14f942c1d

In the editor with a light theme (theme switching works in the editor without requiring a restart):

![image](https://github.com/godotengine/godot/assets/180032/c722597e-9e27-46e5-849c-e89a6dc972a9)
","2024-04-04T15:30:18Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-05T10:08:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-05T10:22:05Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-20T20:24:16Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-20T20:28:35Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-08-09T07:49:14Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-08-23T11:36:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-23T11:38:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-08-23T11:39:01Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-08-23T15:49:34Z",false,"COMMENTED"
"davthedev","CONTRIBUTOR","","2024-08-23T16:11:14Z",false,"COMMENTED"
"davthedev","CONTRIBUTOR","","2024-08-23T16:16:52Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-08-23T16:26:12Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Documentation is just fine now. My opinion on `set_min_buttons_width_from_icons` still remains but it shouldn't be an absolute blocker.","2024-08-26T21:15:28Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T10:19:06Z",false,"COMMENTED"
"ryevdokimov","CONTRIBUTOR","","2024-03-08T10:28:03Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T10:34:33Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-03-08T10:29:08Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T10:29:26Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T10:33:41Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-03-08T10:46:41Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-08T11:16:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T11:19:12Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-03-08T11:25:30Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T11:29:01Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-08T11:29:33Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-08T11:30:20Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-03-08T11:38:20Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T11:39:19Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","If this PR was a post on a community forum it would get 500 upvotes and not a single comment, let alone one against it.","2024-03-08T11:54:48Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-08T12:53:25Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","","2024-03-07T20:31:53Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-17T17:09:25Z",false,"COMMENTED"
"KoBeWi","MEMBER","I can't reproduce the issue with GDScript, but the code looks fine.","2024-03-17T18:52:52Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","I haven't tested this PR, but I have tested the nearly identical code in PR https://github.com/GodotVR/godot_openxr_vendors/pull/102 and that definitely works!

The code is ""nearly identical"" because one is in Java and the other is Kotlin, but it's a straightforward translation. There's some additional clean-up and refactoring in this PR too, which looks good to me.","2024-03-07T19:36:10Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-07T18:18:03Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-07T18:18:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-07T18:18:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-07T18:19:48Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-07T18:21:35Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-07T18:22:50Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-07T18:24:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-07T18:25:04Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-08T12:09:22Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-08T12:28:23Z",false,"COMMENTED"
"passivestar","CONTRIBUTOR","","2024-03-08T16:13:54Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-08T16:22:21Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","","2024-03-08T23:21:04Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great!","2024-03-07T17:04:20Z",false,"APPROVED"
"groud","MEMBER","LGTM! Thanks!","2024-03-07T17:06:04Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-03-07T17:00:02Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-07T17:02:45Z",false,"COMMENTED"
"passivestar","CONTRIBUTOR","","2024-03-07T17:32:21Z",false,"COMMENTED"
"passivestar","CONTRIBUTOR","","2024-03-07T17:32:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-11T23:21:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-11T23:27:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-11T23:30:44Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-12T11:39:24Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-07T13:57:08Z",false,"COMMENTED"
"akien-mga","MEMBER","Seems good for now, but we can indeed think about how to make this pattern more explicit and obvious to contributors.","2024-05-07T14:22:34Z",false,"APPROVED"
"YeldhamDev","MEMBER","LGTM","2024-03-07T14:24:48Z",false,"APPROVED"
"akien-mga","MEMBER","Code looks pretty clean, and the feature makes sense. I'm surprised we didn't have it yet :D","2024-03-07T14:56:34Z",false,"APPROVED"
"kitbdev","CONTRIBUTOR","","2024-03-07T22:36:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-08T14:22:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-08T14:30:52Z",false,"COMMENTED"
"4d49","CONTRIBUTOR","","2024-03-08T14:34:53Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-08T15:05:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","The above code needs figuring out","2024-03-08T15:18:13Z",false,"DISMISSED"
"4d49","CONTRIBUTOR","","2024-03-09T04:35:57Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-03-13T15:07:08Z",false,"COMMENTED"
"timothyqiu","MEMBER","The tooltip text should be carried over in `TabContainer::move_tab_from_tab_container()` so that dragging across different containers work.","2024-04-09T08:55:51Z",false,"DISMISSED"
"AThousandShips","MEMBER","","2024-04-11T08:22:36Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-04-11T15:08:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-11T15:17:25Z",false,"COMMENTED"
"4d49","CONTRIBUTOR","","2024-04-12T03:49:39Z",false,"COMMENTED"
"timothyqiu","MEMBER","Needs a rebase, otherwise looks good.","2024-04-23T02:39:49Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","<img width=2% src=https://github.com/godotengine/godot/assets/66727710/eb1c03cd-987a-4946-b2a4-47194f85609f>","2024-03-07T12:12:39Z",false,"APPROVED"
"Paulb23","MEMBER","Thanks for the contribution!

Code and tests looks good to me.

Any chance you could rebase and squash your commits, we have some documentation here that should help: https://docs.godotengine.org/en/stable/contributing/workflow/pr_workflow.html#updating-your-branch ","2024-03-10T16:25:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-10T16:50:12Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-11T09:03:41Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-07T13:36:54Z",false,"APPROVED"
"akien-mga","MEMBER","Looks great, I've been meaning to do this for a while.","2024-03-07T00:28:30Z",false,"APPROVED"
"adamscott","MEMBER","","2024-03-07T02:42:02Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-03-09T18:18:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM","2024-03-07T08:47:04Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-06T23:30:49Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-06T21:40:27Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-06T21:52:41Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-07T00:44:47Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-07T01:21:26Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T22:39:48Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T22:40:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-08T22:41:48Z",false,"COMMENTED"
"reduz","MEMBER","I think it fully makes sense, should have been the intention from the beginning.","2024-03-19T20:16:09Z",false,"COMMENTED"
"reduz","MEMBER","","2024-03-19T20:16:41Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-25T20:56:50Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-06T18:32:53Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-03-06T15:35:32Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Makes sense to me!","2024-03-06T16:19:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-06T18:59:53Z",false,"COMMENTED"
"devloglogan","CONTRIBUTOR","","2024-03-06T22:47:17Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-06T23:16:25Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-06T11:58:01Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me, conceptually.","2024-03-06T12:17:51Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-06T10:42:35Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-06T10:42:39Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-03-06T10:48:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-13T10:50:43Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-13T16:40:12Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-03-14T18:05:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","Tested on Windows and it works great.","2024-03-26T21:38:47Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-27T09:12:49Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-06T12:44:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-06T12:47:07Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-06T13:57:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-06T14:17:45Z",false,"COMMENTED"
"luevano","CONTRIBUTOR","","2024-03-06T16:04:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-06T16:07:48Z",false,"COMMENTED"
"luevano","CONTRIBUTOR","","2024-03-06T16:18:12Z",false,"COMMENTED"
"luevano","CONTRIBUTOR","","2024-03-06T16:21:49Z",false,"COMMENTED"
"luevano","CONTRIBUTOR","","2024-03-06T16:24:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-06T16:24:40Z",false,"COMMENTED"
"luevano","CONTRIBUTOR","","2024-03-06T16:34:09Z",false,"COMMENTED"
"luevano","CONTRIBUTOR","","2024-03-06T16:57:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-06T18:36:03Z",false,"COMMENTED"
"luevano","CONTRIBUTOR","","2024-03-06T18:44:19Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-06T18:44:58Z",false,"COMMENTED"
"luevano","CONTRIBUTOR","","2024-03-06T18:50:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-06T19:06:52Z",false,"COMMENTED"
"luevano","CONTRIBUTOR","","2024-03-06T19:24:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-06T19:25:00Z",false,"COMMENTED"
"luevano","CONTRIBUTOR","","2024-03-06T19:35:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-07T13:28:29Z",false,"COMMENTED"
"luevano","CONTRIBUTOR","","2024-03-07T14:22:59Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-07T14:41:35Z",false,"COMMENTED"
"luevano","CONTRIBUTOR","","2024-03-07T15:23:33Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-07T15:32:29Z",false,"COMMENTED"
"luevano","CONTRIBUTOR","","2024-03-07T16:42:35Z",false,"COMMENTED"
"luevano","CONTRIBUTOR","","2024-03-07T16:43:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-07T16:49:10Z",false,"COMMENTED"
"luevano","CONTRIBUTOR","","2024-03-07T17:09:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-07T21:17:15Z",false,"APPROVED"
"ryevdokimov","CONTRIBUTOR","e","2024-03-05T21:28:56Z",false,"APPROVED"
"akien-mga","MEMBER","e","2024-03-05T21:33:53Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-03-06T09:10:57Z",false,"COMMENTED"
"vaartis","CONTRIBUTOR","","2024-03-06T09:22:33Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-08T12:56:32Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-09T08:59:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-05T20:27:35Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-05T20:29:32Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-05T23:44:14Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-07T15:46:45Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-06-07T15:47:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-06-07T15:49:13Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","This looks good to me!

After this change, is the `Array(const Array &p_base, uint32_t p_type, const StringName &p_class_name, const Variant &p_script)` constructor even used anywhere? If not, I wonder if it should be removed? Anyway, not important questions for now, things could be cleaned up more later :-)","2024-06-26T13:47:59Z",false,"APPROVED"
"clayjohn","MEMBER","Great work!

A couple of little things:
1. This will need to check the validity of the render buffers at some point as we don't allocate the render buffers until they are needed. Which means that for purely 2D scenes this code will break
2. This should be added to the compatibility renderer as well. I don't know what you mean by it being out of texture units for the canvas item shader. All OpenGL implementations have to allow for at least 16 textures to be bound at once and we only use a max of 7 right now. So there should be plenty of space. ","2024-03-05T20:21:29Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-05T21:57:43Z",false,"APPROVED"
"Calinou","MEMBER","","2024-03-05T21:20:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-06T09:42:57Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-07T10:09:32Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-03-07T13:44:05Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I don't know how to feel about this. On one hand it is great to have these names and ""schemes"" natively. But on the other, it's a bit... prone to be superfluous? I hope I do not sound mean in any way.

After this is merged we are going to get more requests.
Users know there's many controllers out there, and that supporting them all natively is just not possible. But, what about the **GameCube controller** (which is still loved by many), other pseudo-retro controllers, or even the **Steam Controller**?

Plus, what about localization? The PR as is cannot localize these, which kind of defeats the purpose. If the need is for controller icons, only `get_joy_scheme` is necessary here.

All in all, to try and make it brief, I feel like this can be done with custom code or specialized addons much better for the following reasons:
- Users that do not need it simply ignore them;
- They would not bloat the core engine;
- They can be designed for more specific controllers;
- They can easily be expanded upon in the future _(even for older versions of the engine)_.
- The provided strings can be localized as the developer wishes to.","2024-03-07T15:56:17Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-05T22:32:57Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-05T18:24:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-05T18:24:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-05T18:40:03Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-03-06T02:25:28Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-03-07T15:05:44Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","I cannot speak on the utility of the feature itself, although it seems like it makes sense.","2024-07-05T18:37:29Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected. This has been a longstanding issue, great work :slightly_smiling_face: 

**Testing project:** [test_packed_byte_array_scenes.zip](https://github.com/godotengine/godot/files/14500029/test_packed_byte_array_scenes.zip)[^1]

[^1]: The `.tscn` file included was saved prior to this PR.

`.tscn` file with 10,000,000 PackedByteArray elements (5 million are zeros, 5 million are random with a fixed seed):

## Benchmark

**OS:** Fedora 39 x86_64
**CPU:** Intel Core i9-13900K (`performance` governor)
**SSD:** Solidigm P44 Pro 2 TB

### Saving time

*Pressing <kbd>Ctrl + S</kbd> with only one scene open in the editor and measuring the time the progress dialog is visible with a stopwatch.*

Binary (for reference) | Before | After *(this PR)*
-|-|-
0.4 seconds | 3.2 seconds | 1.1 seconds

### Loading time

*Running the project and measuring the time spent on the splash screen with a stopwatch.*

Binary (for reference) | Before | After *(this PR)*
-|-|-
0.5 seconds | 2.5 seconds | 1.4 seconds

### File size (on filesystem)

Binary (for reference) | Before | After *(this PR)*
-|-|-
4.8 MB[^2] | 36.4 MB | 12.7 MB

### File size (within a ZIP archive)

Binary (for reference) | Before | After *(this PR)*
-|-|-
4.8 MB[^2] | 6.4 MB | 4.8 MB

[^2]: Binary resources are compressed by default, so compressing them further will not help.","2024-03-05T18:52:38Z",false,"APPROVED"
"reduz","MEMBER","","2024-03-05T19:47:16Z",false,"COMMENTED"
"groud","MEMBER","","2024-03-06T09:16:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T17:01:43Z",false,"COMMENTED"
"reduz","MEMBER","Seems ok for now. From our discussion with @Faless all this code will at some point in the future will need to be isolated to make it auditable for security issues (given it can be used as network I/O or savefiles), meaning in that case it will have to change anyway.","2024-04-10T14:27:41Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-05T15:18:42Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-03-05T18:21:58Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-05T19:27:15Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-05T19:30:35Z",false,"APPROVED"
"bruvzg","MEMBER","`FEATURE_NATIVE_ICON` checks are pretty redundant, all are in platform specific #ifdefs, but I guess it's OK for readability.

Other platform specific features should already have feature checks (at least menu and macOS expand to title bar, not sure if there are other). I guess it's it was missing for `FEATURE_ICON` since it was supported by all platforms before Wayland addition.","2024-03-05T13:57:36Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","Looks perfect!","2024-03-05T14:25:24Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-05T13:51:49Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-03-05T13:58:33Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-05T14:12:57Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-03-05T14:20:18Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-05T14:28:31Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-03-05T14:50:01Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-05T14:51:01Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-05T15:38:55Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-05T14:40:18Z",false,"COMMENTED"
"groud","MEMBER","","2024-03-05T14:48:20Z",false,"COMMENTED"
"MewPurPur","CONTRIBUTOR","","2024-03-05T15:00:41Z",false,"COMMENTED"
"MewPurPur","CONTRIBUTOR","","2024-03-05T15:00:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-05T15:10:25Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-05T17:02:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-05T17:04:08Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-05T17:06:35Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-05T17:10:05Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-05T17:12:18Z",false,"COMMENTED"
"groud","MEMBER","","2024-03-06T12:01:56Z",false,"COMMENTED"
"groud","MEMBER","","2024-03-06T12:32:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-06T12:40:00Z",false,"COMMENTED"
"groud","MEMBER","","2024-03-06T12:51:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-27T13:31:36Z",false,"COMMENTED"
"groud","MEMBER","","2024-03-27T13:54:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T16:18:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T16:18:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T16:19:45Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T16:20:37Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T16:21:11Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T16:22:29Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T20:54:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T21:12:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T21:18:55Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T21:51:59Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T22:12:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T22:15:32Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T22:31:53Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T22:32:31Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T22:33:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T23:05:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T23:06:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T23:07:45Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T23:09:40Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T23:11:51Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T23:14:35Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-27T23:38:03Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-28T01:18:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-28T01:19:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-28T01:20:51Z",false,"COMMENTED"
"groud","MEMBER","","2024-03-28T09:47:48Z",false,"COMMENTED"
"groud","MEMBER","","2024-03-28T10:17:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-28T11:13:50Z",false,"COMMENTED"
"groud","MEMBER","","2024-03-28T11:15:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-28T11:15:35Z",false,"COMMENTED"
"groud","MEMBER","","2024-03-28T11:19:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-28T11:42:47Z",false,"COMMENTED"
"groud","MEMBER","","2024-03-28T11:50:13Z",false,"COMMENTED"
"groud","MEMBER","","2024-03-28T11:53:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-28T12:10:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-28T12:12:08Z",false,"COMMENTED"
"groud","MEMBER","","2024-03-28T12:17:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-28T13:21:06Z",false,"COMMENTED"
"groud","MEMBER","","2024-03-28T13:39:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-28T15:34:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-28T15:36:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-28T15:40:29Z",false,"COMMENTED"
"groud","MEMBER","","2024-03-28T16:10:21Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-28T16:16:41Z",false,"COMMENTED"
"groud","MEMBER","","2024-03-28T16:23:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-28T16:44:43Z",false,"APPROVED"
"AThousandShips","MEMBER","I believe this looks good, will take a proper look at some of the changed logic tomorrow but seems proper and safe","2024-03-28T17:44:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-29T10:32:44Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","In its own docs, whenever TileMapLayer itself is mentioned exactly by name, it should be surrounded by square brackets (`[TileMapLayer]`) for a self-reference (can't take a deeper look at the moment).

Alternatively, in my opinion, calling it ""layer"" instead of the whole class name would be sufficient and less ""verbose"".","2024-03-30T12:12:20Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I was already very peeved at the TileMap/TileSet documentation in the past. But I can chime for a few things here, just to make TileMapLayer slightly more appealing.","2024-03-30T13:22:56Z",false,"COMMENTED"
"groud","MEMBER","","2024-04-02T08:47:25Z",false,"COMMENTED"
"groud","MEMBER","","2024-04-02T08:50:52Z",false,"COMMENTED"
"groud","MEMBER","","2024-04-02T09:03:50Z",false,"COMMENTED"
"groud","MEMBER","","2024-04-02T09:05:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-02T09:07:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-02T09:08:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-02T09:09:51Z",false,"COMMENTED"
"groud","MEMBER","","2024-04-02T09:18:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-02T09:23:07Z",false,"COMMENTED"
"groud","MEMBER","","2024-04-02T09:26:58Z",false,"COMMENTED"
"groud","MEMBER","","2024-04-02T09:39:18Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-04-02T12:05:31Z",false,"COMMENTED"
"groud","MEMBER","","2024-04-02T12:11:26Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks great!","2024-03-05T13:36:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-05T12:47:28Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-05T11:09:49Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-03-05T11:53:34Z",false,"COMMENTED"
"akien-mga","MEMBER","Thanks for the detailed description. It makes a lot of sense to me.

I think this solution is good, we do want to keep hinting this as a Node if we can get that info.

As discussed on chat, it might be worth evaluating whether compiling assemblies before saving scenes would also be good to do. I think a risk there is that some unsaved scene changes may impact which assemblies should be compiled?","2024-03-05T12:46:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-05T10:20:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-05T08:48:46Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-05T07:44:05Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-03-05T08:06:01Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-03-05T20:38:28Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-05T21:33:26Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-03-06T04:41:59Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-06T07:19:27Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-06T07:57:11Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-06T09:10:28Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-06T09:33:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-06T11:18:53Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-03-05T05:31:11Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-05-31T01:11:40Z",false,"COMMENTED"
"ecmjohnson","CONTRIBUTOR","","2024-06-10T18:26:33Z",false,"COMMENTED"
"ecmjohnson","CONTRIBUTOR","","2024-06-10T18:58:12Z",false,"COMMENTED"
"ecmjohnson","CONTRIBUTOR","","2024-06-10T19:07:29Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected on https://github.com/godotengine/godot-demo-projects/tree/master/3d/particles in both Forward+ and Mobile, both in single and double precision builds.","2024-06-11T15:58:56Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-06-11T18:38:31Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Me, with my simpleton mind, approve of this, and I look forward to see some code shifted around to `.tools.inc` files. It does not fully remove the ugly TOOLS_ENABLED, as some for example do have to exist in `_notification`, but it is cleaner.

Although, this PR started because of `get_argument_options`. Part of me is wondering if it would be better to, for example, put all of the `get_argument_options` in a singular file, if that's even possible, or if that's even a good way to go about it!","2024-03-05T19:35:46Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-04T22:35:14Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-04T23:43:38Z",false,"APPROVED"
"dalexeev","MEMBER","This is my typo. :scream: Thank you for the fix!","2024-03-04T18:07:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-04T18:14:53Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-04T18:19:26Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-04T18:25:13Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-04T18:30:04Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-04T18:40:12Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","<img width=2% src=https://github.com/godotengine/godot/assets/66727710/b1199878-aa1c-47ba-b4de-a1cd8c1a9a50)>
","2024-03-04T19:27:14Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-03-09T09:41:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-09T09:43:56Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-03-09T09:56:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-09T09:57:55Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-03-09T10:17:49Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-03-17T07:56:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-17T08:18:20Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-03-17T10:18:32Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-04T16:57:32Z",false,"APPROVED"
"fire","MEMBER","","2024-03-04T18:36:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-04T18:37:03Z",false,"COMMENTED"
"fire","MEMBER","","2024-03-04T18:38:30Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-04T18:38:36Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","All of these descriptions do annoy me but this is an nice improvement.

One nitpick being that the commit's name could have been more specific, but that's okay.","2024-03-04T16:43:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-05T08:48:59Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-04T16:26:43Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-04T16:30:28Z",false,"APPROVED"
"miv391","CONTRIBUTOR","","2024-03-04T16:32:53Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Part of me feels like that ""Are also considered names"" part should be included in the constants themselves, but this _looks_ fine.","2024-03-04T16:57:35Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-04T14:18:20Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, I'm having trouble setting up a planar water reflection with this PR on Linux + NVIDIA.

I get frequent engine freezes (with `VK_DEVICE_LOST` error and the entire PC appearing to freeze) if invalid transforms are entered in the Oblique camera projection mode, so it's hard to test. I had the same problems when testing https://github.com/godotengine/godot/pull/84454.

PS: I wonder if setting projection from a transform should be offered in the editor somehow, so you can set up portals and planar reflections without any script. The RemoteTransform3D node makes it possible to adjust the camera position without a script, but I still need to assign a script to call `Camera3D.set_oblique_plane_from_transform()`. Ideally, it should be possible to set this up without any script to make this feature more accessible to artists and level designers.

**Testing project:** [test_pr_89140.zip](https://github.com/godotengine/godot/files/14484253/test_pr_89140.zip)
","2024-03-04T16:15:39Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-04T17:35:55Z",false,"COMMENTED"
"qaptoR","NONE","","2024-03-05T05:38:39Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","Interesting approach. At least in non-XR cases, I could see this being a viable alternative to my PR...
* #85529

I'm a bit unclear in how to apply this design to XR, since I'll need to copy the projection matrix of the HMD and then make it oblique.  See [my reference XR mirror implementation](https://github.com/V-Sekai/avatar_vr_demo/blob/master/addons/V-Sekai.xr-mirror/mirror.gd)","2024-03-05T07:37:19Z",false,"COMMENTED"
"qaptoR","NONE","","2024-03-05T09:00:31Z",false,"COMMENTED"
"qaptoR","NONE","","2024-03-05T09:19:35Z",false,"COMMENTED"
"qaptoR","NONE","","2024-03-05T09:28:29Z",false,"COMMENTED"
"qaptoR","NONE","","2024-03-05T09:42:10Z",false,"COMMENTED"
"qaptoR","NONE","","2024-03-05T09:49:37Z",false,"COMMENTED"
"qaptoR","NONE","","2024-03-05T09:56:11Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-03-05T11:09:26Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-03-05T11:12:11Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-03-05T11:23:44Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-03-05T11:25:23Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-04T11:58:39Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","","2024-03-04T09:34:12Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-03-04T09:50:56Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-03-04T21:30:45Z",false,"COMMENTED"
"clayjohn","MEMBER","Overall, this looks great. I replied to your comment, but I am not sure it is a good idea. I suspect that code is there for a reason and flipping the false to true will break something. 

Feel free to look deeper into it if you really feel like the false should become true, but otherwise I think we can merge this once you remove the comment with the question","2024-03-04T21:32:20Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","","2024-03-04T23:04:29Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-03-04T23:08:59Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-03-04T23:27:53Z",false,"APPROVED"
"Maran23","CONTRIBUTOR","","2024-03-04T08:31:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-04T08:38:09Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-03-04T08:43:04Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-04T12:14:20Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-03-05T02:12:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-05T13:22:27Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-05T13:23:13Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-05T13:23:25Z",false,"APPROVED"
"jsjtxietian","CONTRIBUTOR","","2024-03-06T02:22:35Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-04T09:04:58Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-04T09:05:39Z",false,"COMMENTED"
"beiller","CONTRIBUTOR","","2024-03-04T15:35:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-04T15:37:23Z",false,"COMMENTED"
"beiller","CONTRIBUTOR","","2024-03-04T15:56:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-04T16:04:11Z",false,"COMMENTED"
"beiller","CONTRIBUTOR","","2024-03-04T16:05:20Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-04T17:31:59Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-04T18:09:09Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","lgtm, but we do need to update the class documentation to have information about these.

Especially the motion scale needs some documentation about the use case, it will always stretch the mesh in weird ways but I can see that it will have its uses.

The world scale for me is the important one which we should have in the original release. Here we should include a paragraph in the class documentation informing the user the node will set proper scaling based on world scale so they know that is expected behaviour.","2024-03-04T04:45:42Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-03-04T09:11:45Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","> My guess is that it's for scaling the animation track to match the size of the skeleton. Consider some jogging animation and you want to play it on three NPCs - a dwarf, a human, and a giant. The `motion_scale` can be used to adjust the jogging animation positions to align with the size of the character.

Ah, ok, that makes sense! Using this interpretation of `motion_scale`, this PR looks good to me :-)","2024-03-04T20:32:44Z",false,"APPROVED"
"Malcolmnixon","CONTRIBUTOR","","2024-03-04T22:48:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-05T08:49:57Z",false,"APPROVED"
"Malcolmnixon","CONTRIBUTOR","","2024-03-06T00:26:35Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","lgtm","2024-03-06T22:06:03Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-04T11:58:41Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-04T12:12:18Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-04T12:30:20Z",false,"COMMENTED"
"ryevdokimov","CONTRIBUTOR","Looks good.

https://github.com/godotengine/godot/assets/105675984/3b419cde-6a20-42de-b1d2-7e0b7e25fafe

","2024-03-04T13:25:57Z",false,"APPROVED"
"luevano","CONTRIBUTOR","","2024-03-04T15:15:24Z",false,"COMMENTED"
"luevano","CONTRIBUTOR","","2024-03-04T16:10:57Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-04-09T22:57:22Z",false,"COMMENTED"
"wheatear-dev","CONTRIBUTOR","","2024-04-10T15:46:39Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/83b916bb00eb8cac4584143a80f5cfad7ce1e908), it works as expected. Code looks good to me.

Note that there's another pull request adding JSONRPC unit tests: https://github.com/godotengine/godot/pull/80480","2024-04-10T17:17:00Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-10T17:18:42Z",false,"COMMENTED"
"wheatear-dev","CONTRIBUTOR","","2024-04-10T17:22:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-03T19:32:34Z",false,"APPROVED"
"nongvantinh","CONTRIBUTOR","","2024-03-03T17:48:44Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-03-03T17:49:48Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-03T15:52:53Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-03T16:10:58Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Documentation is completely fine and consistent with the existing methods. I just am not sure if having it exposed is strictly necessary.","2024-03-04T20:43:39Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-03-24T16:43:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-24T16:49:21Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-04-05T18:05:03Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-05T18:08:31Z",false,"COMMENTED"
"aaronfranke","MEMBER","I think this function is a good idea, it seems very common and useful.","2024-04-05T18:14:52Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","Finally gave a good look at this thing.

All the changes are very simple and they increase readability a lot, great job!","2024-04-20T01:11:05Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-04-20T07:23:07Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-03T16:45:32Z",false,"CHANGES_REQUESTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-03T16:55:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-03T17:19:17Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-03T17:59:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-03T18:00:19Z",false,"COMMENTED"
"AThousandShips","MEMBER","This would be the correct change","2024-03-03T18:00:59Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-03T20:19:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-03T20:23:52Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-03T20:49:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-03T20:52:40Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-03T21:21:17Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-03-04T12:05:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-04T12:08:54Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-04T12:09:02Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good!","2024-03-04T13:40:12Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-03T11:53:18Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","Oops :sweat_smile:

Just a quick question regarding `Vector2::clamp`, see the comment.","2024-03-03T14:42:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-03T14:45:34Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-03T14:59:15Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","This is another of those magical moments where code that shouldn't run worked anyways.

The `Vector2::clamp` thing is a really nice trick and I really hope that #89144 gets through, it would be real nifty :D

Thanks!","2024-03-03T15:07:27Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-03T17:30:00Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-03-03T19:42:24Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-03T12:03:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-03T12:04:23Z",false,"COMMENTED"
"Geometror","MEMBER","Went through each replacement and didn't notice any obvious mistake.
Nice work! ","2024-03-20T12:46:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-03T17:25:56Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-03T10:17:06Z",false,"APPROVED"
"KoBeWi","MEMBER","What I said can be done in follow-up. The current change is fine as a safeguard.","2024-03-03T14:09:28Z",false,"APPROVED"
"ryevdokimov","CONTRIBUTOR","","2024-03-03T15:06:35Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-03-03T08:56:07Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-03T09:41:14Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","@Malcolmnixon: 

> All the models I've put through the Godot Humanoid Skeleton Retargeting have the Root bone at ground level under the hips. The SkeletonProfileHumanoid has the ""Root"" at 0,0,0 and any minor positional issues may be automatically handled by the ""Rest Fixer"" or the ""Fix Silhouette"" features.

Ok, then this change makes sense to me conceptually! I haven't tested it, though.
","2024-03-03T18:17:21Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-04T09:14:51Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-03-05T00:10:01Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","Looks good Malcolm.

We could (ab)use this opportunity to also mark this class as experimental. Best to get that out of the way before 4.3 releases :)","2024-03-05T00:32:59Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-03-06T02:22:18Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-03-03T00:22:44Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-03-03T00:28:36Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-03-03T00:39:19Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Just nice documentation-wise and this is something I feel like trusting @YeldhamDev in.","2024-03-03T00:43:30Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","I do agree that we shouldn't do things that emit warnings in core code.

That said, the current approach is a bit too `DisplayServerHeadless`-specific, see the review comment.","2024-03-02T21:58:29Z",false,"CHANGES_REQUESTED"
"Riteo","CONTRIBUTOR","Looks fine and dandy! :D

You started something really nice BTW, I think we should do this to other ""special"" calls, one of which comes to mind: the pesky icon setting code that prints a warning on startup on Wayland, as there's no support for ""runtime"" icons in the first place.","2024-03-03T05:13:12Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great! Tested locally and it works. 
","2024-03-07T19:42:09Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-02T19:14:47Z",false,"APPROVED"
"fire","MEMBER","","2024-03-02T21:07:10Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Despite the exemplary explanation, a lot of this audio stream manipulation is WAY out of my league. It's a fine Saturday and it's nice to relax, but I must chime in for a few things right off the bat:
- New comments across the codebase are capitalized and end with a period (e.g `// Find the current gain bucket id.`). It would be nice to refactor the code to _not_ need comments like these, but if they have to exist so be it.
- This PR removes some properties and it's a **BIG** no-no because it breaks compatibility.
     - At best, the old properties **should still function** as before. At worst, they should do nothing.
     - These properties should still be available, but deprecated.","2024-03-02T19:35:27Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-13T20:42:03Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Docs are completely fine and honestly I can pretty much believe this class to be a straight upgrade, solely for the effort being put into the PR's own explanation and justification for it.

Hopefully the Audio team can take a look at it.","2024-03-20T09:26:14Z",false,"APPROVED"
"reduz","MEMBER","","2024-03-24T02:23:50Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-24T08:56:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-25T10:12:51Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-25T12:58:01Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-02T18:38:54Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-02T18:41:23Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-02T22:15:35Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-03-03T03:38:45Z",false,"COMMENTED"
"timothyqiu","MEMBER","","2024-03-03T03:49:28Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-04T17:12:44Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me!","2024-03-05T22:04:45Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-08T14:47:12Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-08T14:48:32Z",false,"COMMENTED"
"miv391","CONTRIBUTOR","","2024-03-08T15:44:25Z",false,"COMMENTED"
"miv391","CONTRIBUTOR","","2024-03-08T15:49:37Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-08T19:09:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-08T22:26:11Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-03-02T19:52:07Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-02T19:52:42Z",false,"COMMENTED"
"catboy-catfish","NONE","","2024-03-31T07:20:38Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-31T11:56:22Z",false,"COMMENTED"
"catboy-catfish","NONE","","2024-03-31T11:58:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-02T21:51:11Z",false,"COMMENTED"
"fire","MEMBER","During our recent discussion in RocketChat, we discovered that the new code we were considering is identical to `Math::cubic_interpolate()`, which is already present in our codebase. This has led us to reconsider the use of `libresample`.

I propose the following test plan:

1. Record samples with the current code and after the implementation of the new code.
2. Provide alternative methods for verifying the audio, either as a recording or as part of a project.

This will allow us to compare the output and verify whether the new piece of code are indeed better.

We currently do not have an active audio team. However, contributions from anyone in the community would be greatly appreciated. If you're interested in helping out with this issue, please feel free to get involved.","2024-03-04T05:54:22Z",false,"APPROVED"
"TokageItLab","MEMBER","SkeletonProfile is available only in the editor and is not available at runtime.

If you want to use SkeletonProfile, this feature must be dedicated to editor only. From looking at the PR code, it appears that this is a function for mirroring on import, but if so, all the code needs to be in the importer.

So, at least Skeleton3D and SkeletonProfile[^1] will never have `bone_counterpart_name` property. Even without such a property, as long as you are using SkeletonProfileHumanoid, it is definitely sufficient to use a simple regular expression to map the left and right bones. You can refer to `BoneMapper::guess_bone_segregation()` for the regular expression.

[^1]: SkeletonProfileHumanoid is just a template with some constants for SkeletonProfile, but SkeletonProfile needs to be generic. For this reason, it is not a good way that only SkeletonProfileHumanoid have additional property","2024-03-02T16:07:18Z",false,"CHANGES_REQUESTED"
"Riteo","CONTRIBUTOR","I don't know much about OpenBSD.

That said, the reasoning makes sense, the manual indeed does not mention the flag and the patch is concise, so I say LGTM! :D","2024-03-01T21:54:23Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM","2024-03-01T18:59:20Z",false,"APPROVED"
"Calinou","MEMBER","","2024-03-01T19:01:43Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great!","2024-03-02T01:53:18Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","lgtm","2024-03-03T22:30:27Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-15T16:22:51Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-15T16:25:02Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-15T21:24:41Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-15T21:25:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-15T21:40:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-15T21:48:04Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-15T21:48:45Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-15T22:14:41Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-15T22:15:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-15T22:18:31Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-04-16T08:15:52Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-04-16T08:19:26Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-04-16T08:24:13Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-04-16T08:24:55Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-04-16T08:27:09Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-04-16T08:31:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-16T08:32:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-16T09:16:23Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-04-16T09:22:35Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-17T10:34:00Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-04-17T12:13:37Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-04-17T12:56:17Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-04-18T10:48:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM","2024-03-01T17:14:04Z",false,"APPROVED"
"YeldhamDev","MEMBER","","2024-03-01T17:20:05Z",false,"COMMENTED"
"AThousandShips","MEMBER","Code looks good and the feature makes sense","2024-03-01T17:30:39Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-01T17:35:49Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-03-01T18:10:36Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-02T16:15:15Z",false,"APPROVED"
"paulloz","MEMBER","This is probably fine. We could loop over a `string[] { ""com.microsoft.VSCode"", ""com.vscodium.codium"" }` instead of duplicating the whole block.  
Would be nice if a Codium user could try it out, I'm not too keen on nuking my VSC setup to be able to test üò≠.","2024-03-24T20:27:55Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-01T15:52:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-01T15:53:18Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-01T15:54:53Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-01T15:55:50Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-03-14T15:37:02Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-09T13:08:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-01T15:32:13Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","Sounds fine!","2024-03-01T18:25:32Z",false,"APPROVED"
"clayjohn","MEMBER","Looks good! 

Did you test the compatibility renderer as well? I took a quick look and I think the compatibility renderer has the opposite problem where its reading from a buffer that only has Transform, color, and custom, but it uses the stride including userdata","2024-03-01T20:03:02Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-03-01T18:26:25Z",false,"APPROVED"
"fire","MEMBER","","2024-03-02T15:48:54Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-01T14:10:34Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great! Tested locally and it works","2024-03-07T19:11:25Z",false,"APPROVED"
"clayjohn","MEMBER","Looks fine to me. I'll let @DarioSamo give the final approval","2024-03-02T01:40:51Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","Looks fine to me, but I think we should be explicit about what happens if the loop fails on every iteration. It is possible for D3D12 to support only SM 5.1 under feature level 11.

If we don't intend to support that, perhaps it should explicitly fail if none of the options it checked could be retrieved, as right now it'll continue as if it succeeded (e.g. when every iteration returns invalid arg).","2024-03-02T16:53:22Z",false,"CHANGES_REQUESTED"
"DarioSamo","CONTRIBUTOR","Thanks for the changes!","2024-03-04T11:46:26Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-04T11:48:39Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-03-04T12:30:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-04T12:32:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-04T12:35:04Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-03-04T12:54:41Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-03-04T13:01:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-04T13:07:14Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-01T11:26:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-01T11:27:07Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-01T11:30:30Z",false,"COMMENTED"
"AThousandShips","MEMBER","Will come back later today but liking it generally!","2024-03-01T11:35:05Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-01T11:40:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-01T11:41:44Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-01T11:47:28Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-01T12:50:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM","2024-03-01T14:21:47Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-03-01T14:22:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-01T14:25:17Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-01T14:27:54Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-01T14:30:06Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-01T08:55:15Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-03-01T09:46:38Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-03-05T22:19:44Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-03-06T20:34:22Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-03-06T20:36:28Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-03-06T21:08:16Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-03-06T21:08:32Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-03-07T08:08:25Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-03-09T11:04:34Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-03-09T11:08:48Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-03-09T13:20:14Z",false,"COMMENTED"
"Scony","CONTRIBUTOR","","2024-03-12T21:21:53Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-12T21:42:15Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-13T10:47:11Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-03-01T21:54:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-30T09:44:37Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me. Needs a last rebase before merge.","2024-05-16T13:37:04Z",false,"APPROVED"
"mhilbrunner","MEMBER","Documentation changes LGTM, code does too at a glance, but I haven't looked at it for long.","2024-05-16T13:46:18Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-01T09:37:17Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-01T09:39:07Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-01T14:20:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","I didn't test every cell mode, but the base functionality is working correctly.
I was surprised that it doesn't cause any unwanted translations in the editor, even with non-editable Trees ü§î","2024-03-01T14:32:12Z",false,"APPROVED"
"smix8","CONTRIBUTOR","Did not encounter a regression for the 2D navmesh baking.

I see that there are multiple fixes to Rect Clipper bugs in the repo that are not part of the 1.3.0 releaes version. Maybe those should be included on top.","2024-03-07T16:33:13Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-07T17:14:50Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","I'm questioning if **META_UNDERLINE_NEVER** is ever useful or if [the behaviour with Images](https://github.com/godotengine/godot/pull/87363) we talked about prior should be addressed, instead.

Like, I want to note you can already choose which meta tag has underlines and which does not, with `push_underline`. So the extra granularity feels a bit superfluous.","2024-03-01T10:01:08Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Review above still stands but I desire to have a long-living love relationship with this feature.","2024-03-01T13:08:12Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-29T21:06:14Z",false,"COMMENTED"
"wheatear-dev","CONTRIBUTOR","","2024-03-01T07:28:48Z",false,"COMMENTED"
"AThousandShips","MEMBER","Looks good to me

CC @Faless ","2024-03-01T10:02:34Z",false,"APPROVED"
"Faless","COLLABORATOR","LGTM","2024-03-01T15:06:56Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-29T21:14:50Z",false,"COMMENTED"
"kitbdev","CONTRIBUTOR","","2024-03-29T21:54:33Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-29T21:59:11Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-29T22:08:26Z",false,"APPROVED"
"Calinou","MEMBER","","2024-03-30T00:54:06Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/29b3d9e9e538f0aa8effc8ad8bf19a2915292a89), it works as expected.

Code looks good to me as well (outside of the suggestions).","2024-03-30T00:56:41Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-03-30T00:57:35Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-05-03T16:03:15Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-29T14:48:13Z",false,"APPROVED"
"raulsntos","MEMBER","Since we only care about the ScriptPropertyDefVal generator for these tests, we could add the exported fields to a separate file so we only need to add the GeneratedSources for `*_ScriptPropertyDefVal.generated.cs`. And then make a new test in `ScriptPropertyDefValGeneratorTests.cs`.

Also, do we want to add a test for nested string interpolation? For example: `$""The quick brown fox jumps over {GD.VarToStr($""the lazy {Engine.GetVersionInfo()}"")}"";`","2024-02-29T17:51:14Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-03-01T03:06:37Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-03-01T08:29:04Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-03-01T08:30:13Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-03-01T17:20:26Z",false,"COMMENTED"
"raulsntos","MEMBER","LGTM. Thanks!","2024-03-01T17:20:51Z",false,"APPROVED"
"paulloz","MEMBER","","2024-03-01T18:22:10Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-04T09:06:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-29T12:03:05Z",false,"APPROVED"
"adamscott","MEMBER","","2024-02-29T12:06:29Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-29T12:01:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-29T12:11:25Z",false,"COMMENTED"
"Kimau","CONTRIBUTOR","","2024-02-29T12:33:10Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-29T12:38:44Z",false,"COMMENTED"
"Kimau","CONTRIBUTOR","","2024-02-29T12:42:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-29T12:46:54Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","Thanks for the links to the other PRs - I was not aware of them.
I agree that this solution is correct .

Perhaps the same change should also be done for Node2D

https://github.com/godotengine/godot/blob/df78c0636d79c9545a283e0e2a926d623998cc27/scene/2d/node_2d.cpp#L144-L151

Edit: ... and `Control::reparent`","2024-02-29T12:53:21Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","","2024-02-29T13:10:14Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-29T12:15:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-29T19:31:57Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-03-01T03:28:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-01T13:50:54Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-03-04T04:13:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-06T11:45:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-06T11:46:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-06T11:47:15Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-03-07T02:12:58Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-03-07T02:15:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-07T13:21:50Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-07T13:24:08Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-03-21T04:47:00Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-03-21T05:02:48Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-21T12:29:55Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-02-29T03:32:15Z",false,"APPROVED"
"raulsntos","MEMBER","Nice catch. Thanks for the fix!

- I missed this in the review of https://github.com/godotengine/godot/pull/88570.","2024-02-29T01:40:49Z",false,"APPROVED"
"akien-mga","MEMBER","The rationale makes sense to me.","2024-02-29T07:12:40Z",false,"APPROVED"
"Calinou","MEMBER","","2024-02-28T23:34:57Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","The documentation very much needs to clarify the behavior pointed out above","2024-02-29T21:17:42Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","This is fine. The description is rather verbose but it's... fine (this is still a draft so I'm a bit hesitant to approve).","2024-03-14T17:23:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-29T10:12:51Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-28T22:27:41Z",false,"APPROVED"
"smix8","CONTRIBUTOR","Not sure why or what but whatever works.","2024-02-29T04:54:23Z",false,"APPROVED"
"AThousandShips","MEMBER","Makes sense to me","2024-02-29T07:52:56Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-02-28T22:22:22Z",false,"COMMENTED"
"RandomShaper","MEMBER","The trend is to have as many threaded tasks as possible in the `WorkerThreadPool`. I'd suggest using it instead of spawning bespoke threads. Besides the reason of having all the threaded work flowing through a single component that may do more clever scheduling in the future, bear in mind that creating a thread is not guaranteed to happen quickly. It's indeed somewhat slow on Windows.","2024-02-28T22:28:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-28T22:10:21Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","That's a massive amount of information all in one line but it should be fine, _right_?","2024-02-28T19:42:34Z",false,"APPROVED"
"clayjohn","MEMBER","I think this looks mostly fine since the implementation is trivial. I left a comment on a typo in the docs. 

Also, we need to clamp these values in the GLTF exporter which I think is here:
https://github.com/godotengine/godot/blob/7d2ca2d8ac49cde9767e00b70f9eaf1920eb266d/modules/gltf/gltf_document.cpp#L3660-L3661. GLTF does not allow values outside the 0-1 range. 

I don't know if there is anywhere else that metallic and roughness are consumed, but you will need to check there as well. Once you do that, it should be fine to merge.

With respect to the shader this shouldn't result in a runtime cost as `min()` gets added as an instruction modifier when it surrounds another instruction. So instead of a MUL instruction, these lines should be using MUL_MIN instructions (as an aside, if you have a `min()` instruction on its own, it still issues a MUL_MIN, but multiples by 1.0)

To be perfectly honest, if it was any less trivial I wouldn't be in favour of merging this without more user support. This proposal doesn't have any user support outside of the person who made the proposal and it promotes a workflow that is widely unsupported everywhere. So even if it works fine in Godot, we will be encouraging users to create assets that can't be easily transferred to other programs. ","2024-02-29T21:54:09Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","","2024-02-28T19:43:10Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-28T17:47:42Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-28T19:22:01Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-28T19:23:55Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-28T21:49:15Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-29T10:05:27Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-02-29T21:20:40Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-28T16:49:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM","2024-02-29T10:17:25Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-28T15:41:12Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-28T15:47:36Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-28T15:23:32Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-28T16:03:32Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-28T16:04:04Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Existing note was fffffine so this is fine too","2024-02-28T16:27:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-28T13:29:16Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-02-28T14:09:57Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-02-29T00:34:31Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-29T10:04:05Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-28T13:18:01Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-02-28T13:27:29Z",false,"COMMENTED"
"398utubzyt","CONTRIBUTOR","","2024-02-28T14:19:19Z",false,"COMMENTED"
"398utubzyt","CONTRIBUTOR","","2024-02-28T14:22:15Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-28T16:48:33Z",false,"COMMENTED"
"398utubzyt","CONTRIBUTOR","","2024-02-28T19:42:55Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-28T19:45:17Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I approve of the docs now, but of course I can't say much about the actual implementation. Way out of my league.","2024-02-28T21:04:45Z",false,"COMMENTED"
"bruvzg","MEMBER","Everything else seems to be fine.","2024-03-04T10:13:33Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-04T10:49:04Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-04T10:56:44Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-28T14:06:30Z",false,"APPROVED"
"adamscott","MEMBER","","2024-02-28T14:12:04Z",false,"APPROVED"
"fire","MEMBER","I like the usability improvements but I haven't checked the code.","2024-02-29T18:28:30Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-01T13:11:39Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-03T22:43:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-03T22:51:20Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-04T09:58:18Z",false,"COMMENTED"
"Geometror","MEMBER","","2024-03-05T12:29:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-05T12:31:42Z",false,"APPROVED"
"akien-mga","MEMBER","Some style issues to fix by running `black -l 120` on the file (or installing the precommit hooks with `pip install pre-commit && pre-commit install`), but otherwise looks good!","2024-02-28T10:54:35Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-28T10:02:29Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-28T10:09:50Z",false,"COMMENTED"
"adamscott","MEMBER","Great way to fix https://github.com/godotengine/godot/issues/87122!","2024-02-28T16:17:04Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-28T16:25:52Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-02-28T17:03:06Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-02-28T17:13:24Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-02-28T17:16:16Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-28T17:29:44Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-28T17:31:48Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-28T17:34:07Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-02-28T17:36:14Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-28T17:37:25Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-28T18:41:12Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-28T18:43:38Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-28T18:46:33Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-28T18:48:36Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-02-28T18:48:51Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-28T18:51:36Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-28T18:54:39Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-02-28T19:02:14Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-02-28T19:04:09Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-28T19:12:04Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-28T19:14:15Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-28T19:15:43Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-02-28T19:24:36Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-02-29T06:45:00Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-02-29T07:09:52Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-02-29T07:44:52Z",false,"COMMENTED"
"fabriceci","CONTRIBUTOR","I can't speak for the best approach, but the solution is simple and fixes the bug, despite its drawbacks. I'll let someone else choose the best approach.","2024-02-28T16:14:37Z",false,"APPROVED"
"timothyqiu","MEMBER","LGTM. I guess the same could be done to the 2D version as well?","2024-04-16T13:21:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-28T08:45:14Z",false,"APPROVED"
"Giwayume","CONTRIBUTOR","","2024-02-28T00:01:37Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-28T00:32:46Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-03-01T09:56:39Z",false,"COMMENTED"
"Chubercik","CONTRIBUTOR","","2024-03-01T10:08:04Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-01T11:23:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-02T14:51:21Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-02T22:45:26Z",false,"COMMENTED"
"Nazarwadim","CONTRIBUTOR","","2024-03-02T23:13:01Z",false,"COMMENTED"
"Chubercik","CONTRIBUTOR","","2024-03-17T18:11:58Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

Binary size of a stripped Linux x86_64 optimized editor binary (`optimize=speed lto=full`) decreases by 110 KB with this PR:

```
122,973,808  godot.linuxbsd.editor.x86_64.master
122,863,184  godot.linuxbsd.editor.x86_64
```

This is counterintuitive since I'd expect forcing inlining to *increase* binary size.

What's also counterintuitive is that performance is pretty much identical to before in this testing project: [test_vector2_performance.zip](https://github.com/user-attachments/files/16281054/test_vector2_performance.zip)

```
angle: 311 ms
angle_to: 230 ms
angle_to_point: 332 ms
ceil: 205 ms
clamp: 211 ms
cross: 205 ms
distance_squared_to: 213 ms
distance_to: 212 ms
dot: 213 ms
floor: 208 ms
from_angle: 230 ms
is_equal_approx: 210 ms
is_finite: 209 ms
is_normalized: 208 ms
is_zero_approx: 212 ms
length: 211 ms
length_squared: 209 ms
limit_length: 310 ms
move_toward: 230 ms
normalized: 213 ms
posmod: 738 ms
posmodv: 724 ms
project: 212 ms
round: 235 ms
rotated: 228 ms
sign: 216 ms
```

The figures I get before and after this PR are within 2% of each other. Something I noticed is that `posmod()` and `posmodv()` are quite a bit slower than every other method out there ‚Äì¬†is there room for optimization here?

<details open>

<summary>PC specifications</summary>

- **CPU:** Intel Core i9-13900K
- **GPU:** NVIDIA GeForce RTX 4090
- **RAM:** 64 GB (2√ó32 GB DDR5-5800 C30)
- **SSD:** Solidigm P44 Pro 2 TB
- **OS:** Linux (Fedora 40)
</details>","2024-07-18T09:41:36Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-07-20T13:29:17Z",false,"COMMENTED"
"Chubercik","CONTRIBUTOR","","2024-07-20T13:35:34Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-07-20T13:41:53Z",false,"COMMENTED"
"Chubercik","CONTRIBUTOR","","2024-07-20T14:06:20Z",false,"COMMENTED"
"Chaosus","MEMBER","","2024-07-20T14:57:47Z",false,"COMMENTED"
"Chubercik","CONTRIBUTOR","","2024-07-22T23:06:34Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-27T22:04:30Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-02-27T22:12:27Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-02-27T22:15:37Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-27T22:39:09Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-27T22:58:27Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-02-28T15:24:15Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-28T16:28:24Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-02-28T23:38:04Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-29T09:03:03Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-02-29T17:11:33Z",false,"COMMENTED"
"paulloz","MEMBER","All good üëç  

I think that at some point in the future, we might want to do something clever to avoid running `dotnet format` on all the projects all the time.","2024-02-29T20:10:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-27T20:31:25Z",false,"APPROVED"
"akien-mga","MEMBER","I confirm this solves the crash for me.","2024-02-27T20:01:12Z",false,"APPROVED"
"Arnklit","CONTRIBUTOR","Just tested this PR. It works as expected. With this it's no longer possible to block the error dialog with the naming dialog and you have to dismiss the error dialog before interacting with the naming dialog.
Code looks good to me.","2024-04-12T10:18:00Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-13T09:27:28Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-27T17:54:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-27T19:06:27Z",false,"COMMENTED"
"raulsntos","MEMBER","Nice catch! Thank you so much.

- Follow-up to https://github.com/godotengine/godot/pull/88730.","2024-02-27T16:43:51Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-27T16:37:04Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-27T19:02:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-27T19:04:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-27T19:04:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-27T19:13:05Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-27T19:33:23Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-27T19:33:53Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-27T19:34:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-27T19:40:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-27T19:42:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-27T19:46:47Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-27T19:49:44Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-27T19:50:33Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-27T21:11:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-28T07:45:53Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-28T15:40:28Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Fine (Even the accidental PROCESS_THREAD_GROUP_INHERIT change)","2024-02-28T15:41:38Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-28T15:42:53Z",false,"COMMENTED"
"fire","MEMBER","","2024-02-29T02:13:07Z",false,"COMMENTED"
"fire","MEMBER","","2024-02-29T02:13:40Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-29T10:51:10Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-29T10:51:19Z",false,"APPROVED"
"raulsntos","MEMBER","What we got from the rendering team on RC is that the current `GetSupport` implementation returns the opposite of the _support_, and this PR fixes that. We also think that it's unlikely there are many users consuming this API, so we think breaking compat here is acceptable. Let's merge this for the 4.3 beta, and see if we get user reports.","2024-05-20T17:02:51Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-27T16:11:58Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-02-27T20:32:22Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-02-27T15:17:09Z",false,"COMMENTED"
"Muller-Castro","CONTRIBUTOR","","2024-02-27T15:18:33Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-27T16:29:34Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-27T14:26:32Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-28T14:51:35Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-02-28T14:55:20Z",false,"COMMENTED"
"Cass-dev-web","CONTRIBUTOR","","2024-02-28T15:32:50Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-27T14:19:58Z",false,"APPROVED"
"groud","MEMBER","","2024-02-27T14:44:51Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-02-27T17:07:08Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Again, I don't think it was an accident since it's difficult _not_ to notice it, but I do not mind the change","2024-02-27T17:38:10Z",false,"APPROVED"
"raulsntos","MEMBER","Thanks for contributing to the .NET documentation.

We usually try to match the Core documentation, so I took a look at the documentation for [Color](https://github.com/godotengine/godot/blob/a586e860e5fc382dec4ad9a0bec72f7c6684f020/doc/classes/Color.xml) and it looks like these changes mostly match the documentation for the [`a` member](https://github.com/godotengine/godot/blob/a586e860e5fc382dec4ad9a0bec72f7c6684f020/doc/classes/Color.xml#L475-L477). I made comments on the parts that are different.","2024-02-27T15:35:22Z",false,"COMMENTED"
"raulsntos","MEMBER","LGTM. Thanks!","2024-02-27T15:58:24Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-27T13:10:01Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-04-03T12:01:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-03T12:03:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-03T13:23:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-03T13:26:54Z",false,"COMMENTED"
"Calinou","MEMBER","Makes sense to me. We could perhaps print the time taken to reimport the file once the import is done too, so you can use this for benchmarking the import speed of individual resources.","2024-02-27T17:09:33Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

![image](https://github.com/godotengine/godot/assets/180032/87e90b7e-1578-4301-95af-1def78ac97cd)

Note that nested lists are not supported by this code though. The following in the XML:

```
- List
  - Nested
  - Item
    - More nested
  - Less nested
- Even less nested
```

Results in:

![image](https://github.com/godotengine/godot/assets/180032/ece31d0d-d1af-4f72-ae26-a23fb49cca3e)

I don't recall seeing nested lists in the XML class reference, but it's worth keeping in mind for custom class reference from scripts and should be documented once we make a PR for godot-docs.","2024-02-27T19:34:09Z",false,"APPROVED"
"dalexeev","MEMBER","* Needs work. Personally I would prefer #67037.","2024-02-29T09:59:00Z",false,"CHANGES_REQUESTED"
"Mickeon","CONTRIBUTOR","If it compiles surely this is fine-","2024-02-27T11:24:18Z",false,"APPROVED"
"vnen","MEMBER","","2024-04-18T18:26:49Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","Please note, that this PR only addresses the linked bug report for Windows, but not for Linux. It is fine for this PR to solve it only on Windows, but the OP should be updated and the ""Fixes"" Github-keyword removed.","2024-02-29T18:54:05Z",false,"DISMISSED"
"Sauermann","CONTRIBUTOR","","2024-02-29T19:53:03Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-03-01T02:15:00Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-27T07:55:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-27T08:00:00Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-25T10:24:02Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-03-02T13:12:16Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-28T14:39:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-28T15:27:41Z",false,"COMMENTED"
"joaoh82","CONTRIBUTOR","","2024-02-28T15:32:42Z",false,"COMMENTED"
"AThousandShips","MEMBER","Might be good to add some tests, but matches the code referenced in https://github.com/godotengine/godot-proposals/issues/3948#issuecomment-1035074260

Looks good and makes sense, some further feedback from the core team would be good though ","2024-02-28T15:46:34Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-28T19:38:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-28T19:39:57Z",false,"COMMENTED"
"joaoh82","CONTRIBUTOR","","2024-02-28T19:51:27Z",false,"COMMENTED"
"joaoh82","CONTRIBUTOR","","2024-02-28T20:41:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-29T09:03:48Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-02-26T18:11:49Z",false,"APPROVED"
"mhilbrunner","MEMBER","","2024-02-26T18:01:12Z",false,"APPROVED"
"Calinou","MEMBER","","2024-02-26T18:05:40Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","lgtm","2024-02-27T02:42:48Z",false,"APPROVED"
"groud","MEMBER","Sounds like an acceptable fix to me.","2024-04-25T11:16:38Z",false,"APPROVED"
"akien-mga","MEMBER","Assuming this fixes the issue, that seems good.

I do start wondering what's the impact of these checks in `TOOLS_ENABLED` builds on performance?","2024-02-26T16:03:06Z",false,"APPROVED"
"adamscott","MEMBER","","2024-02-26T18:07:52Z",false,"COMMENTED"
"0x0ACB","CONTRIBUTOR","","2024-02-26T18:11:54Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-02-26T18:13:56Z",false,"COMMENTED"
"0x0ACB","CONTRIBUTOR","","2024-02-26T18:22:54Z",false,"COMMENTED"
"0x0ACB","CONTRIBUTOR","","2024-02-26T18:30:20Z",false,"COMMENTED"
"adamscott","MEMBER","Let's do this!","2024-02-26T18:17:47Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-02-26T16:09:38Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-02-26T17:18:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","I can't reproduce the error, but this makes sense.","2024-02-26T17:19:34Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-26T20:57:24Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-02-26T11:55:26Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-02-26T11:56:00Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-02-26T11:57:35Z",false,"COMMENTED"
"time-killer-games","CONTRIBUTOR","","2024-02-26T12:01:24Z",false,"COMMENTED"
"time-killer-games","CONTRIBUTOR","","2024-02-26T12:01:51Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-02-26T12:02:08Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-02-26T12:07:27Z",false,"COMMENTED"
"time-killer-games","CONTRIBUTOR","","2024-02-26T12:08:19Z",false,"COMMENTED"
"time-killer-games","CONTRIBUTOR","","2024-02-26T12:10:02Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-02-26T12:13:12Z",false,"COMMENTED"
"time-killer-games","CONTRIBUTOR","","2024-02-26T12:16:38Z",false,"COMMENTED"
"time-killer-games","CONTRIBUTOR","","2024-02-26T17:37:01Z",false,"COMMENTED"
"time-killer-games","CONTRIBUTOR","","2024-02-26T17:48:44Z",false,"COMMENTED"
"time-killer-games","CONTRIBUTOR","","2024-02-26T18:16:56Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-02-26T18:21:02Z",false,"COMMENTED"
"time-killer-games","CONTRIBUTOR","","2024-02-26T21:35:28Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-02-28T06:46:57Z",false,"COMMENTED"
"time-killer-games","CONTRIBUTOR","","2024-03-02T04:34:22Z",false,"COMMENTED"
"time-killer-games","CONTRIBUTOR","","2024-03-02T04:38:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-02T09:48:21Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-03-02T10:03:49Z",false,"COMMENTED"
"time-killer-games","CONTRIBUTOR","","2024-03-05T00:25:57Z",false,"COMMENTED"
"fire","MEMBER","Aha. I switched from Firefox to Safari and it loaded. See previous comment. Assuming that there is no functionality change.","2024-02-26T21:17:13Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-27T08:47:29Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me, and compiles fine. A quick test shows the GDQuest TPS demo with 3D physics seems to work.","2024-02-27T14:58:22Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-02-26T17:48:27Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-26T17:50:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-26T19:09:56Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-26T09:49:28Z",false,"APPROVED"
"KoBeWi","MEMBER","Works great. It fixes current fullscreen problems, but I didn't test extensively for new ones (didn't notice any from brief testing though).","2024-06-10T10:09:36Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-26T09:56:01Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-27T09:54:17Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-27T15:07:42Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-27T15:31:37Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-27T15:52:49Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-28T00:17:26Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-28T00:33:43Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-28T02:50:43Z",false,"COMMENTED"
"Paulb23","MEMBER","","2024-03-10T20:51:50Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-03-11T14:31:35Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I would've solved this differently in https://github.com/godotengine/godot/pull/87440 but it is good to have sooner than later.","2024-02-25T22:24:39Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I do approve of this as is, but I do agree it could be worded better.","2024-02-25T22:55:52Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-29T12:57:03Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-29T13:16:21Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-29T13:18:57Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-29T13:25:56Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-29T13:27:19Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-29T13:44:56Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-29T14:33:24Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-29T14:34:33Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-29T14:40:05Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-03-01T13:51:01Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Looks good to me!

I agree that the options added in this PR would qualify as ""advanced"".","2024-04-04T18:37:41Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-02-29T14:02:23Z",false,"COMMENTED"
"emre0altan","CONTRIBUTOR","","2024-02-29T18:26:59Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-29T18:47:19Z",false,"COMMENTED"
"emre0altan","CONTRIBUTOR","","2024-02-29T19:15:45Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-29T23:10:32Z",false,"APPROVED"
"Geometror","MEMBER","Sorry for the long wait. For me this is sensible, but someone from core should take a look at this as well.
Should be safe to merge, as I just checked that there were no changes of MethodInfo/PropertyInfo within the last few months.","2024-07-12T13:47:03Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-08-27T21:35:50Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-09-08T14:33:09Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-03-26T04:31:23Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected.

However, there's an issue: if you drag-and-drop onto an empty scene, a new inherited scene is created. This is intended engine behavior which only currently applies to the 2D editor. This operation doesn't care about the position you drag-and-dropped the scene in, so it shouldn't display the position and should display a message of this form instead:

> Creating inherited scene from: filename.tscn","2024-02-26T21:43:18Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","","2024-02-26T23:21:05Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-02-25T18:27:24Z",false,"APPROVED"
"kleonc","MEMBER","","2024-02-25T21:38:04Z",false,"CHANGES_REQUESTED"
"Mickeon","CONTRIBUTOR","","2024-02-25T21:38:52Z",false,"COMMENTED"
"kleonc","MEMBER","","2024-02-25T21:42:52Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-25T21:43:40Z",false,"COMMENTED"
"kleonc","MEMBER","Seems strange to me that the block adding `Selected Tile` section is after the block handling `TileSetEditor::EDITMODE_COLLISION` but before the blocks handling `TileSetEditor::EDITMODE_NAVIGATION` / `TileSetEditor::EDITMODE_OCCLUSION`.
But seems like `selected_*` property is shown within the inspector at the begining regardless of this so I guess it's fine as is... :thinking:

||||
|--------|--------|--------|
|![godot windows opt tools 64_L9H9zjqcM8](https://github.com/godotengine/godot/assets/9283098/a556fff1-05ca-4d0a-9fba-7d81d0bab5a3)|![O18VhvDk4S](https://github.com/godotengine/godot/assets/9283098/34a7435b-8ca1-47af-84da-4d842d979374)|![17ADzunuRM](https://github.com/godotengine/godot/assets/9283098/ea029f3d-a273-4f3c-8683-09b40df87467)|

","2024-02-25T21:55:01Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","My thoughts are the same as https://github.com/godotengine/godot/pull/88825#pullrequestreview-1899721526","2024-02-25T18:27:27Z",false,"COMMENTED"
"MewPurPur","CONTRIBUTOR","LGTM (literally)","2024-02-26T14:27:31Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me.","2024-03-08T10:17:00Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","All is well what ends well","2024-03-08T11:36:11Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-25T18:04:41Z",false,"APPROVED"
"adamscott","MEMBER","Obvious typo indeed.","2024-02-25T18:28:58Z",false,"APPROVED"
"ajreckof","MEMBER","Love it! 
icon is clear and takes less place. Moreover it goes better with other button next to it that are icons only. ","2024-02-25T17:35:24Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Desirable it would seem like.
Although I would keep both the name AND the icon for the **Create New Project** popup.","2024-02-25T17:42:30Z",false,"APPROVED"
"MewPurPur","CONTRIBUTOR","Also, I agree with Micky.","2024-02-25T18:05:20Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-02-25T18:35:58Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.","2024-02-26T21:24:06Z",false,"APPROVED"
"fire","MEMBER","","2024-02-26T14:34:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-26T14:37:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-26T14:47:21Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-26T14:47:27Z",false,"COMMENTED"
"fire","MEMBER","","2024-03-07T13:22:52Z",false,"COMMENTED"
"fire","MEMBER","","2024-03-08T23:30:54Z",false,"COMMENTED"
"TokageItLab","MEMBER","The UI seems much improved. However, I feel that the `Export Skeleton Rest Pose` features need more discussion.

I understand where you are coming from with the desire to extract individual Animations, but from a consistency standpoint, an option to 'include rests as ""REST"" animation in the AnimationPlayer of imported tres', and separate the animation from the imported scene and save it as new animation would seem more appropriate, IMO. Then, other models should be able to refer that AnimationPlayer to specify the ""REST"" animation for `Rest Pose`.

Even if it is extracted separately, at least it should be a folded option like `Use External`, similar to Mesh and Material since this option should be not necessary in many cases.

![image](https://github.com/godotengine/godot/assets/61938263/7db82bea-f579-43b8-a410-d62d42f1f810)

@lyuma So, I believe that the `Export Skeleton Rest Pose` functionality can be separated from this PR for now, can you remove/separate that option once from this PR? Other than that, it seems to make sense and we can be Approved.","2024-03-16T06:17:10Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","LGTM","2024-03-18T06:10:46Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-18T09:13:41Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-25T18:26:21Z",false,"COMMENTED"
"emre0altan","CONTRIBUTOR","","2024-02-25T19:08:29Z",false,"COMMENTED"
"jsjtxietian","CONTRIBUTOR","","2024-02-26T04:26:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-26T11:45:14Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-26T14:20:13Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-02-26T16:48:24Z",false,"APPROVED"
"jsjtxietian","CONTRIBUTOR","","2024-02-27T04:19:22Z",false,"COMMENTED"
"TokageItLab","MEMBER","It makes sense as an optional feature. As far as I can look in the code, rest has not been changed, so I assume this change is reasonably safe.","2024-02-26T12:16:19Z",false,"APPROVED"
"lyuma","CONTRIBUTOR","","2024-02-26T12:26:04Z",false,"COMMENTED"
"fire","MEMBER","","2024-02-26T13:45:53Z",false,"APPROVED"
"fire","MEMBER","Looks good to me.","2024-02-25T17:42:22Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","The description _looks_ sound","2024-02-25T17:50:22Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-25T18:16:20Z",false,"COMMENTED"
"Illauriel","CONTRIBUTOR","","2024-02-25T18:33:58Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-25T18:38:14Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","","2024-02-25T19:11:55Z",false,"COMMENTED"
"TokageItLab","MEMBER","","2024-02-26T22:22:13Z",false,"APPROVED"
"ryevdokimov","CONTRIBUTOR","Before: 

https://github.com/godotengine/godot/assets/105675984/1e6ca660-8d97-4dfe-8ced-c6819b96f83c

After:


https://github.com/godotengine/godot/assets/105675984/26266a46-5563-41bb-8bba-dcf78463300b



","2024-02-25T17:02:29Z",false,"APPROVED"
"ryevdokimov","CONTRIBUTOR","","2024-02-25T18:17:16Z",false,"APPROVED"
"AThousandShips","MEMBER","LGTM, haven't tested but code makes sense","2024-02-27T15:19:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-27T15:34:42Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-28T09:31:59Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-04-01T20:12:16Z",false,"COMMENTED"
"joined72","CONTRIBUTOR","","2024-04-02T09:57:30Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks good to me now! Great investigative work","2024-04-02T20:29:25Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Current PR's behavior is a fairly safe bet for now, should've been like this a long while ago.","2024-02-25T19:45:34Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-02-25T20:04:50Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-25T20:23:35Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-25T11:23:22Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","","2024-02-25T11:25:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-25T11:25:29Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-25T19:47:54Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-25T11:08:29Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-27T09:08:36Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-27T09:09:34Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-02-27T09:16:21Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-02-27T09:19:40Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-27T09:27:22Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","","2024-02-29T18:01:46Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-19T08:24:33Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-02-25T06:35:47Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-03-28T17:02:56Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-03-28T17:05:04Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-03-29T01:53:48Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-03-29T18:23:29Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-03-29T19:44:20Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-03-29T19:49:21Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-03-29T19:55:32Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-03-29T20:02:32Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-04-25T23:29:05Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-04-25T23:29:37Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-27T19:49:32Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-27T19:53:47Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-27T20:03:30Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-04-28T00:55:26Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-28T05:32:40Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-28T05:34:16Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-04-28T16:03:33Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-28T21:39:47Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-04-29T02:02:41Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","The code looks good!

I haven't been able to test, so additional testing and validation would be needed, but that should be the easy part :)","2024-04-30T14:10:22Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-04-30T17:05:13Z",false,"CHANGES_REQUESTED"
"raulsntos","MEMBER","","2024-04-30T18:03:21Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-04-30T18:03:38Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-30T18:44:07Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-30T18:55:29Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-04-30T21:34:35Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-01T04:27:17Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-01T04:28:23Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-01T04:28:59Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-01T04:30:37Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-05-07T11:06:41Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-13T15:29:23Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","Looks good!","2024-05-13T18:26:38Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-09-16T11:21:32Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-02-27T06:13:43Z",false,"APPROVED"
"TokageItLab","MEMBER","As explanation I received, the compatibility between tips definition and Godot Humanoid seems be no need to worry for now.","2024-02-27T14:30:58Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","I haven't had a chance to test this yet, but the code all looks great to me!

(There's only Fredia's note about an out-dated comment, but I don't see that as a reason to necessarily hold this back.)","2024-02-27T15:06:05Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-27T17:19:50Z",false,"APPROVED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-28T00:52:36Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-28T00:53:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-02T16:15:55Z",false,"COMMENTED"
"ajreckof","MEMBER","","2024-03-02T16:24:32Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-02T16:25:29Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-25T10:03:51Z",false,"COMMENTED"
"ryevdokimov","CONTRIBUTOR","","2024-02-25T13:29:20Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-27T21:36:39Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-25T00:18:07Z",false,"COMMENTED"
"fire","MEMBER","","2024-02-25T01:00:54Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","I do recall other things in the engine that do this, as well. It's also good to know when the bone cannot be added.","2024-02-25T01:05:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-25T09:33:22Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-25T10:28:23Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-25T10:28:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-25T10:39:34Z",false,"COMMENTED"
"clayjohn","MEMBER","Let's go ahead with this. We can remove the check for `MODE_RENDER_DEPTH` since we don't actually care about it if we are always using some color output","2024-03-04T21:02:41Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-03-04T21:24:54Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","","2024-02-24T22:30:20Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","So that's more efficient, huh?

Even if it weren't, this is standard across the codebase.","2024-02-25T00:20:01Z",false,"APPROVED"
"akien-mga","MEMBER","Looks great to me!","2024-03-26T10:26:54Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","","2024-03-27T10:58:41Z",false,"COMMENTED"
"Chubercik","CONTRIBUTOR","","2024-03-27T13:55:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","And try rebasing on top of my CI fix PR to see if everything runs","2024-03-27T14:49:17Z",false,"COMMENTED"
"Chubercik","CONTRIBUTOR","","2024-03-27T21:08:25Z",false,"COMMENTED"
"Chubercik","CONTRIBUTOR","","2024-03-27T21:09:02Z",false,"COMMENTED"
"Chubercik","CONTRIBUTOR","","2024-03-27T21:09:15Z",false,"COMMENTED"
"Chubercik","CONTRIBUTOR","","2024-03-27T21:09:29Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-27T21:10:03Z",false,"COMMENTED"
"Chubercik","CONTRIBUTOR","","2024-03-27T21:11:04Z",false,"COMMENTED"
"Chubercik","CONTRIBUTOR","","2024-03-27T21:12:37Z",false,"COMMENTED"
"fire","MEMBER","Careful review of the comment thread suggests that the embree upgrade works and that the instability is gone.

Pair with https://github.com/godotengine/godot/pull/86121","2024-03-29T23:54:33Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-24T19:24:27Z",false,"COMMENTED"
"BlueCube3310","CONTRIBUTOR","","2024-02-24T19:47:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-24T19:48:19Z",false,"COMMENTED"
"Calinou","MEMBER","Code looks good to me, but given this doesn't refactor any internal code to use the new methods, this needs a [proposal](https://github.com/godotengine/godot-proposals) to justify its inclusion in core.","2024-02-26T18:36:30Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

Note that the position displayed is always in global coordinates, but this makes sense given the final position in the game world is likely what you care about the most in this situation.","2024-02-26T21:31:34Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-24T16:57:07Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","","2024-02-24T22:33:04Z",false,"APPROVED"
"clayjohn","MEMBER","I prefer this PR over https://github.com/godotengine/godot/pull/88973. https://github.com/godotengine/godot/pull/88973 is totally fine, but I think having the static method is a little nicer as it avoids the problem of these checks getting out of sync","2024-02-28T18:29:34Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-28T18:35:45Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-05-02T11:36:38Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-04-03T16:31:42Z",false,"COMMENTED"
"KoBeWi","MEMBER","Well the GridContainer works alright and this fixes the issue.","2024-04-03T16:35:54Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-03-05T18:30:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-05T18:33:26Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Cheese","2024-03-05T19:19:59Z",false,"APPROVED"
"Calinou","MEMBER","","2024-02-24T17:22:21Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","The code looks good to me, and it fixes the issue in my testing!

From one of your [earlier comments](https://github.com/godotengine/godot/issues/86358#issuecomment-1940365211):

> There is also a question whether it makes sense to add the eye gaze interaction to the default action map. I think we should remove that bit.

This PR _doesn't_ do that. Should we add that here?

What's here already is great, so I don't think that should necessarily hold it back - we could certainly do that in a follow-up PR as well.","2024-02-24T16:05:15Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-02-25T02:59:31Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","lgtm","2024-02-27T02:12:20Z",false,"APPROVED"
"akien-mga","MEMBER","Code looks good to me overall. Haven't tested yet (I have an older laptop with a touchscreen and pen, I'll see if it gets recognized as a tablet). *Edit:* Pen is out of battery and I don't have any AAAA batteries laying around, so I can't test now :P

I didn't check in detail but the `memnew`/`memdelete` stuff around `TabletToolState` probably needs some caution to avoid double-free or memory leaks (it's good to remember that if it needs to be freed after use, any `ERR_FAIL` kind of early return need to ensure it gets freed first too).","2024-02-28T09:40:11Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-28T09:41:07Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-02-28T09:49:40Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-28T10:13:14Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-28T10:35:23Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-02-28T12:08:33Z",false,"COMMENTED"
"winston-yallow","CONTRIBUTOR","I've tested the most recent version (b01a36b3cd04499d959bbd169dec719e088a420a), everything seems to work perfectly.

### Device
Wacom Intuos M Pro (2017)

### Tilted backwards / right, medium pressure, normal tip:
![image](https://github.com/godotengine/godot/assets/44872771/3772182c-caaa-4ad8-9b56-378c9bd4b65f)

### Tilted backwards / slightly left, high pressure, eraser tip:
![image](https://github.com/godotengine/godot/assets/44872771/1d8c087c-ad38-48b1-890e-df58fcbe85f6)
","2024-02-28T14:32:46Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Oopsie.","2024-02-25T15:46:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-25T15:48:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-25T15:51:03Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-25T15:52:24Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-25T20:42:56Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-26T19:07:13Z",false,"APPROVED"
"exodrifter","NONE","I tested my MRP with this change and I wasn't able to figure out how to alias the `Dictionary` again using a similar strategy, so it seems to work.","2024-02-24T08:42:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","The fix works and looks safe.","2024-05-07T14:02:19Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-23T22:42:50Z",false,"APPROVED"
"akien-mga","MEMBER","I'm not really qualified to do a technical review here, but given the bugs it fixes and Clay's expertise on this area, I'm going to merge so we can get the fixes tested in the next dev snapshot.

Post merge code reviews from rendering/import contributors still welcome :)","2024-02-27T09:16:27Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-23T21:35:32Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/23191b834e4609baacf19855c3acb6a9f607b30f), I can't see any difference on Windows 11 22H2 with a GeForce RTX 4090 (NVIDIA 551.61). Alt-tabbing doesn't cause flickering when in exclusive fullscreen mode, but that's also the case on `master` without this PR.

I'd typically use [Special K](https://www.special-k.info/) to diagnose the actual window mode seen by the OS but I can't get it to work with Godot (pressing <kbd>Ctrl + Shift + Backspace</kbd> to show its overlay does nothing).","2024-02-27T22:39:42Z",false,"COMMENTED"
"bruvzg","MEMBER","There's also mention of clear color in the `WINDOW_MODE_FULLSCREEN` documentation, which should be changed as well.","2024-02-23T20:51:53Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-23T20:17:39Z",false,"APPROVED"
"ryevdokimov","CONTRIBUTOR","","2024-02-23T20:39:47Z",false,"COMMENTED"
"ryevdokimov","CONTRIBUTOR","","2024-02-23T20:40:45Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-23T20:42:23Z",false,"COMMENTED"
"ryevdokimov","CONTRIBUTOR","","2024-02-23T20:49:29Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-23T21:18:14Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-23T21:19:51Z",false,"COMMENTED"
"ryevdokimov","CONTRIBUTOR","","2024-02-23T21:20:38Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-23T21:21:37Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-23T21:23:24Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-23T21:24:02Z",false,"COMMENTED"
"ryevdokimov","CONTRIBUTOR","","2024-02-23T21:25:39Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-23T21:36:46Z",false,"COMMENTED"
"ryevdokimov","CONTRIBUTOR","","2024-02-23T21:49:50Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-23T21:57:12Z",false,"COMMENTED"
"ryevdokimov","CONTRIBUTOR","","2024-02-23T22:07:00Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-23T22:07:23Z",false,"APPROVED"
"ryevdokimov","CONTRIBUTOR","","2024-02-23T22:23:34Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-23T22:53:30Z",false,"COMMENTED"
"ryevdokimov","CONTRIBUTOR","","2024-02-23T22:55:38Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-23T20:02:58Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-23T20:20:31Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-23T20:21:45Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-02-23T21:23:34Z",false,"COMMENTED"
"paulloz","MEMBER","Looks good üëç  
I like that we unify the `method_doc->is_deprecated` thing with `imethod.is_deprecated`.

To not forget, this remotely affects #88570 ([link](https://github.com/godotengine/godot/pull/88570/files#diff-af904e3529e788ec295578f68561554dd3caf3d290fa274e75d83b43e500d01fR1720)).","2024-02-25T19:48:06Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-23T20:11:57Z",false,"APPROVED"
"fire","MEMBER","Overall the tests show that the geometry, normal and mirrored v looks correct. I think mirrored U is broken, but this is already an improvement even if incomplete. ","2024-02-23T19:52:48Z",false,"APPROVED"
"fire","MEMBER","","2024-02-23T20:20:32Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-02-24T05:19:47Z",false,"COMMENTED"
"fire","MEMBER","","2024-02-24T10:29:31Z",false,"APPROVED"
"Calinou","MEMBER","","2024-02-24T17:07:27Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-02-27T01:59:11Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Seems fine, especially since we aren't doing anything in this destructor :-)","2024-02-23T18:24:53Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-23T21:16:02Z",false,"APPROVED"
"YeldhamDev","MEMBER","","2024-02-23T17:26:59Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-02-26T09:19:54Z",false,"COMMENTED"
"Cass-dev-web","CONTRIBUTOR","","2024-02-26T10:32:25Z",false,"COMMENTED"
"Cass-dev-web","CONTRIBUTOR","","2024-02-26T10:35:04Z",false,"COMMENTED"
"Cass-dev-web","CONTRIBUTOR","","2024-02-26T10:48:40Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-02-26T11:00:06Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Docs are completely fine, but my sentiment above still stands.","2024-02-26T11:49:47Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","The Android updates look good!","2024-02-23T16:37:03Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-23T16:58:27Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-23T18:33:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-23T18:42:49Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-23T18:45:12Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Surely more of these won't pop up again now, _right_?","2024-02-23T19:08:05Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-23T20:06:51Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-23T12:44:50Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-23T20:00:38Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-23T11:25:18Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-23T10:30:02Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-23T20:31:32Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-24T22:58:19Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-02-25T12:25:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-25T15:06:53Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-12T21:10:48Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-03-24T15:36:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-24T15:40:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-25T22:02:51Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Thanks for the fix!

Looks like it should also fix https://github.com/GodotVR/godot_openxr_vendors/issues/67?","2024-02-23T10:09:29Z",false,"APPROVED"
"akien-mga","MEMBER","As written in https://github.com/godotengine/godot/pull/88688, I suggest we merge this safe ad hoc fix for now to fix the bug, and keep discussing in the core PR to see if we want to go with that approach in the long run.","2024-02-23T10:22:11Z",false,"APPROVED"
"raulsntos","MEMBER","Thanks for adding tests for the `GodotDisabledSourceGenerators` property.","2024-03-29T19:19:17Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-03-29T21:58:43Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-03-29T22:00:12Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-03-30T16:53:56Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-03-30T17:23:12Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-06-23T20:05:41Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-06-23T21:27:43Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-06-23T21:30:56Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-06-24T00:30:52Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good to me.","2024-02-23T20:04:19Z",false,"APPROVED"
"Calinou","MEMBER","","2024-02-23T20:06:22Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-02-23T20:06:29Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","Looks good, simpler than I thought :)","2024-02-23T05:08:35Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-22T20:40:29Z",false,"COMMENTED"
"akien-mga","MEMBER","Makes sense to me to expose this to modules.","2024-02-22T20:42:43Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-02-22T20:51:11Z",false,"COMMENTED"
"growingbrain","NONE","Thanks for making these updates.  Just a few questions.","2024-03-26T14:45:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-26T14:50:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-26T14:50:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-26T14:51:05Z",false,"COMMENTED"
"growingbrain","NONE","","2024-03-26T15:00:47Z",false,"COMMENTED"
"growingbrain","NONE","","2024-03-26T15:01:00Z",false,"COMMENTED"
"growingbrain","NONE","","2024-03-26T15:01:16Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-26T15:02:48Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-02-22T20:10:51Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-02-22T22:53:42Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","Mostly approving topmost commit (Remove scene/3d/model_*.h from FBX commit.)

consolidating ModelDocument back into GLTFDocument (and same for ModelState) drastically simplifies the code and avoids any compatibility breakage.

The only change I would like to request is to have FBXDocument inherit from Resource (really it should be RefCounted but it doesn't matter) instead of GLTFDocument, and re-declare the three public methods rather than relying on inheritance.","2024-02-23T13:11:39Z",false,"COMMENTED"
"lyuma","CONTRIBUTOR","Ah, I missed that some of the common code ended up back in GLTFDocument. I don't want to complicate this change, so I think it's fine to have FBXDocument extend GLTFDocument.

LGTM","2024-02-23T13:12:57Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","I am confused on what exactly this is about but the docs are almost just fine.","2024-02-23T18:44:37Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-23T20:35:20Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me. This should be merged back into #81746, and squashed before merge.","2024-02-23T21:03:18Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-22T22:16:23Z",false,"APPROVED"
"fire","MEMBER","There's no reproduction project but the code uses the enumeration to check if it's compressed and switch on the result. Seems correct, but I can't test it on hardware.

```c++
uint32_t mip_block_or_pixel_count = image_format >= Image::FORMAT_DXT1 ? basisu_level.m_total_blocks : basisu_level.m_orig_width * basisu_level.m_orig_height;
```
","2024-02-22T20:06:59Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-22T22:22:30Z",false,"APPROVED"
"KoBeWi","MEMBER","Makes sense.","2024-02-25T15:45:15Z",false,"APPROVED"
"bruvzg","MEMBER","Same for the second dialog.

Note: This feature will be impossible to implement in the native dialogs (on any of the supported platforms). But native dialogs usually have search functionality of their own.","2024-02-22T22:06:59Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected. Thanks for working on this feature :slightly_smiling_face: 

However, I believe this filter field should be hidden by default and should be shown when pressing <kbd>/</kbd> instead (pressing <kbd>Escape</kbd> while focused on it would hide it). This is because there's a high chance users will confuse it for the filename field if it's always visible. Moreover, it takes valuable vertical space and it's not something most users will need to see all the time.

See how it works in KDE's Dolphin:

https://github.com/godotengine/godot/assets/180032/6b8a260f-fee5-46b5-ac4e-0bde113ace2f

","2024-02-28T22:15:26Z",false,"CHANGES_REQUESTED"
"AThousandShips","MEMBER","","2024-02-29T09:33:46Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-10T14:34:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-10T14:35:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","Haven't tested but the code looks good","2024-03-10T15:16:16Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it mostly works as expected.

Pressing <kbd>Ctrl + F</kbd> doesn't automatically focus the filter LineEdit in FileDialog, but it works correctly in EditorFileDialog.","2024-04-29T21:42:04Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","","2024-04-29T21:42:37Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected now.

One thing I just noticed now is that when you close the filter dialog, the keyboard focus will be on an invisible control, which means you can't tab to other controls without having to click somewhere.

I suggest focusing the list of files when you hide the filter field if the filter field was focused before hiding it. This change is needed in both EditorFileDialog and FileDialog.

After doing this, hopefully we should have everything in place for merging this üôÇ ","2024-05-01T21:52:31Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","The focus when closing the file filter works as expected now, in both FileDialog and EditorFileDialog.

3 more things I noticed (sorry for not noticing them earlier):

- Entering text in the file filter should select the first item in the visible list of files. This should occur every time you type a character, so this should be done in the `text_changed` signal.
  - If no item is visible, the existing selection shouldn't change.
- Pressing <kbd>Enter</kbd> while focusing on the filter field should act as if you pressed <kbd>Enter</kbd> on the filename field. In other words, its `text_entered` signal should be connected to act as if the **OK** button was pressed.
- When pressing up/down arrows on the file filter field, instead of moving to the beginning/end of the selection, the selection of the list of files above should be scrolled instead. This may be more complex to implement, so this one can be left to a future PR. This behavior also doesn't make as much sense in grid view, only in list view, so it's subject to discussion.

Implementing all these will make the feature fully keyboard-friendly. This greatly improves usability, so you can type something in the filter and select an item that isn't the first result without ever having to touch the mouse.","2024-05-30T02:01:34Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected in EditorFileDialog now. However, in FileDialog, I get a crash when pressing <kbd>Enter</kbd> after typing something in the filter filed:

```
ERROR: Parameter ""p_item"" is null.
   at: set_selected (./scene/gui/tree.cpp:4696)
ERROR: Parameter ""p_item"" is null.
   at: set_selected (./scene/gui/tree.cpp:4696)

================================================================
handle_crash: Program crashed with signal 11
Engine version: Godot Engine v4.3.beta.custom_build (7ab49608cd1e380312690f39c683c967ae1dbaa5)
Dumping the backtrace. Please include this when reporting the bug to the project developer.
[1] /lib64/libc.so.6(+0x3e9a0) [0x7f6d94a5c9a0] (??:0)
[2] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x6111010] (/home/hugo/Documents/Git/godotengine/godot/./core/templates/cowdata.h:128)
[3] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x5d0f2d7] (/home/hugo/Documents/Git/godotengine/godot/./scene/gui/file_dialog.cpp:821 (discriminator 1))
[4] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x5d8c75f] (/home/hugo/Documents/Git/godotengine/godot/./core/variant/binder_common.h:309)
[5] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x5d80eb0] (/home/hugo/Documents/Git/godotengine/godot/./core/variant/binder_common.h:419)
[6] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x5d6c508] (/home/hugo/Documents/Git/godotengine/godot/./core/object/callable_method_pointer.h:104)
[7] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x93795b7] (/home/hugo/Documents/Git/godotengine/godot/./core/variant/callable.cpp:57)
[8] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x93807fb] (/home/hugo/Documents/Git/godotengine/godot/./core/variant/callable_bind.cpp:270)
[9] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x93795b7] (/home/hugo/Documents/Git/godotengine/godot/./core/variant/callable.cpp:57)
[10] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x98bccd1] (/home/hugo/Documents/Git/godotengine/godot/./core/object/object.cpp:1220)
[11] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x5a22860] (/home/hugo/Documents/Git/godotengine/godot/./scene/main/node.cpp:3884)
[12] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x365ad23] (/home/hugo/Documents/Git/godotengine/godot/./core/object/object.h:936)
[13] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x5e8d196] (/home/hugo/Documents/Git/godotengine/godot/./scene/gui/line_edit.cpp:502 (discriminator 3))
[14] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x5cddc3a] (/home/hugo/Documents/Git/godotengine/godot/./scene/gui/control.cpp:1828)
[15] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x5af2b65] (/home/hugo/Documents/Git/godotengine/godot/./scene/main/viewport.cpp:2201)
[16] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x5afa324] (/home/hugo/Documents/Git/godotengine/godot/./scene/main/viewport.cpp:3249 (discriminator 2))
[17] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x5b295a3] (/home/hugo/Documents/Git/godotengine/godot/./scene/main/window.cpp:1683)
[18] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x5af7d1e] (/home/hugo/Documents/Git/godotengine/godot/./scene/main/viewport.cpp:2978)
[19] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x5afa127] (/home/hugo/Documents/Git/godotengine/godot/./scene/main/viewport.cpp:3233 (discriminator 1))
[20] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x5b295a3] (/home/hugo/Documents/Git/godotengine/godot/./scene/main/window.cpp:1683)
[21] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x5bddb25] (/home/hugo/Documents/Git/godotengine/godot/./core/variant/binder_common.h:304 (discriminator 2))
[22] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x5bcb7b4] (/home/hugo/Documents/Git/godotengine/godot/./core/variant/binder_common.h:419)
[23] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x5bb344c] (/home/hugo/Documents/Git/godotengine/godot/./core/object/callable_method_pointer.h:104)
[24] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x93795b7] (/home/hugo/Documents/Git/godotengine/godot/./core/variant/callable.cpp:57)
[25] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x2934549] (/home/hugo/Documents/Git/godotengine/godot/./core/variant/variant.h:876)
[26] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x291c338] (/home/hugo/Documents/Git/godotengine/godot/platform/linuxbsd/x11/display_server_x11.cpp:4040 (discriminator 1))
[27] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x291c02e] (/home/hugo/Documents/Git/godotengine/godot/platform/linuxbsd/x11/display_server_x11.cpp:4017)
[28] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x92ddd08] (/home/hugo/Documents/Git/godotengine/godot/./core/input/input.cpp:774)
[29] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x92df2d0] (/home/hugo/Documents/Git/godotengine/godot/./core/input/input.cpp:1053)
[30] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x29222e6] (/home/hugo/Documents/Git/godotengine/godot/./core/templates/local_vector.h:339)
[31] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x28f27f6] (/home/hugo/Documents/Git/godotengine/godot/platform/linuxbsd/os_linuxbsd.cpp:960)
[32] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x28e7fd1] (/home/hugo/Documents/Git/godotengine/godot/platform/linuxbsd/godot_linuxbsd.cpp:85)
[33] /lib64/libc.so.6(+0x2814a) [0x7f6d94a4614a] (??:0)
[34] /lib64/libc.so.6(__libc_start_main+0x8b) [0x7f6d94a4620b] (??:0)
[35] /home/hugo/Documents/Git/godotengine/godot/bin/godot.linuxbsd.editor.x86_64() [0x28e7dc5] (??:?)
-- END OF BACKTRACE --
================================================================
```

**Testing project:** [test_pr_88673.zip](https://github.com/user-attachments/files/15744979/test_pr_88673.zip)

","2024-06-07T21:13:40Z",false,"CHANGES_REQUESTED"
"Calinou","MEMBER","Tested locally, it mostly works as expected. The autoselect behavior where the first match is selected after every keystroke works in EditorFileDialog but not FileDialog.

This part below could be left for a future PR since that behavior should be discussed further:

- Now that I think about it again, pressing <kbd>Enter</kbd> while focused on the filter field should move the focus to the file tree, so that you can refine your selection with the keyboard. This is how KDE's Dolphin file manager works. This can already be done by pressing <kbd>Shift + Tab</kbd> but it's a bit awkward to do (and less intuitive).","2024-07-24T15:59:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-24T16:00:40Z",false,"COMMENTED"
"vPumpking","CONTRIBUTOR","","2024-07-26T13:37:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-26T13:39:34Z",false,"COMMENTED"
"kus04e4ek","CONTRIBUTOR","","2024-07-26T13:39:53Z",false,"COMMENTED"
"vPumpking","CONTRIBUTOR","","2024-07-26T14:00:43Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-07-26T14:03:02Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-08-18T19:22:54Z",false,"COMMENTED"
"vPumpking","CONTRIBUTOR","","2024-09-30T17:52:56Z",false,"COMMENTED"
"Calinou","MEMBER","Works great now :slightly_smiling_face: 

**Note for reviewers:** EditorFileDialog changes were removed from this PR since https://github.com/godotengine/godot/pull/97344 was merged. This PR now only modifies FileDialog, which https://github.com/godotengine/godot/pull/97344 didn't modify. Therefore, this PR ensures feature parity between FileDialog and EditorFileDialog on providing a filter function.","2024-10-01T17:35:43Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-02T09:14:01Z",false,"APPROVED"
"raulsntos","MEMBER","> Only the first commit should be cherry-picked.

There's only one commit though. Did you mean to keep the .NET version change in a separate commit?","2024-02-22T16:46:33Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-22T16:53:50Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-22T16:08:46Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-02-22T18:33:41Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","That extra detail in `is_compressed` is very, very necessary","2024-02-22T20:02:30Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-21T18:08:49Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-22T14:49:35Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Fun stuff","2024-02-22T13:49:51Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-02-22T14:06:59Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-22T14:44:34Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-02-23T08:33:06Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-02-23T08:35:52Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-02-23T08:39:01Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-23T19:23:06Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-02-23T20:51:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-23T20:56:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-24T17:05:08Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-24T17:31:03Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-24T17:38:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-24T17:42:05Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-02-26T12:37:24Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-02-26T12:54:29Z",false,"COMMENTED"
"RandomShaper","MEMBER","","2024-02-26T12:55:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-26T13:25:07Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-26T13:28:20Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-26T13:51:30Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-02-26T13:57:58Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-22T13:42:47Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-12T22:00:03Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-12T22:03:48Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-12T22:06:47Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-12T22:09:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-04-18T21:31:47Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-02-22T09:16:47Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-02-22T09:22:18Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-22T09:39:24Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-22T09:43:52Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` bb6b06c81343073f10cbbd2af515cf0dac1e6549), it works as expected.

https://github.com/godotengine/godot/assets/180032/949042ca-0701-4653-a568-f004c6b7d0b8","2024-02-26T15:17:18Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Docs are just fine and say all you need to know about it.

The feature itself is highly requested for games with this art-style. Even me and a group of friends could actually make use of this.","2024-02-29T11:53:44Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-07T08:41:33Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-03-07T09:10:16Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-03-07T23:37:41Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-02-22T00:38:23Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-02-21T19:54:58Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-02-21T20:58:27Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-02-22T01:01:46Z",false,"COMMENTED"
"smix8","CONTRIBUTOR","","2024-02-22T07:32:00Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-22T10:06:38Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-02-22T15:18:55Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-21T20:21:44Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-25T01:12:58Z",false,"COMMENTED"
"DeeJayLSP","CONTRIBUTOR","","2024-02-25T02:06:37Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-29T21:26:17Z",false,"COMMENTED"
"DeeJayLSP","CONTRIBUTOR","","2024-03-03T04:18:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-05T17:42:50Z",false,"COMMENTED"
"DeeJayLSP","CONTRIBUTOR","","2024-03-05T17:53:59Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-03-05T18:32:14Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

In terms of quality, I can't spot the difference with the uncompressed WAV source on my Audeze Maxwell headphones. There's no doubt this sounds much better than IDA-ADPCM.

With a 38-second 44,100 Hz, 16-bit stereo audio file, the uncompressed WAV is 6.5 MB and the corresponding imported QOA file (in `.godot/imported`) is 1.3 MB. This is a reduction of over 5 MB, which is much greater than the file size added to export templates by this PR. Even if you only had a few seconds of mono audio to compress to QOA, you'd still easily save the ~25 KB added by this PR.

My only concern is with the different import mode required, as we don't use this approach for any other audio format (unless the source format is different, like Ogg Vorbis and MP3). I don't have a good answer to this though, as refactoring it sounds difficult.

There's also the alternative of decoding Ogg Vorbis/MP3 to uncompressed audio at load-time which could work well, at the cost of requiring more memory (it would have to be something you enable on import on specific sound effects).

**Testing project:** [test_pr_88646.zip](https://github.com/godotengine/godot/files/14499782/test_pr_88646.zip)[^1]

[^1]: Music in the testing project by [Marc A. Pullen](https://www.youtube.com/@TheMarcAPullen).
","2024-03-05T18:34:32Z",false,"COMMENTED"
"miv391","CONTRIBUTOR","","2024-03-10T14:46:59Z",false,"COMMENTED"
"DeeJayLSP","CONTRIBUTOR","","2024-03-10T15:15:27Z",false,"COMMENTED"
"DeeJayLSP","CONTRIBUTOR","","2024-03-29T14:02:40Z",false,"COMMENTED"
"fire","MEMBER","The last remaining criticism I had of the pull regarding missing Ping-Pong and Backward loops was solved, so I don't have any arguments against merging QOA. Maybe @reduz or the audio team can look, but we don't have an active audio team.

Approving the enhancement, didn't review the technical implementation deeply.","2024-04-10T14:28:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-22T10:53:41Z",false,"APPROVED"
"akien-mga","MEMBER","Makes sense, let's retry later if we can fix the faulty behavior.","2024-02-22T07:57:53Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-21T18:01:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-21T18:10:52Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Apparently the diff is outdated but I will publish what I had in the meantime","2024-02-21T18:35:07Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-21T18:39:28Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-02-21T19:03:41Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-02-22T01:07:20Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","More can always be added later. This is a great start.","2024-02-22T15:45:15Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-22T15:53:02Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-21T17:55:28Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-21T19:33:55Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-21T21:04:59Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-21T21:34:19Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-21T21:41:50Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-21T21:42:06Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-21T21:42:14Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-21T21:42:51Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-21T21:43:12Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-22T00:29:19Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","This works well for me, and drops directly in to my Humanoid hand tests.","2024-02-22T00:59:37Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-22T09:31:50Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-22T14:51:53Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-22T14:54:22Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-02-23T04:44:31Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","Perfect! Only two nitpicking things. This looks real good, thanks @dsnopek !","2024-02-23T05:00:50Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-02-23T13:03:41Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-23T13:04:13Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","Looks good!

Added some minor feedback to address.","2024-02-23T17:26:04Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-02-23T18:19:24Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-23T18:20:42Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-23T18:21:09Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

https://github.com/godotengine/godot/assets/180032/72cd32dc-d191-470b-9743-c41c71b21fa8

Code looks good to me.

For a future PR, we should look into disabling the **Add Key/Value Pair** button (with a tooltip explaining why) until a type other than Nil is assigned to the key.","2024-02-21T19:09:04Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","If my thumbs up counts for anything.","2024-02-21T20:18:36Z",false,"APPROVED"
"paulloz","MEMBER","Thanks! Fixes
- godotengine/godot-docs#8799","2024-02-21T17:36:12Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-21T19:35:29Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-02-21T17:14:06Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-02-21T23:46:45Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-22T13:27:31Z",false,"APPROVED"
"kus04e4ek","CONTRIBUTOR","","2024-03-16T09:46:22Z",false,"COMMENTED"
"adamscott","MEMBER","Tested out the [mic record](https://github.com/godotengine/godot-demo-projects/tree/master/audio/mic_record) demo and it works flawlessly.

The code looks good too. So I'm giving it my thumbs up.

Great job, @bruvzg !","2024-10-07T14:14:35Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-10-07T14:18:14Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-10-07T14:28:44Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-10-07T14:28:53Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-10-07T14:29:45Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-10-07T14:32:45Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-21T09:38:23Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-25T20:32:20Z",false,"APPROVED"
"Calinou","MEMBER","","2024-02-21T02:16:37Z",false,"COMMENTED"
"ramadm","CONTRIBUTOR","","2024-02-22T00:56:42Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/6c579280630715ff7da8310d405ef34194847294), it works as expected. Code looks good to me.","2024-04-10T00:43:45Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-02-21T00:54:26Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-02-20T23:25:37Z",false,"CHANGES_REQUESTED"
"m4gr3d","CONTRIBUTOR","This updated approach looks good to me!

I wonder if it's worth adding an additional `Fix and run` button to the confirm dialog to automatically add the missing architecture as your previous approach was doing, though that may make the UX looks busy.

cc @Calinou Any thoughts on the UX used in this PR?","2024-02-23T18:56:50Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-02-21T05:21:33Z",false,"COMMENTED"
"DarkMessiah","CONTRIBUTOR","","2024-02-21T08:30:55Z",false,"COMMENTED"
"DarkMessiah","CONTRIBUTOR","","2024-02-21T08:31:09Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-02-21T09:32:36Z",false,"COMMENTED"
"dalexeev","MEMBER","This works, but the text is updated only after restarting the editor. This can be solved by checking the file on the `EditorFileSystem.filesystem_changed` signal or every time the popup is shown. In my opinion, this is an overkill, replacing ""Create"" with ""Create/Override"" or ""Setup"" will work too.

Also, please [squash commits into one](https://docs.godotengine.org/en/stable/contributing/workflow/pr_workflow.html#the-interactive-rebase). To do this you need a local git client, GitHub web interface doesn't support it.","2024-02-22T06:52:47Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-02-22T11:32:27Z",false,"COMMENTED"
"Cass-dev-web","CONTRIBUTOR","","2024-02-22T11:33:44Z",false,"COMMENTED"
"dalexeev","MEMBER","Looks good to me. Please squash commits one more time (note that you can do this locally before force-push to save CI resources).","2024-02-22T12:06:02Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-02-22T15:57:41Z",false,"APPROVED"
"akien-mga","MEMBER","I saw that GPUParticles3D also has this custom AABB, which is likely where you found this when adding it in your PR. I don't know what implications that one has and whether it should be removed, this might be worth reviewing.

But this is good as is to fix the regression.","2024-02-20T18:18:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-20T16:19:17Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-20T16:19:49Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-02-20T16:25:28Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-20T14:41:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-20T14:24:18Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-20T14:26:58Z",false,"APPROVED"
"MewPurPur","CONTRIBUTOR","","2024-02-21T13:48:54Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-21T14:12:10Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-02-20T14:27:42Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally (M1 Mac mini 2020 with macOS Ventura and wired DualSense), it works as expected. I can't test via Bluetooth since I'm having trouble connecting the DualSense on the Mac this way ([it used to work](https://xkcd.com/2055/)).

Great work!

I can confirm 2-finger[^1] touchpad movement + button, LED color, sensors (accelerometer + gyro) and all adaptive trigger modes work as expected.

[^1]: I was today years old when I learned that the DualSense touchpad supports two inputs at once.

One issue I noticed is that if you set the adaptive trigger's ""end"" point (circled in red) to a value lower than the ""begin"" point, errors will be spammed in the console and the project freezes:

![image](https://github.com/godotengine/godot/assets/180032/1d0453af-391c-4421-a753-03195bc49ab7)

I suggest handling this in a more graceful way, such as clamping the ""end"" point value to be always at least equal to the ""begin"" point.

Another issue I noticed is that if you call this in `_ready()`, the project freezes on startup and a message is spammed in the console:

```gdscript
# Leave this uninitialized.
var joy_num

func _ready():
	Input.set_joy_light(joy_num, Color.CYAN)
```
 
```
2024-02-22 22:34:58.476 godot.macos.editor.arm64[1228:11807] -[JoypadData playerIndex]: unrecognized selector sent to instance 0x60002694c6c0
ERROR: NSException: -[JoypadData playerIndex]: unrecognized selector sent to instance 0x60002694c6c0
   at: run (platform/macos/os_macos.mm:778)
```

This also occurs if you set the light color after waiting a single frame:

```gdscript
func _ready():
	await get_tree().process_frame
	Input.set_joy_light(0, Color.WHITE)
```

However, the following works ‚Äì wait 2 frames *and* call `set_joy_light` in each iteration of the loop:

```gdscript
func _ready():
	for i in 2:
		await get_tree().process_frame
		Input.set_joy_light(0, Color.MAGENTA)
```

It seems pretty sporadic as it'll sometimes occur but not always.

`set_joy_light()` behaves nicely when called in `_process()`, which can be used to create animations:

```gdscript
var counter = 0.0

func _process(delta):
	counter += delta * 6
	Input.set_joy_light(joy_num, Color(0.5 + sin(counter) * 0.5, 0.5 + cos(counter) * 0.5, 0))
```

https://github.com/godotengine/godot/assets/180032/e64faf5d-454c-45b3-9609-f930ec2fa4b2

___

Some questions:

- Is there a way to query whether the controller supports acceleration, gyro, touchpad, LED colors and adaptive triggers so we can disable relevant UI settings when these aren't supported? While we can query based on whether the lowercased controller name contains `dualshock 4` or `dualsense`, this won't work with third-party controllers that may support these features. We may need something like `DisplayServer.has_feature()` for controllers.
- Should we provide calibration methods for accelerometer + gyro that automatically set the current values as an offset for future calculations? Or should this be left to the project developers? @JibbSmart might have an idea about this.","2024-02-22T21:59:40Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-20T10:02:35Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","This looks good to me - the optional semaphore/wait is hidden behind the DrawRequester class/API. It also appears to fix the different gl_compatibility deadlocks being reported.","2024-02-25T15:33:03Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","I agree with the reversal. The PR introduced some issues, that are very complex to solve.","2024-02-20T09:26:54Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-02-20T09:27:46Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Huh, it makes sense in hindsight. Now it's a matter of thinking whether this is desired or not.
On a whim I'd say yes, and it doesn't look like this PR affects the existing, ""global"" toggle.
That menu is getting awfully tall though...","2024-02-20T15:21:25Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I'm going to approve in principle, based on what I said before. There's nothing particularly odd about this PR. (still needs review from 3D editor team)","2024-02-22T16:54:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-23T10:27:52Z",false,"COMMENTED"
"akien-mga","MEMBER","Didn't test, but the feature makes sense to me and the code looks straightforward.","2024-02-23T10:28:11Z",false,"APPROVED"
"ryevdokimov","CONTRIBUTOR","","2024-02-23T15:26:50Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-02-21T23:07:39Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-22T09:39:35Z",false,"APPROVED"
"jsjtxietian","CONTRIBUTOR","","2024-02-23T04:26:04Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-20T09:37:24Z",false,"COMMENTED"
"davthedev","CONTRIBUTOR","","2024-02-20T10:02:06Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","When making https://github.com/godotengine/godot/pull/88370 I encountered several minor nuisances that I feel like this PR addresses.
The code also _looks_ cleaner and I feel like users would appreciate this, even if it would ever-so-slightly change how ItemLists look.

Still requires testing to make sure nothing silly is overlooked.","2024-02-25T00:29:17Z",false,"APPROVED"
"davthedev","CONTRIBUTOR","","2024-02-25T20:09:32Z",false,"COMMENTED"
"davthedev","CONTRIBUTOR","","2024-02-25T20:09:41Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally in the editor and [control gallery demo project](https://github.com/godotengine/godot-demo-projects/tree/master/gui/control_gallery), it works as expected. However, in the default project theme used by the control gallery demo project, vertical spacing is now reduced, which makes it harder to click individual items:

Before | After
-|-
![Screenshot_20240226_192641](https://github.com/godotengine/godot/assets/180032/892a2646-fa46-4b37-aa7b-a86aeaf6841b) | ![Screenshot_20240226_192631](https://github.com/godotengine/godot/assets/180032/d2b2b886-0684-42c3-84f4-f1b66b8c8ce7)

`scene/resources/default_theme.cpp` needs to be modified to increase ItemList's `v_separation` constant to get a similar appearance to before.

We should make sure the change in how ItemList's `v_separation` theme item is interpreted is clearly documented in the release notes though, as existing themes will need to double the value for the current appearance to be retained. As such, we should avoid cherry-picking this PR to `4.2`.","2024-02-26T18:25:25Z",false,"APPROVED"
"Calinou","MEMBER","Looks good to me. In the future, we should consider adding an option to use alternating row colors in ItemList and Tree to make odd lines easier to distinguish from even lines, without relying on borders.","2024-02-26T21:42:05Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","LGTM","2024-02-20T01:09:00Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-27T09:15:01Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-20T10:45:23Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-02-20T21:36:19Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-20T21:38:34Z",false,"COMMENTED"
"Arthas92t","CONTRIBUTOR","","2024-02-21T00:36:06Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-20T16:51:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-27T20:24:21Z",false,"COMMENTED"
"ajreckof","MEMBER","","2024-02-27T23:05:40Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-28T03:39:19Z",false,"APPROVED"
"raulsntos","MEMBER","Looks great, thanks for working on this.","2024-02-20T03:23:05Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-20T09:10:10Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-02-20T16:56:48Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-20T18:42:23Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-02-21T02:31:20Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-21T12:03:54Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-02-26T18:41:10Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-26T19:13:55Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-02-26T19:24:13Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-26T19:40:11Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-26T20:07:55Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-02-26T20:53:12Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-02-27T15:55:08Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-27T16:15:47Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-02-27T17:11:44Z",false,"COMMENTED"
"raulsntos","MEMBER","I think this looks good enough already, we can always add more rules to `.editorconfig` later. Thanks for the great cleanup!","2024-02-27T18:53:56Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Needs a simple test to make sure it actually works in practice","2024-02-19T21:01:07Z",false,"COMMENTED"
"eswartz","CONTRIBUTOR","","2024-02-19T22:15:41Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-19T21:37:18Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-19T21:38:49Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-19T21:45:10Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-02-19T21:45:22Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-02-19T21:49:09Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-02-19T21:53:27Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-19T21:58:39Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-02-20T16:52:24Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-22T13:46:21Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-02-22T15:05:10Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-22T15:50:55Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-02-22T16:40:48Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","With my limited knowledge of the nitty-gritty, I do like this. It's pretty clean, the restructuring does make sense and seems more ""robust"" than before.

Surely this won't cause any unforeseen consequences, _right_?","2024-02-22T16:45:48Z",false,"APPROVED"
"nlupugla","CONTRIBUTOR","","2024-02-22T18:03:09Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-22T18:07:00Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-02-22T18:15:26Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-22T18:15:27Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-02-22T18:19:26Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-22T18:20:41Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-22T18:27:58Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-02-22T18:35:44Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-02-22T18:40:53Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-22T18:41:11Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-02-22T18:42:22Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-02-22T18:49:11Z",false,"COMMENTED"
"Repiteo","CONTRIBUTOR","","2024-02-22T18:56:18Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-22T19:25:44Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-19T21:18:21Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks! For the most part this looks good to me. :-) Just one uncertainty with regard to naming.","2024-02-19T21:21:49Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-19T21:27:00Z",false,"COMMENTED"
"devloglogan","CONTRIBUTOR","","2024-02-19T21:33:02Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-19T22:27:16Z",false,"COMMENTED"
"devloglogan","CONTRIBUTOR","","2024-02-19T22:32:29Z",false,"COMMENTED"
"devloglogan","CONTRIBUTOR","","2024-02-19T23:40:58Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-20T00:07:07Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks! Looks good to me :-)","2024-02-20T16:34:42Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-02-20T17:04:26Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-02-28T13:59:16Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-28T13:59:29Z",false,"COMMENTED"
"KoBeWi","MEMBER","I did some testing and it doesn't seem to break anything now, but I'm not sure how to test whether it fixes something.","2024-02-28T14:31:28Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally on godot-reflection, 3d/platformer and tps-demo (Linux + GeForce RTX 4090 with NVIDIA 545.29.06), it works as expected. I can't observe a performance difference but it's likely because the time taken to present is negligible on this GPU.","2024-02-20T17:08:34Z",false,"APPROVED"
"clayjohn","MEMBER","Seems fine to me","2024-02-21T22:45:56Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","It's the small things that count","2024-02-19T16:58:35Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","I've reviewed the Wayland part only for now, thanks a lot for working on this :D

If you feel a bit lost about the `WaylandThread` API, don't worry, it's not your fault, I should really add some high-level documentation :)

Anyways, I'll try to briefly explain to you the idea. It's supposed to be some (reasonably) stateless helper, which abstracts and Godot-ifies where possible the API. Thanks to this approach we can reasonably split the code and minimize untangling, as all the Wayland event handling is done in one place; one keeps track of stuff and handles the DS API, while another translates, scales, marshals and whatever. Nice and tidy :)


For some more context and a probably better explanation about the rationale of this class, see [this comment](https://github.com/godotengine/godot/pull/57025#issuecomment-1587837840).

Regarding the `WaylandThread` API, I'd propose a plain and simple `WaylandThread::window_set_input_rects(DisplayServer::WindowID p_window_id, Vector<Rect2i> p_rects)`. It would be basically a dumbed down copy of the update method, which just blindly sets/clears the thing depending on what's in the list. The DS would then call it depending on the flag result wherever it needs.

Following the above logic, the DS keeps track of the rects and the flags, while the WT (WaylandThread) does the Wayland stuff ;)

I hope that helps! Don't hesitate to ask further explanations, there's a lot to unwrap.","2024-02-19T23:38:29Z",false,"CHANGES_REQUESTED"
"arlo-phoenix","NONE","","2024-02-21T13:17:03Z",false,"COMMENTED"
"arlo-phoenix","NONE","","2024-02-21T13:17:29Z",false,"COMMENTED"
"arlo-phoenix","NONE","","2024-02-21T13:20:42Z",false,"COMMENTED"
"arlo-phoenix","NONE","","2024-02-21T13:36:53Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-02-21T17:19:39Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","","2024-02-21T17:21:08Z",false,"COMMENTED"
"TokageItLab","MEMBER","We have agreed this change on https://github.com/godotengine/godot/pull/88554.","2024-02-19T15:57:34Z",false,"APPROVED"
"TokageItLab","MEMBER","If you look at the inside of `get_node_and_resource()`, you can see that `get_node()` is called in the second line.

```cpp
Node *Node::get_node_and_resource(const NodePath &p_path, Ref<Resource> &r_res, Vector<StringName> &r_leftover_subpath, bool p_last_is_property) const {
	ERR_THREAD_GUARD_V(nullptr);
	Node *node = get_node(p_path);
```

This means that if the node is not found, an error will occur that cannot be controlled by `check_path`, so the check is necessary. Perhaps some additional method for checking that does not target path needs to be implemented.","2024-02-19T15:17:17Z",false,"CHANGES_REQUESTED"
"akien-mga","MEMBER","I confirm that this fixes broken animations on https://github.com/gdquest-demos/godot-4-3d-third-person-controller and https://github.com/godotengine/tps-demo/

**Warning:** The Godot TPS demo has another rendering regression since 4.3-dev3, which makes crazily flashing lights, this is not epilepsy safe.","2024-02-19T15:21:24Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-19T13:55:06Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-02-20T21:44:56Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-02-20T21:55:53Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-02-21T00:53:05Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-02-21T01:36:43Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Checked what the MACROs expand to. This is cool and good.","2024-02-19T12:40:40Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-19T13:39:16Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-05T08:50:32Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-19T12:07:42Z",false,"APPROVED"
"raulsntos","MEMBER","I can confirm it fixes the issue. Thanks!","2024-02-19T17:14:16Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-05T08:50:56Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-19T08:49:13Z",false,"COMMENTED"
"davthedev","CONTRIBUTOR","","2024-02-19T14:54:18Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-19T16:28:05Z",false,"COMMENTED"
"davthedev","CONTRIBUTOR","","2024-02-19T17:02:57Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected. This makes Tree-based controls a lot nicer to use, great work :slightly_smiling_face: 

### Black (OLED) theme

https://github.com/godotengine/godot/assets/180032/53af857c-6727-4a23-9f38-72108e0b311d

### Light theme

https://github.com/godotengine/godot/assets/180032/abc638df-000b-4912-a7a7-ed32f256f080

I've ensured that continuous redrawing doesn't occur if the mouse stands still on a TreeItem by looking at the update spinner.

Code looks good to me at a glance, aside of the style suggestions.","2024-03-02T19:53:52Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-03-02T19:54:15Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-03-02T19:54:22Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-03-02T19:54:29Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-03-02T19:54:38Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-03-02T19:54:47Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-03-02T19:54:56Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-03-02T19:55:54Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-11T21:57:51Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-11T22:19:57Z",false,"COMMENTED"
"KoBeWi","MEMBER","Code and the functionality itself seems fine, though I wonder if some parts can't be simplified (like the button hover code; since buttons are clickable, it should be detected elsewhere, no?)","2024-03-11T23:19:04Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-03-24T09:43:59Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-19T01:53:12Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-19T02:07:44Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-19T07:02:55Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-19T09:55:32Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-19T09:56:59Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-19T12:22:36Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-19T00:22:36Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","I don't know if this counts for anything but have a cookie","2024-02-19T09:08:49Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-20T09:41:37Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-18T22:51:21Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good to me.","2024-03-05T15:18:39Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-18T22:23:13Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-18T21:00:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-18T21:02:41Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-18T21:58:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-18T22:00:41Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-19T09:04:02Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-19T16:14:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-19T16:19:16Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-19T16:19:29Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-19T16:19:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-19T16:19:43Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Nothing really against this. Even if the performance gain is negligible, what came out of it is greater code quality.","2024-02-19T16:30:54Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-19T19:24:39Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-19T19:26:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-19T19:27:02Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-19T19:43:41Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-19T19:48:05Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-19T19:51:07Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-19T19:56:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-19T19:56:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-19T19:57:15Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","Looks sweet overall! Some great quality of life improvements for this code I'd say :)

Does Godot have a type to represent sorted arrays? It might be nice so it's easier to keep track of assumptions about whether or not an array has already been sorted or not.

If it doesn't, would it be worth putting in some `assert` statements to ensure the array is sorted when it is expected to be, at least in debug builds?","2024-02-19T20:22:02Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-19T20:22:58Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-19T20:23:49Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-19T20:26:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-19T20:27:24Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-19T20:28:16Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-19T20:56:55Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-19T21:00:37Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-19T21:02:14Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-19T21:03:18Z",false,"COMMENTED"
"nlupugla","CONTRIBUTOR","","2024-02-19T21:04:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-19T21:06:35Z",false,"COMMENTED"
"ryevdokimov","CONTRIBUTOR","","2024-02-18T18:47:03Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-04-01T13:32:38Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/3576e840c7c699dbd21c9c02ec652dafc48e764c), it works as expected. Code looks good to me.

This will be good to go alongside https://github.com/godotengine/godot/pull/96740 to improve its usability :slightly_smiling_face: ","2024-10-04T19:02:16Z",false,"APPROVED"
"BlueCube3310","CONTRIBUTOR","LGTM. I don't think Godot even uses BasisU's file loading feature, so nothing should break.","2024-02-18T18:36:34Z",false,"APPROVED"
"rburing","MEMBER","","2024-02-18T17:07:55Z",false,"APPROVED"
"clayjohn","MEMBER","Looks great! We also need to reverse the conditions in `multimesh_set_buffer` too. ","2024-02-18T19:30:01Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","<img width=5% src=https://github.com/godotengine/godot/assets/66727710/cffb5828-5ff0-4dfb-9661-690c5398e73d>
","2024-02-18T16:10:04Z",false,"APPROVED"
"TokageItLab","MEMBER","There is a problem with keys teleporting to the mouse cursor position when dragging a key with a length. That must be fixed.

https://github.com/godotengine/godot/assets/61938263/e5504e47-470e-4e52-9eba-f7ca05f70ee6

In the preview video in description there is also a rapid movement at the start of the drag, which seems to be a problem as pointed out by lyuma. Even if that is the behavior you are assuming, it would appear to be a bug to the general user (looks buggy than the old behavior), so until that is resolved this change should not be approvable.

Perhaps the preferred behavior would be to use only the first key for snapping (then most old behaviors need not be changed), propagating the relative movement of the first key to the other keys.","2024-03-16T13:34:16Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","Okay LGTM! Thanks for adjusting the behavior.","2024-03-18T00:38:51Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","","2024-02-18T14:31:11Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-24T22:26:53Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","","2024-02-24T22:33:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-24T22:41:51Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","","2024-02-24T22:48:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-24T22:51:02Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","","2024-02-24T23:00:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-24T23:09:31Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","","2024-02-24T23:19:13Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-25T14:57:35Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","","2024-02-26T21:19:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-27T18:57:12Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-05T08:51:59Z",false,"APPROVED"
"raulsntos","MEMBER","Looks great. Thanks!","2024-02-21T01:27:02Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-18T13:30:49Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-02-20T21:14:18Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-20T21:17:06Z",false,"COMMENTED"
"YeldhamDev","MEMBER","","2024-02-22T04:03:45Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Docs are fine but that of course is not the most important part right now.","2024-02-18T15:04:34Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-18T23:52:13Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-02-18T18:13:01Z",false,"CHANGES_REQUESTED"
"AlekseyKapustyanenko","CONTRIBUTOR","","2024-02-18T18:19:32Z",false,"COMMENTED"
"AlekseyKapustyanenko","CONTRIBUTOR","","2024-02-18T18:19:36Z",false,"COMMENTED"
"AlekseyKapustyanenko","CONTRIBUTOR","","2024-02-18T18:19:39Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Third time's the charm","2024-02-18T18:20:13Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-02-18T18:22:51Z",false,"CHANGES_REQUESTED"
"AlekseyKapustyanenko","CONTRIBUTOR","","2024-02-18T18:26:47Z",false,"COMMENTED"
"AlekseyKapustyanenko","CONTRIBUTOR","","2024-02-18T18:26:50Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","Looks good!","2024-02-18T18:28:48Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-18T18:35:05Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-18T10:45:21Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-02-18T10:56:03Z",false,"COMMENTED"
"fire","MEMBER","The code review is good, but I don't have a setup for testing mobile at this current moment.","2024-02-21T18:04:22Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-22T10:17:13Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-02-19T08:41:02Z",false,"APPROVED"
"AThousandShips","MEMBER","Can confirm this works correctly (though discovered another bug while testing this, will look into that)

Done:
* https://github.com/godotengine/godot/pull/88494","2024-02-18T13:06:01Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-02-18T15:04:13Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-18T07:32:23Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-02-19T12:23:49Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-19T12:52:31Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-19T13:02:19Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-19T13:02:48Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-19T13:19:29Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-19T13:20:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-19T13:21:03Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-19T13:41:02Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-19T13:57:56Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-19T13:59:02Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-19T14:00:04Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-19T14:02:45Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-19T14:06:15Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-19T14:11:47Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-19T14:16:17Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-19T14:22:27Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-19T15:18:46Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-19T15:26:14Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-19T16:16:24Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-19T16:19:31Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-19T18:27:19Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-19T18:42:52Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-19T18:43:29Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-02-21T00:29:20Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-02-21T00:31:52Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-02-21T00:33:55Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (at 100% and 175% editor scales), it works as expected.

Note that the first time you zoom in an editor session (causing a new font size to be displayed), there will be some slowdown due to the font cache having to be regenerated. This doesn't occur afterwards. Using MSDF rendering for the code font would alleviate this, at the cost of making it less crisp (so I don't recommend this approach, at least for now).","2024-02-21T00:34:01Z",false,"APPROVED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-21T00:40:08Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-21T01:15:24Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-02-21T01:53:32Z",false,"COMMENTED"
"MajorMcDoom","CONTRIBUTOR","","2024-02-21T02:05:08Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-21T09:43:07Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-21T14:18:08Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-21T14:22:38Z",false,"COMMENTED"
"KoBeWi","MEMBER","Looks fine now.

Needs rebase after #69032
Note that every function that updates editor settings (either from `NOTIFICATION_EDITOR_SETTINGS_CHANGED` or from `settings_changed` signal) should use `check_changed_settings_in_group()` now.","2024-02-21T14:32:46Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-02-21T19:31:47Z",false,"COMMENTED"
"kleonc","MEMBER","Tested a little, seems to work fine now. :+1:

The change makes sense to me but I'm not that familiar with the input code though. :upside_down_face:

---

@Sauermann BTW pretty much the only place where `Viewport::_make_input_local` is used is:
https://github.com/godotengine/godot/blob/5f05e2b9b1a3fedcdd7ecb2ab976a2687fd6f19a/scene/main/viewport.cpp#L3340-L3345
So I wonder if `InputEventMouse.global_position` would be correct/meaningful in case `p_local_coords` is true? Not sure what is expected / how it's supposed to work, just mentioning in case you overlooked / haven't considered this.
But even it there's something to change it's likely for another PR / this one is good as is.","2024-02-18T17:23:48Z",false,"APPROVED"
"raulsntos","MEMBER","Thank you so much for this. I think we should merge this first, then update https://github.com/godotengine/godot/pull/87253 and https://github.com/godotengine/godot/pull/88371 to follow the same style.","2024-02-18T03:36:29Z",false,"COMMENTED"
"raulsntos","MEMBER","Looks good. Thanks!","2024-02-18T16:29:11Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-04T15:45:21Z",false,"APPROVED"
"passivestar","CONTRIBUTOR","","2024-03-16T19:08:00Z",false,"APPROVED"
"Norrox","CONTRIBUTOR","It looks alright to me ","2024-03-24T10:19:20Z",false,"APPROVED"
"Chubercik","CONTRIBUTOR","","2024-03-24T21:16:07Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-03-25T10:14:28Z",false,"APPROVED"
"akien-mga","MEMBER","Looks really good!","2024-02-19T10:45:21Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-19T10:46:16Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-17T20:21:09Z",false,"COMMENTED"
"AlekseyKapustyanenko","CONTRIBUTOR","","2024-02-17T20:22:05Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Docs are equivalent to master. Needs review from the Android peeps to ensure there aren't any discrepancies between 3.x and 4.x's Android code,","2024-02-17T20:39:32Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-20T10:59:50Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-20T11:38:28Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-17T18:35:50Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-17T18:41:47Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-17T18:56:37Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-17T18:23:45Z",false,"COMMENTED"
"sabslikesobs","CONTRIBUTOR","","2024-02-17T18:32:45Z",false,"COMMENTED"
"sabslikesobs","CONTRIBUTOR","","2024-02-17T18:41:28Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","I do appreciate the effort, I really do, as I can relate to this.

But the PR's descriptions are a tad too excessive. By being so verbose and specific they are difficult to read, and they do the opposite of what they clearly try to achieve.","2024-02-17T19:02:42Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","It's good in its current state, with a few nitpicks.

I like this slight extra nudge in the documentation to ease up pixel art developers. I don't think it will completely remove any need of external help, but it is nice to have.","2024-02-17T20:00:00Z",false,"APPROVED"
"Calinou","MEMBER","","2024-02-17T21:27:07Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","To my dismay, yeah. Clearly property warnings are the way to go, but this is not it.","2024-02-17T18:10:48Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-02-17T18:25:20Z",false,"APPROVED"
"raulsntos","MEMBER","Thanks. This matches the Core behavior:
- https://github.com/godotengine/godot/pull/54078
- https://github.com/godotengine/godot/pull/54081

This should be safe to cherry-pick since the previous behavior was throwing an exception so it doesn't break compat.","2024-02-17T18:46:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-22T15:33:49Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-22T21:40:55Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-17T19:19:22Z",false,"COMMENTED"
"RedMser","CONTRIBUTOR","","2024-02-17T19:25:50Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-17T19:27:59Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Approving based on what I said before but it would still require the opinion on the usability team I suppose?","2024-02-19T12:59:25Z",false,"APPROVED"
"akien-mga","MEMBER","Implementation looks good to me. We can tweak the display a bit if others have suggestions in the future, but this is a good start.","2024-02-19T13:43:33Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-17T17:09:33Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-17T17:49:58Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-02-17T16:40:08Z",false,"CHANGES_REQUESTED"
"TokageItLab","MEMBER","Thank you for the following up!","2024-02-17T16:44:08Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-17T16:38:35Z",false,"COMMENTED"
"TokageItLab","MEMBER","Make sense for me, but I think it is possible to add both to Menu and have two shortcuts such as `ctrl + v: without offset` / `ctrl + shift + v: with offset`.","2024-03-16T13:25:01Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Current description is literally wrong so yes","2024-02-17T16:09:35Z",false,"APPROVED"
"DaltonSW","CONTRIBUTOR","","2024-02-18T03:54:36Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-23T10:24:57Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-17T16:02:58Z",false,"COMMENTED"
"dalexeev","MEMBER","","2024-02-17T16:30:48Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-17T16:32:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-17T19:58:17Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-17T19:58:50Z",false,"COMMENTED"
"dalexeev","MEMBER","Looks good to me, although I'm not familiar with many areas and haven't looked at the source code. As for the maximum message length, let's leave it as is for now. Anyway, deprecated/experimental warnings are not yet implemented in either GDScript or C#.","2024-02-19T19:27:00Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-19T19:28:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-17T13:27:12Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-17T15:58:39Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-02-17T22:03:08Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","I brought up the ellipses yesterday in RocketChat so of course I am okay with it.","2024-02-17T13:42:37Z",false,"APPROVED"
"Calinou","MEMBER","","2024-02-17T21:47:05Z",false,"APPROVED"
"Calinou","MEMBER","","2024-02-17T10:25:12Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-17T11:08:32Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-17T12:00:11Z",false,"COMMENTED"
"MewPurPur","CONTRIBUTOR","","2024-02-17T14:22:51Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-17T14:33:34Z",false,"COMMENTED"
"AThousandShips","MEMBER","No reason to use `StringName` here when one of the cases is a `String` and the method takes a `String`","2024-02-17T15:06:43Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-20T11:03:09Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-09T23:17:30Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-09T23:21:05Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-02-17T08:32:22Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-02-17T09:07:25Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-18T15:47:55Z",false,"COMMENTED"
"adamscott","MEMBER","","2024-02-18T16:21:05Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` b8f106acb24387d2f2c746a586edc0728fd10aaf), it works as expected. Amazing work!

Here's the 2D platformer demo with **Physics Ticks per Second** set to `10`:

https://github.com/godotengine/godot/assets/180032/6f80776a-b351-49cd-9146-b2c24e8396d2

___

I noticed an issue when resizing the viewport when using the `viewport` stretch mode and a Camera2D. If the aspect ratio changes, the camera motion will be interpolated, even though this doesn't occur in discrete steps when physics interpolation is disabled. The Camera2D in the project has its **Process Callback** set to **Idle** (the default).

This is hardly noticeable with tickrates greater than 30 Hz, so it's not a huge issue, but it might be worth looking into nonetheless.

See these videos with **Physics Ticks per Second** set to `5`:

### Physics interpolation disabled

https://github.com/godotengine/godot/assets/180032/b0e70667-a47e-4a03-8d1b-a628abe9af30

### Physics interpolation enabled

https://github.com/godotengine/godot/assets/180032/c4c93f0c-7090-465e-b271-b1c2b81f9c45

___

In the bullet shower demo with **Physics Ticks per Second** set to `5`, something strange happens with the sprite movement. It's interpolated even though we're moving it every frame in `_input()` based on mouse movement, so it can move faster than the physics tick rate.

The individual white sprites (that are not nodes but created via low-level servers) are also not interpolated:

### Physics interpolation disabled

https://github.com/godotengine/godot/assets/180032/9ecf5f35-ecec-425e-90be-fdb473905ae4

### Physics interpolation enabled

https://github.com/godotengine/godot/assets/180032/2f6c051e-a910-4692-98d2-9ca4fae7b8f4

___

Parallax backgrounds look strange when wrapping over with low physics tick rate (10 here), and they don't interpolate as smoothly as they could. They seem to interpolate in visible ""steps"", as if the interpolation was only performed for half of the physics tick length:

https://github.com/godotengine/godot/assets/180032/39102d5b-6b7c-406d-a5a7-9ac8313ea9c1

**Testing project:** [physics_platformer_modified.zip](https://github.com/godotengine/godot/files/14349244/physics_platformer_modified.zip)

___

Also, I strongly suggest enabling physics interpolation by default. We'll need to stick to a default value once this is merged, and with high refresh rate displays slowly becoming the norm among players, it's expected that games should adapt automatically without requiring extra work from the developer's side. While this will require updating some tutorials, I believe it's worth the effort.","2024-02-20T17:22:43Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-02-26T09:40:03Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-02-26T09:46:27Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Holy crap that's a whooping 15 comments and I'm not done yet.","2024-02-26T11:02:01Z",false,"COMMENTED"
"rburing","MEMBER","","2024-02-26T22:30:46Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-03-09T15:44:51Z",false,"COMMENTED"
"adamscott","MEMBER","What a great port. I tested it summarily (and it seems to work amazingly), but I think others tested it thoroughly.

The code seems OK! Didn't find anything requiring major changes, but this is a hefty PR, so I suggest that we merge for dev6 then we fix issues afterwards.","2024-03-14T16:10:14Z",false,"APPROVED"
"adamscott","MEMBER","","2024-03-15T13:30:16Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-03-15T15:09:17Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-03-16T16:17:00Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-03-16T18:56:57Z",false,"APPROVED"
"reduz","MEMBER","Looks fantastic, really good work!","2024-03-19T20:50:42Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-03-27T01:59:37Z",false,"COMMENTED"
"lawnjelly","MEMBER","","2024-03-27T06:51:11Z",false,"COMMENTED"
"fire","MEMBER","I modified some of the comments to match sentence case.","2024-05-07T12:17:25Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-10-10T03:55:33Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks, this looks awesome!

The code looks good - just two little comments. Seemed to work great in my testing too. :-)","2024-02-16T22:51:32Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-02-16T23:15:59Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-02-16T23:31:23Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Looks good to me! I just retested it, and it's especially nice on top of the changes from PR https://github.com/godotengine/godot/pull/88297 because this exposes the new advanced Gradle template fields :-)","2024-02-17T01:28:46Z",false,"APPROVED"
"Calinou","MEMBER","","2024-02-18T18:42:34Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-02-18T18:44:37Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-02-18T19:33:37Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","I love documenting things because it's only when you actually do it that you realise there's a _some sort_ of problem with the way things are done.[^1][^2][^3][^4][^5][^6][^7].

[^1]: #67080
[^2]: #67082
[^3]: #67688
[^4]: #87118
[^5]: #69168
[^6]: #71989
[^7]: And more, actually.","2024-02-16T22:06:55Z",false,"APPROVED"
"akien-mga","MEMBER","Given the rationale and the team consensus, I approve despite the compat breakage.","2024-02-16T22:21:55Z",false,"APPROVED"
"mihe","CONTRIBUTOR","I'm all for it, and the change looks good to me. The ability to omit parts of it is a nice touch.

I would frankly like to see this be added to the example `.gdextension` file in the godot-cpp `README.md` as well, and have it be the same value as its `compatibility_minimum`.","2024-02-16T21:46:36Z",false,"APPROVED"
"AThousandShips","MEMBER","Looks great otherwise, nice to see this idea implemented!","2024-02-16T21:49:38Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-02-16T22:06:09Z",false,"COMMENTED"
"Riteo","CONTRIBUTOR","The code looks nice, simple and consistent with the minimum version logic!

In regards to the idea itself, I have pretty much the same concerns as of @Bromeon, but the arguments in favor make sense and I can see that we're all being cautious here, so count me as favorable too :D","2024-02-17T00:19:21Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-19T00:22:52Z",false,"COMMENTED"
"AThousandShips","MEMBER","Quickly testing this and it makes the editor essentially unusable when changing to a new texture, if you take a large texture first, where each frame is, lets say, 256x256, and then pick a texture that's 128x128, then you will get a single, 128x128 frame covering the whole image

If you then change *back* to the original texture it will give you a single 128x128 frame at the top left

This needs to detect other changes, and retain specific details, like the other PR did","2024-02-16T19:34:39Z",false,"DISMISSED"
"KoBeWi","MEMBER","","2024-03-04T19:28:52Z",false,"COMMENTED"
"KoBeWi","MEMBER","Looks fine implementation-wise, but can't say how much useful is it in the current form and how well it would integrate with the full solution.","2024-03-05T13:03:10Z",false,"APPROVED"
"kleonc","MEMBER","As already mentioned by others this is a very simple implementation which doesn't solve the issue in general case. But it does improve a basic use case when subsequently creating separate animations from the same-layout spritesheets. For other use cases the usage should be as annoying as before. :upside_down_face:

So it's fine to merge, a better solution can be implemented later.","2024-03-05T21:53:05Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-17T23:55:44Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-21T20:45:41Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-21T20:47:41Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-23T21:40:23Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-02-16T19:17:55Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Good to know, to not waste the developer's time testing","2024-02-16T16:01:46Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","See above (yippie).","2024-02-16T16:35:55Z",false,"CHANGES_REQUESTED"
"akien-mga","MEMBER","","2024-02-16T16:18:24Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-16T15:58:31Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-16T15:59:24Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-16T16:06:36Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-16T16:07:16Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-16T16:11:37Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-16T16:12:30Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-16T16:14:30Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-16T16:15:27Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-16T16:19:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-16T16:21:38Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM","2024-02-16T18:20:26Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Looks good to me!","2024-02-16T15:01:06Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Took a look at it again. This is good and great.

In my opinion it would be nice if only **one** newline was used (instead of two) for deprecated things, just to shorten how much space these messages occupy when a description ACTUALLY exists (I'm working on it). But it's very opinionated indeed.","2024-02-17T09:48:15Z",false,"APPROVED"
"Calinou","MEMBER","Code looks good to me at a glance.

It makes sense to ignore deprecated/experimental members in the completion percentage too.","2024-02-17T10:17:01Z",false,"APPROVED"
"KoBeWi","MEMBER","Tested on Windows and it works great.

Can't comment much on the code. Though I wonder if calling `get_window_at_screen_position()` for every mouse event won't affect performance.","2024-02-17T22:51:39Z",false,"APPROVED"
"Sauermann","CONTRIBUTOR","This PR is unifying the behavior of different display servers, which is a step in the right direction.

I have tested this PR rebased on 8f0c20ee8 on Linux X11 Xfce in two scenarios.

### The root window is not embedding windows (single window mode off)

I can confirm, that it fixes: #88324, #77246 and #66273
I was unable to recreate #73926 (not on platform:Linux) and #70361 (interference from #88324) in current master.

Currently (8f0c20ee8) it is possible to drag and drop from a secondary window to the root window. With this PR, this functionality is no longer possible. This can be verified in the editor by making the FileSystem dock floating and trying to drag and drop the `icon.svg` into the respective slot in the Inspector of a `Sprite2D` node.

I have tested this PR rebased on #67531 and found, that merging this PR will make changes to the other PR necessary. **Don't merge at the same time!**

### The root window is embedding windows (single window mode on)

I can confirm, that it fixes: #66273
The PR doesn't resolve issue #70361 and #77246 for me.
I was unable to recreate #73926 (not on platform:Linux) and #88324 (native windows only) in current master.
","2024-02-18T10:35:48Z",false,"COMMENTED"
"akien-mga","MEMBER","I think this is good to go, but we might need to clarify whether all the listed bugs should indeed be closed or not, as some aspects of them are still reproducible at least on Linux + single-window mode.","2024-02-19T10:33:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-16T09:02:33Z",false,"APPROVED"
"bruvzg","MEMBER","","2024-02-16T07:02:06Z",false,"APPROVED"
"fire","MEMBER","","2024-02-16T07:29:16Z",false,"APPROVED"
"fire","MEMBER","I suspect something is wrong.

I think this refers to keyframes of loc,rot, and scale. Where does it say rotation only?","2024-02-16T07:32:01Z",false,"DISMISSED"
"fire","MEMBER","","2024-02-16T07:33:02Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-07-28T19:38:52Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-16T10:17:11Z",false,"APPROVED"
"jsjtxietian","CONTRIBUTOR","See https://docs.godotengine.org/en/stable/contributing/workflow/pr_workflow.html#modifying-a-pull-request , ""we will prefer a single commit in a given PR (unless there's a good reason to keep the changes separate)"" , don't forget to squash your pr üòÑ  ","2024-02-16T16:07:32Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected in all rendering methods.

However, when using Forward+ or Mobile, dynamic objects are still shaded as seen in the comment above. Could you look into resolving this as well? Thanks in advance :slightly_smiling_face: ","2024-02-16T16:38:41Z",false,"COMMENTED"
"Calinou","MEMBER","This PR now seems to work correctly for dynamic objects with all rendering methods. I'd appreciate a second look just in case as I don't know if it's a fluke with my testing project.","2024-02-24T18:44:51Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-04-16T23:12:24Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-16T10:19:11Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","Heh, just yesterday, I was just explaining to someone that the dependencies aren't used at all when loading a GDExtension, only in exporting. I guess that won't be true anymore, at least for Android. :-)

At a high-level, this looks good to me! I haven't done any testing.","2024-02-16T21:35:29Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-16T21:51:15Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-02-16T22:27:10Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-02-17T00:08:15Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks! I haven't tested it, but the code looks good to me :-)","2024-04-19T16:38:36Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","I know I'll spend 2 weeks on this whole XML file in the future but it could be nice to have a head-start on the newly introduced descriptions.","2024-02-16T12:49:06Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-02-16T20:08:38Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-02-16T20:16:15Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-02-16T20:18:42Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Aside from the fact that it literally will refuse to compile I have nothing against the class reference. At last, these settings can be documented.","2024-02-16T21:27:55Z",false,"APPROVED"
"RedMser","CONTRIBUTOR","","2024-02-17T09:18:08Z",false,"COMMENTED"
"groud","MEMBER","","2024-02-15T20:31:37Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-15T20:40:36Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Super squad approval attack","2024-02-15T20:49:48Z",false,"APPROVED"
"Scony","CONTRIBUTOR","","2024-02-15T20:05:25Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-15T20:44:13Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-04-06T08:49:32Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-15T20:47:24Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-02-15T18:42:14Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-15T19:42:31Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-02-17T17:23:26Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-17T19:12:31Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-17T19:12:39Z",false,"APPROVED"
"paulloz","MEMBER","","2024-02-18T13:58:44Z",false,"COMMENTED"
"zaevi","CONTRIBUTOR","","2024-02-19T08:33:49Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-19T08:59:57Z",false,"COMMENTED"
"paulloz","MEMBER","LGTM, thanks üëç ","2024-02-19T09:16:29Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-02-19T16:42:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-17T15:04:04Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-17T15:07:01Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-17T15:07:33Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-17T15:09:04Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-17T15:09:50Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-17T15:10:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-17T15:12:25Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-17T15:13:06Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-17T15:16:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-17T15:17:15Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-17T15:17:44Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-17T18:31:20Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-17T18:33:15Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-17T18:34:22Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-17T18:48:10Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-17T19:34:11Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-17T19:35:34Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-17T19:52:00Z",false,"COMMENTED"
"KoBeWi","MEMBER","Overall looks ok.","2024-02-17T19:52:39Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-17T19:54:32Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-17T20:09:14Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-21T14:08:35Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-06-30T09:16:20Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-30T10:34:37Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-02-15T17:48:02Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-02-15T18:01:35Z",false,"COMMENTED"
"aaronfranke","MEMBER","Makes sense to me, haven't tested.","2024-02-15T21:30:48Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-03-12T08:30:38Z",false,"COMMENTED"
"aaronfranke","MEMBER","In general I think that it is a good idea to make the architecture more explicit, especially when done in a forwards-compatible way with the 4.x names. I would guess that this shouldn't break many real-world situations, but really I don't know. This should be tested before merging.

Note that in this PR the architecture list and detect_arch are only used by the X11 and Server platforms, this PR doesn't change the behavior of the parameter/option/flag/whatever exposed to the command line.","2024-03-12T09:12:10Z",false,"COMMENTED"
"Faless","COLLABORATOR","","2024-03-12T10:57:08Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-03-12T22:06:06Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-15T16:32:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-15T16:34:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-15T16:36:40Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM","2024-02-26T18:41:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-15T16:26:02Z",false,"APPROVED"
"aaronfranke","MEMBER","Haven't tested, makes sense.","2024-02-15T21:35:48Z",false,"APPROVED"
"akien-mga","MEMBER","Makes sense to me.","2024-02-15T15:01:09Z",false,"APPROVED"
"dalexeev","MEMBER","","2024-02-15T15:03:07Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-05-16T03:47:19Z",false,"COMMENTED"
"Delsin-Yu","CONTRIBUTOR","","2024-05-16T06:29:14Z",false,"COMMENTED"
"Delsin-Yu","CONTRIBUTOR","","2024-05-16T06:32:53Z",false,"COMMENTED"
"Delsin-Yu","CONTRIBUTOR","","2024-05-16T06:38:29Z",false,"COMMENTED"
"raulsntos","MEMBER","The .NET team discussed this and we think it's a good addition. The technical aspects look good, this is a code-style review.","2024-09-22T15:27:16Z",false,"CHANGES_REQUESTED"
"raulsntos","MEMBER","","2024-09-22T15:29:13Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-09-22T19:19:52Z",false,"COMMENTED"
"raulsntos","MEMBER","Looks good to me and works as expected. Thanks!","2024-09-23T11:47:07Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-02-15T21:07:54Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-15T13:55:24Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-15T09:34:08Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-15T14:09:12Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-15T14:09:27Z",false,"COMMENTED"
"quirkylemon","CONTRIBUTOR","","2024-02-15T21:15:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","So my suggestion was a bit different from this result, but it generally follows my idea, but I think the solution for entering values with the no-signal part is a bit hacky, it also changes existing behavior in a way I don't think is appropriate without the controls for this being exposed

> I think that if we are going to limit this PR to just the display in the editor we should do it with a dedicated display method, essentially one that just allows non-finites for just display, and then we can look at a broader improvement that allows input and display control too

Currently using `set_value` *or* `set_value_no_signal` from scripts blocks non-finites, but now this is changed, depending on the display value, I'd say it should instead be controlled directly by that, not indirectly as that's error prone

As I suggested I'd prefer a new method for dedicated display updates, without the `is_display_non_finite_allowed` part, instead adding a new method like `set_display_value` which ignores the whole non-finite checks

Without exposing the controls for inputting these values I don't think that code should be added in this PR, as I suggested above, they serve no purpose in this change as the editor makes no use of them

So my suggestion would be:
```diff
diff --git a/scene/gui/range.cpp b/scene/gui/range.cpp
index 358dca85d9..3dfbb985cb 100644
--- a/scene/gui/range.cpp
+++ b/scene/gui/range.cpp
@@ -86,17 +86,17 @@ void Range::Shared::redraw_owners() {

 void Range::set_value(double p_val) {
        double prev_val = shared->val;
-       _set_value_no_signal(p_val);
+       _set_value_no_signal(p_val, false);

        if (shared->val != prev_val) {
                shared->emit_value_changed();
        }
 }

-void Range::_set_value_no_signal(double p_val) {
+void Range::_set_value_no_signal(double p_val, bool p_for_display) {
        if (!Math::is_finite(p_val)) {
-               if (shared->allow_infinite_input || shared->allow_nan_input) {
-                       if (Math::is_nan(p_val) && shared->allow_nan_input) {
+               if (p_for_display) {
+                       if (Math::is_nan(p_val)) {
                                shared->val = p_val;
                                return;
                        }
@@ -129,20 +129,19 @@ void Range::_set_value_no_signal(double p_val) {
 }

 void Range::set_value_no_signal(double p_val) {
-       bool prev_nan = is_nan_input_allowed();
-       bool prev_inf = is_infinite_input_allowed();
+       double prev_val = shared->val;
+       _set_value_no_signal(p_val, false);

-       if (is_display_non_finite_allowed()) {
-               set_allow_non_finite(true);
+       if (shared->val != prev_val) {
+               shared->redraw_owners();
        }
+}

+void Range::set_value_display(double p_val) {
        double prev_val = shared->val;
-       _set_value_no_signal(p_val);
-
-       set_allow_nan_input(prev_nan);
-       set_allow_infinite_input(prev_inf);
+       _set_value_no_signal(p_val, true);

-       if (shared->val != prev_val || Math::is_nan(shared->val)) {
+       if (shared->val != prev_val) {
                shared->redraw_owners();
        }
 }
@@ -390,39 +389,6 @@ bool Range::is_lesser_allowed() const {
        return shared->allow_lesser;
 }

-void Range::set_allow_non_finite(bool p_allow) {
-       set_allow_infinite_input(p_allow);
-       set_allow_nan_input(p_allow);
-}
-
-bool Range::is_non_finite_allowed() const {
-       return shared->allow_infinite_input && shared->allow_nan_input;
-}
-
-void Range::set_allow_infinite_input(bool p_allow) {
-       shared->allow_infinite_input = p_allow;
-}
-
-bool Range::is_infinite_input_allowed() const {
-       return shared->allow_infinite_input;
-}
-
-void Range::set_allow_nan_input(bool p_allow) {
-       shared->allow_nan_input = p_allow;
-}
-
-bool Range::is_nan_input_allowed() const {
-       return shared->allow_nan_input;
-}
-
-void Range::set_allow_display_non_finite(bool p_allow) {
-       shared->allow_display_non_finite = p_allow;
-}
-
-bool Range::is_display_non_finite_allowed() const {
-       return shared->allow_display_non_finite;
-}
-
 Range::Range() {
        shared = memnew(Shared);
        shared->owners.insert(this);
diff --git a/scene/gui/range.h b/scene/gui/range.h
index 8ecf683e72..15c979a173 100644
--- a/scene/gui/range.h
+++ b/scene/gui/range.h
@@ -45,9 +45,6 @@ class Range : public Control {
                bool exp_ratio = false;
                bool allow_greater = false;
                bool allow_lesser = false;
-               bool allow_infinite_input = false;
-               bool allow_nan_input = false;
-               bool allow_display_non_finite = true;
                HashSet<Range *> owners;
                void emit_value_changed();
                void emit_changed(const char *p_what = """");
@@ -63,7 +60,7 @@ class Range : public Control {

        void _value_changed_notify();
        void _changed_notify(const char *p_what = """");
-       void _set_value_no_signal(double p_val);
+       void _set_value_no_signal(double p_val, bool p_for_display);

 protected:
        virtual void _value_changed(double p_value);
@@ -78,6 +75,7 @@ protected:
 public:
        void set_value(double p_val);
        void set_value_no_signal(double p_val);
+       void set_value_display(double p_val);
        void set_min(double p_min);
        void set_max(double p_max);
        void set_step(double p_step);
@@ -103,18 +101,6 @@ public:
        void set_allow_lesser(bool p_allow);
        bool is_lesser_allowed() const;

-       void set_allow_non_finite(bool p_allow);
-       bool is_non_finite_allowed() const;
-
-       void set_allow_infinite_input(bool p_allow);
-       bool is_infinite_input_allowed() const;
-
-       void set_allow_nan_input(bool p_allow);
-       bool is_nan_input_allowed() const;
-
-       void set_allow_display_non_finite(bool p_allow);
-       bool is_display_non_finite_allowed() const;
-
        void share(Range *p_range);
        void unshare();

```
And then use *this* method in the editor","2024-02-21T15:51:04Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-21T16:04:11Z",false,"COMMENTED"
"jitspoe","CONTRIBUTOR","","2024-03-11T06:50:28Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-15T12:12:51Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Thanks for the fix!","2024-02-15T00:36:41Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected. Thanks a lot for improving animation editor usability :slightly_smiling_face: 

Code looks good to me at a glance, but @godotengine/animation should take a second look just in case.","2024-02-16T16:58:16Z",false,"APPROVED"
"TokageItLab","MEMBER","","2024-02-17T15:17:50Z",false,"APPROVED"
"Calinou","MEMBER","","2024-02-14T23:31:05Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-14T23:37:39Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-14T23:48:18Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-14T23:49:14Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-15T09:19:40Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Not sure about ""every frame"", I'd say ""frequently"" but it's nitpicky.

Yippie","2024-02-15T18:32:48Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-16T22:37:04Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-16T22:39:19Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-16T22:41:20Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-02-27T19:18:57Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-27T19:19:09Z",false,"COMMENTED"
"AThousandShips","MEMBER","LGTM","2024-02-27T19:19:47Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-03-15T22:28:40Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-15T22:30:08Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-15T22:31:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-16T19:36:06Z",false,"COMMENTED"
"clayjohn","MEMBER","Approved from the perspective of allowable types. I can't comment on the compatibility stuff or the changes to object etc.","2024-05-22T23:55:57Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-15T07:46:11Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally at all editor scale presets, it works as expected.

https://github.com/godotengine/godot/assets/180032/32eda233-edc1-48eb-9795-b37d03617e4c
","2024-02-15T15:21:34Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Pretty much identical to master.","2024-02-14T22:38:37Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-15T13:11:21Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-03-15T09:43:59Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-15T09:49:24Z",false,"APPROVED"
"bruvzg","MEMBER","The rest of the mouse position/movement functions use `Vector2`, so this is more consistent and should not break anything.

But it's strange that sub-pixel mouse movement is possible, is it something related to hiDPI?","2024-02-19T08:36:23Z",false,"COMMENTED"
"Sauermann","CONTRIBUTOR","I don't see, how this PR is compatibility breaking, because neither `Input::warp_mouse_motion` nor `Node3DEditorViewport::_get_warped_mouse_motion` is exposed to scripting.
Note, that the function `Input::warp_mouse` is exposed to scripting.

Changes make sense to me, but I haven't tested them though.","2024-05-04T19:10:16Z",false,"APPROVED"
"Riteo","CONTRIBUTOR","","2024-05-04T19:31:45Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-15T12:20:59Z",false,"COMMENTED"
"ryevdokimov","CONTRIBUTOR","","2024-02-15T12:23:18Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-14T21:34:19Z",false,"APPROVED"
"fire","MEMBER","","2024-04-19T19:17:28Z",false,"COMMENTED"
"fire","MEMBER","","2024-04-24T13:58:45Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-04-24T19:56:22Z",false,"COMMENTED"
"fire","MEMBER","","2024-04-25T13:12:00Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-02-14T22:02:22Z",false,"APPROVED"
"RandomShaper","MEMBER","","2024-02-15T21:41:30Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-02-16T01:27:14Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-14T14:58:15Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-14T15:47:48Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-15T17:43:42Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally on Windows 11 22H2, it works but I can't use keyboard shortcuts in the editor such as <kbd>F5</kbd> after using <kbd>Alt + Space</kbd> then dismissing the popup. I need to unfocus the editor window then focus it again to be able to do that. This occurs regardless of how the popup is dismissed (by pressing <kbd>Escape</kbd> or clicking outside the popup).

The behavior regarding where it's enabled is good still. (It's enabled in the editor and project manager and disabled by default in projects.)","2024-02-15T22:00:39Z",false,"CHANGES_REQUESTED"
"bruvzg","MEMBER","> Exclusive Fullscreen¬†: While the alt+tab menu is displayed the visible region changes size to same as what it was in windowed mode and the rest of the region appears black.

That's how it should be, exclusive fs disables composition and only one window can be displayed, if it's not like this with your change, you broke exclusive fs.","2024-02-16T23:27:42Z",false,"COMMENTED"
"ManpreetXSingh","CONTRIBUTOR","","2024-02-17T10:12:13Z",false,"COMMENTED"
"ManpreetXSingh","CONTRIBUTOR","","2024-02-17T19:12:57Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-02-17T19:16:06Z",false,"COMMENTED"
"bruvzg","MEMBER","","2024-02-17T19:18:28Z",false,"COMMENTED"
"ManpreetXSingh","CONTRIBUTOR","","2024-02-17T19:20:48Z",false,"COMMENTED"
"ManpreetXSingh","CONTRIBUTOR","","2024-02-19T15:53:39Z",false,"COMMENTED"
"ManpreetXSingh","CONTRIBUTOR","","2024-02-19T15:58:38Z",false,"COMMENTED"
"ManpreetXSingh","CONTRIBUTOR","","2024-02-20T13:04:12Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-04-05T22:33:32Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` https://github.com/godotengine/godot/commit/655e93d5846b2ef8ebb7d22c8878f51b8f22b312), it works as expected.

I've tested the following scenarios:

- Window (resizable)
- Window (non-resizable)
- Fullscreen *(<kbd>Alt + Space</kbd> is ineffective in this mode, as expected)*
- Exclusive Fullscreen *(<kbd>Alt + Space</kbd> is ineffective in this mode, as expected)*","2024-04-05T23:23:43Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-06T08:00:59Z",false,"APPROVED"
"AThousandShips","MEMBER","Some of these are exposed, and unless they are unchanged by this they break compatibility ","2024-02-14T14:33:34Z",false,"DISMISSED"
"Khasehemwy","CONTRIBUTOR","","2024-02-14T14:36:03Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-14T14:37:13Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-14T14:39:28Z",false,"COMMENTED"
"Khasehemwy","CONTRIBUTOR","","2024-02-14T14:42:25Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-14T14:43:11Z",false,"COMMENTED"
"Khasehemwy","CONTRIBUTOR","","2024-02-14T14:48:26Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-14T14:50:47Z",false,"COMMENTED"
"Khasehemwy","CONTRIBUTOR","","2024-02-14T14:58:23Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-14T14:59:20Z",false,"COMMENTED"
"Khasehemwy","CONTRIBUTOR","","2024-02-14T14:59:59Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-14T15:01:55Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-14T15:05:46Z",false,"COMMENTED"
"Khasehemwy","CONTRIBUTOR","","2024-02-14T15:07:08Z",false,"COMMENTED"
"Khasehemwy","CONTRIBUTOR","","2024-02-14T15:11:11Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-14T15:13:52Z",false,"COMMENTED"
"Khasehemwy","CONTRIBUTOR","","2024-02-14T15:23:18Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it mostly works as expected.

**Testing project:** https://github.com/godotengine/godot-proposals/files/10502399/test_zbuffer_precision.zip

Directional shadows for large objects break, even if the object is subdivided (each plane here is subdivided into 21√ó21 parts of equal size). I've also tried adjusting **Pancake Size** in DirectionalLight3D to no avail.

*View videos in fullscreen to make the difference more noticeable. Focus on the area between the orange and white planes.*

### Forward+

#### Before

https://github.com/godotengine/godot/assets/180032/d7b2fddb-ba6d-4728-b329-6c59b04c2626

#### After *(this PR)*

*Notice the phantom shadow appearing at the beginning of the video, which isn't visible in `master`.*

https://github.com/godotengine/godot/assets/180032/973939df-36cf-4749-8edb-35f8a6276831

### Mobile

*The shadow issues on the cyan spheres also appear in `master` without this PR.*

https://github.com/godotengine/godot/assets/180032/ec19a7e4-b39e-4d1f-9c5f-e50f61386df3

### Compatibility

*This PR doesn't seem to affect precision in Compatibility so far.*

https://github.com/godotengine/godot/assets/180032/39e6b936-fbec-4a35-8920-ae4acc8caba3

","2024-02-15T00:24:33Z",false,"COMMENTED"
"Khasehemwy","CONTRIBUTOR","","2024-02-15T14:47:52Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-02-18T23:27:31Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-03-07T16:09:09Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-03-07T16:13:39Z",false,"COMMENTED"
"clayjohn","MEMBER","","2024-03-07T20:15:47Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-03-07T20:45:21Z",false,"COMMENTED"
"Calinou","MEMBER","I've tested the latest revision of this PR rebased on top of `master` https://github.com/godotengine/godot/commit/22c20cea6e59a8a95585adb866c007a55c428806 on Linux + NVIDIA on https://github.com/Calinou/godot-rendering-tests. Here are all the images that differ significantly (due to broken effects in this PR):

Test | `master` https://github.com/godotengine/godot/commit/22c20cea6e59a8a95585adb866c007a55c428806 | This PR
-:|-|-
DoF Far | ![test_depth_of_field_far](https://github.com/godotengine/godot/assets/180032/546f9c43-ecd3-47e5-a59f-df738bb86a8a) | ![test_depth_of_field_far](https://github.com/godotengine/godot/assets/180032/902b3049-4f80-4944-ae0b-6a0a551ce00c)
SSIL | ![test_ssil](https://github.com/godotengine/godot/assets/180032/77745a61-9872-4799-b27a-9a56f3cc6a8b) | ![test_ssil](https://github.com/godotengine/godot/assets/180032/f13675e2-73f0-4fd9-8997-8a261a9eefef)
SSIL + SSAO | ![test_ssil_ssao](https://github.com/godotengine/godot/assets/180032/a6b3059c-eb2e-420c-a25b-cdf27f7747c7) | ![test_ssil_ssao](https://github.com/godotengine/godot/assets/180032/85723bdf-3f40-4c26-9f6d-e7a2cbf8842c)
DoF Near | ![test_depth_of_field_near](https://github.com/godotengine/godot/assets/180032/bd7c5980-c684-48f0-803f-25c4e8c30568) | ![test_depth_of_field_near](https://github.com/godotengine/godot/assets/180032/20898308-c336-4df6-a7cf-74b732a7205e)
SSR | ![test_ssr](https://github.com/godotengine/godot/assets/180032/9224db2f-4e3a-4beb-b206-8ac78913f507) | ![test_ssr](https://github.com/godotengine/godot/assets/180032/1a73f0d4-38b7-4dcb-8ccd-b286ca0078a3)
SDFGI | ![test_sdfgi](https://github.com/godotengine/godot/assets/180032/9e2b3194-e380-4d6c-b993-df3aa2def9df) | ![test_sdfgi](https://github.com/godotengine/godot/assets/180032/e54b26cc-cf1c-4107-8f65-d2e88c6496c2)
FogVolume | ![test_fog_volume](https://github.com/godotengine/godot/assets/180032/c60ae202-1107-4caa-90f8-bc628104d769) | ![test_fog_volume](https://github.com/godotengine/godot/assets/180032/eeef5e59-82b8-4fc5-a391-b9899d08b119)
SSAO | ![test_ssao](https://github.com/godotengine/godot/assets/180032/2f3eda4a-81f6-4c45-b7ef-d6f5459f837e) | ![test_ssao](https://github.com/godotengine/godot/assets/180032/d244eb2d-935b-47a2-b1f9-de23ac94b3db)
Volumetric Fog | ![test_volumetric_fog](https://github.com/godotengine/godot/assets/180032/3f0ac912-faf8-4d87-a8b2-c5d040b96c93) | ![test_volumetric_fog](https://github.com/godotengine/godot/assets/180032/c75cf377-d385-4c17-a612-b672fc7987d0)
VoxelGI | ![test_voxel_gi](https://github.com/godotengine/godot/assets/180032/b8059d2f-fa08-4ce5-acbd-900243bfba09) | ![test_voxel_gi](https://github.com/godotengine/godot/assets/180032/54eda2ec-38a0-4ecd-8d47-aeb297ec8335)

To check images that differ significantly, run the project once, copy the `results` folder to `results_master`, then switch to a build of this PR and run the project again. Install [dssim](https://github.com/kornelski/dssim) and run:

```bash
(for img in results/*/*.png; do dssim $img ${img//results/results_master}; done) | sort
```

Images that differ the most from `master` are displayed at the bottom of the list.","2024-03-12T00:16:15Z",false,"COMMENTED"
"Khasehemwy","CONTRIBUTOR","","2024-03-13T08:07:36Z",false,"COMMENTED"
"Khasehemwy","CONTRIBUTOR","","2024-03-13T09:02:52Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks good to me now (pending squash and rebase). I have tested extensively on desktop devices and I trust the testing of Bastiaan and David on VR devices. 

Once this is squashed, we can go ahead and merge it for 4.3","2024-04-01T21:48:28Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-04-02T08:31:32Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-14T15:35:43Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-14T14:06:08Z",false,"COMMENTED"
"BlueCube3310","CONTRIBUTOR","","2024-02-14T15:53:15Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-14T15:56:51Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-14T16:07:48Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-14T16:09:05Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-14T16:22:15Z",false,"COMMENTED"
"BlueCube3310","CONTRIBUTOR","","2024-02-14T17:03:59Z",false,"COMMENTED"
"clayjohn","MEMBER","Looks great to me!","2024-02-16T20:45:32Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-14T13:17:45Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-03T20:18:25Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-03T20:20:11Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-06-04T14:02:41Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T14:03:08Z",false,"COMMENTED"
"EmrysMyrddin","CONTRIBUTOR","","2024-06-04T14:40:53Z",false,"COMMENTED"
"EmrysMyrddin","CONTRIBUTOR","","2024-06-04T14:43:05Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-04T14:46:40Z",false,"COMMENTED"
"EmrysMyrddin","CONTRIBUTOR","","2024-06-04T14:53:38Z",false,"COMMENTED"
"EmrysMyrddin","CONTRIBUTOR","","2024-06-04T14:55:25Z",false,"COMMENTED"
"EmrysMyrddin","CONTRIBUTOR","","2024-06-04T14:57:08Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-06-05T11:49:14Z",false,"APPROVED"
"Calinou","MEMBER","Tested locally, it works as expected. This is a nice usability boost for keyboard usage :slightly_smiling_face: 

(Sorry, forgot to refresh before posting the review.)","2024-06-08T22:02:32Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-14T09:56:30Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-02-15T16:44:33Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-14T07:50:36Z",false,"APPROVED"
"aaronfranke","MEMBER","","2024-02-14T16:45:59Z",false,"COMMENTED"
"aaronfranke","MEMBER","Makes sense to me.","2024-02-14T21:40:04Z",false,"APPROVED"
"Calinou","MEMBER","","2024-02-14T23:37:16Z",false,"COMMENTED"
"aaronfranke","MEMBER","","2024-02-15T01:41:35Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-14T09:15:25Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-02-14T13:15:39Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-14T13:35:55Z",false,"COMMENTED"
"wagnerfs","NONE","","2024-02-14T16:33:05Z",false,"COMMENTED"
"wagnerfs","NONE","","2024-02-14T16:40:39Z",false,"COMMENTED"
"DarioSamo","CONTRIBUTOR","","2024-02-14T17:47:50Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-14T17:54:55Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-14T17:55:11Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-02-14T18:30:11Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-02-14T18:31:23Z",false,"COMMENTED"
"Calinou","MEMBER","","2024-02-14T18:35:15Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally (rebased on top of `master` 907db8eebcecb97d527edcaff77a1c87a6c068f5), it works as expected.

**Testing project:** [test_pr_88313.zip](https://github.com/godotengine/godot/files/14284820/test_pr_88313.zip)

https://github.com/godotengine/godot/assets/180032/8da6f732-2a6c-4779-a693-fe2d0fdc784e


","2024-02-14T18:35:20Z",false,"COMMENTED"
"Calinou","MEMBER","Code looks good to me. Please [squash commits together](https://docs.godotengine.org/en/stable/contributing/workflow/pr_workflow.html#the-interactive-rebase) into a single commit so this can be merged.","2024-02-14T18:53:13Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-15T13:22:17Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","Documentation is very nice, but just a few things.","2024-02-15T13:39:18Z",false,"APPROVED"
"wagnerfs","NONE","","2024-02-15T14:22:16Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-15T14:23:52Z",false,"COMMENTED"
"clayjohn","MEMBER","The code looks great to me! Sorry, I had this on my backlog to review for several months. I didn't intend for it to take so long. 

One question I have is whether there is a benefit to specifying anisotropy per viewport. Previously when you changed the project setting it would change for all viewports. With this change, only the root viewport will be affected (which is technically a slight compatibility breakage). The trade off is that we can now control anisotropy on a per-viewport basis. But I'm not sure that doing so is desirable from a user point of view. 

Can anyone think of a situation where you would want to change anisotropy in one viewport but not another?","2024-09-04T03:12:22Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-14T10:25:38Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","Thanks!

Overall, this looks really nice to me :-)

> Does `XRFaceTrackingProvider::update` and `XRFaceTrackingProvider::_update` need to exist, or should the updating just be done by the process() of the OpenXR extension.

Whether or not we'll need the `update()` method depends on if we have any timing issues, ie will the code that updates the face tracking data run before or after we need to access it for rendering. If it runs after, that means face tracking data will be one frame delayed.

So, I'd probably lean towards keeping the `update()` method. It's possible we may not need it in the case of OpenXR (the process on the OpenXR extension may be sufficient), but since this is API agnostic and we may end up with WebXR or Apple Vision implementations at some point, I think it's safer to keep it around.","2024-02-16T16:01:53Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-17T01:43:12Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-17T01:50:39Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-17T01:54:13Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","Feedback from discussions on contributors chat.

- Suggest to rename the data object XRFaceTracker and drop the _update method. This brings it in line with XRPositionalTracker approach for controllers.
- Suggest to rename the node to XRFaceTracker3D to be in line with other 3D nodes and set it apart from the data object.
- Remove the 'Provider' suffix from the methods added to XRServer","2024-02-17T02:50:04Z",false,"CHANGES_REQUESTED"
"BastiaanOlij","CONTRIBUTOR","Looks great! Maybe update the original description of the PR to match the latest decisions.","2024-02-17T08:26:42Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-17T09:11:36Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-02-17T11:02:29Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-17T11:05:26Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-17T16:27:44Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-17T16:28:11Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-17T16:28:30Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-17T16:29:17Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-17T16:29:38Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-17T16:30:09Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-17T16:32:08Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-17T21:33:18Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-17T21:46:29Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-17T23:36:40Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-17T23:44:25Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-18T00:09:30Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-18T00:11:28Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-18T00:14:48Z",false,"COMMENTED"
"BastiaanOlij","CONTRIBUTOR","","2024-02-18T00:38:36Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-18T00:43:36Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-18T00:46:07Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-18T01:13:32Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-18T01:14:06Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-18T01:14:47Z",false,"COMMENTED"
"Malcolmnixon","CONTRIBUTOR","","2024-02-18T01:15:46Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","The logic looks good to me.

Leaving it up to @BastiaanOlij to comment on the design.","2024-02-14T03:16:35Z",false,"APPROVED"
"BastiaanOlij","CONTRIBUTOR","Looks perfect.

The only issue, but I think that should get its own PR and we already have an issue for this, is that the eye gaze interaction extension is currently only instanced if the eye gaze extension is enabled in project settings.

This needs to change, we should always instantiate the extension, but only enable it, as the meta data should always be registered. The tracker names are a bit of a grey area here as nothing will fall over if they are not among the suggested names.","2024-02-14T03:38:49Z",false,"APPROVED"
"AThousandShips","MEMBER","Looks great otherwise!","2024-02-17T19:50:35Z",false,"APPROVED"
"KoBeWi","MEMBER","","2024-02-17T20:16:49Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-17T20:17:02Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-17T20:19:19Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-17T20:28:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-17T20:33:36Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-17T20:34:26Z",false,"COMMENTED"
"KoBeWi","MEMBER","Overall looks good.

I think it's worth to try using a different color instead of bold font to differentiate enabled and disabled plugins. Currently it doesn't look that readable with a longer list.","2024-02-17T20:37:01Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","","2024-02-17T20:43:31Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-17T20:45:31Z",false,"COMMENTED"
"Calinou","MEMBER","Tested locally, it works as expected.

Code looks good to me.","2024-02-17T22:35:31Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-04-18T09:04:13Z",false,"APPROVED"
"akien-mga","MEMBER","Indeed this was a backport/cherry-pick mistake, `text_submitted` is the name of this signal in the 4.x / `master` branch, but not in 3.x.","2024-02-13T22:42:18Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-13T22:34:06Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-13T22:27:00Z",false,"APPROVED"
"fire","MEMBER","","2024-04-25T22:46:09Z",false,"APPROVED"
"Mickeon","CONTRIBUTOR","Documentation is just fine

This bugfix makes sense. `is_visible_in_tree`, akin to **CanvasItem** and **Node3D** is likely to benefit many _and_ the internal editor code for things like the Scene Tree dock.

However, there's now 3 (possibly more?) Objects that share this similar snippet of code. I don't know if that's going to be a good thing in the long run.","2024-02-14T11:35:29Z",false,"APPROVED"
"AThousandShips","MEMBER","","2024-02-14T11:36:13Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","","2024-02-14T11:37:10Z",false,"COMMENTED"
"AThousandShips","MEMBER","","2024-02-14T11:39:43Z",false,"COMMENTED"
"FaycalElOuariachi","CONTRIBUTOR","","2024-02-14T11:53:03Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-25T19:15:52Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-02-25T19:18:03Z",false,"COMMENTED"
"FaycalElOuariachi","CONTRIBUTOR","","2024-03-05T02:54:39Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-05T22:37:01Z",false,"COMMENTED"
"KoBeWi","MEMBER","","2024-03-05T22:39:48Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-02-13T20:54:22Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","","2024-02-13T21:07:53Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-14T18:03:07Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-02-15T07:28:49Z",false,"CHANGES_REQUESTED"
"dsnopek","CONTRIBUTOR","","2024-02-15T15:11:01Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-15T15:11:12Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-15T15:11:19Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-15T15:11:35Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","The logic looks good. I'll perform a round of testing on the PR to see what the feature looks like.","2024-02-15T15:34:16Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-15T15:40:36Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-15T16:41:35Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","@dsnopek Looks pretty good from my testing!

Here are a few feedbacks I have:
- We should print an export warning (not error) when the value in the `.build_version` file differs from `gradle_build/android_source_template`. This way, it's still the responsibility of the user to delete and recreate the build dir, but we provide some hints to the fact it's needed.
- For a custom `gradle_build/android_source_template`, we should use the zip file's `md5` to ensure we can detect when the file is modified. For example, a plugin may reuse the same location for its custom source template, but update the content for every release.","2024-02-16T17:39:36Z",false,"CHANGES_REQUESTED"
"m4gr3d","CONTRIBUTOR","Looks great!

","2024-02-16T20:57:04Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-02-16T21:21:01Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-16T21:21:33Z",false,"COMMENTED"
"akien-mga","MEMBER","Looks good!

There are a few warnings popping up in the Files view, do you want to address them here or in a follow up?","2024-02-14T08:00:49Z",false,"APPROVED"
"paulloz","MEMBER","","2024-02-14T08:13:01Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-02-14T13:22:58Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-14T17:39:18Z",false,"COMMENTED"
"raulsntos","MEMBER","","2024-02-14T18:46:00Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-15T08:49:59Z",false,"COMMENTED"
"paulloz","MEMBER","","2024-02-15T08:50:06Z",false,"APPROVED"
"raulsntos","MEMBER","","2024-02-15T18:40:02Z",false,"COMMENTED"
"YeldhamDev","MEMBER","Should be in this order, like the other instances in the file:","2024-02-13T17:58:09Z",false,"CHANGES_REQUESTED"
"YeldhamDev","MEMBER","","2024-02-13T19:38:52Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Looks great! Simple, but gets the job done!

My only concern is with regard to the mechanism to enable the overrides; at the moment it's up to the plugin which means the plugin can provide an option as you demonstrate in your example, or it can automatically apply the overrides without allowing the user to control the feature.

I wonder if instead we should make it a core part of the export preset config similar to the `runnable` toggle. So we'd add a toggle to allow for options override, and check the value of the toggle before retrieving the options overrides from the plugin.
Thoughts?","2024-02-13T18:24:00Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-02-13T22:37:56Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-02-13T23:06:00Z",false,"COMMENTED"
"m4gr3d","CONTRIBUTOR","","2024-02-13T23:10:47Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-14T16:11:12Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-14T16:11:59Z",false,"COMMENTED"
"Mickeon","CONTRIBUTOR","New dynamic feature with a reasonable example!?!?
Satisfactory","2024-02-14T16:25:15Z",false,"APPROVED"
"m4gr3d","CONTRIBUTOR","Looks great!

I think we can go ahead and merge this. My comments on the ability to enable/disable the added capability are part of a larger conversation about how much user control we give over plugins capabilities and should not be a blocker for this PR.","2024-02-14T16:37:50Z",false,"APPROVED"
"dsnopek","CONTRIBUTOR","","2024-02-14T16:52:10Z",false,"COMMENTED"
"dsnopek","CONTRIBUTOR","","2024-02-14T16:52:46Z",false,"COMMENTED"
"akien-mga","MEMBER","","2024-02-13T21:57:32Z",false,"APPROVED"
"clayjohn","MEMBER","","2024-05-16T20:29:36Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-13T16:42:27Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-02-16T17:18:46Z",false,"APPROVED"
"lawnjelly","MEMBER","","2024-02-16T20:28:07Z",false,"APPROVED"
"akien-mga","MEMBER","Looks good!

Also needs this change:
```diff
diff --git a/COPYRIGHT.txt b/COPYRIGHT.txt
index b620f67bc9..bb29c88443 100644
--- a/COPYRIGHT.txt
+++ b/COPYRIGHT.txt
@@ -350,7 +350,7 @@ License: CC0-1.0
 
 Files: ./thirdparty/miniupnpc/
 Comment: MiniUPnP Project
-Copyright: 2005-2023, Thomas Bernard
+Copyright: 2005-2024, Thomas Bernard
 License: BSD-3-clause
 
 Files: ./thirdparty/minizip/
```","2024-02-13T14:59:08Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-13T14:21:34Z",false,"APPROVED"
"akien-mga","MEMBER","","2024-02-13T14:04:08Z",false,"APPROVED"
