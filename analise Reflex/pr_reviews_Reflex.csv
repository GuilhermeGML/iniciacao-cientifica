"Lendemor","COLLABORATOR","","2024-10-15T11:12:41Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","We should remove these from reflex-web docs as well if we mention it there","2024-10-15T01:02:08Z",false,"APPROVED"
"adhami3310","MEMBER","","2024-10-15T01:16:24Z",false,"APPROVED"
"masenf","COLLABORATOR","this is cool. cleans up a lot of more complex code that i think will improve maintainability","2024-10-14T22:46:44Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-10-14T22:48:30Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-10-14T22:49:52Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-10-14T22:24:10Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-10-14T16:11:04Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-10-14T16:49:53Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-10-14T18:11:08Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-10-15T10:02:20Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-10-15T10:02:40Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-10-11T23:48:46Z",false,"APPROVED"
"Kastier1","CONTRIBUTOR","‎ ","2024-10-11T22:51:15Z",false,"APPROVED"
"Kastier1","CONTRIBUTOR","‎ ","2024-10-11T22:43:45Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-10-11T21:46:04Z",false,"APPROVED"
"adhami3310","MEMBER","ㅤ","2024-10-10T23:55:22Z",false,"CHANGES_REQUESTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-10-11T16:01:39Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-10-11T18:43:03Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-10-12T00:11:39Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-10-12T00:27:10Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-10-11T18:39:18Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-10-10T19:14:34Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-10-14T13:15:11Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-10-10T19:17:51Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-10-10T19:40:28Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-10-12T00:08:34Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-10-14T13:20:16Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-10-12T00:05:53Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-10-12T00:08:30Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-10-14T15:43:06Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-10-10T00:33:21Z",false,"APPROVED"
"benedikt-bartscher","CONTRIBUTOR","","2024-10-09T20:48:11Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-10-10T02:53:23Z",false,"APPROVED"
"masenf","COLLABORATOR","this is draft, were you planning on adding more to it?","2024-10-09T19:48:41Z",false,"APPROVED"
"masenf","COLLABORATOR","kinda sucks we have to duplicate the job definition, but lets take it for now; we can always improve that later.","2024-10-09T16:46:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for adding :) ","2024-10-09T15:58:03Z",false,"APPROVED"
"masenf","COLLABORATOR","Probably followup work, but the drawer content component accepts `on_pointer_down_outside` and `on_open_auto_focus` events.

Looks like the root also exposes `on_close`.

The docs for vaul are a bit out of date with the code; we probably should go through and clean these up.","2024-10-09T00:59:18Z",false,"DISMISSED"
"adhami3310","MEMBER","","2024-10-09T01:12:22Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-10-09T19:16:50Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-10-08T19:23:08Z",false,"APPROVED"
"benedikt-bartscher","CONTRIBUTOR","","2024-10-09T21:27:07Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","working for me","2024-10-11T21:44:35Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-10-11T23:51:05Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-10-08T16:30:43Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T19:35:20Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T19:36:06Z",false,"DISMISSED"
"Alek99","MEMBER","","2024-10-10T19:57:42Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T22:49:23Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-10-08T16:15:38Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T19:37:06Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T22:51:47Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-10T19:59:32Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T22:53:13Z",false,"CHANGES_REQUESTED"
"carlosabadia","CONTRIBUTOR","","2024-10-10T13:15:44Z",false,"COMMENTED"
"Alek99","MEMBER","","2024-10-10T19:58:31Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T22:54:34Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T22:57:07Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T22:58:19Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T22:56:06Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T23:52:38Z",false,"DISMISSED"
"Alek99","MEMBER","","2024-10-10T20:00:19Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T23:05:18Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T23:06:01Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T23:07:20Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T23:08:59Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T19:31:20Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T23:09:46Z",false,"DISMISSED"
"Alek99","MEMBER","","2024-10-10T22:10:38Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T23:14:45Z",false,"CHANGES_REQUESTED"
"Alek99","MEMBER","","2024-10-10T22:10:07Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T23:51:22Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T23:17:10Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T19:38:45Z",false,"CHANGES_REQUESTED"
"Alek99","MEMBER","","2024-10-10T20:04:43Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T23:56:23Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-10T22:10:24Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T23:17:55Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T18:48:14Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T23:53:34Z",false,"CHANGES_REQUESTED"
"Alek99","MEMBER","","2024-10-08T23:11:28Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T23:28:11Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T23:25:42Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T23:54:42Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T23:30:31Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T23:42:28Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T23:41:34Z",false,"APPROVED"
"Alek99","MEMBER","","2024-10-08T23:45:13Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-10-08T14:15:24Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-10-08T09:07:18Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-10-08T09:06:34Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-10-08T02:50:30Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-10-08T14:16:30Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-10-07T21:43:01Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-10-07T20:17:02Z",false,"APPROVED"
"masenf","COLLABORATOR","looks good, but we can't just ignore redis pickling errors long term, that's going to create problems for people","2024-10-07T17:33:15Z",false,"APPROVED"
"adhami3310","MEMBER","","2024-10-07T19:03:40Z",false,"APPROVED"
"masenf","COLLABORATOR","tks, not sure how we missed this originally and it's just now being reported","2024-10-07T16:27:31Z",false,"APPROVED"
"masenf","COLLABORATOR","have you considered `NPM_CONFIG_REGISTRY` as the knob? That would be more standardized and interoperable with `npm` environments.","2024-10-07T17:29:26Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-10-09T18:36:29Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-10-07T20:13:21Z",false,"APPROVED"
"masenf","COLLABORATOR","looking at the radix source code, this _is_ the correct inheritance structure, because any props that are not explicitly recognized by radix are passed directly to the wrapped `<input>` component.","2024-10-07T17:25:21Z",false,"COMMENTED"
"Joodith","NONE","","2024-10-08T07:29:09Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-10-07T16:37:39Z",false,"APPROVED"
"masenf","COLLABORATOR","Cool 🤯","2024-10-05T00:26:59Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-10-07T19:46:00Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-10-07T16:35:42Z",false,"APPROVED"
"adhami3310","MEMBER","","2024-10-04T23:12:02Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-10-04T20:54:06Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-10-04T19:26:57Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-10-04T19:27:52Z",false,"APPROVED"
"adhami3310","MEMBER","","2024-10-04T18:07:36Z",false,"APPROVED"
"adhami3310","MEMBER","","2024-10-04T18:08:25Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-10-04T20:43:10Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-10-07T21:55:44Z",false,"APPROVED"
"adhami3310","MEMBER","","2024-10-04T00:43:40Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-10-04T02:15:36Z",false,"APPROVED"
"adhami3310","MEMBER","","2024-10-04T02:17:51Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-10-04T02:18:57Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-10-03T22:22:18Z",false,"DISMISSED"
"masenf","COLLABORATOR","hopefully our Var exceptions are good enough","2024-10-03T22:36:13Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-10-03T22:29:06Z",false,"COMMENTED"
"masenf","COLLABORATOR","gah i tried so hard to get this working when i was prototyping. nice","2024-10-03T22:35:01Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-10-03T19:36:20Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-10-07T18:54:10Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-10-03T19:04:26Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-10-03T13:41:18Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2024-10-03T14:16:59Z",false,"APPROVED"
"adhami3310","MEMBER","i can't think of something better than istate (should prob be state once the reorganizing is done)","2024-10-03T19:27:14Z",false,"APPROVED"
"Lendemor","COLLABORATOR","Everything else looks fine.","2024-10-02T22:05:35Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2024-10-02T23:11:56Z",false,"APPROVED"
"masenf","COLLABORATOR","so as i read it, it's still up to the developer to call `rx.dynamic.bundle_library` at module level (i.e. not dynamically), to have their libs included in the `window`?","2024-10-03T21:17:47Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome","2024-10-10T19:22:18Z",false,"APPROVED"
"adhami3310","MEMBER","","2024-10-02T00:09:43Z",false,"DISMISSED"
"adhami3310","MEMBER","","2024-10-03T17:20:12Z",false,"APPROVED"
"masenf","COLLABORATOR","looks good, two minor docstring issues then we can merge","2024-10-03T21:13:21Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-10-03T22:33:40Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-10-01T22:23:14Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2024-10-02T14:57:59Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Does the entire style dictionary get compiled in every time you call it? I wonder if we need to do some optimizations around that","2024-10-03T17:58:27Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-09-29T19:08:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-10-01T16:21:30Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-09-29T19:30:51Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-28T16:07:02Z",false,"COMMENTED"
"Kastier1","CONTRIBUTOR","","2024-09-28T21:20:47Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-10-01T00:02:06Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-10-01T16:25:58Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-10-01T19:33:41Z",false,"APPROVED"
"masenf","COLLABORATOR","normally id say we should raise trackable exceptions here, but since these were originally `assert`, maybe they're not intended to ever be hit?","2024-09-27T23:42:38Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-09-27T23:57:13Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-27T23:21:16Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-09-27T23:26:19Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-09-27T23:58:04Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-09-27T16:47:18Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-27T05:05:30Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-09-27T19:04:02Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-09-27T20:38:48Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-09-27T23:17:09Z",false,"APPROVED"
"masenf","COLLABORATOR","no","2024-09-27T04:55:14Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2024-09-27T04:53:58Z",false,"APPROVED"
"adhami3310","MEMBER","","2024-09-26T23:03:53Z",false,"CHANGES_REQUESTED"
"adhami3310","MEMBER","","2024-09-26T23:04:50Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-26T20:58:42Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-09-26T21:14:16Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2024-10-03T14:20:47Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-10-03T16:53:42Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-10-03T17:35:15Z",false,"APPROVED"
"adhami3310","MEMBER","","2024-09-26T18:47:52Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-26T23:11:54Z",false,"APPROVED"
"adhami3310","MEMBER","","2024-09-26T18:53:43Z",false,"APPROVED"
"adhami3310","MEMBER","","2024-09-26T18:00:32Z",false,"DISMISSED"
"adhami3310","MEMBER","","2024-09-26T18:56:04Z",false,"APPROVED"
"adhami3310","MEMBER","","2024-09-25T20:18:58Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-09-25T18:21:09Z",false,"DISMISSED"
"masenf","COLLABORATOR","what is the motivation for this change?","2024-09-25T18:39:06Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-09-26T20:46:24Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-09-25T18:30:08Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-09-25T16:06:49Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-09-25T17:15:48Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-09-25T23:37:08Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-09-25T17:50:09Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-25T03:34:25Z",false,"APPROVED"
"adhami3310","MEMBER",":ship: ","2024-09-25T00:45:32Z",false,"APPROVED"
"masenf","COLLABORATOR","feels like this improves hot reload time 👍 
","2024-09-25T03:48:23Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-09-24T23:17:43Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-09-25T01:47:27Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-25T03:37:50Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-25T03:35:37Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-24T18:56:27Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-09-24T23:22:43Z",false,"APPROVED"
"masenf","COLLABORATOR","this one does kind of scare me a little bit... what if we're not compatible with the latest node version? (idk we don't test it)","2024-09-24T01:34:47Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-09-24T23:36:51Z",false,"COMMENTED"
"masenf","COLLABORATOR","@picklelo we're eventually moving all tests into subfolders of `tests/` if you think that's a good idea","2024-09-25T03:39:36Z",false,"DISMISSED"
"adhami3310","MEMBER","","2024-09-25T23:05:08Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-24T01:32:40Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-09-25T00:37:54Z",false,"APPROVED"
"masenf","COLLABORATOR","seems we can now also remove `serialize_list` and `serialize_dict`","2024-09-24T01:30:49Z",false,"COMMENTED"
"masenf","COLLABORATOR","red diff ftw","2024-09-26T22:56:58Z",false,"APPROVED"
"tgberkeley","COLLABORATOR","","2024-09-24T00:31:12Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-09-24T01:28:33Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-09-24T02:19:27Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-24T02:37:18Z",false,"APPROVED"
"masenf","COLLABORATOR","not sure who is using this event, but we probably should deprecate it rather than remove it without notice","2024-09-24T01:16:43Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-09-23T21:08:37Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2024-09-23T23:26:28Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-09-23T20:21:20Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-23T23:51:10Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-23T23:48:00Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-09-24T01:14:23Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-09-23T20:32:26Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-23T23:36:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-09-22T21:49:00Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-10-01T22:24:04Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-09-23T19:38:27Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-09-22T21:44:36Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-09-20T17:02:07Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-09-20T16:26:14Z",false,"APPROVED"
"masenf","COLLABORATOR","working for me","2024-09-20T16:36:56Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for adding!","2024-09-29T19:51:36Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-09-20T00:59:39Z",false,"APPROVED"
"masenf","COLLABORATOR","this is a bit of a dangerous API, because if the state is modified, then that is essentially thrown away (unless in dev mode).

i think it would be better to expose a wrapper over `app.modify_state` with an async contextmanager.

if we definitely want a `get_state` that maybe skips taking a lock or sending an update or something, i think that's okay, but we should wrap it in a StateProxy like a background task so it cannot be modified outside of `async with state:`","2024-09-19T23:52:57Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-09-20T00:02:40Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-09-19T22:11:30Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-09-19T22:15:26Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-09-20T16:51:47Z",false,"APPROVED"
"adhami3310","MEMBER","down with tests 👎","2024-09-19T17:45:19Z",false,"APPROVED"
"masenf","COLLABORATOR","destroy all test reporting! 🔥 ","2024-09-19T17:47:26Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-09-18T23:29:14Z",false,"APPROVED"
"adhami3310","MEMBER","","2024-09-18T23:09:28Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-09-18T20:24:44Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-18T19:11:49Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-09-18T19:18:04Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-18T19:17:10Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-18T18:29:24Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-09-18T18:31:08Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-09-18T21:17:43Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-18T18:26:14Z",false,"APPROVED"
"masenf","COLLABORATOR","adding this to the integration test_var_operations.py might be helpful if this type of change doesn't trigger a test change, then we must not have good enough coverage","2024-09-18T18:26:53Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-09-17T22:20:08Z",false,"COMMENTED"
"masenf","COLLABORATOR","unit test here would be nice","2024-09-18T18:30:53Z",false,"DISMISSED"
"masenf","COLLABORATOR","tks","2024-09-18T19:07:05Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","@TG199 thanks for the contribution! We currently use `next-sitemap` to automatically generate a sitemap when you do `reflex export` or `reflex run --env prod`

See here: https://github.com/reflex-dev/reflex/blob/ef38ac29ea690a15c661101c990c6c9780058f77/reflex/utils/build.py#L38

Does that feature work for you? I think offloading the sitemap generation to a third party library as we do now is nice unless there's some functionality missing. ","2024-09-19T22:48:56Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-09-16T23:22:15Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-09-17T00:42:27Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-16T21:57:16Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-09-16T22:03:38Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-09-16T23:35:56Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-09-16T20:40:00Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-09-16T20:58:28Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-16T20:39:49Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-09-16T21:06:34Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-16T18:10:18Z",false,"APPROVED"
"masenf","COLLABORATOR","awesome thanks","2024-09-16T18:08:15Z",false,"APPROVED"
"Lendemor","COLLABORATOR","Tested, it's working well.

Just need to fix the pre-commit issue before we can merge it.","2024-09-16T21:23:21Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-09-17T22:07:36Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-16T18:12:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-09-18T21:19:33Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-09-18T21:20:52Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-09-18T21:22:12Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-09-25T00:36:52Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-09-13T16:49:22Z",false,"APPROVED"
"masenf","COLLABORATOR","great new syntax/API, very nice. lets get the conflicts resolved and get it in","2024-09-13T20:38:19Z",false,"COMMENTED"
"masenf","COLLABORATOR","nice 🚢 🏆 ","2024-09-13T22:56:33Z",false,"APPROVED"
"masenf","COLLABORATOR","@adhami3310 what do you think of this one","2024-09-16T18:15:48Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-09-11T17:27:44Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-09-11T17:31:50Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-09-11T18:14:28Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-11T18:15:42Z",false,"APPROVED"
"masenf","COLLABORATOR","this sets us up to integrate both components and event handlers with the new var system. nice work.

i like the frozen instances everywhere, but there has to be a nicer way to init without seeing lots of `object.__setattr__` calls. does dataclass not handle that internally with `frozen=True`? could we call `super().__init__` to the generated method?","2024-09-11T05:21:35Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-09-13T19:52:58Z",false,"APPROVED"
"benedikt-bartscher","CONTRIBUTOR","","2024-10-09T19:37:33Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-10-09T19:47:22Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-10-09T19:48:24Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-09-10T19:18:43Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-09T22:50:35Z",false,"APPROVED"
"masenf","COLLABORATOR","can you rebase this on main so the diff doesn't look weird","2024-09-10T00:34:51Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-09-10T00:42:54Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-09-09T19:00:46Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-09-10T12:40:24Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-05T22:05:49Z",false,"COMMENTED"
"abulvenz","CONTRIBUTOR","","2024-09-05T22:08:57Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-09-09T18:00:05Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-11T05:42:22Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-09-11T16:35:00Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-09-09T01:29:27Z",false,"APPROVED"
"benedikt-bartscher","CONTRIBUTOR","Thanks for the cleanup, lgtm","2024-09-05T17:18:46Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-09-05T20:26:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-09-05T16:53:34Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-04T23:05:52Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch, thanks!","2024-09-04T23:11:10Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-04T20:40:23Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-09-05T20:30:17Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-09-05T20:30:32Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-04T18:46:37Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","I think we can remove the progress low-level docs from reflex-web as well","2024-09-04T16:17:21Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-09-04T18:32:29Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2024-09-04T21:16:28Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-09-04T22:05:02Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-09-05T17:19:55Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-11T19:47:12Z",false,"COMMENTED"
"masenf","COLLABORATOR","is there a test we can add that hits this case so we don't accidentally regress it when refactoring away from jinja","2024-09-04T00:56:22Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-09-09T02:02:24Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-04T01:31:59Z",false,"DISMISSED"
"adhami3310","MEMBER","","2024-09-04T01:41:16Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","This PR fixes the ClientState issues and I can run flexgen prod with it. Should we consider adding an integration test for ClientState? Currently it doesn't work on `main` though all the tests are passing.","2024-09-09T02:18:30Z",false,"DISMISSED"
"masenf","COLLABORATOR","review checkpoint. haven't tested it locally yet, interested to see how you were able to clear out so much of reflex.utils.format and keep things working","2024-09-09T16:58:17Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-09-09T18:47:42Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-09-09T18:48:44Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-09-09T18:50:45Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-09-10T18:01:26Z",false,"APPROVED"
"adhami3310","MEMBER","","2024-09-03T20:41:44Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-09-03T18:15:30Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good just one question/comment","2024-09-04T16:13:31Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2024-09-06T18:06:06Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","There's still a few chakra references left over:

* `benchmarks/test_benchmark_compile_pages.py` can we make the input to radix?
* `integration/test_client_storage.py`
* `reflex/style.py` just a comment referencing chakra
* `reflex/components/radix/themes/base.py` - can we remove the chakra-specific logic here?
* `tests/components/test_component.py`
* `tests/components/datadisplay/test_table.py` - this one is testing the chakra table, we can probably just move it to the `reflex-chakra` repo
* `tests/components/forms/test_form.py`
* `tests/components/media/test_icon.py` (similarly can be moved)
* `tests/components/typography/test_markdown.py`","2024-09-09T01:25:47Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome, I think the last reference I see is in `tests/test_app.py` shall we remove that as well?","2024-09-09T16:40:02Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","awesome","2024-09-10T02:04:34Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-09-12T17:46:34Z",false,"APPROVED"
"masenf","COLLABORATOR","nice! way to use the new modular var operations api 🎉 

cc @adhami3310 for input","2024-09-05T17:25:18Z",false,"DISMISSED"
"benedikt-bartscher","CONTRIBUTOR","","2024-09-05T17:41:21Z",false,"COMMENTED"
"abulvenz","CONTRIBUTOR","","2024-09-05T19:44:21Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-09-09T01:36:39Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-09-02T16:33:21Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-08-30T17:09:05Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-08-29T22:47:01Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-08-30T16:56:44Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","I think we can remove the assets folder watching completely In a follow up","2024-08-30T16:57:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome, thanks for adding!","2024-08-31T06:54:26Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-08-29T20:22:07Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-08-29T20:23:13Z",false,"APPROVED"
"masenf","COLLABORATOR","mostly looks good, really like the tests. a couple of feedbacks","2024-08-29T18:17:18Z",false,"COMMENTED"
"samarth9201","CONTRIBUTOR","","2024-08-29T20:49:22Z",false,"COMMENTED"
"samarth9201","CONTRIBUTOR","","2024-08-29T20:50:22Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-08-29T21:12:49Z",false,"COMMENTED"
"samarth9201","CONTRIBUTOR","","2024-08-29T21:23:19Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","Thank you, @samarth9201, LGTM!
We could make `get_redis_status` and `get_db_status` async and run them at the same time to slightly improve performance","2024-08-29T21:55:19Z",false,"APPROVED"
"samarth9201","CONTRIBUTOR","","2024-08-29T22:42:52Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-08-30T12:51:15Z",false,"APPROVED"
"masenf","COLLABORATOR","awesome thanks for your contribution and patience 🙏 ","2024-09-04T01:33:17Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-08-29T22:48:57Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-08-29T22:46:08Z",false,"APPROVED"
"masenf","COLLABORATOR","i think if we can just put the scratch dir inside `.web` (per discord chat), then that's a cleaner solution with the side benefit of we're not really expected to clean it up, and `.web` is a generated directory and shouldn't be checked into version control.","2024-08-28T20:07:45Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-08-27T23:09:55Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-08-28T00:56:47Z",false,"APPROVED"
"Alek99","MEMBER","lgmt ","2024-08-27T22:30:08Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for the contribution! I think to handle this in the generic case we may need to do something like this: https://stackoverflow.com/questions/66949606/what-is-the-best-way-to-have-a-fallback-image-in-nextjs and set the `onError` prop. This will allow the error handling to occur on the frontend during runtime rather than during compile time.","2024-08-27T20:02:46Z",false,"CHANGES_REQUESTED"
"abdulhakkeempa","NONE","","2024-08-28T12:19:26Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-08-28T18:16:18Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-09-10T19:09:17Z",false,"APPROVED"
"benedikt-bartscher","CONTRIBUTOR","","2024-09-05T18:26:45Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-09-05T22:23:09Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","nice catch - the example is working for me","2024-09-09T01:35:36Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-03T18:21:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-08-26T23:46:59Z",false,"APPROVED"
"adhami3310","MEMBER","","2024-08-26T23:25:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-08-26T22:28:22Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch","2024-08-26T22:55:55Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-08-26T22:47:22Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-09-02T14:11:25Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-09-17T22:46:27Z",false,"APPROVED"
"masenf","COLLABORATOR","maybe this could be added to the `_x` namespace via a property that delays the import. we definitely don't want to be importing this unless it will be used.","2024-09-19T23:58:05Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-08-23T21:47:38Z",false,"DISMISSED"
"masenf","COLLABORATOR","oh, need to regenerate the pyi files","2024-08-23T21:48:04Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-08-23T23:57:06Z",false,"APPROVED"
"masenf","COLLABORATOR","nice implementation","2024-08-23T19:24:07Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-08-23T19:55:00Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-08-31T00:16:46Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","we can remove the dependency remove for now I think","2024-08-23T18:54:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-08-23T02:03:43Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-08-21T21:22:32Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","awesome!","2024-08-26T22:31:35Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-09-25T21:59:17Z",false,"COMMENTED"
"masenf","COLLABORATOR","> I would like to deprecate those automatically generated computed vars for dynamic routes.

I could get on board with this. In most of my apps that use dynamic route vars, i typically have to add them to my state manually anyway, otherwise they cannot be referenced in some situations (like setting the page title for `app.add_page`).

I wonder if it makes sense to dynamically add route vars to a specific substate, rather than the root state 🤔 Something like `rx.Query.redirect_me`. I know we have `rx.State.router.page.params[""redirect_me""]`, but that's kind of a lot to type. Although i guess if we're going to do that, then we should just have `rx.Query` implement `__getattr__` to return the full thing, then it would always be defined, even before the compile runs.

The other big problem I see in `state.py` is that substates cannot redefine or override fields from a parent state. Maybe this restriction doesn't make sense anymore... if a substate redefines a field, then it should be a _different_ value than the same-named field in a parent state, but that's just not how the code is written today.","2024-08-20T23:52:35Z",false,"COMMENTED"
"masenf","COLLABORATOR","Instead of adding a field to ImmutableComputedVar, can we subclass it as `DynamicRouteVar` and use that as the determinant?","2024-09-10T21:19:40Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-09-11T16:42:27Z",false,"APPROVED"
"benedikt-bartscher","CONTRIBUTOR","","2024-09-11T16:45:46Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-09-11T16:50:48Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-08-26T22:29:11Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome!","2024-08-19T20:41:12Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-08-20T17:25:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-08-15T16:29:46Z",false,"APPROVED"
"masenf","COLLABORATOR","maybe a comment for future maintainers?","2024-08-13T20:40:07Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-08-13T20:48:55Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-08-13T20:49:43Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-08-12T21:04:26Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-08-12T00:42:33Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Sorry for the delay here. I think the changes look good - we need to rebase this onto `main` and implement it for `StateManagerDisk` which is becoming the default in 0.7.0","2024-09-09T02:08:52Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","Code works well for me. I'll wait for @masenf 's final approval to merge. What was the use case for this?","2024-09-19T01:58:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-08-12T10:03:57Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-08-12T14:30:43Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-08-12T14:41:11Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-08-12T15:50:05Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for the fix!","2024-08-09T19:12:42Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-08-20T19:11:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-08-06T16:46:15Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-08-09T19:08:08Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-08-06T16:07:48Z",false,"DISMISSED"
"masenf","COLLABORATOR","i think it would be better to change `hooks.useState` to not specify `install=False`, since `react` is never installed, it's less likely to clash with other places/3rd party packages that need `useState`, including `rx._x.client_state`","2024-08-06T16:49:39Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-08-12T10:04:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-08-06T05:43:52Z",false,"APPROVED"
"Nightowlbot","NONE","I suck on this, still very funny :("") ","2024-08-11T02:53:10Z",false,"COMMENTED"
"masenf","COLLABORATOR","review checkpoint","2024-08-12T23:52:21Z",false,"COMMENTED"
"masenf","COLLABORATOR","Review checkpoint 😁 ","2024-08-13T20:58:24Z",false,"COMMENTED"
"masenf","COLLABORATOR","Review checkpoint

I'm almost through it all, just need to look through the test changes","2024-08-13T23:30:34Z",false,"COMMENTED"
"masenf","COLLABORATOR","review complete. ping me when you're ready for re-review","2024-08-13T23:44:35Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-08-15T20:23:30Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-08-15T20:26:32Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-08-15T21:10:06Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-08-15T21:13:09Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-08-15T21:53:06Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-08-26T20:28:00Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-08-05T18:28:57Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-08-05T18:29:13Z",false,"APPROVED"
"masenf","COLLABORATOR","thanks for the contribution, will test it out further.","2024-08-05T20:12:47Z",false,"COMMENTED"
"gunungpw","NONE","","2024-08-08T01:58:59Z",false,"COMMENTED"
"gunungpw","NONE","","2024-08-08T02:00:26Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-09-16T18:24:38Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","Got a small question: 
How does this impact the initial size for the frontend ?","2024-09-19T22:02:53Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-09-19T22:08:16Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Functionality is working well for me, this is going to be huge.

* In a follow up we need to add more unit tests for all the new functions introduced here
* [discussed offline] There's a limitation on returning vars from other vars (leading to a ""bug in React"" error) - we should try to catch that happening and prevent it

Once this is rebased it should be good to merge!","2024-09-19T23:02:40Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-09-19T23:45:05Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-09-19T23:47:05Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-09-19T23:49:41Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","The first step of the new reflex!","2024-09-20T00:00:22Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-08-01T20:24:08Z",false,"APPROVED"
"masenf","COLLABORATOR","this is badass 💪","2024-07-31T18:36:31Z",false,"APPROVED"
"masenf","COLLABORATOR","as for the `_var_set_state`, we probably could just save a reference to the state class and defer formatting of the state name until it's actually needed (_var_full_name_needs_state_prefix)","2024-08-05T20:18:27Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-08-05T20:19:04Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-08-05T20:22:35Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-08-05T21:02:25Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-08-19T22:14:40Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-07-31T18:37:48Z",false,"APPROVED"
"masenf","COLLABORATOR","Thanks for the quick fix 😌 ","2024-07-31T17:00:38Z",false,"APPROVED"
"masenf","COLLABORATOR","i dont think these props are recognized by the next/script `<Script>` element... https://nextjs.org/docs/pages/api-reference/components/script","2024-07-31T16:04:46Z",false,"COMMENTED"
"masenf","COLLABORATOR","Thanks for your contribution. Seems to resolve the issue on my end.

Is there a reason why we check the `router.pathname` inside a chained function instead of _before_ we even attempt the `router.replace`?","2024-07-31T16:55:21Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-08-04T17:58:19Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-07-29T23:55:08Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-07-29T23:56:51Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2024-07-29T13:20:05Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-07-26T11:29:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice","2024-07-30T00:17:41Z",false,"APPROVED"
"masenf","COLLABORATOR","i still need to do more testing, but it doesn't look like the _var_type is properly passed for the `keys`, `values` and `entries` operations","2024-07-27T00:14:15Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-07-27T00:20:15Z",false,"COMMENTED"
"masenf","COLLABORATOR","partway through the new stuff","2024-07-30T17:00:17Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-07-30T18:53:42Z",false,"COMMENTED"
"masenf","COLLABORATOR","the following code needs to work if the annotation is there

```python
>>> ov2 = rx._x.vars.LiteralVar.create({""foo"": ""bar""})
>>> ov2[""foo""].upper()
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/Users/masen/code/reflex-dev/reflex/reflex/vars.py"", line 1726, in upper
    return self._replace(
           ^^^^^^^^^^^^^^
  File ""/Users/masen/code/reflex-dev/reflex/reflex/experimental/vars/base.py"", line 160, in _replace
    return type(self)(**field_values)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: ObjectItemOperation.__init__() got an unexpected keyword argument '_var_name'
```

This seems to be hitting `upper` in the base Var, because the resulting `ObjectItemOperation` isn't a `StringVar`.

Similar but different, if we cast the value to `dict[str, str]`, then it still doesn't really work

```python
>>> ov = rx._x.vars.LiteralVar.create({""foo"": ""bar""}).to(rx._x.vars.ObjectVar, dict[str,str])
Warning: `rx._x` contains experimental features and might be removed at any time in the future .
>>> ov[""foo""].lower()
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/Users/masen/code/reflex-dev/reflex/reflex/vars.py"", line 1702, in lower
    raise VarTypeError(
reflex.utils.exceptions.VarTypeError: Cannot convert non-string var ({ [""foo""] : ""bar"" })[""foo""] to lowercase.
>>> ov[""foo""]
ObjectItemOperation(_var_name='({ [""foo""] : ""bar"" })[""foo""]', _var_type=<class 'reflex.experimental.vars.base.ImmutableVar'>, _var_data=None, value=ToObjectOperation(_var_name='({ [""foo""] : ""bar"" })', _var_type=dict[str, str], _var_data=None, _original_var=LiteralObjectVar(_var_name='({ [""foo""] : ""bar"" })', _var_type=typing.Dict[str, str], _var_data=None, _var_value={'foo': 'bar'})), key=LiteralStringVar(_var_name='""foo""', _var_type=<class 'str'>, _var_data=None, _var_value='foo'))
```
in this case, the resulting `ObjectItemOperation` gets `_var_type=ImmutableVar` which doesn't seem quite right.

It seems like these item accessing operations probably need to also use `.to` in order to correctly cast the resulting value based on the annotation in the original var.

we also need test cases for these chain operations","2024-07-30T19:56:09Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-07-30T21:43:08Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-07-25T17:08:09Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-07-25T00:05:22Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2024-07-25T00:12:51Z",false,"DISMISSED"
"masenf","COLLABORATOR","i'm really hesitant to depend on some remote IP location service.

1. it's exposing our users to a third party every time they use reflex
2. at best it's a proxy for the information we actually want: whether the chinese npm mirror has a faster response time than the default mirror

I think this functionality should instead compare the response times of various mirrors and pick the one that is the fastest.","2024-07-25T16:27:48Z",false,"COMMENTED"
"masenf","COLLABORATOR","i definitely like this better, but determining the fastest mirror adds noticeable time now. does this only hit at init time?","2024-07-25T17:03:09Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-08-12T10:06:18Z",false,"APPROVED"
"masenf","COLLABORATOR","this is great!","2024-07-25T16:36:03Z",false,"COMMENTED"
"masenf","COLLABORATOR","unfortunately trying to run it on reflex-web is giving a cryptic error

```python
  File ""/Users/masenf/code/reflex-dev/reflex-web/pcweb/pcweb.py"", line 8, in <module>
    from pcweb.pages import page404, routes
  File ""/Users/masenf/code/reflex-dev/reflex-web/pcweb/pages/__init__.py"", line 3, in <module>
    from .blog import blog_routes
  File ""/Users/masenf/code/reflex-dev/reflex-web/pcweb/pages/blog/__init__.py"", line 1, in <module>
    from .blog import *
  File ""/Users/masenf/code/reflex-dev/reflex-web/pcweb/pages/blog/blog.py"", line 2, in <module>
    from pcweb.templates.webpage import webpage
  File ""/Users/masenf/code/reflex-dev/reflex-web/pcweb/templates/__init__.py"", line 1, in <module>
    from .docpage import docpage
  File ""/Users/masenf/code/reflex-dev/reflex-web/pcweb/templates/docpage/__init__.py"", line 1, in <module>
    from .docpage import *
  File ""/Users/masenf/code/reflex-dev/reflex-web/pcweb/templates/docpage/docpage.py"", line 545, in <module>
    class RadixDocState(rx.State):
  File ""pydantic/main.py"", line 282, in pydantic.main.ModelMetaclass.__new__
  File ""<frozen abc>"", line 106, in __new__
  File ""/Users/masenf/code/reflex-dev/reflex/reflex/state.py"", line 563, in __init_subclass__
    raise StateValueError(
reflex.utils.exceptions.StateValueError: The substate class 'a' has been defined multiple times. Shadowing substate classes is not allowed.
```","2024-07-25T16:39:28Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-07-25T16:45:25Z",false,"COMMENTED"
"masenf","COLLABORATOR","okay, i found a few other problems that need to be addressed, but nothing that suggests this is the wrong approach.","2024-07-25T16:57:21Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-07-25T20:14:35Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-07-25T20:16:18Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-07-25T20:39:02Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-07-25T21:27:57Z",false,"COMMENTED"
"masenf","COLLABORATOR","still testing it out locally, but looks good so far","2024-07-23T21:00:18Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-07-23T21:16:59Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-07-23T22:26:31Z",false,"COMMENTED"
"masenf","COLLABORATOR","awesome!","2024-07-25T15:14:38Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-07-23T21:18:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-07-22T17:56:07Z",false,"APPROVED"
"masenf","COLLABORATOR","does this actually work? i didn't think we could use a generic `Response`-returning function with `app.add_page`","2024-07-23T22:33:17Z",false,"COMMENTED"
"TG199","CONTRIBUTOR","","2024-07-24T15:31:13Z",false,"COMMENTED"
"TG199","CONTRIBUTOR","","2024-07-24T15:31:26Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","@TG199 thanks for your effort, and sorry for my late review.","2024-08-11T21:36:53Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-08-11T21:38:27Z",false,"COMMENTED"
"TG199","CONTRIBUTOR","","2024-08-12T00:39:40Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","awesome!","2024-07-19T19:47:42Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-07-19T16:01:20Z",false,"APPROVED"
"masenf","COLLABORATOR","I think `LiteralVar.create` should have a kind of dispatch table based on the type, that would allow us to write `LiteralVar.create([""test"", 43, [1, 2, 3], {""a"": {""b"": ""c""}}])` and get back a `LiteralArrayVar`","2024-07-18T23:53:05Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-07-19T00:21:16Z",false,"COMMENTED"
"masenf","COLLABORATOR","I made some local changes while testing that you may want to consider

```diff
diff --git a/reflex/experimental/vars/base.py b/reflex/experimental/vars/base.py
index fce1a958..61a972be 100644
--- a/reflex/experimental/vars/base.py
+++ b/reflex/experimental/vars/base.py
@@ -10,6 +10,7 @@ from functools import cached_property
 from typing import Any, Optional, Tuple, Type
 
 from reflex import constants
+from reflex.base import Base
 from reflex.constants.base import REFLEX_VAR_CLOSING_TAG, REFLEX_VAR_OPENING_TAG
 from reflex.utils import serializers, types
 from reflex.utils.exceptions import VarTypeError
@@ -279,6 +280,55 @@ class FunctionVar(ImmutableVar):
 class LiteralVar(ImmutableVar):
     """"""Base class for immutable literal vars.""""""
 
+    @classmethod
+    def create(
+        cls,
+        value: Any,
+        _var_data: VarData | None = None,
+    ) -> LiteralVar:
+        """"""Create a var from a value.
+
+        Args:
+            value: The value to create the var from.
+            _var_data: Additional hooks and imports associated with the Var.
+
+        Returns:
+            The var.
+        """"""
+        # Eventually this needs to replace the @rx.serializer API to allow custom types to be converted to Var.
+        if isinstance(value, str):
+            return LiteralStringVar.create(value, _var_data=_var_data)
+        if isinstance(value, bool):
+            return LiteralBooleanVar.create(value, _var_data=_var_data)
+        if isinstance(value, (int, float)):
+            return LiteralNumberVar.create(value, _var_data=_var_data)
+        if isinstance(value, dict):
+            return LiteralObjectVar.create(value, _var_data=_var_data)
+        if isinstance(value, Base):
+            return LiteralObjectVar.create(value.dict(), _var_type=type(value), _var_data=_var_data)
+        if isinstance(value, (list, tuple, set)):
+            return LiteralArrayVar.create(value, _var_data=_var_data)
+        raise TypeError(f""Unsupported type {type(value)} for LiteralVar."")
+
+    @classmethod
+    def create_safe(
+        cls,
+        value: Any,
+        _var_data: VarData | None = None,
+    ) -> LiteralVar:
+        """"""Create a var from a value, asserting that it is not None.
+
+        Args:
+            value: The value to create the var from.
+            _var_data: Additional hooks and imports associated with the Var.
+
+        Returns:
+            The var.
+        """"""
+        var = cls.create(value, _var_data=_var_data)
+        assert var is not None
+        return var
+
     def __post_init__(self):
         """"""Post-initialize the var.""""""
 
@@ -341,6 +391,7 @@ class LiteralStringVar(LiteralVar):
                 if serialized_data[1:].isnumeric():
                     # This is a global immutable var.
                     var = _global_vars[int(serialized_data)]
+                    # XXX: either assert var._var_type is `str` or use JSON.stringify to implicitly convert.
                     strings_and_vals.append(var)
                     value = value[(end + len(var._var_name)) :]
                 else:
@@ -412,7 +463,7 @@ class ConcatVarOperation(StringVar):
         """"""
         if name == ""_var_name"":
             return self._cached_var_name
-        return getattr(super(), name)
+        return super(type(self), self).__getattr__(name)
 
     @cached_property
     def _cached_var_name(self) -> str:
@@ -546,6 +597,7 @@ class LiteralObjectVar(LiteralVar):
     def __init__(
         self,
         _var_value: dict[str, Var],
+        _var_type: Type | None = None,
         _var_data: VarData | None = None,
     ):
         """"""Initialize the object var.
@@ -556,7 +608,7 @@ class LiteralObjectVar(LiteralVar):
         """"""
         super(LiteralObjectVar, self).__init__(
             _var_name="""",
-            _var_type=dict,
+            _var_type=_var_type or dict,
             _var_data=ImmutableVarData.merge(_var_data),
         )
         object.__setattr__(self, ""_var_value"", tuple(_var_value.items()))
@@ -573,7 +625,7 @@ class LiteralObjectVar(LiteralVar):
         """"""
         if name == ""_var_name"":
             return self._cached_var_name
-        return getattr(super(), name)
+        return super(type(self), self).__getattr__(name)
 
     @cached_property
     def _cached_var_name(self) -> str:
@@ -585,7 +637,13 @@ class LiteralObjectVar(LiteralVar):
         return (
             ""{ ""
             + "", "".join(
-                [str(key) + "": "" + str(value) for key, value in self._var_value]
+                [
+                    (
+                        str(key if isinstance(key, Var) else LiteralVar.create_safe(key)) + "": "" +
+                        str(value if isinstance(value, Var) else LiteralVar.create_safe(value))
+                    )
+                    for key, value in self._var_value
+                ]
             )
             + "" }""
         )
@@ -605,6 +663,7 @@ class LiteralObjectVar(LiteralVar):
     def create(
         cls,
         value: dict[str, Var],
+        _var_type: Type | None = None,
         _var_data: VarData | None = None,
     ) -> LiteralObjectVar:
         """"""Create a var from an object value.
@@ -618,6 +677,7 @@ class LiteralObjectVar(LiteralVar):
         """"""
         return LiteralObjectVar(
             _var_value=value,
+            _var_type=_var_type,
             _var_data=_var_data,
         )
 
@@ -662,7 +722,7 @@ class LiteralArrayVar(LiteralVar):
         """"""
         if name == ""_var_name"":
             return self._cached_var_name
-        return getattr(super(), name)
+        return super(type(self), self).__getattr__(name)
 
     @cached_property
     def _cached_var_name(self) -> str:
@@ -671,7 +731,7 @@ class LiteralArrayVar(LiteralVar):
         Returns:
             The name of the var.
         """"""
-        return ""["" + "", "".join([str(element) for element in self._var_value]) + ""]""
+        return ""["" + "", "".join([str(element if isinstance(element, Var) else LiteralVar.create_safe(element)) for element in self._var_value]) + ""]""
 
     @cached_property
     def _get_all_var_data(self) -> ImmutableVarData | None:
```","2024-07-19T00:30:54Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-07-19T00:31:37Z",false,"COMMENTED"
"masenf","COLLABORATOR","Code looks good. At the very least though, we need test cases for each of the new types and the call operation and combinations there of (like passing a ConcatVarOperation to a FunctionStringVar)","2024-07-22T18:04:27Z",false,"COMMENTED"
"masenf","COLLABORATOR","awesome thanks","2024-07-22T19:30:58Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good once the CI is passing","2024-07-19T02:26:29Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-07-22T19:05:42Z",false,"APPROVED"
"masenf","COLLABORATOR","there's some extra trailing whitespace added to some of the yml files, but overall looks good to me.

we might need to make some tweaks after we start getting some data in, but i think it can go in, considering it doesn't affect the operation of the framework itself.","2024-07-17T23:24:45Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-07-16T17:25:40Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good - just a small comment on maintaining the blank template working if httpx fails","2024-07-18T01:50:59Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-07-22T16:31:07Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch","2024-07-17T04:16:50Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-07-17T19:30:01Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-07-18T20:26:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Do we also want to add this as option 0 within the interactive reflex init?","2024-07-16T00:13:24Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","working nicely for me","2024-07-18T01:30:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-09-09T02:10:26Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-07-15T17:38:55Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-07-15T19:49:51Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-07-15T19:56:32Z",false,"COMMENTED"
"masenf","COLLABORATOR","looks good to the eye.

needs some test cases","2024-07-15T21:19:57Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-07-16T21:18:10Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-07-17T16:33:15Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-07-17T16:36:42Z",false,"COMMENTED"
"masenf","COLLABORATOR","i think this is good to go","2024-07-17T23:29:29Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-07-12T20:46:28Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-07-12T19:54:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for the contribution!","2024-07-18T01:31:07Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-07-11T23:06:28Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-07-12T20:29:15Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-07-11T23:07:22Z",false,"APPROVED"
"masenf","COLLABORATOR","We'll take this temporarily to unblock a specific edge case","2024-07-29T00:51:02Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2024-07-10T23:50:49Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-07-12T01:31:36Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2024-07-10T21:44:20Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2024-07-10T22:24:22Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks!","2024-07-14T20:16:05Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2024-07-10T21:45:29Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-07-11T18:21:58Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-07-10T01:10:46Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-07-10T19:27:52Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-07-11T18:21:29Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","Ah, nice","2024-07-10T23:57:27Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-07-09T18:06:44Z",false,"APPROVED"
"benedikt-bartscher","CONTRIBUTOR","","2024-07-09T15:11:51Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-07-09T17:22:54Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-07-09T18:01:40Z",false,"APPROVED"
"abulvenz","CONTRIBUTOR","","2024-07-09T18:02:42Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-07-09T18:05:21Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-07-08T19:18:40Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-07-09T18:12:15Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-07-08T19:19:31Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-07-09T18:24:22Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-07-09T19:53:10Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-07-09T19:54:49Z",false,"COMMENTED"
"maximvlah","CONTRIBUTOR","","2024-07-11T13:24:17Z",false,"CHANGES_REQUESTED"
"abulvenz","CONTRIBUTOR","","2024-07-12T08:59:08Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-07-08T19:30:52Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-07-03T23:21:53Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-07-03T22:11:13Z",false,"COMMENTED"
"masenf","COLLABORATOR","code looks good, going to test it now","2024-07-09T18:28:33Z",false,"COMMENTED"
"masenf","COLLABORATOR","Currently the `ImmutableVar` cannot be created from an f-string with vars inside of it

```python
import reflex as rx


class S(rx.State):
    foo: str = ""foo""


# Create an new style Var with data.
iv = rx._x.vars.ImmutableVar.create(""foo"", _var_data=S.foo._var_data)

# Create an f-string using the new style Var.
f_s = f""{iv}bar""

# Create an old style Var from the f-string.
n_v = rx.Var.create(f_s)
print(n_v, repr(n_v))

# Create a new style Var from the f-string.
n_iv = rx._x.vars.ImmutableVar.create(f_s)
print(n_iv, repr(n_iv))
```

It seems there is a bit of code in `rx.Var.__post_init__` which is trying to assign to `self._var_name` and `self._var_data`, but this does not work for immutable instances.

Instead we can change the code to call `__init__` again with the updated values, and this should be _fine_ in nearly every case. It sort of breaks immutability, but if we consider `__post_init__` to be just an extension of `__init__`, then it makes sense.

```diff
diff --git a/reflex/vars.py b/reflex/vars.py
index ad7c223a..f55aa025 100644
--- a/reflex/vars.py
+++ b/reflex/vars.py
@@ -502,8 +502,10 @@ class Var:
         # Decode any inline Var markup and apply it to the instance
         _var_data, _var_name = _decode_var(self._var_name)
         if _var_data:
-            self._var_name = _var_name
-            self._var_data = VarData.merge(self._var_data, _var_data)
+            self.__init__(
+                _var_name=_var_name,
+                _var_data=VarData.merge(self._var_data, _var_data),
+            )
 
     def _replace(self, merge_var_data=None, **kwargs: Any) -> BaseVar:
         """"""Make a copy of this Var with updated fields.
```","2024-07-09T19:23:28Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-07-10T21:26:25Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-07-10T23:15:24Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-07-03T18:46:39Z",false,"APPROVED"
"Alek99","MEMBER","","2024-07-03T00:23:21Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-07-11T18:18:58Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Should the fill / stroke colors be consistent?","2024-07-14T23:00:42Z",false,"COMMENTED"
"Alek99","MEMBER","","2024-07-15T00:30:24Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-07-15T18:00:51Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-07-15T18:11:11Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-07-03T11:56:29Z",false,"APPROVED"
"Alek99","MEMBER","","2024-07-02T20:28:52Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-07-02T20:56:38Z",false,"APPROVED"
"masenf","COLLABORATOR","needs an overridden `_replace` method that returns `ImmutableVar` instances.

it actually might make sense to override `create` as well to something like this

```python
@classmethod
def create(self, ...):
    return super().create(...)._replace()
```

That way we can create `ImmutableVar` instances in the same way as `Var` instances until more special-case behavior is added.","2024-07-02T18:55:05Z",false,"DISMISSED"
"adhami3310","MEMBER","","2024-07-02T19:07:29Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-07-02T20:16:41Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2024-07-02T21:53:42Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2024-07-03T17:04:02Z",false,"DISMISSED"
"masenf","COLLABORATOR","we can hold off on adding tests for now, because most of the API for `ImmutableVar` is coming from `Var` itself and won't represent the final usage of the API.

but in a near-future PR, we will want to make sure these changes are coming in with near-full test coverage, because it's much easier to add tests incrementally, rather than at the end.","2024-07-03T17:37:47Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-07-03T18:22:57Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-07-03T13:16:47Z",false,"CHANGES_REQUESTED"
"tgberkeley","COLLABORATOR","","2024-07-03T16:08:28Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-07-03T17:14:43Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2024-07-03T18:38:06Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-07-03T22:23:00Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-07-03T22:23:48Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-07-03T22:28:20Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-07-04T01:23:02Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-07-04T01:25:10Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-07-04T11:41:47Z",false,"APPROVED"
"masenf","COLLABORATOR","i think INFO is fine... if not we can adjust that in a future PR, since it was already at INFO currently","2024-07-02T19:58:52Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-07-03T15:34:09Z",false,"APPROVED"
"masenf","COLLABORATOR","Thanks for the fix","2024-07-01T17:17:34Z",false,"APPROVED"
"adhami3310","MEMBER","Sorry for sleeping on it 😅","2024-09-24T00:44:44Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice fix","2024-07-09T02:15:08Z",false,"APPROVED"
"Alek99","MEMBER","nice, glad we can switch fully to this","2024-06-29T06:24:57Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-29T15:48:26Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-28T19:48:21Z",false,"APPROVED"
"masenf","COLLABORATOR","awesome","2024-06-28T19:52:46Z",false,"APPROVED"
"masenf","COLLABORATOR","thanks for the fix. so confused about why this is hitting us now though... not sure what actually changed to cause these pyi mismatches. any idea?","2024-06-27T22:53:15Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2024-06-28T16:19:30Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-06-27T20:56:26Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-06-28T16:08:48Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-28T16:16:52Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-06-28T16:24:47Z",false,"COMMENTED"
"masenf","COLLABORATOR","does this _actually_ work if the `Breakpoints` is inside a `Var`? for example in state:

```python
class S(rx.State):
    bps: rx.breakpoints.__self__ = rx.breakpoints(
        initial=""1"",
        xs=""2"",
        sm=""2"",
        md=""3"",
        lg=""4"",
        xl=""5"",
    )

def index():
    return rx.vstack(
        ""hello world"",
        ""foo"",
        ""bar"",
        ""baz"",
        spacing=S.bps,
    )
```

when i try it like that it kind of blows up

```console
  File ""/Users/masen/code/reflex-dev/reflex/reflex/components/component.py"", line 811, in create
    return cls(children=children, **props)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masen/code/reflex-dev/reflex/reflex/components/component.py"", line 444, in __init__
    and not types._issubclass(passed_type, expected_type, value)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masen/code/reflex-dev/reflex/reflex/utils/types.py"", line 392, in _issubclass
    return _breakpoints_satisfies_typing(cls_check, instance)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masen/code/reflex-dev/reflex/reflex/utils/types.py"", line 352, in _breakpoints_satisfies_typing
    return any(
           ^^^^
  File ""/Users/masen/code/reflex-dev/reflex/reflex/utils/types.py"", line 353, in <genexpr>
    _breakpoints_satisfies_typing(type_to_check, instance)
  File ""/Users/masen/code/reflex-dev/reflex/reflex/utils/types.py"", line 346, in _breakpoints_satisfies_typing
    for value in instance.values():
                 ^^^^^^^^^^^^^^^
  File ""/Users/masen/code/reflex-dev/reflex/reflex/vars.py"", line 819, in __getattr__
    raise VarAttributeError(
reflex.utils.exceptions.VarAttributeError: The State var `state__s.bps` has no attribute 'values' or may have been annotated wrongly.
```

i think, at least initially, we need to ensure that the `Breakpoints` is handled at compile time (i.e. cannot be in a dynamic frontend Var), or we need to ignore the type checking if the `Breakpoints` is in a `Var`.

I tend to lean toward the former, because we definitely cannot support `Var[Breakpoint]` for the CSS props as it's written now, so we shouldn't introduce an inconsistency between the two.

My other question is about `Var` within an `rx.breakpoints` dict, the type checking seems to get bungled up on this, but since the style props have no type checking, it actually _does_ seem to work if the value comes from a `Var`","2024-06-28T16:58:38Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-06-28T17:04:04Z",false,"COMMENTED"
"masenf","COLLABORATOR","will take this for now, but i have a followup PR to clean up some of the generated .pyi files coming","2024-06-28T23:33:13Z",false,"APPROVED"
"masenf","COLLABORATOR","looks good to me. the unrelated pyi issue has since been [fixed in main](https://github.com/reflex-dev/reflex/commit/8eb834f81637e92a731478101f8ca5b2958849ab#diff-f2ebd25bc56912aa2cd97d5c4097a8e82ed739208bd780265d505e1c4249998b)","2024-06-27T21:19:32Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-28T17:08:15Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-28T17:42:12Z",false,"APPROVED"
"masenf","COLLABORATOR","thanks for the nice fix!","2024-06-27T23:03:30Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-27T15:43:53Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-28T00:00:50Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-29T01:02:32Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-26T20:01:38Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-27T16:58:22Z",false,"DISMISSED"
"masenf","COLLABORATOR","for consistency with the normal backend vars would it make sense to treat any @rx.var where the fget starts with an underscore as backend and not allow users to mark a non-underscore var as backend?

oops i accidentally merged your later PRs that introduced conflicts in this one","2024-06-28T19:51:35Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-29T00:01:02Z",false,"APPROVED"
"masenf","COLLABORATOR","pushed some updates","2024-07-03T20:32:48Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-07-04T14:13:38Z",false,"COMMENTED"
"maximvlah","CONTRIBUTOR","","2024-07-04T15:39:43Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-07-05T14:55:41Z",false,"APPROVED"
"benedikt-bartscher","CONTRIBUTOR","","2024-07-06T23:25:10Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-07-08T19:16:37Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-26T14:33:39Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-26T16:34:30Z",false,"DISMISSED"
"adhami3310","MEMBER","","2024-06-26T16:36:54Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-26T16:45:11Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Let's try to move the parameter into the `Style` class and I think this is good.","2024-06-26T16:56:42Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-06-26T17:00:10Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-06-26T17:25:38Z",false,"COMMENTED"
"adhami3310","MEMBER","","2024-06-26T17:40:25Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Looks good to me!","2024-06-26T22:32:45Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-25T23:07:32Z",false,"APPROVED"
"masenf","COLLABORATOR","sweet hack!","2024-06-26T20:23:00Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-06-26T16:58:25Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-06-26T16:23:13Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-26T20:24:41Z",false,"APPROVED"
"masenf","COLLABORATOR","useful, thanks","2024-06-26T20:25:17Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-26T20:26:28Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-06-29T15:49:59Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2024-06-25T17:50:57Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-25T00:52:50Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-24T23:53:59Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-24T23:54:50Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-07-03T15:55:41Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-07-03T18:36:47Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-24T19:53:48Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-28T19:28:18Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-28T19:42:34Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-24T12:58:23Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-24T15:29:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-06-21T19:12:04Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-06-21T19:14:50Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-21T19:31:50Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","interesting, didn't know about bfcache","2024-06-21T04:56:49Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-21T12:44:41Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-21T16:28:19Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-24T13:55:58Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-06-20T21:07:16Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-06-20T21:17:32Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-06-20T20:30:33Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-06-20T23:41:12Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-06-21T02:08:54Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-06-21T04:40:47Z",false,"APPROVED"
"masenf","COLLABORATOR","what is the purpose of the `lru_cache` here? seems these typer cli command functions will really only get called once per process invocation and neither seems computationally expensive. i must be missing something?","2024-06-20T16:54:47Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-06-21T16:17:29Z",false,"APPROVED"
"Alek99","MEMBER","","2024-06-20T21:12:31Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-19T17:17:16Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-06-21T12:59:55Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-21T16:00:45Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","Code looks good - just a request to remove this from the top-level namespace","2024-06-24T23:10:20Z",false,"DISMISSED"
"benedikt-bartscher","CONTRIBUTOR","","2024-06-25T11:13:23Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-06-25T13:27:40Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-06-20T19:03:00Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","Nice","2024-06-19T17:40:02Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2024-06-19T14:25:00Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","I think you need to `poetry lock` again for the tests","2024-06-25T01:26:29Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-06-19T00:25:17Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good - just need to run the pyi generator","2024-06-17T21:03:24Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-06-20T18:58:54Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-06-17T20:21:18Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-18T23:33:58Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-06-18T23:36:22Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-18T23:47:49Z",false,"APPROVED"
"masenf","COLLABORATOR","looking into why the CI is buggin out","2024-06-14T21:24:38Z",false,"DISMISSED"
"masenf","COLLABORATOR","We decided that downpinning `fastapi < 0.111.0` (before it got extra deps), is the safest approach to solve our integration failure in `integration/test_event_chain.py::test_yield_state_update[click_yield_interim_value]` introduced by running with `uvloop` from fastapi 0.111.0.

[Private discussion regarding the pin](https://discord.com/channels/1029853095527727165/1082391228915646515/1252753274856276099) 🔒","2024-06-18T23:15:10Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-18T00:04:55Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2024-06-14T14:38:24Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-06-14T16:20:35Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-06-14T16:48:15Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-06-14T19:37:48Z",false,"APPROVED"
"masenf","COLLABORATOR","i like the direction here. will need a rebase after #3476 since the exception handling code has moved","2024-06-14T16:52:23Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-07-18T01:23:45Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-07-18T01:26:56Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-07-19T15:58:45Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-07-19T16:05:24Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-07-20T00:17:12Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-07-22T19:11:23Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-07-22T23:05:14Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-19T00:27:49Z",false,"APPROVED"
"Alek99","MEMBER","","2024-06-12T02:03:07Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-06-11T20:41:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-06-13T16:47:27Z",false,"APPROVED"
"masenf","COLLABORATOR","thanks for the contribution. i'll test it out further this week","2024-06-11T19:31:16Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","I've started testing it on my side.

No issue with the backend error handler, seems to work properly.

I've had issue triggering it for frontend error however, seems like not all errors are being caught?

The following code still produce a frontend error, but doesn't seems to send it to the backend.
ie `[Reflex Frontend Exception]` does not appear in that case.
```python
class MockCompo(rx.Component):
    tag = ""UnknownTag""

@rx.page()
def index():
    return rx.foreach([1, 2, 3], MockCompo.create)
```

Also tested with 
```python
@rx.page()
def index():
    return rx.script(console.log(foo))
```
In this case it also doesn't triggers.


Also tested with 
```python
@rx.page()
def index():
    return rx.button(""Test"", on_click=rx.call_script(""console.log(foo)""))
```
In this case it does trigger the frontend handler.


","2024-06-18T14:14:27Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2024-06-18T18:49:25Z",false,"DISMISSED"
"masenf","COLLABORATOR","This seems to work fine in dev mode (although a frontend error triggers the handler twice for some reason).

But in prod mode, when i hit an unhandled frontend error, it does not fire the event...

```python
import reflex as rx


class State(rx.State):
    broken: bool = False


def index() -> rx.Component:
    return rx.container(
        rx.vstack(
            rx.cond(
                State.broken,
                rx.text(""Broken"", size=rx.Var.create(""x"", _var_is_local=False, _var_is_string=False)),
            ),
            rx.text(""Break the app? "", rx.switch(checked=State.broken, on_change=State.set_broken)),
            spacing=""5"",
            justify=""center"",
            min_height=""85vh"",
        ),
        rx.logo(),
    )


app = rx.App()
app.add_page(index)
```

Flipping the switch introduces a component with a rendering error.

In dev mode, flipping the switch prints the error to the terminal, browser console, and on screen.

In prod mode, flipping the switch redirects to a page that says ""Application error: a client-side exception has occurred (see the browser console for more information).""","2024-06-18T22:10:13Z",false,"COMMENTED"
"maximvlah","CONTRIBUTOR","","2024-06-20T16:07:48Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-20T17:28:46Z",false,"COMMENTED"
"maximvlah","CONTRIBUTOR","","2024-06-21T08:04:47Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","@maximvlah what about exceptions in `reflex.app._process`?
See [Line 1162](https://github.com/reflex-dev/reflex/pull/3476/files#diff-622798b2adb684c2d3f4daaf378a629e5ffb111e651f381d6478d67dd1449085L1162)  

Do we want to combine exception handlers with `telemetry.send_error`? Maybe replace all occurrences of `telemetry.send_error` with the backend exception handler and let `telemetry.send_error` be part of the default exception handler?","2024-06-24T18:13:20Z",false,"CHANGES_REQUESTED"
"ElijahAhianyo","COLLABORATOR","","2024-06-13T15:28:20Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2024-06-13T16:05:22Z",false,"COMMENTED"
"masenf","COLLABORATOR","Nice! My only suggestion is to make the `queueEventIfSocketExists` function `async` so it could be awaited like `queueEvents`.

Thanks for adding the test cases","2024-06-13T16:57:59Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-14T16:48:46Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-11T14:51:14Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2024-06-14T14:08:48Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-11T19:36:12Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-06-12T18:38:02Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-10T19:58:16Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-10T20:42:41Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-10T13:16:24Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-10T21:59:21Z",false,"APPROVED"
"masenf","COLLABORATOR","does this create a copy of the 600mb+ `node_modules` directory?","2024-06-10T17:41:38Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-06-10T17:44:57Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-13T17:37:18Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-06-13T23:32:54Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-14T00:17:51Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-10T17:26:44Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-06-11T14:17:01Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-11T20:31:45Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","Can we delete the `EventTriggers` class now?","2024-06-12T16:30:08Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-06-12T18:10:48Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-14T14:28:37Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-07T16:49:44Z",false,"APPROVED"
"masenf","COLLABORATOR","cool, nice cleanup 😄 ","2024-06-07T16:55:42Z",false,"APPROVED"
"Lendemor","COLLABORATOR","Also if you could :
- Add a working code snippet in the description of the PR.","2024-06-07T16:22:32Z",false,"CHANGES_REQUESTED"
"emmakodes","CONTRIBUTOR","","2024-06-07T16:47:02Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-06-07T18:47:57Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-06-11T14:55:19Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-11T20:29:21Z",false,"APPROVED"
"emmakodes","CONTRIBUTOR","","2024-06-16T20:56:29Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-06-07T19:09:29Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-10T16:57:16Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-11T20:26:35Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-06-06T23:04:57Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-06T23:06:45Z",false,"APPROVED"
"masenf","COLLABORATOR","got it, this popped up when we switched from the chakra input to the base html input. good fix","2024-06-06T20:45:06Z",false,"APPROVED"
"masenf","COLLABORATOR","LGTM","2024-06-07T23:17:45Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-06-08T00:29:54Z",false,"APPROVED"
"masenf","COLLABORATOR","i think we still have a problem when the `id` contains the backtick character...

```python
>>> import reflex.components.core.upload as upl
>>> print(str(upl.upload_file(""foo`bar"")))
{e => setFilesById(filesById => {
    const updatedFilesById = Object.assign({}, filesById);
    updatedFilesById[`foo`bar`] = e;
    return updatedFilesById;
  })
    }
```

If we convert the `id_` to a Var with _var_is_string=True, and then get the `_var_name_unwrapped`, then it provides the outer backticks automatically and escapes the inner backtick(s)

```python
>>> import reflex as rx
>>> rx.Var.create_safe(""foo`bar"", _var_is_string=True)._var_name_unwrapped
'`foo\\`bar`'
```
","2024-06-06T17:46:32Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2024-06-11T20:26:11Z",false,"APPROVED"
"masenf","COLLABORATOR","Mostly looks right, i have yet to check it out and test it out locally though","2024-06-07T05:50:57Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-10T16:54:45Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-06-11T14:34:34Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-11T20:21:46Z",false,"APPROVED"
"cdmistman","NONE","","2024-06-05T18:36:43Z",false,"COMMENTED"
"masenf","COLLABORATOR","i thought there was an environment var that we could read on the backend to set the `api_url` appropriately. did that not end up working?","2024-06-05T18:47:45Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-06-05T19:31:38Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","Excellent 😀 This will be in our next release 0.5.4 🎉","2024-06-05T20:39:40Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-06T18:16:37Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-05T16:52:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-06-07T19:09:59Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-06T22:41:59Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2024-06-06T22:52:00Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-06-06T23:15:12Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-06-06T23:16:13Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-06T23:29:12Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-06T23:29:20Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-06-06T23:34:44Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-06-06T23:35:05Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-06-07T08:33:03Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-04T20:11:29Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2024-06-05T17:11:11Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-06T17:25:59Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-06-04T18:45:24Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-06-04T18:46:47Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-06-05T15:56:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-06-05T16:16:23Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice","2024-06-04T18:48:23Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-04T14:34:50Z",false,"APPROVED"
"masenf","COLLABORATOR","It would be nice to actually untangle all of our circular imports with some refactoring someday, but thanks for the quick fix to get 0.5.3 out the door!","2024-06-04T16:26:00Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-06-05T17:39:27Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-03T23:25:37Z",false,"COMMENTED"
"HongyuHansonYao","CONTRIBUTOR","","2024-06-03T23:28:09Z",false,"COMMENTED"
"masenf","COLLABORATOR","i'm not sure why there are so many new `.pyi` files... those shouldn't be included here.

i think we have a bug in the `pyi_generator.py` that tries to create them if any Component is imported and there is a change in the git index. i'll try to fix that. in the meantime, you should remove these from your commit.

only keep the pyi file changes in the `reflex/components` subtree.","2024-06-04T01:21:29Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2024-06-07T16:46:55Z",false,"APPROVED"
"masenf","COLLABORATOR","i haven't used capabilities, what is their primary function? looking at the docs it seemed kind of user-agent-y, but curious what your use case is.","2024-06-04T01:29:51Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-06T20:59:35Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Ahh good catch!! That's been there for a while never new the reason. Will this mess up any other formatting though? Let me test it a little bit","2024-06-04T18:57:06Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Looks good to me","2024-06-04T19:00:47Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-06-03T17:43:00Z",false,"COMMENTED"
"HongyuHansonYao","CONTRIBUTOR","","2024-06-03T17:46:29Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-03T19:42:15Z",false,"APPROVED"
"masenf","COLLABORATOR","it would be nice to have at least some docs for this feature before promoting it","2024-06-03T16:43:53Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2024-06-03T17:23:14Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-06-03T17:24:04Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-06-03T17:25:48Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-03T17:46:27Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-03T17:47:02Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-03T17:47:37Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-03T17:48:00Z",false,"DISMISSED"
"masenf","COLLABORATOR","looks good!","2024-06-03T17:54:17Z",false,"DISMISSED"
"masenf","COLLABORATOR","toasty 🍞 🔥 ","2024-06-05T16:21:04Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-03T17:49:22Z",false,"COMMENTED"
"masenf","COLLABORATOR","there should be more line diff in `state.js`, basically `hydrateClientStorage` and `applyClientStorageDelta` should be updated to handle the session storage cases as well","2024-06-03T17:52:59Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","how did you test this? I tried extending `integration/test_client_storage.py` to add some `SessionStorage` state vars and they didn't get saved, so something isn't quite working.

I'll push uo the tests that i wrote quickly so you can run them, but its not necessarily exhaustive.","2024-06-07T05:38:28Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","Looks good!","2024-06-14T21:20:41Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Some minor docstring issues that we can fix in a follow up","2024-06-17T20:07:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks!","2024-06-03T17:29:45Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-30T23:36:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-30T23:37:48Z",false,"APPROVED"
"masenf","COLLABORATOR","Please run `poetry run python scripts/make_pyi.py reflex/components/radix/themes/layout/section.py` and commit the result.","2024-05-30T22:52:24Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","thanks!","2024-05-31T03:51:50Z",false,"APPROVED"
"sebastianjanisch","NONE","","2024-05-30T13:13:18Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-05-31T21:37:12Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-05-30T22:57:11Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-30T16:57:10Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-05-30T16:58:19Z",false,"DISMISSED"
"HongyuHansonYao","CONTRIBUTOR","","2024-05-31T16:22:36Z",false,"DISMISSED"
"HongyuHansonYao","CONTRIBUTOR","","2024-05-31T20:04:06Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-06-07T16:47:43Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","I think there's an extra end parenthesis `)` in the second image in the `rx.cond`","2024-05-28T23:03:04Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-05-30T01:06:36Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-05-28T21:10:26Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-31T16:34:11Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-31T16:34:35Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-31T16:37:18Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-31T18:40:58Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good, just an idea on how we can make the config more scalable.","2024-05-28T19:24:51Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-29T14:15:30Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","LGTM - is there a concrete use case for this yet?  Or just in case we need it later?","2024-05-28T16:43:57Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-05-28T17:52:33Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-05-25T02:07:53Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-06-01T00:45:55Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-24T16:01:07Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice","2024-05-23T21:53:40Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Working well for me","2024-06-07T18:55:57Z",false,"APPROVED"
"benedikt-bartscher","CONTRIBUTOR","Awesome, looks good to me. Thanks, @abulvenz ","2024-05-22T22:01:31Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-05-22T22:22:33Z",false,"DISMISSED"
"masenf","COLLABORATOR","i haven't tested the suggested change, but i think field should be specifiable as another var, like the other var operations.","2024-05-23T23:15:48Z",false,"CHANGES_REQUESTED"
"abulvenz","CONTRIBUTOR","","2024-05-24T09:24:53Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-05-24T14:54:00Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-24T16:52:52Z",false,"COMMENTED"
"abulvenz","CONTRIBUTOR","","2024-05-24T21:32:38Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-25T00:15:55Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-25T00:16:19Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-22T22:06:30Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-29T16:07:10Z",false,"APPROVED"
"masenf","COLLABORATOR","use `poetry run pre-commit run --all-files`

and out of curiosity, is there an actual error case in the generated code? or just the return value is not matching the return annotation?","2024-05-22T19:18:14Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2024-05-22T00:16:13Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-22T22:26:55Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-22T11:17:24Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-22T11:37:07Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2024-05-24T16:51:58Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-05-24T17:14:09Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-05-21T18:58:02Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-05-21T19:34:19Z",false,"APPROVED"
"masenf","COLLABORATOR","i think it makes good sense to use the same var names.

thanks for contributing","2024-05-21T19:35:43Z",false,"APPROVED"
"masenf","COLLABORATOR","Awesome! Thanks for this contribution.","2024-05-21T17:21:03Z",false,"DISMISSED"
"Snaipergelka","CONTRIBUTOR","","2024-05-22T05:12:26Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-05-22T12:32:01Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks!","2024-05-21T21:50:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for adding!","2024-05-20T23:54:49Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-05-30T16:14:43Z",false,"APPROVED"
"Alek99","MEMBER","","2024-05-20T19:43:52Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-05-20T21:08:46Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2024-05-20T23:12:02Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Based on this: https://pypi.org/project/lazy-loader/ it looks like lazy_loader is only recommended for Python 3.11+ - is it okay to use it for our case?","2024-05-21T03:49:08Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-28T22:12:51Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Nice! Changes look good to me, I see a big performance improvement locally when testing.","2024-05-30T16:39:41Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-05-30T16:52:43Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2024-05-31T11:23:13Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-05-31T12:28:37Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-05-31T13:23:25Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-19T22:45:20Z",false,"COMMENTED"
"ericwb","CONTRIBUTOR","","2024-05-19T22:59:02Z",false,"COMMENTED"
"ericwb","CONTRIBUTOR","","2024-05-29T13:33:33Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","nice catch","2024-05-19T19:13:02Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-21T23:14:26Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-18T22:47:44Z",false,"APPROVED"
"Lendemor","COLLABORATOR","thanks for helping.

I think for the code you've used the version prior to latest (just before some of the code change in the example)","2024-05-21T23:17:40Z",false,"CHANGES_REQUESTED"
"sagarhedaoo","CONTRIBUTOR","","2024-05-29T06:00:06Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-05-29T20:28:26Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-05-20T18:29:24Z",false,"APPROVED"
"Lendemor","COLLABORATOR","Thanks for contribution.

We've just merged https://github.com/reflex-dev/reflex/pull/3313 which slightly change the demo code, if you can adjust your PR to match we'll be able to merged it.","2024-05-17T23:32:44Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2024-05-21T21:51:44Z",false,"APPROVED"
"IABeresnev","NONE","","2024-05-20T18:01:11Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-24T14:13:32Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Missed this one, we can get it in","2024-07-18T01:28:40Z",false,"APPROVED"
"masenf","COLLABORATOR","i'm not 100% sure we want to show the experimental features right on the readme.

@picklelo what do you think?","2024-05-16T20:24:14Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-05-16T23:52:57Z",false,"CHANGES_REQUESTED"
"tgberkeley","COLLABORATOR","","2024-05-17T00:27:15Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-05-17T01:43:33Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-05-17T01:52:51Z",false,"APPROVED"
"masenf","COLLABORATOR","The tasks should have a chance to clean up nicely without being cancelled right?","2024-05-16T15:45:44Z",false,"COMMENTED"
"masenf","COLLABORATOR","Looks good.

I'd like to see at least one test in the integration tests that exercises this.

Maybe have a lifespan task and lifespan contextmanager set a module global and send it to the frontend via an `rx.var`","2024-05-17T05:23:57Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-22T19:06:57Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-16T18:40:58Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-15T16:50:50Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-05-15T18:52:45Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-15T10:00:41Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-05-15T18:55:14Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice, should help unblock people","2024-05-15T01:39:25Z",false,"APPROVED"
"Alek99","MEMBER","","2024-05-13T22:35:33Z",false,"APPROVED"
"masenf","COLLABORATOR","thanks for the fixup","2024-05-13T21:49:31Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-13T21:42:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-13T22:13:07Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-13T20:46:43Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-13T20:09:41Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-13T23:00:33Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-15T09:57:04Z",false,"APPROVED"
"masenf","COLLABORATOR","stray `print(""martin"")`, but looks like it would work.

one suggestion to consider, but would require some re-working.","2024-05-10T23:49:45Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-10T23:54:49Z",false,"APPROVED"
"martinxu9","CONTRIBUTOR","","2024-05-11T00:02:18Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-05-15T06:18:59Z",false,"APPROVED"
"masenf","COLLABORATOR","I think we need another big try/catch in the event processing loop so we can report runtime errors, if we want.","2024-05-10T17:44:55Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-05-10T17:48:32Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-10T18:39:22Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2024-05-10T10:02:12Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-15T10:04:17Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-05-16T10:43:18Z",false,"APPROVED"
"martinxu9","CONTRIBUTOR","","2024-05-10T07:14:39Z",false,"DISMISSED"
"martinxu9","CONTRIBUTOR","","2024-05-10T23:38:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-10T23:59:26Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-05-11T00:07:08Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-05-11T00:11:05Z",false,"APPROVED"
"martinxu9","CONTRIBUTOR","LGTM","2024-05-09T21:59:00Z",false,"APPROVED"
"martinxu9","CONTRIBUTOR","","2024-05-09T19:53:16Z",false,"APPROVED"
"masenf","COLLABORATOR","Thanks for your contribution!","2024-05-09T22:05:30Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-08T21:01:56Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-05-08T20:34:13Z",false,"APPROVED"
"masenf","COLLABORATOR","killer!","2024-05-08T20:31:15Z",false,"APPROVED"
"masenf","COLLABORATOR","Looks good; thanks @benedikt-bartscher for jumping in on these fixes so quickly","2024-05-08T21:51:34Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-08T02:20:32Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-08T16:49:01Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-05-08T21:35:58Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-15T10:06:01Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-05-15T21:47:18Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-07T20:28:32Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-08T17:52:26Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-07T16:47:23Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-05-07T20:29:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-07T16:34:20Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-05-16T00:59:15Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-05-17T05:08:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-08T02:31:29Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-05-06T19:52:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks!","2024-05-06T17:49:55Z",false,"APPROVED"
"masenf","COLLABORATOR","This is cool. I like the new features and flexibility.","2024-05-06T19:51:37Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-05-07T00:41:39Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-05-27T16:11:06Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome - I like having `cache` as an argument rather than a separate `rx.cached_var`, perhaps we can move more to that in the future.","2024-05-28T19:26:59Z",false,"APPROVED"
"benedikt-bartscher","CONTRIBUTOR","@masenf your changes look good to me, thank you for jumping in!
I am thinking about dropping the `tuple` return in favor of the new `to` kwarg. If I am not missing any advantages of the `tuple` return, I think it would be better to have one way to do things.
The tuple approach would allow dynamic serialization types (type based on input value), but we can't use them in the frontend, so I see no real benefit.","2024-06-05T17:21:40Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","@masenf thanks for refactoring, looks good to me!","2024-06-07T16:49:16Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-06-07T16:50:04Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-03T20:52:03Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-05-03T16:51:05Z",false,"DISMISSED"
"benedikt-bartscher","CONTRIBUTOR","","2024-05-03T17:17:18Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-05-03T18:24:04Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-07T15:16:00Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-05-03T16:40:23Z",false,"DISMISSED"
"benedikt-bartscher","CONTRIBUTOR","","2024-05-03T17:19:17Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-05-03T19:13:39Z",false,"APPROVED"
"benedikt-bartscher","CONTRIBUTOR","","2024-05-04T13:37:28Z",false,"COMMENTED"
"abulvenz","CONTRIBUTOR","","2024-05-06T10:47:58Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-05-06T20:32:08Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-05-14T16:21:51Z",false,"COMMENTED"
"abulvenz","CONTRIBUTOR","","2024-05-15T04:10:06Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-05-20T16:22:00Z",false,"COMMENTED"
"abulvenz","CONTRIBUTOR","","2024-05-21T09:43:48Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-05-28T11:17:08Z",false,"APPROVED"
"masenf","COLLABORATOR","Is the content supposed to be left aligned now? i actually think it looks kinda cool that way.

The other issue is in chrome there is always a scroll bar now, regardless of the window height (on my screen anyway). `min_height=""88vh""` or something a bit smaller might help there.","2024-05-03T16:48:24Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-06T19:15:55Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-06T19:35:24Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-06T19:54:27Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-06T19:57:13Z",false,"COMMENTED"
"masenf","COLLABORATOR","while we're touching this, can we rearrange the imports too?

I'd rather see

```python
import reflex as rx

from rxconfig import config

filename = f""{config.app_name}/{config.app_name}.py""
```

1. this is the preferred pep8-style import order, local modules should be listed after installed modules
2. this makes it easier to delete without removing the reflex import

-------------

i also think we should just inline the `docs_url`, instead of defining it at the top of the module","2024-05-06T20:00:19Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2024-05-08T02:33:47Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-05-08T20:30:06Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-02T20:50:21Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-05-03T01:08:42Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-03T03:37:37Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-03T16:59:52Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-05-04T11:41:51Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-05-14T13:12:38Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2024-05-15T09:53:17Z",false,"APPROVED"
"masenf","COLLABORATOR","looks like this is good to go.

the state names are much longer now and since they compile out to strings in the JS code that will increase the bundle size, since minifiers cannot munge strings; but i think the followup PR to minify state names within reflex will probably result in an overall decrease in the resulting code size, so i think this is the right move.","2024-07-10T21:31:16Z",false,"APPROVED"
"masenf","COLLABORATOR","Working for me on ARM and Azure x86_64","2024-05-02T17:04:22Z",false,"DISMISSED"
"ElijahAhianyo","COLLABORATOR","","2024-05-03T12:54:07Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-05-03T23:28:27Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice","2024-05-01T23:16:13Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-01T04:47:47Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-05-01T17:33:14Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-05-01T19:02:18Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-05-01T20:38:34Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-05-06T19:05:44Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-05-06T19:07:11Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-05-06T19:38:25Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-05-06T21:07:57Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","looks good to me","2024-05-06T21:38:30Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-05-06T21:42:14Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-05-06T22:04:32Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-06T22:33:56Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-30T21:35:12Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-05-01T17:18:38Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-30T19:22:17Z",false,"COMMENTED"
"masenf","COLLABORATOR","This seems to revert a recent PR to remove `socket_app` and respect the user's `sio` kwarg","2024-04-30T19:24:05Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-04-30T23:42:09Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-02T00:12:33Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-05-02T16:56:37Z",false,"COMMENTED"
"masenf","COLLABORATOR","sorry, thought i marked this earlier...","2024-05-03T01:06:12Z",false,"APPROVED"
"masenf","COLLABORATOR","nice","2024-04-30T22:10:28Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-05-15T19:07:36Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-02T16:59:51Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","looks good to me","2024-04-30T23:18:26Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-29T22:49:55Z",false,"APPROVED"
"martinxu9","CONTRIBUTOR","","2024-04-30T21:22:17Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-05-01T21:47:36Z",false,"COMMENTED"
"masenf","COLLABORATOR","is there a good way to style the toasts?

i tried passing styles to the `toast.provider`:

```python
rx.toast.provider(
        style={
            ""[data-sonner-toast][data-type=warning]"": {
                ""background_color"": f""{rx.color('amber', 7)} !important"",
                ""_hover"": {
                    ""background_color"": f""{rx.color('amber', 9)} !important"",
                },
            },
        }
    )
```

But this is a bit messy and requires the use of `!important`, which is not great, and if we bundle a toast provider in the future for the connection banner, then i don't think this will be exposed outside of global styles or a custom stylesheet. Not sure if it will come up often, but worth thinking about.","2024-05-01T23:49:03Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-05-02T16:12:20Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-05-02T16:50:08Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-05-02T16:56:04Z",false,"COMMENTED"
"masenf","COLLABORATOR","Posted #3216 to get the action and cancel working, which i think are kind of essential for using toasts effectively

It also fixes some of the issues mentioned below","2024-05-02T20:38:50Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-03T18:50:32Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-05-02T00:12:57Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-05-02T00:13:19Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-29T13:20:44Z",false,"CHANGES_REQUESTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-04-29T13:41:29Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-04-30T14:08:41Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-05-01T19:10:10Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-05-01T20:01:19Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-05-01T20:32:05Z",false,"APPROVED"
"masenf","COLLABORATOR","🐇 ","2024-04-26T18:48:51Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-26T16:58:33Z",false,"DISMISSED"
"masenf","COLLABORATOR","Thanks for the contribution and tracking down that mysterious bug!

I have a couple of suggestions to improve the patch. The team has been wondering if exposing the `sio` externally is a good idea (yes it was documented, via generated docs), or if we should just expose the parameters as configuration knobs, like cors_allowed_origins.

For now, I'm leaning toward allowing the user to supply their own AsyncServer object.","2024-04-26T17:01:28Z",false,"CHANGES_REQUESTED"
"Snaipergelka","CONTRIBUTOR","","2024-04-27T06:14:51Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-04-29T20:15:38Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for adding! and for persisting with the linter :) ","2024-05-01T21:48:24Z",false,"APPROVED"
"masenf","COLLABORATOR","Sorry meant to make my comments on the `.py` not the `.pyi`, but oh well.

It would also be cool if the `ColorModeIcon` could take props and apply them to the icon, although i see that's not really how the code is currently written.","2024-04-25T17:48:19Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-04-25T22:49:27Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-04-26T13:11:46Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-04-26T17:23:00Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-04-26T19:04:02Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-29T15:28:20Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-04-29T15:28:48Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-04-30T21:12:36Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-04-30T21:41:31Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-04-30T21:48:37Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-04-30T21:48:40Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-04-26T18:32:20Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-04-24T20:47:54Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-04-24T23:23:28Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-25T06:35:09Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2024-04-25T06:37:55Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-04-25T06:58:34Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-26T20:47:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-04-30T20:15:10Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2024-05-02T14:39:18Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-05-03T19:15:27Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-24T13:25:28Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-23T23:26:18Z",false,"APPROVED"
"Borda","CONTRIBUTOR","","2024-04-24T06:10:44Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-04-23T23:45:02Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2024-04-23T23:55:39Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-04-24T00:21:53Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-04-24T19:36:44Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-24T20:54:26Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-23T18:28:05Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2024-04-23T22:31:07Z",false,"COMMENTED"
"masenf","COLLABORATOR","I think i'm still unclear on the _why_ for this change. @picklelo do we really want to override the radix default link behavior?

In my sample app, the default link (from `main`) is a different color than the main text and looks and acts like a link with the underline on hover.

This change works fine in my testing. But the change just seems kind of arbitrary and will affect the look and feel of existing apps.","2024-04-25T16:56:54Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-04-25T22:45:21Z",false,"APPROVED"
"masenf","COLLABORATOR","The link needs a trailing slash to pass CI","2024-04-23T19:34:13Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","awesome","2024-04-23T20:54:56Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-23T21:36:19Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-23T16:30:46Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2024-04-23T15:24:08Z",false,"APPROVED"
"abulvenz","CONTRIBUTOR","Easy fix for potential problems.","2024-04-23T10:14:30Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-23T16:15:52Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-23T16:33:19Z",false,"APPROVED"
"masenf","COLLABORATOR","Thanks for your contribution. This makes sense to me.","2024-04-22T20:38:56Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-04-22T23:39:48Z",false,"APPROVED"
"masenf","COLLABORATOR","looks like a good temporary solution, but i think this whole component needs a bit of love to expose more of these hardcoded parameters to the user and better align with radix themes `--var(X)` style values","2024-04-25T17:51:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks!","2024-04-25T03:58:05Z",false,"APPROVED"
"Alek99","MEMBER","life saver","2024-04-20T03:48:45Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-22T11:04:55Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-19T18:14:30Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-18T21:34:26Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-04-19T03:00:13Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-06T19:36:31Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-05-06T20:07:50Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-05-06T23:04:52Z",false,"APPROVED"
"masenf","COLLABORATOR","### Initial Impression

---------

should `openai_client = openai.OpenAI()` be included in the blue box?

------------

> Use self. to call state class variables

Suggest ""Use self. to access state variables for the current session""

---------

> Use State. when referring to state class variables (do not use self.)

Suggest ""Use State. to render state vars and reference evnet handlers""

------------

I think under the backend section we should add ""Code runs directly on the server"". And under the frontend section we should add ""Code translated to React/JS runs in the user's browser""","2024-04-18T17:32:13Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-04-18T19:51:42Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2024-04-20T00:53:51Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","the current implementation seems to mess up the counter app centering (though there's a text_align=""center"" within the center)

<img width=""413"" alt=""Screenshot 2024-04-17 at 5 29 09 PM"" src=""https://github.com/reflex-dev/reflex/assets/6270214/c8a9ddb5-cce8-4c95-99e8-7133ad44577a"">
","2024-04-18T00:41:12Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-04-26T23:03:15Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-22T11:04:02Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-04-18T20:59:58Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-17T16:07:38Z",false,"CHANGES_REQUESTED"
"ElijahAhianyo","COLLABORATOR","","2024-04-18T08:53:42Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2024-04-18T08:57:07Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-04-18T21:21:48Z",false,"CHANGES_REQUESTED"
"ElijahAhianyo","COLLABORATOR","","2024-04-18T21:27:10Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-04-18T21:31:08Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-18T22:33:50Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-17T15:43:42Z",false,"APPROVED"
"masenf","COLLABORATOR","I like this one. Thanks","2024-04-16T01:16:37Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-16T11:20:30Z",false,"APPROVED"
"Lendemor","COLLABORATOR","Nice, the UX will be much better for high fire-rate events !

Could we add a test when the event handler is a lambda? I expect the behaviour to be the same, but might as well be sure. ","2024-04-15T23:53:12Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-04-16T11:10:01Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","works great with my color picker","2024-04-27T00:27:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-04-15T21:49:52Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Logs are showing up for me on Windows now","2024-04-15T21:21:16Z",false,"APPROVED"
"masenf","COLLABORATOR","awesome!","2024-04-15T18:33:13Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice","2024-04-12T18:53:45Z",false,"APPROVED"
"masenf","COLLABORATOR","So i was reading back through the original ticket and i think 2 requested items are missing in this implementation:

* the handler isn't ""global"", as in, the element in question has to be focused in order to receive the paste event
* the handler cannot receive images, which was one of the example use cases

I don't know if i have any recommendations from the top of my head for how to best handle these issues though. For global event handling, i think we would need to register an event handler on `document`, similar to the global hot key monitor example in the docs https://reflex.dev/docs/api-reference/browser-javascript/#using-react-hooks

As for handling other data types, i think this would need to be specified somewhere for the event handler to pick it up in the mapping var.

Maybe instead of adding `on_paste` as a common event trigger, it might make sense to have an `Clipboard` component that uses a hook to register the `paste` event handler on `document` and then it would have an `on_paste` trigger that could get data of the type specified as a component prop?","2024-04-17T16:23:04Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-04-11T23:41:36Z",false,"APPROVED"
"martinxu9","CONTRIBUTOR","","2024-04-11T21:26:32Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-11T16:12:05Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","reflex-web CI is fixed now","2024-04-11T21:08:06Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-05-16T01:00:36Z",false,"APPROVED"
"Lendemor","COLLABORATOR","I have no issue with the implementation.

I'm just not sure when/where this will be needed? for redirecting from login page maybe? ","2024-05-16T14:08:25Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-11T16:15:59Z",false,"APPROVED"
"tgberkeley","COLLABORATOR","","2024-04-11T22:24:26Z",false,"COMMENTED"
"masenf","COLLABORATOR","for some CSS reason, the sidebar seems to get cut off as you scroll down the page

https://github.com/reflex-dev/reflex/assets/1524005/7578d166-5a5d-42f0-ac02-689387da0336","2024-04-17T16:56:37Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-04-17T17:21:38Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-04-18T17:52:59Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-11T12:24:22Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome","2024-04-11T21:04:12Z",false,"APPROVED"
"masenf","COLLABORATOR","looks good. i think adding the plural to the docstring will fix the CI","2024-04-10T00:16:39Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-04-10T04:03:54Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-09T21:07:18Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-09T18:57:22Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-04-09T20:00:29Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-09T16:33:05Z",false,"COMMENTED"
"Yummy-Yums","CONTRIBUTOR","","2024-04-09T16:40:15Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-04-09T16:43:05Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-04-09T17:16:49Z",false,"COMMENTED"
"Yummy-Yums","CONTRIBUTOR","","2024-04-09T18:08:18Z",false,"COMMENTED"
"masenf","COLLABORATOR","the only thing that still makes me nervous about this is that, if the handler doesn't specify a default for the `list[rx.UploadFile]` arg, then there will be a traceback printed on the backend, whereas before, this was just a no op.

i think that's okay though. it will still be a no-op, and if they want to avoid the traceback, they can add a default value...","2024-04-09T18:54:57Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-04-09T18:34:05Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-08T23:49:51Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-04-08T23:53:35Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-04-09T00:15:25Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-04-09T00:29:44Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2024-04-09T00:33:04Z",false,"COMMENTED"
"masenf","COLLABORATOR","nice","2024-04-09T01:01:07Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-06-27T16:36:25Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-06-27T19:19:43Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-06-27T19:19:48Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-08T19:54:39Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-04-08T20:18:08Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-04-08T20:40:11Z",false,"APPROVED"
"masenf","COLLABORATOR","actually, i think this regressed the `rx.download` from backend case, that's no longer working in my sample code that i posted above","2024-04-08T20:42:03Z",false,"CHANGES_REQUESTED"
"Sprocketer","NONE","LGTM even though I can't merge anything obviously 👍","2024-04-08T12:02:22Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-04-08T18:29:35Z",false,"APPROVED"
"Ifechukwu001","CONTRIBUTOR","","2024-04-08T02:43:05Z",false,"COMMENTED"
"Ifechukwu001","CONTRIBUTOR","Added extra information to the PR","2024-04-08T02:45:35Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-04-08T10:41:47Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","Can you make it work in dark mode too?

You could use `var(--accent-12)` instead of black for the color of the border.","2024-04-08T10:46:15Z",false,"CHANGES_REQUESTED"
"Ifechukwu001","CONTRIBUTOR","","2024-04-09T13:14:27Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-04-11T12:28:27Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-04-13T14:52:45Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","Looks good! Will do a more thorough review later this week and try to get this in the next release","2024-04-15T18:05:15Z",false,"COMMENTED"
"masenf","COLLABORATOR","If we have a separate class `StyledUpload`, we need to ensure that `Upload.is_used` gets set, regardless of which flavor of upload is actually used, so that the App mounts the upload endpoints","2024-04-19T03:03:59Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-04-22T21:40:21Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for adding!","2024-04-24T20:45:12Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","sweet, nice hack - reflex-web is running for me with Pydantic 2 now!","2024-04-06T01:59:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-04-06T01:25:14Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-04-05T19:23:31Z",false,"APPROVED"
"martinxu9","CONTRIBUTOR","","2024-04-08T13:36:02Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-04-04T22:48:11Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-04-04T22:16:51Z",false,"APPROVED"
"martinxu9","CONTRIBUTOR","","2024-04-04T20:57:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-04-04T18:23:31Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-04-04T18:31:47Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-04T18:13:20Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","Is it possible to make this a field within `rx.Component`? Then during compilation we can detect if any components need transpired packages and just add it there.

That way if someone wraps `react-tweet` it will work out of the box without the end user having to modify their `rxconfig`.","2024-04-04T18:30:57Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","working well for me","2024-04-11T20:49:55Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-04T13:05:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good, let's hold off on the `_render` for now since that will change the public API","2024-04-03T23:47:53Z",false,"CHANGES_REQUESTED"
"martinxu9","CONTRIBUTOR","","2024-04-03T23:52:26Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-04-03T23:53:57Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-04-03T23:58:23Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-04-04T00:00:02Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-04-04T02:15:47Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-04-04T14:29:50Z",false,"COMMENTED"
"masenf","COLLABORATOR","This looks good to me.

My personal preference is `_add_style_recursive` but i wouldn't push too hard about it. I like `_add_style_recursive` because it describes exactly what this function is doing: adding the given style recursively down the tree.","2024-04-04T14:37:17Z",false,"DISMISSED"
"martinxu9","CONTRIBUTOR","","2024-04-04T15:32:42Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-04-04T15:44:42Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-04-04T16:21:04Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-04-04T16:22:34Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Why not use a list, if we don't have any values needed?","2024-04-03T18:20:55Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-04-03T21:42:56Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-04-03T01:15:33Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2024-04-03T01:18:23Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-04-03T03:30:11Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-04-03T16:13:32Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2024-04-03T17:31:17Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2024-04-03T18:58:51Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2024-04-03T18:58:56Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-04-04T14:49:57Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-04-04T18:09:42Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-04T14:52:04Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2024-04-04T16:51:10Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-04-02T20:57:30Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","looks good except for the empty test","2024-04-03T00:12:59Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-04-03T01:03:02Z",false,"DISMISSED"
"ElijahAhianyo","COLLABORATOR","","2024-04-04T12:30:42Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-04-03T16:17:24Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-04T14:52:32Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Great change - this error occurs way too often. Can we add a unit test for this as well, then it's good to merge.","2024-04-02T15:50:10Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2024-04-03T16:18:29Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for adding!","2024-04-02T16:06:03Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-04-04T16:24:42Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-04-01T22:19:20Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-01T22:57:38Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-01T18:43:29Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-04-01T18:40:04Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-01T18:20:51Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks, change looks good to me! We just need to update some of the older unit tests that raised errors on `None`, can merge once the tests are passing.","2024-04-01T19:33:19Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","@picklelo i updated from `main` and removed the bad test case so we pass unit tests. I think we're good to go here now.","2024-04-02T17:15:32Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-04-02T18:36:56Z",false,"APPROVED"
"masenf","COLLABORATOR","So the `cancel-in-progress: true` is for killing runs when there's a new push? That's pretty cool","2024-03-29T19:51:25Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-03-29T20:09:11Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-03-29T20:11:54Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-29T20:46:50Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-03-29T21:32:36Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-29T23:24:19Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-29T23:24:25Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-30T01:10:44Z",false,"DISMISSED"
"masenf","COLLABORATOR","lgtm","2024-04-01T17:47:47Z",false,"APPROVED"
"masenf","COLLABORATOR","Thanks for fixing!","2024-03-29T16:28:28Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-04-02T18:31:45Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-04-02T18:48:23Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-04-02T16:46:38Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-04-03T20:01:07Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice optimization","2024-03-29T01:44:41Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-28T22:22:53Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","Syntax is working well for me","2024-03-29T01:35:43Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-03-29T03:30:19Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-03-29T04:24:53Z",false,"APPROVED"
"masenf","COLLABORATOR","Changes look good. We can merge when CI is clean","2024-03-29T04:41:45Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-29T02:19:17Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","nice, this will be a good testing ground","2024-03-30T01:13:18Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice, works for me!

My test code FWIW:

```python
import reflex as rx

class State(rx.State):
    @rx.var
    def thinking(self):
        import time
        time.sleep(1)
        return ""hi""


def index() -> rx.Component:
    return rx.heading(State.thinking)


# Add state and page to the app.
app = rx.App()
app.add_page(index)
```","2024-03-29T01:55:25Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-29T00:18:04Z",false,"APPROVED"
"masenf","COLLABORATOR","we'll try to merge this before anything else conflicts with it 😓 ","2024-03-28T00:06:07Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-28T05:42:37Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-28T19:05:03Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","i appreciate your dedication to test coverage 😅 ","2024-03-28T19:51:58Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","works well on my custom components","2024-03-29T01:19:38Z",false,"DISMISSED"
"masenf","COLLABORATOR","Good to merge without the macos runs","2024-03-29T16:54:14Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-27T23:22:18Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-03-27T15:59:45Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-27T16:49:18Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-27T16:50:46Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2024-03-28T15:44:32Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-03-28T15:47:30Z",false,"APPROVED"
"masenf","COLLABORATOR","This is great, thanks","2024-03-28T18:02:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","looks great now","2024-03-28T17:58:30Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-26T21:19:40Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2024-03-26T23:33:59Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-03-26T02:28:41Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Everything is working great for me.

One note: for my chat component I needed to override the `create` method in order to set a property on my component state:

```python
class Chat(rx.ComponentState):
    """"""A chat component with state.""""""

    # The full chat history.
    messages: list[dict[str, str]] = [{
        ""role"": ""system"",
        ""content"": ""You are a friendly chatbot named Reflex. Respond in markdown.""
    }]

    # Whether we are processing the question.
    processing: bool = False

    @classmethod
    def create(self, process, **props):
        component = super().create(**props)
        component.State.process = process
        return component

    @classmethod
    def get_component(cls, **props) -> rx.Component:
        return rx.vstack(
        ...
```

It may be cleaner to move everything into the `create` method (and do the thing you suggested of having some metaclass around the `create` that does the additional processing around the component creation.

We can also revisit this improvement later, I think most people won't be modifying the state class (though it may be common if they want to write their own hooks/handlers)
","2024-03-27T23:15:13Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Working well with my chat component!","2024-03-29T01:37:21Z",false,"APPROVED"
"martinxu9","CONTRIBUTOR","so what does it look like for a component (that's wrapping react) now?","2024-03-29T04:12:29Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-03-29T04:15:55Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-27T19:39:49Z",false,"APPROVED"
"martinxu9","CONTRIBUTOR","LGTM","2024-03-27T19:42:27Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-27T19:44:17Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-27T19:44:47Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-03-27T20:13:55Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-25T22:16:40Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2024-03-26T09:11:10Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-03-26T11:08:08Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-03-26T12:48:30Z",false,"COMMENTED"
"masenf","COLLABORATOR","Excellent! 😀 ","2024-03-26T18:08:06Z",false,"APPROVED"
"masenf","COLLABORATOR","i think the core problem comes from this line

```python
component.get_hooks_internal() | component.get_hooks(),
```

instead of special casing refs, can we just move the internal hooks to always precede the user hooks?","2024-03-25T17:31:41Z",false,"COMMENTED"
"masenf","COLLABORATOR","remove the prints and we can take this as it is for now","2024-03-26T01:44:54Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-26T22:56:40Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2024-03-22T14:34:32Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-03-21T17:04:08Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-21T17:09:03Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-03-21T17:18:07Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-03-21T17:32:12Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-21T19:44:35Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-21T19:42:42Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-05-08T16:43:31Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-08T17:25:12Z",false,"APPROVED"
"abdulrahman-2005","NONE","","2024-05-14T17:24:07Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-27T23:21:48Z",false,"APPROVED"
"masenf","COLLABORATOR","Thanks for your contribution!

The main issue I see with this (and apparent from the CI failures) is that these name changes will break existing code that already works...

If possible I think we should maintain a mapping of the old names to the new names so that we can warn users about the removed names and hopefully automatically map them to the new names.

Maybe something like

```python
RENAMED_ICONS_05 = {
    ""activity_square"": ""square_activity"",
    ""alert_circle"": ""circle_alert"",
    ""alert_octagon"": ""octagon_alert"",
    ...
}

def map_deprecated_icon_names_05(tag: str) -> str:
    new_tag = RENAMED_ICONS_05.get(tag)
    if new_tag is not None:
        console.deprecate(
            feature_name=f""icon {tag}"",
            reason=f""it was renamed upstream. Use {new_tag} instead."",
            deprecation_version=""0.4.6"",
            removal_version=""0.5.0"",
        )
        return new_tag
    return tag
```

Then in the `create` method, we can call this function to check if the name was changed.

@Lendemor curious what you think about this approach; lucide seems kind of brazen about breaking things at the moment.","2024-03-20T23:49:10Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-03-25T22:21:54Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-20T22:16:28Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-20T18:36:22Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-03-20T18:36:25Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-20T16:34:33Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-03-20T16:34:43Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-03-28T20:15:23Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-20T18:23:00Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Tested the workflow with my image-zoom app and it seemed to work well. I see it entered in the dev database.

Will wait for masen for final approval","2024-03-27T00:32:12Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-03-27T00:35:54Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-03-27T00:36:08Z",false,"COMMENTED"
"masenf","COLLABORATOR","i like the toml parsing much better. nice

i wasn't able to actually test it with my new library yet, due to deploy issues. but the code looks good.","2024-03-27T22:20:50Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-03-28T20:55:04Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-03-28T21:00:50Z",false,"APPROVED"
"Lendemor","COLLABORATOR","Looks good.","2024-03-19T16:52:04Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2024-03-19T17:07:56Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2024-03-22T18:28:05Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2024-03-23T15:08:39Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-03-25T06:13:51Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-20T01:16:45Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-19T01:26:12Z",false,"CHANGES_REQUESTED"
"martinxu9","CONTRIBUTOR","","2024-03-19T20:59:49Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-20T18:30:41Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-18T22:41:14Z",false,"APPROVED"
"masenf","COLLABORATOR","Just a var name and docstring rewording suggestion for clarity","2024-03-20T18:07:20Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2024-03-21T07:38:57Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-26T14:57:10Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-17T21:50:27Z",false,"APPROVED"
"masenf","COLLABORATOR","lgtm","2024-03-20T18:11:47Z",false,"CHANGES_REQUESTED"
"wassafshahzad","CONTRIBUTOR","","2024-03-20T20:03:59Z",false,"COMMENTED"
"wassafshahzad","CONTRIBUTOR","","2024-03-25T21:27:25Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Works great for me, this is a sweet improvement!","2024-03-26T00:35:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-20T01:14:40Z",false,"APPROVED"
"martinxu9","CONTRIBUTOR","left a question, overall LGTM","2024-03-17T18:15:36Z",false,"DISMISSED"
"ElijahAhianyo","COLLABORATOR","","2024-03-18T14:02:01Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-20T18:28:21Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2024-03-20T18:33:21Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-03-21T07:24:45Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-15T16:59:02Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-15T00:07:03Z",false,"COMMENTED"
"watfordsuzy","NONE","","2024-07-24T18:40:06Z",false,"COMMENTED"
"masenf","COLLABORATOR","I like that this only applies to direct children... so if somebody _did_ want the broken behavior, for whatever reason, they could wrap the contents in an `rx.fragment` to bypass this prop forcing","2024-03-14T17:48:22Z",false,"DISMISSED"
"masenf","COLLABORATOR","CI issues are known problems that are fixed in `main`; will merge","2024-03-15T17:55:42Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-14T00:12:56Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-03-13T21:14:26Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-13T22:55:01Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-03-13T19:53:15Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-13T22:42:20Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-17T21:52:10Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-03-28T05:44:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-12T17:28:14Z",false,"COMMENTED"
"Alek99","MEMBER","","2024-03-12T17:42:36Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-03-12T17:48:36Z",false,"COMMENTED"
"Alek99","MEMBER","","2024-03-12T17:53:58Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-03-12T19:17:38Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-03-12T22:58:17Z",false,"COMMENTED"
"Alek99","MEMBER","","2024-03-13T00:44:22Z",false,"DISMISSED"
"Alek99","MEMBER","","2024-03-13T18:18:34Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-12T04:18:45Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","good idea keeping behind a flag - super snappy for me with it enabled","2024-03-13T19:31:33Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","Works well for me - in the future we may want to break up the `compile` method as it's getting quite huge","2024-03-16T00:23:23Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-03-13T18:37:39Z",false,"COMMENTED"
"Borda","CONTRIBUTOR","","2024-03-13T19:40:38Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-03-30T12:00:25Z",false,"COMMENTED"
"Borda","CONTRIBUTOR","","2024-03-31T14:22:52Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-04-04T12:42:46Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-04-22T14:57:58Z",false,"CHANGES_REQUESTED"
"Borda","CONTRIBUTOR","","2024-04-22T18:21:46Z",false,"COMMENTED"
"Borda","CONTRIBUTOR","","2024-04-22T18:22:54Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-04-22T21:31:29Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2024-04-22T21:36:43Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-04-22T23:25:52Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-04-22T23:56:07Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2024-04-23T11:26:55Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-04-23T11:49:07Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-04-23T11:50:08Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-04-23T13:01:02Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-04-23T13:02:09Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-04-23T13:04:01Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-04-23T21:11:34Z",false,"APPROVED"
"masenf","COLLABORATOR","Lets merge it before more conflicts arise!!! 😁 ","2024-04-23T21:39:38Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-12T19:59:16Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-11T19:57:20Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2024-03-11T13:07:08Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-15T19:55:19Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","`black` complain on the formatting, once it's solved we can take this PR.
Running `pre-commit` or making sure that the version of `black` match the expected version should be enough.","2024-03-11T11:54:03Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2024-03-11T19:15:45Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-11T19:33:52Z",false,"CHANGES_REQUESTED"
"emmakodes","CONTRIBUTOR","","2024-03-12T11:21:33Z",false,"COMMENTED"
"emmakodes","CONTRIBUTOR","","2024-03-12T11:23:54Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","awesome, much better messages now. thanks for adding!","2024-03-13T22:39:38Z",false,"APPROVED"
"benedikt-bartscher","CONTRIBUTOR","@masenf thanks for the followup
Your fix looks good to me","2024-09-11T22:35:18Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-09-17T17:24:06Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-11T19:15:27Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-11T19:17:32Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","LGTM - on a more broad note, I feel we have a LOT of places where we descend through the component tree to determine / set things. In the future maybe we can have some kind of hook system where the traversal is only done once and all these operations can run together","2024-03-09T00:15:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-11T19:29:05Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","LGTM","2024-03-13T19:33:08Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-07T22:27:40Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-03-07T22:31:01Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-03-07T22:46:07Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-07T23:19:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-11T19:30:58Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-11T19:32:20Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-03-13T19:34:17Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-03-13T21:16:28Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-07T21:02:10Z",false,"DISMISSED"
"martinxu9","CONTRIBUTOR","","2024-03-07T21:35:09Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-07T22:33:25Z",false,"APPROVED"
"Alek99","MEMBER","Nvm disregard last comment","2024-03-08T04:34:19Z",false,"CHANGES_REQUESTED"
"Alek99","MEMBER","Awesome!","2024-03-08T04:42:06Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-11T19:39:37Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","I think the auto-docs don't show the extra props, but I'm leaning in favor of removing some of the base html props to keep our api simple (can do later on)","2024-03-07T01:18:15Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-07T01:19:50Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-07T21:17:47Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-03-06T22:57:14Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for fixing!","2024-03-06T17:37:47Z",false,"APPROVED"
"masenf","COLLABORATOR","i like the change... i think the risk here is that we continue to test with our `poetry.lock` file, but users might install the package from `pip` and end up getting untested versions of dependencies.

We need some kind of automation to ensure that our lock file is always up to date, particularly before a release, to ensure that the latest versions of packages are at least tested.

Further, someone might be pinning an older reflex version that worked with the latest versions of the packages at the time it was released, but becomes broken with subsequent releases of dependencies. Unless all of our users are pinning all of their transitives (like they should), we could end up in a situation where a downstream user cannot recreate a working environment without upgrading their reflex version (and potentially hitting deprecations and changes in reflex itself that they don't have time to deal with).

I want to move forward with this, but i think we should wait at least another release and try to bring it in next week.","2024-03-13T21:06:34Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-03-29T03:32:40Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-29T16:22:09Z",false,"APPROVED"
"Alek99","MEMBER","","2024-03-06T19:47:11Z",false,"DISMISSED"
"Alek99","MEMBER","","2024-03-07T01:01:53Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-03-06T23:08:26Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-06T23:30:06Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-05T20:08:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","couple comments, and looks like the tests are failing","2024-03-11T00:32:54Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2024-03-13T19:38:34Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-05T05:11:23Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-05T00:15:23Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-05T00:14:16Z",false,"APPROVED"
"Alek99","MEMBER","","2024-03-04T22:40:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice","2024-03-06T00:11:07Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-04T21:07:14Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","sorry for the delay - works well for me","2024-03-26T00:31:40Z",false,"APPROVED"
"masenf","COLLABORATOR","Replace ""Test that background tasks work as expected."" with the actual description.","2024-03-11T20:43:58Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2024-03-13T20:55:20Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","works well for me, thanks for adding!","2024-03-04T03:46:55Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Works well, but I get the Warning

```
DeprecationWarning: EventChain has been deprecated in version 0.2.8 to avoid confusion, only use yield API. It will be completely removed in 0.5.0
```

Should we remove the event chain warning? ","2024-03-04T03:43:25Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-03-05T20:00:26Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-04T03:26:10Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-03T17:55:15Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Big improvement it works with theme now - just one comment, maybe we need to document better the interaction between `theme` and `color_scheme`","2024-03-04T03:16:20Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-03-04T03:27:31Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-03-04T17:27:03Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-03-05T20:00:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-04T03:24:07Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-03-05T00:48:47Z",false,"APPROVED"
"masenf","COLLABORATOR","Good catch, thanks!","2024-03-01T17:31:25Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-29T17:04:45Z",false,"APPROVED"
"masenf","COLLABORATOR","Review checkpoint 1: Complete ✅

the `""model_post_init""` in the State was one thing that tripped me up last time i was working in this code.","2024-03-01T21:29:20Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-03-01T21:36:32Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-03-01T21:38:03Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-03-02T10:38:42Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","thanks for fixing, I missed that","2024-02-28T22:51:44Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-28T22:53:18Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-28T22:59:12Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-02-28T23:10:14Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","thanks for adding!","2024-02-28T20:34:27Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-01T00:21:28Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-28T02:15:26Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-27T23:08:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch","2024-02-27T17:34:49Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks!","2024-02-27T17:33:41Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch","2024-02-27T17:58:18Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","works well for me. note: this only applies to `reflex run` it looks like, running `reflex init` will trigger the warning again (which I think is good)","2024-02-28T01:12:01Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-27T03:33:07Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-26T20:02:15Z",false,"APPROVED"
"masenf","COLLABORATOR","Interesting, i wonder why it wasn't getting marked dirty in the parent state and being pushed down in the substates via this block

```python
        if (
            types.is_backend_variable(name, self.__class__)
            and name not in RESERVED_BACKEND_VAR_NAMES
        ):
            self._backend_vars.__setitem__(name, value)
            self.dirty_vars.add(name)
            self._mark_dirty()
            return
```","2024-02-24T20:41:39Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-24T21:37:18Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-26T03:47:45Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-24T22:05:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-27T03:34:40Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-13T19:40:05Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-03-15T22:37:32Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-24T22:04:59Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-23T20:10:06Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-23T20:10:44Z",false,"APPROVED"
"masenf","COLLABORATOR","Menu button seems a little too big but overall good change

![image](https://github.com/reflex-dev/reflex/assets/1524005/ad1ff713-8b59-42ac-9722-3bd43563ad03)
","2024-02-24T21:55:44Z",false,"APPROVED"
"masenf","COLLABORATOR","actually can you fix the broken links in README.md as well?","2024-02-24T22:00:09Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2024-02-27T16:41:18Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-02-27T17:57:46Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-02-27T18:43:19Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-28T20:35:15Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-02-28T20:41:25Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-28T22:48:56Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-23T17:51:56Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-22T20:11:22Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-23T20:50:11Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-02-29T21:37:48Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-06-13T15:03:28Z",false,"APPROVED"
"masenf","COLLABORATOR","sweet we can probably get this into the next release. thanks.

waiting for ci pass","2024-02-22T20:01:32Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-22T22:45:42Z",false,"APPROVED"
"masenf","COLLABORATOR","Looks good, just a few pre-commit issues to resolve, then we can take it","2024-02-22T18:40:15Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-29T21:36:27Z",false,"CHANGES_REQUESTED"
"macmoritz","CONTRIBUTOR","","2024-03-01T10:24:36Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-01T17:41:52Z",false,"COMMENTED"
"macmoritz","CONTRIBUTOR","","2024-03-01T18:54:53Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-01T20:28:33Z",false,"COMMENTED"
"macmoritz","CONTRIBUTOR","","2024-03-02T08:26:48Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-02T18:53:18Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-22T17:56:02Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-22T19:16:03Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-02-22T21:18:26Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-22T16:15:42Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-22T19:21:10Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-23T19:36:40Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-27T03:39:55Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-29T21:17:08Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-03-04T04:02:36Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2024-03-04T17:45:22Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-03-04T19:58:28Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-22T19:36:22Z",false,"CHANGES_REQUESTED"
"tgberkeley","COLLABORATOR","","2024-02-29T01:12:53Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2024-02-29T01:18:43Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-29T21:03:29Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-02-29T21:45:46Z",false,"APPROVED"
"martinxu9","CONTRIBUTOR","","2024-02-21T23:52:40Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome!","2024-02-28T23:11:01Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-21T18:22:57Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-02-21T13:22:58Z",false,"APPROVED"
"masenf","COLLABORATOR","Looks fine, rekicked some failed CI jobs","2024-02-21T22:40:43Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-21T23:01:54Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-21T09:58:46Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","The syntax for accessing the state looks good.

On a broader note, I'm scared the code is getting too complicated, particularly now the state class has so many methods and that file is huge. It 

The methods are also a bit intimidating - for a newcomer I'm not sure they'd be able to reason around our codebase very easily now. We should have a design meeting to look over how we're doing anything to see if there's some things we can simplify.","2024-02-22T08:33:38Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-22T16:09:55Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-26T04:49:07Z",false,"COMMENTED"
"masenf","COLLABORATOR","> On a broader note, I'm scared the code is getting too complicated, particularly now the state class has so many methods and that file is huge.

I agree, there's too much going on inside the `BaseState`. I have some ideas for simplifying it, particularly via the use of descriptors for Var and EventHandler access, could clean up a lot of the `__init_subclass__` logic where we treat the same attribute differently on the class vs the instance.

> The methods are also a bit intimidating

I split up `get_state` into 6 smaller methods with hopefully more descriptive readable names to help paint a picture of what's going on. I don't see an easy way to get away from the intimidation of the `BaseState` generally though... I was thinking we could split up some of the distinct functionality into a few mixin classes (i.e. one for var/dirty/delta management, one for substate/parent state management, and one for event processing), but i'm not sure that would be more enlightening or worth the time at this point.

I think a bigger state refactoring is on the horizon, but I don't think we can justify further investment on the `BaseState` after getting this API in.","2024-02-26T04:57:31Z",false,"COMMENTED"
"masenf","COLLABORATOR","~There's a problem here if a substate has a cached_var that depends on something in a parent state, but that substate isn't loaded because the event is being processed on a sibling state, then the cached var doesn't update (and it throws an exception).~

This has been fixed with the merge of #2725, now `cached_var` are fetched, similarly to `var`. This might be inefficient, but it's necessary to ensure consistency of updates.
","2024-02-26T21:07:04Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-27T19:24:49Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-27T19:43:22Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-27T19:50:08Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-27T19:58:46Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-27T19:59:50Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-27T20:01:32Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-27T20:07:36Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-27T20:08:23Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-27T20:57:24Z",false,"APPROVED"
"Alek99","MEMBER","","2024-02-21T01:55:35Z",false,"DISMISSED"
"Alek99","MEMBER","","2024-02-22T04:11:06Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-24T21:43:13Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2024-02-24T22:06:59Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-02-29T17:42:33Z",false,"APPROVED"
"masenf","COLLABORATOR","good ux

any thoughts on `use_theme_panel` vs `use_panel`? i know it's more to type...

down the road when we make our own panel, we can just swap out the radix one with our own","2024-02-20T19:05:31Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-02-20T23:12:49Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-20T02:30:44Z",false,"APPROVED"
"masenf","COLLABORATOR","i started looking at the test changes, but i think if we just avoid sending these new fields in the delta then the tests can stay the way they are.","2024-06-26T21:49:51Z",false,"CHANGES_REQUESTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-06-26T23:56:07Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-07-11T19:40:02Z",false,"APPROVED"
"masenf","COLLABORATOR","hitting a couple of issues with this

1. all states seem to share the same _session_status; i think this needs to be declared as a `pydantic.PrivateAttr` so each instance gets its own copy
2. the `RECONNECTED` state does not seem to ""stick"". it shows up once when the initial reconnection happens, but then immediately changes to `CONNECTED` again, so detecting the reconnected state is not really possible if there is an on_load or some other event processed before the handler that is supposed to check the status.

We might need some integration tests for this feature.","2024-07-11T20:24:59Z",false,"COMMENTED"
"masenf","COLLABORATOR","Needs a test case and the above issues addressed (accidentally clicked approve earlier)","2024-07-11T20:25:44Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","looks good, a few suggestions","2024-02-20T23:12:24Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2024-02-24T21:44:57Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-19T22:58:54Z",false,"APPROVED"
"masenf","COLLABORATOR","a test case would be cool too, but not strictly necessary since most of this code is already untested.","2024-02-19T18:44:38Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2024-02-20T23:14:25Z",false,"APPROVED"
"masenf","COLLABORATOR","looks reasonable to me","2024-02-19T16:46:14Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-19T17:09:29Z",false,"CHANGES_REQUESTED"
"ElijahAhianyo","COLLABORATOR","","2024-02-19T17:47:32Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2024-02-19T17:55:35Z",false,"COMMENTED"
"masenf","COLLABORATOR","Didn't notice this earlier","2024-02-19T23:36:55Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2024-02-20T17:56:55Z",false,"APPROVED"
"masenf","COLLABORATOR","interesting solution. i like that the code output is stable too","2024-02-19T16:47:18Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-02-19T23:38:58Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2024-02-20T16:14:41Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-20T17:46:32Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2024-02-20T18:38:56Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2024-02-20T19:25:15Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-20T19:50:34Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-19T17:07:23Z",false,"APPROVED"
"martinxu9","CONTRIBUTOR","","2024-02-22T00:01:04Z",false,"APPROVED"
"Alek99","MEMBER","working well for me","2024-02-19T23:42:46Z",false,"APPROVED"
"masenf","COLLABORATOR","```python
>>> rx.get_asset_path()
DeprecationWarning: rx.asset_path has been deprecated in version 0.4.0 Use rx.get_upload_dir() instead. It will be 
completely removed in 0.5.0
```","2024-02-16T19:40:59Z",false,"COMMENTED"
"masenf","COLLABORATOR","```python
>>> import reflex as rx
>>> rx.get_asset_path()
DeprecationWarning: rx.get_asset_path has been deprecated in version 0.4.0 use rx.get_upload_dir() instead. It will be
completely removed in 0.5.0
```","2024-02-16T19:43:03Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-16T19:26:40Z",false,"APPROVED"
"masenf","COLLABORATOR","get_asset_path in a separate PR?","2024-02-16T18:58:42Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-16T18:51:44Z",false,"APPROVED"
"masenf","COLLABORATOR","lets bring it in","2024-02-16T17:39:32Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-16T06:37:05Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-16T04:50:13Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-16T04:33:01Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-16T02:39:57Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-16T03:47:02Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-16T04:00:42Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-16T02:00:08Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-15T23:37:27Z",false,"COMMENTED"
"Alek99","MEMBER","","2024-02-15T23:40:28Z",false,"COMMENTED"
"Alek99","MEMBER","","2024-02-15T23:40:42Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-15T23:43:43Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","looks good, can we run `black` on the code example, then we can merge this","2024-02-16T00:02:38Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-16T03:58:27Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-15T23:32:52Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-15T23:49:35Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-15T20:52:42Z",false,"APPROVED"
"masenf","COLLABORATOR","Can we get the same treatment for AccordionHeader and AccordionItem

Also, can you move the definition of `slideUp` and `slideDown` to AccordionRoot","2024-02-15T20:58:10Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-15T21:27:57Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-02-15T21:35:34Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-15T20:42:21Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-15T20:30:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-15T20:47:50Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-02-15T20:58:39Z",false,"COMMENTED"
"masenf","COLLABORATOR","diff seems weird now, rebase?","2024-02-15T20:59:46Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-15T21:14:00Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-02-15T20:11:25Z",false,"APPROVED"
"masenf","COLLABORATOR","thanks for your contribution","2024-02-15T20:13:37Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-15T20:43:37Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-15T18:50:03Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-15T18:46:38Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-15T18:57:00Z",false,"APPROVED"
"masenf","COLLABORATOR","Good after CI pass","2024-02-15T19:04:51Z",false,"APPROVED"
"masenf","COLLABORATOR","I thought this was something we wanted too, but radix says this field only supports     ""p"",
    ""label"",
    ""div"",
    ""span"",

https://www.radix-ui.com/themes/docs/components/text

![image](https://github.com/reflex-dev/reflex/assets/1524005/8e941089-94db-494e-9a51-607a3aef5ffa)
","2024-02-15T17:38:49Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-02-15T19:07:39Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-15T03:36:02Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-20T23:00:44Z",false,"APPROVED"
"masenf","COLLABORATOR","Oh nice, people have been asking for this for a while.

Can we get a test case added? Maybe to `integration/test_var_operations.py`?","2024-02-15T00:50:23Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-20T23:02:02Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-15T00:03:05Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-15T00:44:02Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-14T23:45:42Z",false,"APPROVED"
"Alek99","MEMBER","lgtm","2024-02-14T23:46:02Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-14T22:22:30Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-14T21:01:21Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2024-02-14T21:09:20Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-14T21:28:45Z",false,"COMMENTED"
"masenf","COLLABORATOR","Working for me.","2024-02-14T21:29:06Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-14T19:13:44Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-14T17:59:53Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-14T17:58:31Z",false,"APPROVED"
"masenf","COLLABORATOR","we should add a test in `integration/test_var_operations.py`","2024-02-14T17:56:57Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-13T23:22:56Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-13T22:06:58Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-13T21:42:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch","2024-02-13T20:05:08Z",false,"APPROVED"
"masenf","COLLABORATOR","Does this block usage of the low level API now?

I mean, i guess it was blocked before, by virtue of the `accordion.item` pointing to the high level API, but if we want to retain access to the low level API, then `header` and `content` should be allowed to be None, in which case, the `*children` and `**props` should be passed directly to the contructor.","2024-02-13T20:12:44Z",false,"COMMENTED"
"masenf","COLLABORATOR","cool. thanks for making the changes. some of the logic in there looks a bit questionable, like ""what if i provide `header` and not `content`?""

But that's not an API breaking change, and we can fix that / throw an exception and improve the validation down the road.","2024-02-13T21:56:09Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-13T19:59:35Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch","2024-02-13T19:49:01Z",false,"APPROVED"
"masenf","COLLABORATOR","i'm still overall skeptical about this one... 🤔 

I guess i need to just check it out and try it.","2024-02-15T00:47:25Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-13T19:55:26Z",false,"APPROVED"
"masenf","COLLABORATOR","😢 ","2024-02-13T19:04:06Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-13T19:57:12Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-13T19:51:19Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-13T19:51:42Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-13T19:22:54Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-13T20:01:03Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-13T20:10:23Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-13T22:21:58Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-13T07:07:11Z",false,"APPROVED"
"masenf","COLLABORATOR","looks good, but these need to be wrapped in `staticmethod` or they wont work","2024-02-13T03:30:29Z",false,"COMMENTED"
"masenf","COLLABORATOR","fixups also needed in reflex-web, but chicken and egg","2024-02-13T03:42:23Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-13T02:46:23Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-12T23:19:49Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-12T23:20:46Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-13T02:38:34Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-13T19:09:11Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-12T23:06:35Z",false,"APPROVED"
"jackie-pc","CONTRIBUTOR","nice!","2024-02-12T21:33:28Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-12T23:04:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-12T20:19:27Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-12T20:42:55Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-12T18:50:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-12T18:57:12Z",false,"APPROVED"
"abulvenz","CONTRIBUTOR","","2024-02-19T22:00:59Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-19T22:59:45Z",false,"COMMENTED"
"abulvenz","CONTRIBUTOR","","2024-02-20T15:51:22Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-21T00:02:59Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","minor comments","2024-02-21T09:17:27Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-21T09:23:46Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-13T03:30:13Z",false,"APPROVED"
"masenf","COLLABORATOR","this is cool, way to get your hands dirty in some of the yuckiest code in the framework 😅 ","2024-02-12T23:03:29Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-13T22:30:08Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-12T23:07:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-10T00:14:29Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","🚢 ","2024-02-09T20:31:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-10T00:13:27Z",false,"APPROVED"
"Alek99","MEMBER","","2024-02-10T01:06:10Z",false,"APPROVED"
"Alek99","MEMBER","working for me on reflex web","2024-02-08T20:58:16Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-08T19:46:06Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-12T20:47:38Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome!","2024-02-08T19:21:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-12T20:36:26Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-08T02:43:54Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-07T23:02:30Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2024-02-22T09:21:48Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-22T16:13:11Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-07T22:35:07Z",false,"CHANGES_REQUESTED"
"jackie-pc","CONTRIBUTOR","","2024-02-07T23:08:20Z",false,"COMMENTED"
"Alek99","MEMBER","","2024-02-07T23:27:25Z",false,"COMMENTED"
"jackie-pc","CONTRIBUTOR","","2024-02-07T23:46:20Z",false,"COMMENTED"
"Alek99","MEMBER","","2024-02-07T23:53:46Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-07T23:59:04Z",false,"COMMENTED"
"jackie-pc","CONTRIBUTOR","","2024-02-08T17:07:13Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-08T19:43:34Z",false,"COMMENTED"
"masenf","COLLABORATOR","lets do it!","2024-02-08T19:56:14Z",false,"APPROVED"
"Alek99","MEMBER","","2024-02-08T20:13:27Z",false,"APPROVED"
"masenf","COLLABORATOR","we can either take this as an interim, or leave it open to add the fallback logic discussed in the sync up today.","2024-02-07T19:41:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-08T01:09:54Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-02-08T02:42:07Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2024-02-08T02:43:03Z",false,"COMMENTED"
"masenf","COLLABORATOR","Do we still want/need this? I know next/image isn't the default `rx.image` anymore, but is it usable enough through `rx.next.image` to include? Is next/image even desirable for us, given that it does not work with static exports?","2024-02-21T22:44:05Z",false,"COMMENTED"
"masenf","COLLABORATOR","swank :+1:","2024-02-07T19:39:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","sweet","2024-02-07T20:04:56Z",false,"APPROVED"
"masenf","COLLABORATOR","on board with this as a specific solution to the new `Color` class, although a more general solution might come later, lets get this in to ensure we have good functionality for the 0.4.0 release","2024-02-07T19:47:24Z",false,"DISMISSED"
"ElijahAhianyo","COLLABORATOR","","2024-02-07T20:20:43Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-07T20:38:39Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2024-02-08T14:15:39Z",false,"COMMENTED"
"Alek99","MEMBER","nice working for me","2024-02-08T19:27:22Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-02-08T19:45:00Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-07T19:36:18Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-02-07T19:39:43Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-07T19:56:57Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-07T20:06:22Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-07T19:55:25Z",false,"APPROVED"
"masenf","COLLABORATOR","This change sends the backend computed vars to the frontend for some reason. The backend computed vars should never be available for direct rendering

```python
import random
import reflex as rx

class State(rx.State):
    @rx.var
    def _be_computed_be(self):
        return random.random()


def index() -> rx.Component:
    return rx.vstack(
        rx.heading(f""Computed BE {State._be_computed_be}""),
        spacing=""1.5em"",
        font_size=""2em"",
        padding_top=""10%"",
    )


app = rx.App()
app.add_page(index)
```","2024-02-07T21:10:58Z",false,"COMMENTED"
"masenf","COLLABORATOR","If you re-merge from origin/main and fix the conflicts in `state.py` i think we can take this one. We don't have to worry so much about what happens if someone tries to use a backend var in their frontend code; it will kind of work, not really update, and that's not a regression, so lets just try to focus on getting this one through.","2024-02-21T22:48:02Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-29T21:00:36Z",false,"APPROVED"
"masenf","COLLABORATOR","Looks good, will take into the branch, even with breakage. reflex-web reflex-0.4.0 branch is not passing CI right now anyway.","2024-02-06T22:21:06Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-07T20:25:55Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-07T20:26:01Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-06T19:36:00Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-06T16:56:30Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-02-06T17:20:15Z",false,"COMMENTED"
"masenf","COLLABORATOR","looks good to me","2024-02-07T22:48:14Z",false,"APPROVED"
"masenf","COLLABORATOR","Wow this is an awesome idea and good execution! 

I did find a minor issue though

```python
import reflex as rx


class State(rx.State):
    sync1: str = rx.LocalStorage(sync=True)
    sync2: str = rx.LocalStorage(sync=True)

    def set_sync2(self, foo: str):
        self.sync2 = foo


def index() -> rx.Component:
    return rx.fragment(
        rx.color_mode_button(rx.color_mode_icon(), float=""right""),
        rx.vstack(
            rx.input(value=State.sync1, on_change=State.set_sync1),
            rx.input(value=State.sync2, on_change=State.set_sync2),
        ),
    )


# Create app instance and add index page.
app = rx.App()
app.add_page(index)
```

In this case, the user has overwritted `set_sync2` and it doesn't accept the ` value` arg anymore and thus, does not work (throws an error in the console `TypeError: State.set_sync2() got an unexpected keyword argument 'value'`).

I think the way to handle this is to implement an internal event handler that allows the setting of arbitrary values.

Have a look at `state.py` `on_load_internal` function. And also have a look at how client side storage is handled in `hydrate_middleware.py`.

Consider replacing the client storage functionality of `hydrate` (which we're trying to deprecate anyway) with an explicit `hydrate_client_storage_internal` event handler defined on `rx.State`. This event handler could take an arbitrary dict and apply the values to the state.

Let me know if you have any further questions about this suggestions, and thanks again for the awesome contribution.","2024-02-06T21:04:31Z",false,"CHANGES_REQUESTED"
"abulvenz","CONTRIBUTOR","Hi @masenf . 
I like your changes and especially the test!
Feel free to merge it like that, I tested it locally and it seems to work as expected.
One minor point that might be an architectural decision:
The overridden setters are not called due to the use of `setattr` instead of going via the `EventHandler`s. If that is the intended behavior, maybe we should mention that in the documentation.
Thanks for your effort!","2024-02-13T11:33:24Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-20T22:42:59Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-06T19:55:01Z",false,"CHANGES_REQUESTED"
"tgberkeley","COLLABORATOR","","2024-02-07T00:04:25Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2024-02-07T00:04:51Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2024-02-07T00:05:29Z",false,"COMMENTED"
"masenf","COLLABORATOR","regen pyi and we can take it","2024-02-07T19:37:14Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2024-02-08T02:16:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-07T23:32:34Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-06T00:43:36Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-06T19:52:02Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-05T19:06:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-07T00:08:38Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-07T00:11:23Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-07T00:20:43Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-07T19:55:15Z",false,"APPROVED"
"Alek99","MEMBER","It seems to have converted some lambdas to list which is not right there.","2024-02-05T03:00:06Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2024-02-04T22:46:41Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-05T18:28:45Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-05T18:53:41Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-05T18:53:51Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-05T18:56:20Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-04T22:38:37Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-03T01:49:19Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2024-02-02T16:50:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-02T19:34:14Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-02T20:05:15Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-02T01:57:35Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-02T17:35:37Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-02T17:34:46Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2024-02-07T00:18:27Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-02T17:28:37Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-02-01T01:06:27Z",false,"CHANGES_REQUESTED"
"tgberkeley","COLLABORATOR","","2024-02-01T20:15:57Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2024-02-01T20:16:25Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-02-01T23:40:15Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2024-02-01T23:51:49Z",false,"COMMENTED"
"masenf","COLLABORATOR","approve, when CI passes","2024-02-02T00:06:01Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-02T22:25:27Z",false,"APPROVED"
"masenf","COLLABORATOR","ohhhh, is that why this prop never seemed to work? good catch","2024-01-31T23:49:58Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-01T00:06:37Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-01T00:05:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-31T23:31:25Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Works well for me, might be nice to add a unit test","2024-02-01T01:23:46Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-01-31T19:42:24Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-01-31T19:50:18Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-01-31T20:00:07Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-01-31T20:14:14Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-01-31T21:42:28Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-01-31T20:04:07Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2024-01-31T20:07:13Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-01-31T20:07:38Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-01-31T20:08:04Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-01-31T20:24:57Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-31T19:38:11Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good to me","2024-02-05T21:58:17Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for fixing!","2024-01-31T18:00:26Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-01-31T19:35:14Z",false,"CHANGES_REQUESTED"
"tgberkeley","COLLABORATOR","","2024-02-01T21:55:28Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2024-02-01T21:55:46Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2024-02-01T22:20:09Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2024-02-01T22:21:21Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2024-02-01T22:29:07Z",false,"COMMENTED"
"masenf","COLLABORATOR","there's a bunch of extra stuff here, can you just rebase this on `origin/main` and force push","2024-02-02T18:53:17Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2024-02-13T02:29:20Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","awesome!","2024-02-13T03:14:18Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-02-13T20:26:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","LGTM - an idea on how we can make defining the namespaces cleaner","2024-01-31T02:13:55Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-01-31T18:03:13Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-01-31T19:01:23Z",false,"COMMENTED"
"masenf","COLLABORATOR","🚢 ","2024-01-31T00:06:13Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Works well for me (though I wasn't able to connect to get the list of templates). Maybe for now we can leave out the interactive init and support initialization with the `--template` flag only. I think I they do `--template` without any args, that's where we could show all the templates we offer through the CLI.","2024-02-02T22:04:16Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-02-09T18:35:31Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-04-04T21:10:43Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-04-04T21:42:31Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-04-04T21:47:00Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-04-04T22:31:15Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome, good to hear for our use cases","2024-01-30T23:35:09Z",false,"APPROVED"
"masenf","COLLABORATOR","appharness instance and selenium itself have some polling helpers that might be cleaner than the polling loops, but i'm fine with this as it is.","2024-01-30T23:54:22Z",false,"APPROVED"
"Alek99","MEMBER","Works for me","2024-01-30T22:31:29Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-30T20:14:58Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-30T22:08:10Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-30T23:03:10Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-01-31T19:54:35Z",false,"CHANGES_REQUESTED"
"ElijahAhianyo","COLLABORATOR","","2024-02-01T12:54:11Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","looks good !","2024-01-30T11:26:30Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice!","2024-01-29T21:50:38Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-29T20:30:46Z",false,"COMMENTED"
"jackie-pc","CONTRIBUTOR","","2024-01-29T20:45:42Z",false,"COMMENTED"
"jackie-pc","CONTRIBUTOR","","2024-01-29T20:49:39Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-01-30T02:50:37Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-01-30T19:30:42Z",false,"CHANGES_REQUESTED"
"jackie-pc","CONTRIBUTOR","","2024-01-30T21:29:50Z",false,"COMMENTED"
"jackie-pc","CONTRIBUTOR","","2024-01-30T21:35:56Z",false,"COMMENTED"
"jackie-pc","CONTRIBUTOR","","2024-01-30T21:47:41Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-01-31T02:15:56Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-01-31T02:17:45Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-01-31T19:21:48Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-29T21:41:46Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks, nice catch!","2024-01-29T20:22:39Z",false,"APPROVED"
"masenf","COLLABORATOR","just a quick suggestion, then we can take this. everything else looks good. thanks for the contribution 😀","2024-01-30T19:45:46Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2024-01-30T23:57:49Z",false,"APPROVED"
"Alek99","MEMBER","","2024-01-28T23:30:40Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-28T23:56:28Z",false,"APPROVED"
"Alek99","MEMBER","","2024-01-29T05:56:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-29T00:05:59Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-01-29T00:53:55Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-26T22:58:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-26T23:38:34Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-26T22:10:38Z",false,"APPROVED"
"masenf","COLLABORATOR","is there a reason why using `_valid_children` didn't work for this case?","2024-01-26T18:02:05Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-01-30T19:43:04Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice addition - this will be useful for our new radix components as well which have nested components like this.","2024-01-30T19:44:53Z",false,"APPROVED"
"masenf","COLLABORATOR","i think the approach here is sound, just some comments on api choice","2024-01-26T01:09:54Z",false,"CHANGES_REQUESTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-01-26T11:00:47Z",false,"COMMENTED"
"masenf","COLLABORATOR","i thought i left a comment on this yesterday, but i'm not seeing it now...

consider `subprocess.run` over `os.popen`; yes you'll have to specify `capture_output=True` and `encoding=""utf-8""`, but you can specify the command as an arg list instead of a string, which alleviates some potential shell quoting concerns.

The other thing about `os.popen` is that it returns files handles which must be closed, but they are not being closed here. Additionally, if the output is large, using this method can deadlock the process if the pipe fills up (i think).","2024-01-26T17:51:08Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-01-26T18:27:37Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-01-26T20:09:48Z",false,"APPROVED"
"masenf","COLLABORATOR","seems legit, re-running CI 🤔 ","2024-01-26T01:12:48Z",false,"APPROVED"
"masenf","COLLABORATOR","looks good to me. might be nice to add a test","2024-01-26T00:35:23Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-01-31T02:18:23Z",false,"APPROVED"
"masenf","COLLABORATOR","definitely like the `git` approach more 🙏 ","2024-01-26T01:10:42Z",false,"COMMENTED"
"masenf","COLLABORATOR","Thanks for your contribution, fast is good.","2024-01-25T17:26:42Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-01-29T17:48:17Z",false,"CHANGES_REQUESTED"
"ElijahAhianyo","COLLABORATOR","","2024-01-29T18:27:13Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-01-29T18:30:54Z",false,"COMMENTED"
"masenf","COLLABORATOR","couple more suggests","2024-01-29T18:46:58Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2024-01-30T14:17:33Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-01-31T00:55:26Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-25T01:41:03Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for adding!

Could you add a test in `tests/components/test_tag.py` in `test_format_props` to validate this change","2024-01-25T00:53:11Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","looks good to me!","2024-01-25T01:43:25Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-25T21:36:06Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","For some reason the pre-commit is failing - change looks good though","2024-01-26T22:13:12Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-01-30T00:55:01Z",false,"APPROVED"
"masenf","COLLABORATOR","the hesitation here is that the function now has two different behaviors:

1. if `other` is not None, then we get a **new Var**
2. if `other` is None, then we get the **same Var**

Code that is using `._merge` shouldn't have to worry about whether the returned value can be safely mutated or not.

To keep both code paths consistent, i'd suggest `return self._replace()`, so that `_merge` always returns a **new Var**","2024-01-24T20:32:44Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","> what are the repercussions in returning same var vs new var though

Var is a mutable object; so if i call `._merge` and then change `_var_is_local` or some other attribute, i wouldn't expect that to actually change any of the input Var.

This is fresh in my mind because I just fixed #2421 which was a result of _almost_ this same thing, except in the `.create` path, where if the object you're creating a Var from is already a Var, then the original object is returned directly as-is. I didn't change how `.create` works in that PR, because it's been like that for a long time, but we should avoid introducing new ways to shoot one's foot in a similar vein.","2024-01-26T00:18:32Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Functionality seems to work, need to improve the default styling - ideally we shouldn't have to set margin/padding props in the usage level","2024-01-25T01:51:44Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-01-25T02:19:47Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-01-25T02:20:13Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","works well for me","2024-01-29T20:21:21Z",false,"APPROVED"
"Alek99","MEMBER","### Comments from discord 
he only comment I have with this is that if they are using the theme provider I would like this to default to using it so it can look good in a button like so https://www.radix-ui.com/themes/docs/components/button
We may need to make a method that can check if a theme is being used
We can also get rid of radix icons as we only need one icon lib","2024-01-24T17:47:58Z",false,"CHANGES_REQUESTED"
"Alek99","MEMBER","","2024-01-25T21:47:14Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","awesome","2024-01-29T19:39:15Z",false,"APPROVED"
"masenf","COLLABORATOR","dude, i _dig_ this approach! awesome! 🤩","2024-01-24T15:43:11Z",false,"COMMENTED"
"Alek99","MEMBER","","2024-01-24T17:50:54Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Looks good!

* I think this should be accessible as `rx.color` rather than as a separate import
* Can we add some tests in test_serializers.py","2024-01-24T18:57:59Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-01-24T20:45:45Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-01-27T00:00:22Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-25T01:59:36Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-01-31T00:39:05Z",false,"APPROVED"
"masenf","COLLABORATOR","Seems like a good approach.","2024-01-23T21:55:06Z",false,"CHANGES_REQUESTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-01-23T23:16:10Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-01-23T23:23:03Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-01-23T23:26:48Z",false,"COMMENTED"
"masenf","COLLABORATOR","Moving the `_setup_dynamic_routes` to compile time has introduced a regression

```python
import reflex as rx


class State(rx.State):
    @rx.var
    def post_id(self):
        return self.router.page.params.get(""pid"", ""no pid"")


def index():
    return rx.link(""Post 123"", href=""/post/123"")


def post():
    """"""A page that updates based on the route.""""""
    return rx.vstack(
        rx.heading(State.post_id),
        rx.heading(State.pid),
    )


app = rx.App()
app.add_page(index)
app.add_page(post, route=""/post/[pid]"")
```

This app works fine in 0.3.9, but does not work with this patch

Traceback

```console
Traceback (most recent call last):
  File ""/Users/masenf/code/reflex-dev/VENV-dev/bin/reflex"", line 8, in <module>
    sys.exit(cli())
             ^^^^^
  File ""/Users/masenf/code/reflex-dev/VENV-dev/lib/python3.11/site-packages/typer/main.py"", line 214, in __call__
    return get_command(self)(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/VENV-dev/lib/python3.11/site-packages/click/core.py"", line 1157, in __call__
    return self.main(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/VENV-dev/lib/python3.11/site-packages/click/core.py"", line 1078, in main
    rv = self.invoke(ctx)
         ^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/VENV-dev/lib/python3.11/site-packages/click/core.py"", line 1688, in invoke
    return _process_result(sub_ctx.command.invoke(sub_ctx))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/VENV-dev/lib/python3.11/site-packages/click/core.py"", line 1434, in invoke
    return ctx.invoke(self.callback, **ctx.params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/VENV-dev/lib/python3.11/site-packages/click/core.py"", line 783, in invoke
    return __callback(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/VENV-dev/lib/python3.11/site-packages/typer/main.py"", line 532, in wrapper
    return callback(**use_params)  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/reflex/reflex/reflex.py"", line 250, in run
    _run(env, frontend, backend, frontend_port, backend_port, backend_host, loglevel)
  File ""/Users/masenf/code/reflex-dev/reflex/reflex/reflex.py"", line 181, in _run
    prerequisites.get_compiled_app()
  File ""/Users/masenf/code/reflex-dev/reflex/reflex/utils/prerequisites.py"", line 184, in get_compiled_app
    app_module = get_app(reload=reload)
                 ^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/reflex/reflex/utils/prerequisites.py"", line 161, in get_app
    app = __import__(module, fromlist=(constants.CompileVars.APP,))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/repro-dynamic-route/repro_dynamic_route/repro_dynamic_route.py"", line 24, in <module>
    app.add_page(post, route=""/post/[pid]"")
  File ""/Users/masenf/code/reflex-dev/reflex/reflex/app.py"", line 427, in add_page
    component = self._generate_component(component)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/reflex/reflex/app.py"", line 371, in _generate_component
    return component if isinstance(component, Component) else component()
                                                              ^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/repro-dynamic-route/repro_dynamic_route/repro_dynamic_route.py"", line 18, in post
    rx.heading(State.pid),
               ^^^^^^^^^
AttributeError: type object 'State' has no attribute 'pid'
```","2024-01-24T20:16:50Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","i generally like this change. will try to test it out locally and get it in soon.","2024-02-28T23:12:02Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-07T00:58:50Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-03-07T16:39:45Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-03-07T21:27:39Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2024-03-07T22:24:59Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-03-07T22:25:47Z",false,"APPROVED"
"masenf","COLLABORATOR","did this actually work? i didn't think radix cared about the `as_` prop","2024-01-23T18:35:29Z",false,"COMMENTED"
"masenf","COLLABORATOR","Looks good. Suggest changing `color` to `color_scheme` while you're in here.","2024-01-23T21:48:34Z",false,"DISMISSED"
"masenf","COLLABORATOR","i thought i ticked this 🚢  yesterday. thanks for making the change","2024-01-24T19:36:56Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2024-01-23T15:25:18Z",false,"COMMENTED"
"masenf","COLLABORATOR","Didn't personally test it, but it looks legit. Nice job","2024-01-24T22:01:17Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice!","2024-01-24T20:49:51Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-01-22T20:59:39Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-01-22T19:42:22Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-01-23T21:57:37Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-01-29T00:34:24Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-01-29T20:03:21Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-01-23T00:58:18Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2024-01-23T21:58:13Z",false,"APPROVED"
"masenf","COLLABORATOR","Thanks for the contribution and helping meet user needs.

A couple of suggestions:","2024-01-22T21:54:03Z",false,"CHANGES_REQUESTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-01-22T21:56:55Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-01-22T22:03:58Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-01-22T22:14:45Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-01-22T22:16:11Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-01-22T23:29:45Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-01-22T23:43:30Z",false,"COMMENTED"
"masenf","COLLABORATOR","Looks good to me! Thanks for wrangling the `pyi_generator`, that script can be a pain sometimes.","2024-01-23T00:48:49Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-01-21T21:48:11Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-01-21T22:03:56Z",false,"COMMENTED"
"masenf","COLLABORATOR","I think i fixed the integration test failures, pretty sure we can merge if CI is passing.","2024-01-31T00:05:38Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-01-31T13:03:43Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-01-23T01:16:08Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-01-21T19:54:39Z",false,"APPROVED"
"Alek99","MEMBER","","2024-01-22T23:07:18Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-01-23T21:59:49Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-19T23:16:53Z",false,"APPROVED"
"Alek99","MEMBER","Ok lgtm","2024-01-22T17:32:29Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-19T01:37:13Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-18T20:53:30Z",false,"APPROVED"
"masenf","COLLABORATOR","i like it","2024-01-23T22:03:02Z",false,"COMMENTED"
"masenf","COLLABORATOR","looks good","2024-01-23T22:04:36Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2024-01-24T18:53:40Z",false,"APPROVED"
"tgberkeley","COLLABORATOR","","2024-01-19T01:25:30Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2024-01-19T01:25:58Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2024-01-19T02:08:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-18T20:54:21Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-24T20:38:57Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-18T23:57:55Z",false,"APPROVED"
"masenf","COLLABORATOR","Initial check looks good","2024-01-18T01:11:24Z",false,"APPROVED"
"masenf","COLLABORATOR","the app wrap ordering become order dependent since the test uses priority `50` for the `Text` App Wrap and `ChakraColorModeProvider` is also at priority `50`.

I would probably change the test to use `return {(45, ""Text""): Text.create()}` on line 1254, that way the sorting is deterministic instead of depending on the order the components were added to the tree.","2024-01-18T22:19:07Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2024-01-19T00:30:04Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-01-25T17:58:14Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-01-18T23:24:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-19T00:16:47Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-01-17T00:15:02Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2024-01-17T18:00:28Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-01-19T00:17:42Z",false,"APPROVED"
"masenf","COLLABORATOR","as i'm reading it, this will also result in frontend packages not being installed for `export` and `run --env prod` if the packages have already been installed.

seems the only way to get package installation to occur now is to change something in the app the requires a different set of packages, or re-init the project.","2024-01-17T00:10:22Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-17T01:52:20Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-15T23:06:19Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-01-16T23:54:21Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-12T22:40:23Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-12T22:40:02Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-12T22:39:38Z",false,"APPROVED"
"Alek99","MEMBER","","2024-01-11T19:20:08Z",false,"APPROVED"
"Alek99","MEMBER","","2024-01-11T01:15:53Z",false,"DISMISSED"
"Alek99","MEMBER","","2024-01-11T01:55:52Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-11T22:04:00Z",false,"APPROVED"
"masenf","COLLABORATOR","awesome it's actually faster

need to merge `main` to get it working with the latest reflex-web radix changes","2024-01-10T17:37:25Z",false,"COMMENTED"
"jackie-pc","CONTRIBUTOR","","2024-01-10T18:55:10Z",false,"COMMENTED"
"jackie-pc","CONTRIBUTOR","","2024-01-10T18:56:41Z",false,"COMMENTED"
"masenf","COLLABORATOR","cool!","2024-01-11T23:56:35Z",false,"APPROVED"
"Alek99","MEMBER","","2024-01-11T18:34:14Z",false,"APPROVED"
"masenf","COLLABORATOR","the CI failures are probably due to load on github actions making the race conditions easier to run into.

these changes wouldn't cause the cookie stuff to break.","2024-01-11T19:24:51Z",false,"APPROVED"
"Alek99","MEMBER","","2024-01-09T17:54:14Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-09T17:58:01Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-09T17:53:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-09T00:10:49Z",false,"APPROVED"
"masenf","COLLABORATOR","","2024-01-08T21:34:00Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","With 0.3.8 the list syntax should work with `react_player`. Could you try this out with the latest release?","2024-01-08T21:27:51Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2024-04-09T19:24:03Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","This is great, tested it on Windows and it's much faster than npm","2024-04-11T21:33:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-04T23:14:17Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-01-05T21:44:11Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-01-06T01:45:10Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-03-12T00:50:43Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-03-12T23:05:40Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","tested that existing functionality works. this will be a great extension to our model thanks for adding!","2024-03-13T22:31:02Z",false,"APPROVED"
"masenf","COLLABORATOR","Discovered this potential issue to document while testing `main`","2024-03-14T07:45:14Z",false,"COMMENTED"
"benedikt-bartscher","CONTRIBUTOR","","2024-03-14T19:33:56Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-01-03T23:04:50Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2024-01-03T23:30:42Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-05T19:37:02Z",false,"APPROVED"
"masenf","COLLABORATOR","The sample code in the description should be added as an AppHarness test so we can avoid regressions in this area.

If you need help with that, let me know. Otherwise examples are in the `integration/` folder","2024-01-11T18:06:28Z",false,"COMMENTED"
"masenf","COLLABORATOR","Awesome! thanks for getting the test in 😄 ","2024-01-11T23:48:27Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-03T17:46:06Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for adding!","2024-01-03T19:54:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for adding!

We just need to update `reflex/components/chakra/__init__.py` to include the line

```python
time_picker = TimePicker.create
```

for this to be available in the `rx.` namespace. Could you make that change, and include a usage example of the component that we can use to test it out? ","2024-01-03T19:52:01Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2024-01-06T02:01:41Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-03T19:47:56Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-12-28T08:09:01Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for adding!","2023-12-28T08:07:35Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-12-22T21:11:58Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-12-22T17:58:13Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-12-22T18:01:32Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-12-22T18:21:48Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-01-11T19:58:21Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2024-01-30T23:38:11Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for adding!","2023-12-22T17:39:52Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-12-21T18:37:28Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-12-21T18:42:35Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-12-21T17:49:22Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-12-21T17:50:28Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-12-21T23:58:16Z",false,"APPROVED"
"masenf","COLLABORATOR","@picklelo i'm good bringing this in as-is so we can more easily convert existing reflex code and test it without checking out an alternate branch.

i created REF-1902 to update the TODO link below","2024-02-08T18:45:53Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-12-20T21:38:58Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-12-20T22:46:52Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-12-20T23:30:56Z",false,"COMMENTED"
"masenf","COLLABORATOR","haven't had a chance to run it in detail and play with it yet, but a couple of things stand out.","2023-12-22T00:34:06Z",false,"CHANGES_REQUESTED"
"ElijahAhianyo","COLLABORATOR","","2023-12-22T07:58:27Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-12-22T14:11:03Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-12-22T19:05:59Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-01-02T19:18:06Z",false,"COMMENTED"
"Alek99","MEMBER","","2024-01-03T20:28:53Z",false,"DISMISSED"
"masenf","COLLABORATOR","maybe there's a bug? but lets get this in to unblock the theming work and if a bug arises we can fix it later","2024-01-03T21:55:56Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-12-20T17:58:48Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-12-20T19:52:14Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-12-20T20:25:23Z",false,"APPROVED"
"Lendemor","COLLABORATOR","A few changes needed but I'm glad this PR is finally here 😄 ","2023-12-20T13:49:32Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-12-20T20:33:14Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-12-20T20:38:00Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-12-20T22:33:43Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-12-20T23:42:30Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-12-21T12:04:40Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-12-21T12:44:59Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-12-21T17:51:54Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2024-02-28T01:18:37Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-28T01:34:18Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","After publishing, we should be able to import the component as `from reflex_component import component` (rather than having to do `from reflex_component.component import component` - pretty much move it up to the __init__.py also","2024-02-28T01:39:02Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-02-28T17:26:51Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-02-28T18:45:48Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2024-02-28T19:57:34Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-28T23:01:52Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-28T23:05:32Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-28T23:08:03Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-02-28T23:15:38Z",false,"APPROVED"
"masenf","COLLABORATOR","quick take looks good to me.

we are moving away from chakra, so i'm less concerned about chakra compatibility issues. our light/dark switch for radix is based on `next-themes`, which should work nicely with `darkMode: ""class""`.

will test further when picking up our internal issue https://linear.app/reflex-dev/issue/REF-1444/setting-radix-theme-appearance-prop-to-dark-does-not-work-all-the-time / #2321 

but i think for the time being, we can take this as is and open followup issues to determine what an appropriate default would be for this value and make sure we have some integration tests for it.","2023-12-20T22:59:04Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-12-20T20:36:41Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-01-18T22:17:35Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2024-02-12T19:49:30Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-12-18T23:50:29Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Tested all the components and they work well for me. I think we don't need the slider for this initial version since it is in the Radix themes already: https://www.radix-ui.com/themes/docs/components/slider which we somehow missed. But now we should have all the components we need wrapped","2023-12-21T17:57:47Z",false,"APPROVED"
"alperiox","NONE","Onceki versiyon makine cevirisi gibi gozukuyor acikcasi, su anki hali daha yerel ve anlasilir duruyor.

The previous version seems like a machine translation, to be honest. Currently, it seems more localized and clear.","2023-12-16T13:33:17Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for updating!","2023-12-18T02:34:32Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-12-14T22:59:45Z",false,"APPROVED"
"masenf","COLLABORATOR","docstrings should use the google style like we have elsewhere throughout the library


","2023-12-20T22:55:16Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","looks like a good fix to me","2023-12-14T22:11:36Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-12-14T18:48:48Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-12-15T13:53:19Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-12-18T23:43:45Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-12-14T16:48:17Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-12-15T19:52:00Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Works well for me, will work on updating the main website / examples before we cut this","2023-12-19T00:06:00Z",false,"APPROVED"
"masenf","COLLABORATOR","need to import these names in reflex.components.radix.primitives to make them visible

do you have some sample code? i can't seem to get it working. it says ""TypeError: values.map is not a function This error happened while generating the page. Any console logs will be displayed in the terminal window.""


maybe `value` should take a `list` of `int` like `default_value` does?","2023-12-13T20:27:58Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2023-12-14T12:45:43Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-12-14T12:46:15Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-12-15T02:33:04Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2023-12-18T12:55:59Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-12-14T23:18:11Z",false,"APPROVED"
"Lendemor","COLLABORATOR","Need an example where the primitives render properly even if we are not using any theme.","2023-12-13T17:26:33Z",false,"CHANGES_REQUESTED"
"Alek99","MEMBER","","2023-12-19T01:21:06Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-12-13T20:39:27Z",false,"DISMISSED"
"martinxu9","CONTRIBUTOR","","2023-12-13T20:41:50Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-12-13T20:44:13Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-12-13T21:30:18Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-12-13T22:17:13Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-12-14T00:00:41Z",false,"COMMENTED"
"masenf","COLLABORATOR","sorry, thought this already merged","2023-12-14T22:12:35Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Tested with a couple db apps and everything seems smooth, awesome!","2023-12-13T01:51:29Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","this is great, data frames work in state again!","2023-12-12T22:03:22Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-12-11T19:47:09Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2023-12-11T20:36:41Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-12-19T02:50:11Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-12-07T19:22:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-12-07T02:04:22Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","nice","2023-12-07T02:14:40Z",false,"DISMISSED"
"martinxu9","CONTRIBUTOR","","2023-12-07T18:32:56Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-12-07T19:30:08Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","works well for me","2023-12-08T19:51:30Z",false,"APPROVED"
"martinxu9","CONTRIBUTOR","","2023-12-09T00:16:31Z",false,"APPROVED"
"Alek99","MEMBER","","2023-12-07T00:40:46Z",false,"APPROVED"
"Alek99","MEMBER","","2023-12-06T21:18:27Z",false,"APPROVED"
"Alek99","MEMBER","","2023-12-06T21:02:39Z",false,"APPROVED"
"masenf","COLLABORATOR","Not sure why the redis integration tests are partly failing now, will need to investigate... but the code looks good. Thanks for your contribution!","2023-12-07T00:14:39Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-12-12T18:53:54Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","This is awesome, solves 3 issues in one PR","2023-12-11T21:24:22Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-12-06T17:40:56Z",false,"APPROVED"
"Alek99","MEMBER","Lets change this pr to be on main now that my pr is merged otherwise looks good to me","2023-12-07T00:48:20Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","nice work","2023-12-07T22:05:28Z",false,"APPROVED"
"Alek99","MEMBER","","2023-12-07T22:08:08Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-12-06T16:56:04Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-12-07T22:59:52Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-12-07T23:22:57Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-12-07T23:25:32Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-12-08T17:37:07Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-12-08T17:39:06Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-12-09T01:00:56Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-12-09T05:20:24Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-12-06T01:26:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-12-06T19:28:37Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-12-06T01:14:42Z",false,"APPROVED"
"Alek99","MEMBER","","2023-12-05T23:26:24Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-12-05T00:26:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Works for me now, nice fix","2023-12-05T00:45:03Z",false,"APPROVED"
"martinxu9","CONTRIBUTOR","","2023-12-04T23:29:44Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-12-05T01:05:39Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-12-05T01:13:32Z",false,"APPROVED"
"masenf","COLLABORATOR","Do we really want to create all of those SVG components in reflex? The SVG spec is actually rather large and hairy.

It might be simpler to just take the `<svg>` as an opaque unit and just render the code (similar to the `rx.html` element).","2023-12-02T01:23:40Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-12-01T23:31:45Z",false,"APPROVED"
"masenf","COLLABORATOR","Hmm, actually running this again, I'm not hitting any issue with the code in the PR body.

The fix also doesn't quite look right, because we do want the inner type when iterating over a list.

Is the `type object 'list' has no attribute '__args__'` error only showing up on a specific python version?","2023-12-02T01:10:24Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2023-12-01T19:40:25Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-12-01T19:42:10Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-12-22T20:55:07Z",false,"APPROVED"
"ariwbolton","NONE","","2023-12-01T06:46:07Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-05-28T19:20:59Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2024-05-30T22:50:24Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2024-05-30T22:53:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-12-01T19:45:15Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","fixes the render issue for me","2023-12-01T17:49:53Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-11-30T22:42:42Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-30T23:08:33Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-12-01T00:09:05Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-12-01T17:50:34Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-12-07T00:42:48Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-12-07T00:46:08Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-12-07T00:46:47Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-30T17:59:02Z",false,"APPROVED"
"Alek99","MEMBER","","2023-11-29T22:48:11Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-29T20:56:28Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-29T23:00:35Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Nice, I like this approach","2023-11-30T17:48:18Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice feature","2023-11-28T21:24:32Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-28T01:56:22Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-27T17:38:47Z",false,"APPROVED"
"masenf","COLLABORATOR","i think we should keep `rx.image` pointing to the Chakra image for now, but we should get this out there and switch reflex-web over to use it and do some more battle testing.","2023-11-27T23:39:08Z",false,"COMMENTED"
"masenf","COLLABORATOR","looks good, the image stuff works and serialization of PIL images is still working.

i'm not sure about next-video, but it doesn't seem to be harming anything here, just not sure if it can actually be used.","2023-12-01T20:13:44Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-28T00:59:56Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-26T20:45:43Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-11-24T17:20:04Z",false,"APPROVED"
"masenf","COLLABORATOR","Works for me, and is simple to use.

Consider adding a test case.","2023-11-22T05:34:17Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-11-21T02:01:01Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-11-20T20:14:42Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-11-20T15:31:00Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-11-20T23:20:57Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-11-20T15:10:32Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-11-20T19:12:57Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-11-20T19:33:27Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-11-20T19:33:42Z",false,"APPROVED"
"Alek99","MEMBER","","2023-11-20T06:10:08Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-21T00:17:02Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Left some initial comments - haven't done a thorough review of the logic in component.py yet, will do that on the next pass","2023-11-21T20:46:23Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-21T23:42:53Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","The component code is looking good for me - I think we should change the compile bar back to how it was before. It's a bit intimidating with the size now, I preferred when it reflected the number of pages. We can add a step for the extra pages if needed, but we don't need so many steps","2023-11-22T22:12:14Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-11-27T23:26:22Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome work with this, excited for the speedups 🚀 ","2023-11-28T00:05:12Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-18T00:38:38Z",false,"CHANGES_REQUESTED"
"tgberkeley","COLLABORATOR","","2023-11-20T17:49:12Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2023-11-20T17:55:34Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2023-11-20T17:56:24Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2023-11-20T18:00:02Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-11-20T19:19:11Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2023-11-20T19:22:37Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2023-11-20T19:22:41Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-11-20T23:30:05Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","good catch","2023-11-17T23:22:58Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-11-17T20:24:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-17T20:30:08Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-11-16T20:24:35Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-11-17T17:23:42Z",false,"APPROVED"
"Alek99","MEMBER","","2023-11-16T01:40:34Z",false,"DISMISSED"
"Alek99","MEMBER","","2023-11-16T01:59:42Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-16T23:34:58Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-11-16T17:46:49Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-15T22:46:05Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-15T22:14:21Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-11-15T22:36:51Z",false,"APPROVED"
"masenf","COLLABORATOR","in the future we should bring in the version bump before cutting the release i think... just so the released bits match the tag. as it is now, if i check out tag `v0.3.3`, then the reflex i get is actually marked 0.3.2, which could be confusing as it doesn't match what you get with `pip install reflex==0.3.3`","2023-11-15T19:51:03Z",false,"APPROVED"
"masenf","COLLABORATOR","Is this actually a noticeable difference??","2023-11-15T04:43:46Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-21T00:13:31Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-11-22T16:15:08Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Looks good to me! Needs a rebase and we can merge","2023-11-28T02:12:02Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-11-28T08:04:00Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-14T22:09:52Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-14T20:34:15Z",false,"APPROVED"
"masenf","COLLABORATOR","Seems like a good solution, but would still want to better understand the root cause","2023-11-14T16:32:57Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-14T17:56:47Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-14T18:00:58Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","nice catch","2023-11-14T07:25:48Z",false,"APPROVED"
"martinxu9","CONTRIBUTOR","","2023-11-18T00:10:17Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Code looks good - just wondering if the initial requirements.txt logic creation should be moved back to this repo ","2023-11-28T18:30:54Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-11-28T19:28:32Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-11-28T21:04:39Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-11-28T21:08:39Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Tested a deploy and worked well for me","2023-11-28T23:19:52Z",false,"APPROVED"
"masenf","COLLABORATOR","This is great. I think documenting and maintaining this `rx.el` namespace is going to be good for people who want a truly lightweight app. With no chakra/radix components in use, then they wont be installed at all!

potential conflict with this recent PR: https://github.com/reflex-dev/reflex/pull/2162/commits/e761a049b21878db3e4e0650c912138c4b006480

The `rx.el.element.Element.render` method will still end up accidentally getting `sx` props because they will get added in `_render` and not removed here. I'm thinking that now is probably the time to have `Component` pass `style` as `style` and have `ChakraComponent` pass `style` as `sx`. Then we can stop special casing that here and in the radix tree.","2023-11-14T21:31:27Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-11-20T19:16:48Z",false,"COMMENTED"
"masenf","COLLABORATOR","Looks awesome.

For future work, we still need to get event triggers defined on some of these, but I think we should roll with what is already a big improvement.

--------------

The `Svg` element is essentially a separate XML doc embedded in the HTML, and I don't know how we want to handle that, but as it is, i don't think we will be reverse compiling svg to reflex code anytime soon, nor do i think that's desirable from a perf perspective. We can probably just inline the svg code in the `Svg` element for the reverse compiler in the short term.","2023-11-20T22:26:54Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-14T07:27:34Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks!","2023-11-13T20:58:05Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Should we add a line on how to fork the repo first?","2023-11-16T18:51:54Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-30T20:12:47Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-13T20:52:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-09T19:54:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch!","2023-11-09T16:44:17Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-11-09T01:50:41Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-11-09T02:32:19Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-09T01:51:20Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-11-09T01:51:49Z",false,"COMMENTED"
"tgberkeley","COLLABORATOR","","2023-11-10T01:10:16Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-21T00:15:01Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-21T00:15:24Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-11-14T17:50:59Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-14T19:09:38Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-14T19:22:05Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-14T19:32:36Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-11-15T17:38:10Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","Code works great for me, but left some comments on code style.

I think for any non-trivial function we need to consistently block the code into chunks separated by newlines, where each chunk has a full sentence comment. Not necessarily breaking out into sub functions, but keeping individual function code clean by segmenting it whenever we have conditionals, loops, or pieces of logic, and clearly commenting each of these segments with a comment. Then it can also be easy to  validate of the code is doing what the comment says. As we add more complex logic, it will help keep the code more readable and maintainable.","2023-11-20T06:02:51Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-21T00:18:38Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-21T00:28:01Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-21T00:29:01Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-21T00:29:43Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-21T00:32:24Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-21T00:43:01Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-21T00:47:25Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-21T00:47:52Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-21T00:49:28Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-21T00:59:34Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-21T01:04:06Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-11-21T19:30:15Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-11-21T19:32:31Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-28T00:25:36Z",false,"CHANGES_REQUESTED"
"abulvenz","CONTRIBUTOR","","2023-11-28T10:07:14Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-11-28T12:21:41Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-11-28T12:32:44Z",false,"COMMENTED"
"masenf","COLLABORATOR","a few more small things","2023-11-28T21:15:25Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","Looks good to me!","2023-11-29T08:02:13Z",false,"APPROVED"
"masenf","COLLABORATOR","brilliant","2023-11-08T23:18:18Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-11-14T03:32:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Code looks good - only thing I'm wondering is if we should separate out the benchmark tests from the unit tests. As we add more benchmarks it may be useful  to speed up development with the unit tests and only run the benchmarks at the end.","2023-11-08T21:42:58Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-09T00:19:46Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-11-09T01:40:42Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-07T19:09:41Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Everything works well for me except for the sitemap comment","2023-11-08T20:04:05Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-11-08T20:08:10Z",false,"COMMENTED"
"masenf","COLLABORATOR","Deployed reflex-web to the hosting service with this version of reflex and it did work. But i agree there is something funky about the sitemap generation: https://pcweb-next14.reflex.run/sitemap-0.xml","2023-11-09T00:15:08Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-11-09T12:05:08Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Works great for me! Just some small comments","2023-11-10T20:23:35Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-11-13T12:04:12Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-11-13T12:06:29Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-11-13T13:46:37Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","awesome","2023-11-13T17:52:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks!","2023-11-07T18:58:26Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Works well for me, great job!","2023-11-09T00:21:41Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-11-06T17:06:51Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-11-05T20:22:12Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-11-04T15:08:16Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","I know in the Python code we also rewrite https -> wss somewhere - should we remove that now?","2023-11-06T20:05:11Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-03T23:24:03Z",false,"APPROVED"
"masenf","COLLABORATOR","ah, still draft 😃 ","2023-11-03T23:12:37Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-11-03T23:44:18Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-03T22:53:16Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-11-03T23:10:55Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-03T22:14:19Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-11-03T22:23:16Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-03T17:01:20Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2023-11-03T17:44:02Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-03T17:45:57Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","Code looks good - can we just add some docstrings for the new methods","2023-11-03T19:12:30Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2023-11-03T20:29:10Z",false,"APPROVED"
"masenf","COLLABORATOR","yeah should be easy enough to kill the default template on line 125, technically there is no default template now","2023-11-02T23:07:04Z",false,"COMMENTED"
"masenf","COLLABORATOR","need to add `--template blank` to the docker integration test","2023-11-03T17:36:41Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-03T19:57:42Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-11-03T20:20:16Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-03T20:21:14Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-02T21:35:08Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-11-02T18:58:07Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good - we can also just raise our minimum typer requirement at this point too. The only reason we had it lower was to disable these pretty prints","2023-11-02T18:22:06Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-11-02T17:09:28Z",false,"APPROVED"
"masenf","COLLABORATOR","🚢 ","2023-11-01T22:35:19Z",false,"APPROVED"
"masenf","COLLABORATOR","cool!","2023-11-02T16:56:18Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-11-08T18:26:10Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-01T00:06:16Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-02T21:33:47Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-02T19:22:31Z",false,"APPROVED"
"masenf","COLLABORATOR","Thanks for the fix","2023-10-31T16:52:33Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2023-10-31T17:04:39Z",false,"DISMISSED"
"masenf","COLLABORATOR","Awesome, thanks so much for the contribution","2023-10-31T17:23:09Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-31T16:55:51Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-31T16:17:53Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-31T16:54:54Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-10-31T14:07:43Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-31T16:58:33Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-31T17:16:25Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-11-01T15:30:33Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-01T18:51:16Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-31T09:39:32Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-02T21:59:21Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-11-02T22:15:37Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-11-03T19:13:38Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-10-31T18:09:06Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice!","2023-10-31T20:40:57Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-31T20:37:37Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-11-01T11:17:06Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-10-31T17:00:40Z",false,"APPROVED"
"r0b2g1t","CONTRIBUTOR","","2023-10-28T13:53:29Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-28T18:06:13Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","worked for me!","2023-11-01T19:15:17Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-28T02:15:51Z",false,"APPROVED"
"Alek99","MEMBER","","2023-10-27T23:47:53Z",false,"APPROVED"
"masenf","COLLABORATOR","should we put this in all files?","2023-10-27T23:48:13Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-10-27T23:50:30Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-31T03:44:10Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-27T20:51:53Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-27T20:56:20Z",false,"DISMISSED"
"Alek99","MEMBER","","2023-10-27T21:07:25Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-27T19:42:04Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-10-27T19:49:35Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-27T17:55:57Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","nice fix","2023-10-27T18:20:37Z",false,"APPROVED"
"masenf","COLLABORATOR","this sort of seems like the wrong approach, since `""none""` isn't a valid color scheme according to chakra... but i get it, ship it.","2023-10-27T16:56:01Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-27T18:22:06Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-10-27T16:08:36Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-10-27T16:19:42Z",false,"APPROVED"
"masenf","COLLABORATOR","sidebar doesnt show up at all on mobile now, not clear how to display it, am i missing something?","2023-10-27T18:23:18Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-27T19:29:09Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-10-27T19:31:18Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-10-27T19:36:03Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch!","2023-10-27T15:38:08Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-27T04:40:33Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-27T02:45:16Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Works well for me","2023-10-27T00:22:54Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-10-27T00:54:40Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-26T22:07:15Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-27T03:15:22Z",false,"APPROVED"
"Alek99","MEMBER","I'm not comfortable with this large of a pr so close to the release and calhacks, lets just add the new pyi for the data editor and keep the old pyi for the other files","2023-10-26T19:14:33Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","Looks good, but looks big. I can understand the hesitation to bring this in this close to calhacks.

One other fixup is needed from my previous PR:","2023-10-26T19:30:01Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","nice","2023-11-16T18:23:48Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-26T22:17:01Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-26T19:33:52Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-31T17:19:19Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-11-08T18:56:49Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","Awesome! Just need to fix the default theme and this looks good","2023-11-10T20:34:36Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Need to fix the default style","2023-11-10T20:35:23Z",false,"CHANGES_REQUESTED"
"ElijahAhianyo","COLLABORATOR","","2023-11-11T16:55:06Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","looks good to me!","2023-11-13T20:47:44Z",false,"APPROVED"
"Lendemor","COLLABORATOR","Some small additions/changes, but I love it, should make it much easier to extend later if needed.","2023-10-26T11:32:12Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-10-26T16:15:34Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-10-26T17:06:37Z",false,"APPROVED"
"martinxu9","CONTRIBUTOR","","2023-10-25T23:21:28Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-26T19:18:57Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-10-26T20:16:27Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-26T23:06:14Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-10-27T00:18:25Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-10-25T18:51:22Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-25T18:52:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-26T17:07:06Z",false,"APPROVED"
"Lendemor","COLLABORATOR","I'm not too sure how/why `git status --porcelain` fit in this check, but seems good otherwise.","2023-10-26T16:08:32Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-11-17T23:21:41Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-26T20:16:42Z",false,"COMMENTED"
"bryan-trz","CONTRIBUTOR","","2023-10-27T07:48:04Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","thanks for adding!","2023-11-02T18:23:01Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-25T17:22:55Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-10-26T19:48:04Z",false,"COMMENTED"
"Alek99","MEMBER","Need a way to pass in an icon to the sidebar","2023-10-26T21:48:45Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","real gold 🥇 medal for this one `""li"": lambda value: ListItem.create(value, margin_y=""0.5""),`","2023-10-26T23:02:05Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-10-26T23:04:23Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-10-26T23:12:25Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-27T00:16:12Z",false,"CHANGES_REQUESTED"
"Alek99","MEMBER","","2023-10-27T00:44:35Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-10-27T00:46:15Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-27T00:48:45Z",false,"APPROVED"
"martinxu9","CONTRIBUTOR","","2023-10-24T19:46:46Z",false,"COMMENTED"
"jackie-pc","CONTRIBUTOR","","2023-10-24T20:11:18Z",false,"DISMISSED"
"martinxu9","CONTRIBUTOR","","2023-10-24T20:23:50Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-10-24T22:31:32Z",false,"APPROVED"
"masenf","COLLABORATOR","much simpler approach, very nice","2023-10-24T16:36:12Z",false,"CHANGES_REQUESTED"
"ElijahAhianyo","COLLABORATOR","","2023-10-24T16:51:42Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-24T17:28:25Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice catch - will try to redeploy the lorem app today with @tgberkeley ","2023-10-24T17:44:02Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","looks good to me","2023-10-24T17:35:11Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-24T16:35:40Z",false,"APPROVED"
"masenf","COLLABORATOR","Cool, thanks for contributing","2023-10-23T17:17:02Z",false,"APPROVED"
"Lendemor","COLLABORATOR","A few changes are needed, but I love it, thanks.","2023-10-23T18:53:12Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-10-24T16:38:49Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-10-24T17:16:42Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-10-23T10:49:37Z",false,"APPROVED"
"masenf","COLLABORATOR","This is cool! Would it be possible to set a component var in State now?

The private attr in Component makes me a bit nervous, we should add a test to verify that is actually a per-instance value with no bleed over between instances.","2023-10-22T22:36:35Z",false,"COMMENTED"
"masenf","COLLABORATOR","Good clean up and consolidation of the auth token code. No serious complaints here, but a few comments.","2023-10-23T18:45:31Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-10-23T18:57:40Z",false,"DISMISSED"
"martinxu9","CONTRIBUTOR","","2023-10-23T19:03:31Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-10-23T19:06:05Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-10-24T00:26:11Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-24T16:32:32Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-10-22T14:33:52Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-10-23T13:29:49Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-18T01:13:16Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-11-08T17:49:27Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-08T23:21:14Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-11-09T23:42:21Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome - love the ability to clear forms now","2023-11-10T20:58:51Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-10-23T10:24:50Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-21T03:04:32Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-10-24T21:51:03Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-10-25T18:55:21Z",false,"APPROVED"
"masenf","COLLABORATOR","looks fine from here","2023-10-20T18:38:54Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-23T16:01:35Z",false,"APPROVED"
"jackie-pc","CONTRIBUTOR","","2023-10-23T16:09:17Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","awesome!","2023-11-06T20:08:01Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-20T16:40:16Z",false,"APPROVED"
"Lendemor","COLLABORATOR","Finally :laughing: ","2023-10-19T20:20:15Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-24T21:29:47Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-24T17:44:48Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-10-24T17:52:43Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-10-19T14:02:57Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-19T19:33:04Z",false,"APPROVED"
"masenf","COLLABORATOR","needs comments for each prop so they are nicely rendered in the docs. otherwise, looks great and will come in handy.

i particularly like the `on_change` and `interval`, which opens up options for client-side polling without blocking chain calls or background tasks.","2023-10-20T16:53:43Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-10-23T03:01:40Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-10-18T10:28:31Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-10-18T00:13:54Z",false,"APPROVED"
"tgberkeley","COLLABORATOR","","2023-10-18T00:15:48Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-10-17T22:46:23Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-10-17T22:46:43Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-17T23:05:52Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-10-19T01:58:24Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-19T02:09:02Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2023-10-19T17:13:17Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-10-17T19:56:40Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2023-10-17T23:09:54Z",false,"APPROVED"
"masenf","COLLABORATOR","Awesome, thank you!","2023-10-17T19:30:36Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-10-17T13:45:38Z",false,"DISMISSED"
"masenf","COLLABORATOR","This change is so good. It lets us avoid having to custom-define `dict` in an `rx.Model` to serialize datetime and other complex types.

Just a few suggestions:","2023-10-17T16:46:46Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2023-10-17T17:05:02Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-17T17:14:42Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice","2023-10-17T17:39:46Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-17T16:40:32Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-10-17T18:40:31Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-17T19:16:15Z",false,"CHANGES_REQUESTED"
"ElijahAhianyo","COLLABORATOR","","2023-10-17T23:44:00Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-10-17T23:49:24Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-18T03:10:12Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-18T03:16:40Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-18T03:17:25Z",false,"DISMISSED"
"masenf","COLLABORATOR","With the latest fix in `reflex/testing.py` to accommodate the change to `_state_manager`, this is passing all integration tests. Looks good from my side! ","2023-10-18T04:49:37Z",false,"APPROVED"
"masenf","COLLABORATOR","this is a cool fix 😎 ","2023-10-16T17:29:16Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-10-16T10:55:13Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-17T00:42:54Z",false,"APPROVED"
"masenf","COLLABORATOR","I'm realizing that a consequence of this approach is that we're now sending back all of the router data vars over the websocket with any navigation event. Maybe that's okay, it's certainly more convenient if we need to render these values.","2023-10-16T19:13:28Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-10-13T19:08:26Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-13T19:12:50Z",false,"COMMENTED"
"masenf","COLLABORATOR","I'm less sure about removing `get_cookies` as it is part of the websocket request... but the likelihood of people using this API and getting stale data and not knowing why is pretty high.","2023-10-13T13:36:12Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Should we also link to the relative docs for deprecation warnings? Maybe can be another field we add to `console.deprecate`","2023-10-13T16:21:01Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-12T22:11:37Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","This is great, tested and works well for me. Not sure if we need to set the `deploy_url` though, as it doesn't make sense for it to be localhost","2023-10-13T19:12:03Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-13T19:14:01Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-13T19:15:15Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-10-13T19:55:22Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-10-13T19:59:04Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-12T19:14:33Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Great work, code works well for me!

Just a couple refactoring comments","2023-10-13T19:51:13Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-13T20:45:13Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-10-13T16:31:01Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2023-10-16T10:56:37Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-10-19T16:44:20Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-10-12T09:58:22Z",false,"APPROVED"
"masenf","COLLABORATOR","approve, but lets hold off on merging this until we're really ready to ship... then if some show stopper bug from 0.2.9 pops up, we can still fix it as 0.2.10;

once this goes to `main`, we basically _have_ to ship the breaker 0.3.0","2023-10-11T16:58:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good to me. I don't think there will be many breaking changes because even within `reflex-web` we never accessed these fields, so we should be good","2023-10-12T22:42:42Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-10-13T21:53:47Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-10-10T23:05:40Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-16T18:45:16Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-10-17T15:24:18Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Component works great! Mostly some code style comments","2023-10-18T18:39:20Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-10-18T19:30:02Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-10-18T19:30:51Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Looks good to me!","2023-10-18T20:51:52Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2023-10-18T22:43:38Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-10-18T22:45:40Z",false,"COMMENTED"
"Alek99","MEMBER","Can we change theme -> style for consistency with the rest of the components","2023-10-20T16:58:27Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-26T23:12:12Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome work","2023-10-26T23:17:21Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-17T17:41:29Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-09T18:21:13Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-10-09T18:22:29Z",false,"COMMENTED"
"masenf","COLLABORATOR","```
AttributeError: module 'reflex' has no attribute 'data'
```

😔 ","2023-10-09T18:27:43Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-10-09T18:40:15Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-09T21:23:37Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-10-09T21:28:53Z",false,"COMMENTED"
"masenf","COLLABORATOR","this looks nice, but the code structure needs some rework to maximize developer experience and push people toward more maintainable code.","2023-10-09T21:43:38Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-10-09T21:51:56Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-10-13T09:26:37Z",false,"COMMENTED"
"masenf","COLLABORATOR","this is excellent, looks good and well organized","2023-10-13T20:24:03Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-10-13T21:32:41Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-10-16T03:02:33Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-10-08T18:01:12Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-06T23:03:51Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-10-07T19:06:46Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-10-09T02:33:29Z",false,"APPROVED"
"Alek99","MEMBER","","2023-10-06T20:27:59Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-10-06T17:13:33Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-06T04:00:21Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-10-06T23:14:53Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-10-09T02:09:02Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-05T18:24:56Z",false,"DISMISSED"
"ElijahAhianyo","COLLABORATOR","","2023-10-05T18:42:25Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","Seems good :+1: ","2023-10-05T19:08:30Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-17T17:42:27Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-05T18:12:03Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-10-05T19:49:43Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-05T19:53:41Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-05T17:28:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome, thanks for contributing!","2023-10-05T16:24:05Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-11T19:37:35Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-10-12T15:33:17Z",false,"COMMENTED"
"masenf","COLLABORATOR","This looks great!

I found one spot that I wasn't sure about.","2023-10-13T19:35:43Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-10-16T03:16:30Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-05T19:43:21Z",false,"APPROVED"
"masenf","COLLABORATOR","can we dep `get_local_storage` as well","2023-10-04T18:58:40Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-04T20:30:12Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-04T20:29:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-03T00:42:58Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-02T18:49:44Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-10-02T18:53:42Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-02T18:54:55Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-10-03T00:42:26Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-10-02T18:51:53Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-02T15:20:07Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-31T01:38:42Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-11-15T17:11:25Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-11-15T18:02:02Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-11-16T21:38:17Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-11-16T23:45:14Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-02T18:17:15Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-10-02T18:17:37Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-02T18:18:52Z",false,"COMMENTED"
"masenf","COLLABORATOR","Thanks for your contribution.

I think 30 minutes is a great place to start, and we can adjust as needed.

Would you mind adding these timeouts to the other workflow jobs, like integration tests? I think 30 minutes should be fine for all of them actually.","2023-10-01T16:32:51Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","looks good to me","2023-10-02T16:43:21Z",false,"APPROVED"
"masenf","COLLABORATOR","I pushed a change to get the tests passing, but I'm not sure this is actually what we want, as it seems to break auto-complete in the IDE. Typing `rx.button(` for example no longer shows the correct function/type signatures with this change.","2023-10-01T16:27:15Z",false,"COMMENTED"
"y9rabbito","NONE","Imports the to_snake_case(name), defined in reflex_utils_format, and also delete import of utils","2023-10-02T03:40:09Z",false,"COMMENTED"
"masenf","COLLABORATOR","Thanks for jumping in with a contribution 💯.

I think the idea is sound, but the approach here is not sustainable.

In my experience the proper place to implement this kind of logic is inside the component itself:

https://github.com/reflex-dev/reflex/blob/4f6b3c049be876def1277a72b5880600d5b572d4/reflex/components/datadisplay/datatable.py#L99-L103

Instead of returning the component here, the code should return a cond if the data source comes from a var (if it does NOT come from a var, then there's no reason to wait for state hydration)

```python
data_table_component = super().create(
        *children,
        **props,
    )

state = None
if isinstance(data, Var):
    state = data.state
elif isinstance(columns, Var):
    state = columns.state
if state is not None:
    return Cond(
        getattr(state, constants.CompileVars.IS_HYDRATED),
        data_table_component,
    )

# table does not depend on state, so no cond needed
return data_table_component
```","2023-10-01T16:15:58Z",false,"CHANGES_REQUESTED"
"RyleyGG","NONE","","2023-10-03T04:05:37Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-03T04:25:20Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-30T05:44:18Z",false,"APPROVED"
"Lendemor","COLLABORATOR","Tested it, seems good for me, nice work :+1: ","2023-10-31T18:07:11Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-09-29T23:32:41Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-09-29T23:33:40Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-10-01T17:13:21Z",false,"APPROVED"
"masenf","COLLABORATOR","what is the reason for duplicating the props? is that for documentation purposes? or `.pyi` generation?","2023-09-28T17:02:02Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-09-29T00:29:20Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good once the build is passing","2023-10-03T18:37:58Z",false,"COMMENTED"
"masenf","COLLABORATOR","* need to generate pyi files at some point (but that would make review more challenging)
* is there anything victory had that recharts does not have?
* are there any important breaking changes that victory users need to apply when upgrading?","2023-10-03T19:37:43Z",false,"DISMISSED"
"Alek99","MEMBER","","2023-10-03T21:00:06Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-10-03T21:21:21Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-10-04T21:59:16Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-10-04T22:04:20Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-09-29T00:34:36Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-09-27T18:02:02Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-09-27T20:38:16Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-09-26T17:22:57Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-09-26T12:32:42Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-09-26T17:23:25Z",false,"APPROVED"
"Alek99","MEMBER","lgtm","2023-09-25T23:44:51Z",false,"APPROVED"
"Alek99","MEMBER","This looks good to me. I tested with a couple of different small apps. Also Chakra and Radix themes don't seem to be conflicting on reflex web 👍","2023-10-16T22:29:22Z",false,"APPROVED"
"masenf","COLLABORATOR","I think the namespace classes themselves should be `TitleCase` like you'd expect for a class. but otherwise the categorization and breakdown looks just right.","2023-09-26T17:22:32Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-09-26T17:47:27Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-28T17:29:34Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","works for me","2023-10-20T16:43:39Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-09-27T18:56:44Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-09-24T08:46:26Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-09-22T19:58:49Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-09-22T22:59:00Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch","2023-09-22T00:51:53Z",false,"APPROVED"
"masenf","COLLABORATOR","would be cool to add e2e tests for the new var operations in `integration/test_var_operations.py`.

is this enough to fix #1283 too?","2023-09-21T23:31:08Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-09-21T23:31:54Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-09-21T23:32:53Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-25T22:42:18Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-09-25T22:43:58Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-25T22:53:58Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","sorry for the delay, looks great!","2023-10-02T16:41:32Z",false,"APPROVED"
"Alek99","MEMBER","Tested and works well for me will rebase my other graphing pr on this! 📊","2023-09-24T18:08:42Z",false,"APPROVED"
"masenf","COLLABORATOR","This is nice; great addition","2023-09-21T16:44:47Z",false,"APPROVED"
"tgberkeley","COLLABORATOR","","2023-09-21T00:09:28Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-11-17T18:00:25Z",false,"COMMENTED"
"masenf","COLLABORATOR","state.js:568 `const change_complete = () => addEvents(initial_events())`

needs to change to `const change_complete = () => addEvents([Event('{{state_name}}.{{const.on_load_internal}}'])`

otherwise we're still hydrating on every page load","2023-11-30T01:18:16Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-11-30T15:30:51Z",false,"COMMENTED"
"masenf","COLLABORATOR","Technically this is _my_ PR, so I cannot approve it... but LGTM! 🪨 🚀 ✨ ","2023-11-30T18:34:00Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-11-30T20:21:07Z",false,"APPROVED"
"tgberkeley","COLLABORATOR","","2023-09-21T00:02:29Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-09-20T23:46:42Z",false,"APPROVED"
"Lendemor","COLLABORATOR","Looks good!","2023-09-20T17:49:11Z",false,"APPROVED"
"masenf","COLLABORATOR","overall looks good; i like the additional fields on ImportVar, I think that keeps the API more consistent.","2023-09-20T16:30:32Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2023-09-20T16:34:23Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-20T16:36:55Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-09-20T16:38:21Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-09-20T18:19:02Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-20T21:34:26Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-09-21T10:35:59Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","Shouldn't `tailwind=None` be enough to disable tailwind rather than add a disable field?

Also I was thinking we should remove the base tailwind from package.json and only install it if tailwind is not None. ","2023-09-20T12:08:29Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","Nice!","2023-09-20T16:07:38Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-09-20T16:36:15Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-09-20T19:41:06Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-09-20T19:51:14Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-20T21:32:27Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch","2023-09-19T23:45:13Z",false,"APPROVED"
"Alek99","MEMBER","","2023-09-19T22:52:49Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Code works for me!
* Let's not expose the HTML prop for these components, and just set them internally. That way they won't show up in the docs, etc.
* Can we add some basic tests to make sure the serialization is working","2023-09-19T20:47:05Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Can we add some unit tests for the matplotlib?","2023-09-24T23:01:04Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-09-25T01:26:04Z",false,"COMMENTED"
"masenf","COLLABORATOR","For whatever reason, I'm getting a hydration error when running the sample code... 🤔 ","2023-09-19T06:38:46Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-09-19T16:38:10Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-09-19T19:18:56Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-09-20T01:38:31Z",false,"COMMENTED"
"masenf","COLLABORATOR","one suggestion, but overall i'm good with this.","2023-09-25T18:28:01Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","Agreed with @masenf , can we refactor the repeated type checking logic into a common function to clean things up?","2023-09-25T18:43:20Z",false,"CHANGES_REQUESTED"
"ElijahAhianyo","COLLABORATOR","","2023-09-25T18:53:08Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-09-28T16:30:56Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice fix!","2023-09-19T22:56:34Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-09-16T00:54:50Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2023-09-16T01:05:44Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-09-16T01:05:50Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-09-16T00:30:57Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-09-16T00:35:19Z",false,"APPROVED"
"masenf","COLLABORATOR","This looks awesome!","2023-09-15T18:54:37Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-09-15T19:12:40Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-18T22:22:52Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2023-09-19T15:28:36Z",false,"COMMENTED"
"masenf","COLLABORATOR","Love the new API. This is great!","2023-09-19T23:45:04Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-09-20T01:49:04Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-20T02:44:01Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-09-20T10:33:24Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-09-20T10:35:36Z",false,"COMMENTED"
"masenf","COLLABORATOR","re-approve","2023-09-20T21:35:01Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-09-21T16:47:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Tested and worked for me, nice job! One question: I tried to manually type a number into the box with a decimal and it wouldn't allow me. Were you able to do this, or is this something we need to add?","2023-09-15T16:58:19Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-09-15T03:34:01Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-09-15T20:29:12Z",false,"COMMENTED"
"masenf","COLLABORATOR","killer!","2023-09-15T21:33:08Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-09-16T00:02:35Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-16T00:08:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-09-16T00:18:42Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-09-14T17:28:45Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","working good, first pass of comments mostly related to refactoring into smaller functions","2023-10-19T20:13:20Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-10-20T22:40:34Z",false,"COMMENTED"
"masenf","COLLABORATOR","better to split these up","2023-10-20T23:06:44Z",false,"COMMENTED"
"masenf","COLLABORATOR","Obviously the testing could be improved, but my latest login and deployment flows have been much smoother than before. So i'm going to say this is good to go, and hopefully lets get it in before the PR gets any larger or older 😅.

The output of `reflex deployments list` is kind of smooshed on my skinny terminals, which makes the overlapping columns hard to read.

```console
masenf@minicone reflex % python3.11 -m poetry run reflex deployments list
key                              regions         app_name               
vm_type       cpus    memory_mb  url                                       
envs
-------------------------------  --------------  ---------------------  
----------  ------  -----------  
----------------------------------------------------------  ------
repro-collatz-scatter-teal-wood  ['sjc']         repro_collatz_scatter  
shared-cpu       1         1024  
https://repro-collatz-scatter-teal-wood.dev.reflexcorp.run  []
a-tweet-for-you                  ['sea', 'bos']  repro_twitter_embed    
shared-cpu       1         1024  https://a-tweet-for-you.dev.reflexcorp.run
[]
```

yes my terminal actually looked like that.

making my window a little wider looks better

```console
masenf@minicone reflex % python3.11 -m poetry run reflex deployments list
key                              regions         app_name               vm_type       cpus    memory_mb  url                                                         envs
-------------------------------  --------------  ---------------------  ----------  ------  -----------  ----------------------------------------------------------  ------
repro-collatz-scatter-teal-wood  ['sjc']         repro_collatz_scatter  shared-cpu       1         1024  https://repro-collatz-scatter-teal-wood.dev.reflexcorp.run  []
a-tweet-for-you                  ['sea', 'bos']  repro_twitter_embed    shared-cpu       1         1024  https://a-tweet-for-you.dev.reflexcorp.run                  []
```","2023-10-21T00:22:44Z",false,"DISMISSED"
"martinxu9","CONTRIBUTOR","","2023-10-21T03:24:12Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-10-21T03:29:37Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-10-21T03:30:28Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-10-21T03:33:09Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-10-21T03:33:52Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-10-21T03:40:55Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-10-21T03:42:32Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-10-21T03:43:16Z",false,"COMMENTED"
"masenf","COLLABORATOR","Lgtm","2023-10-21T20:05:48Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-10-21T20:10:34Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-10-21T20:15:37Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-12T20:48:05Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-09-12T19:36:16Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-09-11T22:57:39Z",false,"APPROVED"
"masenf","COLLABORATOR","I'm a little unclear on why this would be preferred over just using a standard link. This seems like more moving parts and harder to deal with error handling.

If I wanted to provide a download link, I would keep the href in a state Var and render a normal `<a>` tag in the frontend.","2023-09-11T17:19:06Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-09-11T17:26:32Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-11T17:27:37Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-09-12T10:59:38Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Code works well for me! Just one suggestion","2023-09-12T18:22:19Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-09-13T11:17:33Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","awesome, great work","2023-09-13T16:55:24Z",false,"APPROVED"
"masenf","COLLABORATOR","Sorry didn't re-review, but the merged implementation is killer, thanks for making the changes @Lendemor ","2023-09-13T16:57:25Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome, thanks for adding!","2023-09-10T05:42:51Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","good catch!","2023-09-08T21:51:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome!","2023-09-08T18:37:52Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-09-08T18:41:28Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2023-09-08T20:26:50Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","nice fix!","2023-09-08T21:53:28Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-09-08T10:26:17Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-09-07T22:33:29Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","tested in `python:3.11` on debian 12 host","2023-09-07T22:40:38Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-09-07T22:15:22Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-09-07T17:27:06Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-09-07T18:56:15Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-07T17:02:56Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-09-07T17:38:00Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-09-07T18:43:46Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-09-07T19:55:29Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-09-06T21:48:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-09-06T22:49:03Z",false,"APPROVED"
"masenf","COLLABORATOR","🙌 ","2023-09-06T22:51:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-09-07T23:11:25Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-09-06T21:02:07Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","I think we wanted to sort the props in the docstrings if possible","2023-09-06T19:14:50Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-09-06T22:17:56Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-09-07T07:23:10Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-09-14T18:31:56Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-09-15T11:54:22Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-09-15T12:44:39Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-09-15T14:24:26Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","looks good to me!","2023-09-15T20:18:11Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-09-06T17:26:06Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-09-06T05:42:37Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-06T05:45:58Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-09-06T06:27:33Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-09-06T05:08:19Z",false,"CHANGES_REQUESTED"
"jdoss","CONTRIBUTOR","","2023-09-06T05:19:02Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-06T19:04:24Z",false,"APPROVED"
"masenf","COLLABORATOR","Just a suggestion.","2023-09-05T16:56:52Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-09-05T17:34:52Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-06T20:53:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome","2023-09-05T20:43:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice, this solution ended up very clean :) ","2023-09-18T20:50:27Z",false,"APPROVED"
"masenf","COLLABORATOR","Looks good; just need to run pre-commit and fix the is_datetime docstring.","2023-09-04T00:26:00Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-09-05T05:28:55Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-09-05T21:31:15Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-09-01T19:08:42Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-09-01T19:10:54Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-01T19:17:59Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-09-01T20:07:32Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-09-01T16:53:40Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-09-06T17:46:38Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-31T21:57:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good - we should add some unit tests in a follow up","2023-08-31T22:30:02Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for adding the unit tests :) ","2023-08-31T22:46:28Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-09-04T21:31:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-31T16:47:21Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice fix!","2023-08-31T16:49:46Z",false,"APPROVED"
"masenf","COLLABORATOR","This looks really great! Just a couple of comments, and will discuss with the team about the walrus operator.","2023-08-31T11:20:03Z",false,"CHANGES_REQUESTED"
"nevdelap","CONTRIBUTOR","","2023-08-31T21:34:27Z",false,"COMMENTED"
"nevdelap","CONTRIBUTOR","","2023-08-31T21:34:35Z",false,"COMMENTED"
"nevdelap","CONTRIBUTOR","","2023-08-31T21:34:42Z",false,"COMMENTED"
"nevdelap","CONTRIBUTOR","","2023-08-31T21:34:49Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-31T23:24:24Z",false,"APPROVED"
"masenf","COLLABORATOR","sorry the CI was flaky, looks good!","2023-09-01T23:16:02Z",false,"APPROVED"
"masenf","COLLABORATOR","Wow thanks for catching this. I'm gonna blame copilot for this one 😅","2023-08-31T03:22:43Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-08-31T16:50:21Z",false,"APPROVED"
"masenf","COLLABORATOR","doesn't seem to work for me; am i doing something wrong?

```python
import datetime

import reflex as rx


class State(rx.State):
    when: datetime.datetime = datetime.datetime.now(datetime.timezone.utc)


def index() -> rx.Component:
    return rx.heading(State.when)


app = rx.App()
app.add_page(index)
app.compile()
```

```console
Traceback (most recent call last):
  File ""/Users/masenf/code/reflex-dev/VENV-dev/bin/reflex"", line 8, in <module>
    sys.exit(cli())
             ^^^^^
  File ""/Users/masenf/code/reflex-dev/VENV-dev/lib/python3.11/site-packages/typer/main.py"", line 214, in __call__
    return get_command(self)(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/VENV-dev/lib/python3.11/site-packages/click/core.py"", line 1157, in __call__
    return self.main(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/VENV-dev/lib/python3.11/site-packages/click/core.py"", line 1078, in main
    rv = self.invoke(ctx)
         ^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/VENV-dev/lib/python3.11/site-packages/click/core.py"", line 1688, in invoke
    return _process_result(sub_ctx.command.invoke(sub_ctx))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/VENV-dev/lib/python3.11/site-packages/click/core.py"", line 1434, in invoke
    return ctx.invoke(self.callback, **ctx.params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/VENV-dev/lib/python3.11/site-packages/click/core.py"", line 783, in invoke
    return __callback(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/VENV-dev/lib/python3.11/site-packages/typer/main.py"", line 532, in wrapper
    return callback(**use_params)  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/reflex/reflex/reflex.py"", line 144, in run
    prerequisites.get_app()
  File ""/Users/masenf/code/reflex-dev/reflex/reflex/utils/prerequisites.py"", line 109, in get_app
    return __import__(module, fromlist=(constants.APP_VAR,))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/repro-datetime-state/repro_datetime_state/repro_datetime_state.py"", line 16, in <module>
    app.compile()
  File ""/Users/masenf/code/reflex-dev/reflex/reflex/app.py"", line 547, in compile
    compile_results.append(compiler.compile_contexts(self.state))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/reflex/reflex/compiler/compiler.py"", line 215, in compile_contexts
    return output_path, _compile_contexts(state)
                        ^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/reflex/reflex/compiler/compiler.py"", line 83, in _compile_contexts
    return templates.CONTEXT.render(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/VENV-dev/lib/python3.11/site-packages/jinja2/environment.py"", line 1301, in render
    self.environment.handle_exception()
  File ""/Users/masenf/code/reflex-dev/VENV-dev/lib/python3.11/site-packages/jinja2/environment.py"", line 936, in handle_exception
    raise rewrite_traceback_stack(source=source)
  File ""/Users/masenf/code/reflex-dev/reflex/reflex/.templates/jinja/web/utils/context.js.jinja2"", line 4, in top-level template code
    export const initialState = {{ initial_state|json_dumps }}
    ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Users/masenf/code/reflex-dev/reflex/reflex/utils/format.py"", line 575, in json_dumps
    return json.dumps(obj, ensure_ascii=False, default=list)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/__init__.py"", line 238, in dumps
    **kw).encode(obj)
          ^^^^^^^^^^^
  File ""/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py"", line 200, in encode
    chunks = self.iterencode(o, _one_shot=True)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py"", line 258, in iterencode
    return _iterencode(o, 0)
           ^^^^^^^^^^^^^^^^^
TypeError: 'datetime.datetime' object is not iterable
```","2023-08-31T12:04:28Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-31T12:12:09Z",false,"CHANGES_REQUESTED"
"wassafshahzad","CONTRIBUTOR","","2023-08-31T14:45:03Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-08-30T19:46:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-30T18:23:32Z",false,"APPROVED"
"masenf","COLLABORATOR","good to me!","2023-08-30T16:24:44Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-09-01T19:59:32Z",false,"APPROVED"
"masenf","COLLABORATOR","Any plans to also make upper case letters work? That seems to come up about every 2-3 weeks on discord.","2023-08-30T16:58:22Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-09-06T18:16:53Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Looks good! I think we just need to update the integration tests in integration/test_dynamic_routes.py","2023-09-07T19:07:03Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-09-07T22:28:35Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-09-07T22:50:51Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","looks good!","2023-09-07T23:14:04Z",false,"APPROVED"
"masenf","COLLABORATOR","So what is our strategy for these files? Will they committed or generated during the build/release process?

I also noticed that the event triggers are not generated, but we probably do want those to show up in the auto-complete list.","2023-08-29T23:21:07Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-29T23:37:48Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-08-30T10:54:45Z",false,"COMMENTED"
"masenf","COLLABORATOR","excellent","2023-08-31T20:13:44Z",false,"APPROVED"
"masenf","COLLABORATOR","Thanks for catching and fixing 🙏 ","2023-08-29T01:08:29Z",false,"APPROVED"
"masenf","COLLABORATOR","i don't think this is a viable long-term solution","2023-08-29T03:32:03Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-08-31T23:17:19Z",false,"APPROVED"
"masenf","COLLABORATOR","i'd suggest updating the integration tests `integration/test_upload.py` to ensure this functionality will not accidentally regress in the future.","2023-08-28T23:01:35Z",false,"DISMISSED"
"masenf","COLLABORATOR","awesome thanks!","2023-08-29T00:14:50Z",false,"APPROVED"
"masenf","COLLABORATOR","this breaks `tests/test_utils.py::test_node_install_unix` on M1 mac platform (i'm assuming github runners are x64).

suggest parametrizing and monkeypatching the platform call for this test case.","2023-08-28T21:36:32Z",false,"CHANGES_REQUESTED"
"realFranco","NONE","","2023-08-29T00:53:11Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-29T00:54:29Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-29T19:33:15Z",false,"APPROVED"
"realFranco","NONE","","2023-08-29T19:46:17Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-29T20:14:49Z",false,"COMMENTED"
"ltm920716","NONE","","2023-09-27T09:07:05Z",false,"COMMENTED"
"ltm920716","NONE","","2023-09-27T10:14:03Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-27T20:19:59Z",false,"COMMENTED"
"ltm920716","NONE","","2023-09-28T02:45:03Z",false,"COMMENTED"
"ltm920716","NONE","","2023-09-28T09:24:43Z",false,"COMMENTED"
"masenf","COLLABORATOR","this needs to still support tailwind plugins, like `@tailwindcss/typography`

this should also point users toward the new NoRender import option, incase they were using it to wrap components that had other, optional deps that were being listed here","2023-08-28T19:14:12Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","nice cleanup!","2023-09-01T20:04:55Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-04T02:38:48Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-09-05T09:57:43Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-09-05T09:59:43Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-01T21:26:57Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome, this ended up being very clean :) ","2023-09-05T23:21:35Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for updating!","2023-08-30T16:48:11Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-25T23:08:23Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for adding!","2023-08-25T21:11:24Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-25T18:33:19Z",false,"CHANGES_REQUESTED"
"martinxu9","CONTRIBUTOR","","2023-08-25T18:40:49Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-08-25T20:23:28Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-08-28T21:27:59Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-08-28T21:28:10Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-28T21:54:46Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-25T18:35:56Z",false,"COMMENTED"
"danik292","CONTRIBUTOR","","2023-08-26T14:04:21Z",false,"COMMENTED"
"danik292","CONTRIBUTOR","","2023-08-28T07:20:23Z",false,"COMMENTED"
"danik292","CONTRIBUTOR","","2023-08-28T07:21:03Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-28T07:26:54Z",false,"COMMENTED"
"danik292","CONTRIBUTOR","","2023-08-28T07:28:22Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome, working really well for me! I think the `async with self` syntax is nice. I didn't review the `state.py` file yet, will add comments to that","2023-09-01T19:56:53Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-01T22:04:15Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-15T03:51:32Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-15T03:52:33Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Code works well for me!

Was discussing with @Alek99 about the API and maybe we the `async with self` is not the most obvious syntax. What do you think about making it something like `async with self.get_latest()` or something like that? We can discuss more offline.","2023-09-18T22:34:02Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-18T23:24:15Z",false,"COMMENTED"
"masenf","COLLABORATOR","~Further testing has revealed that this sort of breaks yielding updates in normal event handlers. Need to write a test case and investigate.~

Fixed and test case written ✔️ ","2023-09-19T15:07:08Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome!!","2023-09-21T18:41:33Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-09-21T20:09:17Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Nice, this approach is much cleaner!","2023-08-30T16:41:50Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-08-30T17:18:57Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Looks good, just a couple comments","2023-09-06T18:09:19Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome, thanks for adding the extensive tests also. Should we remove the bitwise operator before merging?","2023-09-12T18:15:40Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","great work, looks good to me","2023-09-12T22:57:22Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for adding - but I don't think this change is necessary. Is there some issue you ran into that you needed this?","2023-08-24T18:54:57Z",false,"COMMENTED"
"nevdelap","CONTRIBUTOR","","2023-08-24T23:40:16Z",false,"COMMENTED"
"nevdelap","CONTRIBUTOR","","2023-08-25T00:02:21Z",false,"COMMENTED"
"masenf","COLLABORATOR","Bummer; but it happens","2023-08-23T23:46:04Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-08-24T00:15:40Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-23T23:28:57Z",false,"APPROVED"
"masenf","COLLABORATOR","just a comment for your consideration. otherwise looks good to me.","2023-08-23T23:38:24Z",false,"DISMISSED"
"masenf","COLLABORATOR","✅ ","2023-08-24T00:16:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Somehow this is still compiling when I run `reflex run --env prod --backend-only`","2023-08-25T16:55:34Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","What's the reason we can't apply this to backend only in dev mode also?

Also, should we print a message similar to ""Your backend is running at <backend_url>""?

We can add those in a follow up if necessary.","2023-08-25T20:23:57Z",false,"APPROVED"
"martinxu9","CONTRIBUTOR","","2023-08-22T21:04:24Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-22T22:26:15Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-08-22T23:10:41Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-08-23T00:07:08Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-22T16:56:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Just saw the original ","2023-08-22T17:00:13Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-22T17:01:31Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-22T17:40:20Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","This seems to break the message printed on ctrl+c about the Reflex app stopping","2023-08-23T22:50:38Z",false,"COMMENTED"
"masenf","COLLABORATOR","I changed the `signal.signal` handler to `atexit.register` and it seems to work more reliably for printing the message.","2023-08-23T23:20:16Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Looks good to me!","2023-08-23T23:52:46Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","good catch","2023-08-23T22:33:48Z",false,"APPROVED"
"masenf","COLLABORATOR","🚀 ","2023-08-21T21:54:03Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-21T19:35:50Z",false,"CHANGES_REQUESTED"
"martinxu9","CONTRIBUTOR","","2023-08-21T19:58:33Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-08-21T20:00:11Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-21T20:07:30Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-08-21T20:48:01Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-08-21T21:11:25Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-21T21:25:01Z",false,"APPROVED"
"danik292","CONTRIBUTOR","","2023-08-22T06:42:31Z",false,"APPROVED"
"Lendemor","COLLABORATOR","Looks good to me.","2023-08-23T16:55:03Z",false,"APPROVED"
"masenf","COLLABORATOR","can you also add

* `Text` and `Center` as invalid children of `Text`
* `Tr` as the only valid child of `Thead`, `Tbody`, and `Tfoot`
* `TableCaption`, `Thead`, `Tbody`, and `Tfoot` as the only valid children of `Table`

This should help us reduce incidence of hydrations errors from silly mistakes","2023-08-23T19:18:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good! Some comments but I don't think they're critical, we can come back to them in a follow up","2023-08-23T22:55:07Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-23T22:56:16Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-08-21T14:27:17Z",false,"APPROVED"
"masenf","COLLABORATOR","we still want to respect `debounce_timeout` if the caller provides it; it just shouldn't be part of the actual props for the component, since it is only recognized by the `DebounceInput`","2023-08-21T17:22:45Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","> reqested chenges done

can you apply similar change to the `TextArea` as well 🙏 

Definitely appreciate the quick response, this was one of two things blocking our release today!","2023-08-21T17:52:49Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","@danik292 i just had to push the change here, this issue is blocking the release of 0.2.5 so we need to just get it in.","2023-08-21T21:33:54Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-21T21:43:32Z",false,"APPROVED"
"masenf","COLLABORATOR","Thank you for your contribution! 🙌 ","2023-08-21T17:11:07Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice!","2023-08-25T20:28:49Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Works great for me, some minor comments.

I think we should replace the `on_load` handler with this once it's merged, and deprecate that way. One less thing to handle in the hydration. (Or are there any limitations to that?)","2023-08-23T23:38:52Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-23T23:40:02Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-23T23:41:37Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-23T23:43:58Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-08-30T16:50:04Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-21T18:30:26Z",false,"APPROVED"
"Lendemor","COLLABORATOR","Looks nice, good job!","2023-08-21T19:48:52Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-08-30T19:38:09Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-30T19:39:21Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-08-30T19:43:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice!","2023-08-18T23:58:28Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-19T00:54:29Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-08-20T21:14:10Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-20T23:51:46Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-21T04:44:56Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-08-21T16:51:20Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Should we also print their entire config? `console.debug(get_config().json())`? Could be useful","2023-08-18T21:37:45Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","sweet!","2023-08-18T22:02:27Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-18T19:56:22Z",false,"APPROVED"
"masenf","COLLABORATOR","🙏 ","2023-08-18T18:38:13Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-08-18T19:26:33Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-18T17:17:49Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-08-18T17:19:51Z",false,"APPROVED"
"wassafshahzad","CONTRIBUTOR","","2023-08-18T01:49:12Z",false,"COMMENTED"
"masenf","COLLABORATOR","Very nice. Thanks for your contribution!","2023-08-18T02:53:44Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Works for me!

As a follow up - should we clear the current `selected_files` when the user finishes an upload?","2023-08-18T20:11:12Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-17T23:21:05Z",false,"CHANGES_REQUESTED"
"martinxu9","CONTRIBUTOR","","2023-08-17T23:38:28Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-08-17T23:46:41Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-08-17T23:47:29Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-08-17T23:48:34Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-08-18T00:00:02Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-18T00:07:48Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-08-18T00:14:26Z",false,"COMMENTED"
"martinxu9","CONTRIBUTOR","","2023-08-18T00:18:50Z",false,"COMMENTED"
"masenf","COLLABORATOR","🚢 ","2023-08-18T02:55:51Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-17T20:35:06Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-17T20:32:49Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome, great fix!","2023-08-17T16:44:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-16T19:57:23Z",false,"APPROVED"
"masenf","COLLABORATOR","i don't see anywhere that version pinning is being handled; is that pushed to a future PR?

are we planning to take this for 0.2.5?","2023-08-18T19:45:37Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-08-24T16:42:14Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-08-24T18:25:20Z",false,"COMMENTED"
"masenf","COLLABORATOR","Found the race condition; will push updated commit.","2023-08-31T18:25:14Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome, working well for me!","2023-08-31T19:51:12Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-08-31T20:07:28Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-23T21:43:38Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","Functionality works great on my Mac :) just some small comments","2023-08-23T23:21:36Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-08-24T14:56:22Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-08-24T15:10:56Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-24T16:10:48Z",false,"COMMENTED"
"jackie-pc","CONTRIBUTOR","","2023-08-24T16:47:30Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-24T16:49:15Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-08-24T18:17:09Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-24T18:20:38Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-08-24T22:35:56Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-24T23:14:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-16T07:52:57Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-16T06:42:27Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-16T06:40:40Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","This is so nice! Everything works for me, and the page outputs are much cleaner 😄 ","2023-08-17T16:52:29Z",false,"APPROVED"
"masenf","COLLABORATOR","The main thing that makes me nervous here is dropping support for previously-recognized env vars, like `API_URL` and `FRONTEND_PORT`/`BACKEND_PORT`. This will break my new docker-example and the path forward for these isn't super clear (tell user to add `api_url=os.environ.get(""API_URL"")` to their `rxconfig.py`? what if they want the default if `API_URL` isn't defined? Does passing `None` give you the default or break things?). 

I think for the next release we should have a compat function in `Config.__init__` that recognizes the old env vars from `reflex.constants` and throws up a deprecation warning so users have time to adjust.

> Additional frontend packages to install. (TODO: these can be inferred from the imports)

🙌  i'm so stoked for this!","2023-08-15T00:13:01Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-18T17:38:04Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2023-08-18T20:37:04Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-18T20:54:03Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","This is awesome! Just some small questions to make sure I'm understanding the changes right","2023-08-15T01:01:37Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-08-15T01:02:27Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-15T16:20:21Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-15T16:20:56Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-15T16:23:11Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR"," 🎊 🚀 ","2023-08-15T22:16:15Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice update, mostly formatting comments","2023-08-13T02:42:30Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-08-13T02:51:57Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-08-13T02:57:23Z",false,"APPROVED"
"masenf","COLLABORATOR","excellent.","2023-08-14T17:52:12Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-12T00:53:08Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-12T00:53:47Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-11T21:58:53Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-08-15T06:20:26Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-11T20:35:09Z",false,"APPROVED"
"masenf","COLLABORATOR","thanks for your contribution! 🙌 ","2023-08-11T20:34:33Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-11T20:29:49Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-10T20:21:08Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-08-10T21:50:32Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-14T17:58:35Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-18T19:10:52Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","looks good, just nits we can clean up in a follow up","2023-08-18T19:59:55Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-12T01:39:39Z",false,"COMMENTED"
"masenf","COLLABORATOR","it does actually work on my windows VM though and it looks nice!

![image](https://github.com/reflex-dev/reflex/assets/1524005/aa58e6e3-0587-4ac7-af9c-5cc5f7336813)
","2023-08-14T22:47:41Z",false,"CHANGES_REQUESTED"
"ElijahAhianyo","COLLABORATOR","","2023-08-15T14:03:47Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","code looks good to me","2023-08-17T18:19:04Z",false,"APPROVED"
"masenf","COLLABORATOR","🚢 ","2023-08-17T18:21:43Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch!","2023-08-10T16:24:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks!","2023-08-10T16:43:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Code looks good, just need to add more comments explaining some of the logic so down the line we remember why we needed these changes","2023-08-10T03:56:04Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","tested and works great!","2023-08-10T16:53:52Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-10T03:48:19Z",false,"APPROVED"
"masenf","COLLABORATOR","approve once CI is passing","2023-08-14T17:56:33Z",false,"DISMISSED"
"ElijahAhianyo","COLLABORATOR","","2023-08-14T20:11:04Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-14T23:18:39Z",false,"DISMISSED"
"masenf","COLLABORATOR","","2023-08-14T23:19:14Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-08-15T14:12:33Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Looks good to me, I'll rebase my config PR on top of this","2023-08-16T00:36:25Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-08-10T17:15:46Z",false,"APPROVED"
"Alek99","MEMBER","","2023-08-13T02:57:35Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice fix","2023-08-09T00:11:10Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice changes, looks like we need to just fix the unit tests ","2023-08-10T03:58:47Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","looks good just one comment","2023-08-10T16:56:36Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","lgtm","2023-08-10T19:47:17Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","I think we should keep the `/ping` endpoint for now. Also, does this mean we can remove the `event_namespace` from the config now?","2023-08-17T20:36:41Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-08-30T16:33:42Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-30T17:21:00Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-08-08T10:50:05Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-08T13:30:18Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-08-08T16:32:37Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","nice!","2023-08-10T16:47:05Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-08-10T16:49:07Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-08-10T16:56:10Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-08-10T16:56:50Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-08-10T18:21:38Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome!","2023-08-07T21:45:37Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-07T21:46:44Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-08-07T21:46:58Z",false,"APPROVED"
"masenf","COLLABORATOR","Thanks for your contribution! It looks good, just please run `pre-commit` to get the formatting and linters happy and we will take the PR.","2023-08-07T17:43:00Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-08-09T01:07:32Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome!","2023-08-10T16:58:49Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-07T18:50:29Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-05T17:03:04Z",false,"COMMENTED"
"masenf","COLLABORATOR","This doesn't seem to work for me

`rx.html(""<h1>foo</h1><h2>bar</h2>"")` is formatted like 
<img width=""142"" alt=""image"" src=""https://github.com/reflex-dev/reflex/assets/1524005/b23a1829-aea9-495d-9381-659ca72b65fd"">

I think the problem here isn't about wrapping the tag, but more about how the styles are applied.

If i use that same snippet against reflex 0.2.3, but uncheck the CSS properties, it renders as you'd expect

<img width=""758"" alt=""image"" src=""https://github.com/reflex-dev/reflex/assets/1524005/f6a80de9-1c1c-4299-905f-2a68cb84e452"">
<img width=""348"" alt=""image"" src=""https://github.com/reflex-dev/reflex/assets/1524005/0841bbf4-7084-4ae7-bb17-b0f8a88afbd6"">

For the framework, we would need a more general solution that works for arbitrary HTML instead of special casing where the child string starts and ends with the same tag.","2023-08-05T17:07:37Z",false,"CHANGES_REQUESTED"
"Alek99","MEMBER","","2023-08-05T00:04:30Z",false,"APPROVED"
"masenf","COLLABORATOR",":+1:
","2023-08-04T19:28:02Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-14T18:31:51Z",false,"COMMENTED"
"masenf","COLLABORATOR","Thanks for the feedback.","2023-08-14T23:27:12Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-08-15T01:14:42Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-08-15T01:14:59Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-05T17:32:48Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-03T21:26:28Z",false,"APPROVED"
"jackie-pc","CONTRIBUTOR","","2023-08-02T23:36:35Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-03T16:53:15Z",false,"DISMISSED"
"jackie-pc","CONTRIBUTOR","","2023-08-03T17:23:06Z",false,"COMMENTED"
"jackie-pc","CONTRIBUTOR","","2023-08-03T17:43:31Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-03T18:41:15Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","@andrewbantly  Thanks for taking this up. Your implementation seems to wrap an icon component in a button component, while this may work it doesnt give the desired outcome aesthetically.  The goal is to use the provided `iconButton` component chakra gives. If you look in the rendered js output (`.web/pages/index.js`), your implementation renders as :
```js
<button ariaLabel=""send email"" icon=""email"">
  <EmailIcon/>
```
as opposed to :
```js
<IconButton
  colorScheme='blue'
  aria-label='Search database'
  icon={<SearchIcon />}
/>
```
You'd also realize that the icon prop takes in a component(could be an icon component). We want to achieve the same. Currently, it takes in a string value, this should be modified to take a component instead. Feel free to reach out if you have any questions.","2023-08-03T14:57:36Z",false,"CHANGES_REQUESTED"
"ElijahAhianyo","COLLABORATOR","","2023-08-02T16:53:53Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-02T17:34:00Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-03T18:42:59Z",false,"APPROVED"
"masenf","COLLABORATOR","makes sense to me; we need to leave the reset vars dirty so they are sent in the next state update","2023-08-02T13:49:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-02T18:01:40Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-01T23:16:57Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-02T00:46:39Z",false,"APPROVED"
"masenf","COLLABORATOR","yeah, killing processes is hard, especially when they fork.

here's what i'm doing in the `AppHarness` to handle it for reference https://github.com/reflex-dev/reflex/blob/fb7e2b6a0caccd47135a7fec074d90659fdbe928/reflex/testing.py#L227-L246

but i think what you're doing here is fine as well.","2023-08-01T22:05:34Z",false,"APPROVED"
"masenf","COLLABORATOR","do we also need to subclass `rx.Config`? or can we just instantiate it

```python
config = rx.Config(
    app_name=""{{ app_name }}"",
)
```","2023-08-01T20:21:03Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-01T19:04:33Z",false,"APPROVED"
"masenf","COLLABORATOR","Can we close this one for now, and re-pick this up in a different way as part of ""Immutable Components""? REF-1343, REF-1344","2023-11-30T18:36:28Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-08-01T03:34:48Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-03T19:20:28Z",false,"CHANGES_REQUESTED"
"danik292","CONTRIBUTOR","","2023-08-05T18:54:17Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-05T19:25:16Z",false,"APPROVED"
"masenf","COLLABORATOR","there's still something not quite right, i can look into it next week

```
  File ""/home/runner/work/reflex/reflex/reflex-web/pcweb/components/sidebar.py"", line 249, in sidebar_leaf
    rx.link(
  File ""/home/runner/work/reflex/reflex/reflex/components/navigation/link.py"", line 51, in create
    raise ValueError(""Invalid href passed in Link. Expected a 'str' for href."")
ValueError: Invalid href passed in Link. Expected a 'str' for href.
```

https://github.com/reflex-dev/reflex-web/blob/455e9b29587ff830081fcf9c78c18522f9034c42/pcweb/components/sidebar.py#L249-L252

It looks like `href` can also be a `Var`, not just a str.

you might try changing line 50 to be something like `if href and not isinstance(href, (str, Var)):`","2023-08-05T19:28:26Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2023-08-07T18:28:07Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-07T19:01:07Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-08-07T19:18:21Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-08-07T21:27:30Z",false,"APPROVED"
"masenf","COLLABORATOR","funny i also had to make a similar change for my other PR w.r.t. `Exit(1)`: https://github.com/reflex-dev/reflex/pull/1478/commits/f8c0b9c7a7067bd6d5808f4b294b26c5bf7343c5","2023-08-01T00:07:43Z",false,"DISMISSED"
"Alek99","MEMBER","✅","2023-08-01T00:45:33Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-01T03:36:58Z",false,"APPROVED"
"masenf","COLLABORATOR","~looks like this already merged, so~ for your consideration","2023-07-31T19:15:23Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-07-31T19:22:36Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-31T19:37:35Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-07-31T19:45:18Z",false,"APPROVED"
"jackie-pc","CONTRIBUTOR","","2023-08-01T19:19:02Z",false,"COMMENTED"
"jackie-pc","CONTRIBUTOR","🚢 it!","2023-08-01T23:08:08Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-08-02T13:33:33Z",false,"APPROVED"
"masenf","COLLABORATOR","thanks for fixing","2023-07-31T15:57:20Z",false,"APPROVED"
"masenf","COLLABORATOR","![Screenshot 2023-07-31 at 9 11 52 AM](https://github.com/reflex-dev/reflex/assets/1524005/824fe2aa-6d4c-416d-8ca5-674ff3c6ed35)

up to 48x48 👍 ","2023-07-31T16:12:42Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-07-31T16:26:37Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-07-31T18:28:40Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-07-31T18:28:49Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-07-31T03:41:14Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome","2023-07-31T03:56:38Z",false,"APPROVED"
"Alek99","MEMBER","Lgtm tested and different levels work

(Looks like pytest isn't passing)","2023-07-30T00:11:18Z",false,"DISMISSED"
"Alek99","MEMBER","Pytest","2023-07-30T00:14:07Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-07-31T02:37:09Z",false,"COMMENTED"
"Alek99","MEMBER","✅","2023-07-31T02:55:37Z",false,"APPROVED"
"jackie-pc","CONTRIBUTOR","","2023-07-31T16:58:45Z",false,"COMMENTED"
"masenf","COLLABORATOR","ship it broken! 🚢 💥","2023-08-01T17:41:37Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-08-01T18:33:29Z",false,"APPROVED"
"jackie-pc","CONTRIBUTOR","","2023-07-28T22:26:36Z",false,"COMMENTED"
"jackie-pc","CONTRIBUTOR","","2023-07-28T22:27:08Z",false,"COMMENTED"
"jackie-pc","CONTRIBUTOR","","2023-07-28T22:29:44Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-07-28T23:08:05Z",false,"COMMENTED"
"jackie-pc","CONTRIBUTOR","","2023-07-28T23:17:32Z",false,"DISMISSED"
"Alek99","MEMBER","","2023-07-29T00:51:54Z",false,"APPROVED"
"jackie-pc","CONTRIBUTOR","","2023-07-28T22:37:14Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","awesome, looks good","2023-07-28T23:36:11Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","lgtm","2023-07-28T22:39:47Z",false,"APPROVED"
"Alek99","MEMBER","lgtm","2023-07-28T23:21:39Z",false,"APPROVED"
"Lendemor","COLLABORATOR","lgtm","2023-07-28T19:30:07Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-07-28T18:14:46Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","looks good!","2023-07-28T18:18:23Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-07-28T18:11:30Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good, just some nits we can clean up in a follow up","2023-07-27T20:48:50Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","Nice","2023-07-27T13:28:23Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice improvement","2023-07-26T22:45:12Z",false,"APPROVED"
"Lendemor","COLLABORATOR","lgtm","2023-07-27T19:37:52Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-07-27T18:39:15Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-07-27T22:15:06Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-07-27T22:17:58Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-07-27T22:18:49Z",false,"DISMISSED"
"Lendemor","COLLABORATOR","","2023-07-27T23:33:30Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice fix","2023-07-25T16:49:41Z",false,"APPROVED"
"Alek99","MEMBER","Looks good now, I'll make the follow up issue for list formatting ","2023-07-25T19:40:25Z",false,"APPROVED"
"masenf","COLLABORATOR","i'm running into some issues just running the config tests:

```console
poetry run pytest tests/test_config.py
```

This seems to expose some assumptions in the proposed change that certain variables will be set external (and other tests apparently do set them, but we cannot rely on this always being the case).

I also wrote an additional test case that sets values on the config, and then reads them from a subprocess, none of these are passing with this change:

```python
def get_config_subprocess(key) -> Any:
    """"""Subprocess function for use with multiprocessing.
    
    Args:
        key: The config key to look up.
        
    Returns:
        The value of the config key.""""""
    return getattr(get_config(), key)


@pytest.mark.parametrize(
    (""config_key"", ""config_value""),
    [
        (""username"", ""foo""),
        (""telemetry_enabled"", False),
        (""api_url"", ""https://foo.bar.baz""),
        (""timeout"", 42),
    ],
)
def test_config_subprocess(config_key, config_value):
    """"""Test that config values set in parent process are recognized in child process.
    
    Args:
        config_key: the key to set on Config
        config_value: the value to set on Config (should be same in subprocess)
    """"""

    # set the value in the parent process
    setattr(get_config(), config_key, config_value)
    with multiprocessing.Pool() as pool:
        # it should be the same in the child process
        assert pool.apply(get_config_subprocess, args=(config_key,)) == config_value
```

The config refactor needs to generally support setting any (serializable) config value in the main process and then having that value readable automatically in a subprocess.

I'll be on vacation the next week, but I'll try to keep some attention on this PR. Thanks for submitting.","2023-07-24T20:32:32Z",false,"CHANGES_REQUESTED"
"SlamChillz","CONTRIBUTOR","","2023-07-25T01:01:12Z",false,"COMMENTED"
"SlamChillz","CONTRIBUTOR","","2023-07-25T01:06:42Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","thanks!","2023-07-22T23:07:18Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","This is awesome!, With a few tweaks I got it working on my Mac also. I will merge this later this weekend and include my follow-on. ","2023-07-23T01:38:52Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Nice, I will add a follow up to enable on Mac also. I also created #1407 to clean up where we store the dependencies, let me know what you think.","2023-07-23T03:15:25Z",false,"DISMISSED"
"ElijahAhianyo","COLLABORATOR","","2023-07-24T11:49:17Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","I think you just need to run `black` to format the code, we can merge this in then!","2023-07-25T00:55:57Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-07-25T02:45:16Z",false,"APPROVED"
"Alek99","MEMBER","⑴🔥","2023-07-22T03:03:27Z",false,"APPROVED"
"Alek99","MEMBER","","2023-07-21T18:55:41Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice, thanks for fixing","2023-07-21T18:22:32Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","much cleaner now","2023-07-21T18:45:25Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-07-21T18:44:25Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-07-21T18:46:41Z",false,"APPROVED"
"masenf","COLLABORATOR","🚢 ","2023-07-20T19:53:00Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-07-20T19:53:59Z",false,"COMMENTED"
"masenf","COLLABORATOR","integrate me!","2023-07-20T19:57:55Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good, just some minor comments","2023-07-20T16:12:17Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","awesome, looks good","2023-07-28T23:40:00Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-07-20T19:15:37Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-07-21T18:24:22Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Sorry for the delay on this one, looks good. In a follow up, should we rename `rx.debounce_input` to `rx.debounce` and have it work with other components such as slider also?","2023-07-31T19:16:31Z",false,"APPROVED"
"Alek99","MEMBER","Waiting for changes as discussed ","2023-07-19T23:49:32Z",false,"DISMISSED"
"Alek99","MEMBER","This works for me.

- Note we need to add in the docs if you want a sitemap url a deploy_url needs to be provided.","2023-07-20T00:50:44Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Code looks good, just wondering what the best way for the user to configure this would be. I'm thinking we should have this enabled by default, and let them turn it off.","2023-07-31T19:21:57Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-08-29T01:04:06Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-08-29T01:43:36Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-08-29T01:43:56Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","nice catch - do we need to fix this in any other areas? I know we call setState elsewhere also","2023-07-20T01:02:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice feature","2023-07-20T00:57:06Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-07-19T18:12:58Z",false,"CHANGES_REQUESTED"
"masenf","COLLABORATOR","","2023-07-19T18:14:57Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-07-19T18:16:22Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-19T18:38:25Z",false,"APPROVED"
"masenf","COLLABORATOR","thanks for your contribution 🙏 we will merge it for 0.2.2 since 0.2.1 is about to release today and has already been thoroughly tested.","2023-07-19T19:32:17Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-07-19T19:42:15Z",false,"COMMENTED"
"SlamChillz","CONTRIBUTOR","","2023-07-19T20:26:58Z",false,"COMMENTED"
"SlamChillz","CONTRIBUTOR","","2023-07-19T20:28:42Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-19T20:51:43Z",false,"COMMENTED"
"masenf","COLLABORATOR","approving again to trigger integration test workflows","2023-07-19T20:54:12Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for the cleanup","2023-07-18T19:40:42Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-07-18T17:16:39Z",false,"CHANGES_REQUESTED"
"ElijahAhianyo","COLLABORATOR","","2023-07-18T17:37:27Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-18T18:00:06Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-07-18T19:55:05Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-18T19:58:25Z",false,"COMMENTED"
"masenf","COLLABORATOR","🙌 Awesome @ElijahAhianyo","2023-07-20T16:17:31Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","awesome, this was a clean way to make the tests work","2023-07-21T18:42:31Z",false,"APPROVED"
"masenf","COLLABORATOR","Seems like the `if types.is_dataframe(type(self.data)):` section isn't really doing anything anymore? is it still necessary?

Also the `if isinstance(self.columns, Var):` seems like it would always be true if `self.data` is a dataframe, and overwrite the `self.columns` assignment being made on line 104.

I think nested the conditionals might improve readability:

```python
if isinstance(self.data, Var)
    if types.is_dataframe(self.data.type_):
        ...
    else:
        ...
        if isinstance(self.columns, Var):
            ...
```

admittedly i'm unfamiliar with this code, but it doesn't look quite right to me, even if it does work, i think it could be simplified.
","2023-07-18T19:09:52Z",false,"COMMENTED"
"masenf","COLLABORATOR","much nicer! 🎉 ","2023-07-20T16:10:37Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","lgtm","2023-07-18T05:44:22Z",false,"APPROVED"
"Alek99","MEMBER","","2023-07-18T05:44:57Z",false,"DISMISSED"
"Alek99","MEMBER","👍","2023-07-18T05:54:40Z",false,"DISMISSED"
"Alek99","MEMBER","","2023-07-18T06:04:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good, just a comment on formatting the props","2023-07-17T23:39:27Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-18T00:08:29Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-18T00:08:53Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-18T16:43:30Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","looks good to me","2023-07-19T01:16:08Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-07-17T17:36:57Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-07-17T18:10:14Z",false,"APPROVED"
"masenf","COLLABORATOR","I don't understand why these heading tags are given hardcoded weird colors... 🤔

The intention of #1283 is to allow the user to pass arbitrary styles for each element rendered as markdown. There should be some processing of a user-supplied style dict that maps the styles onto each component to be rendered.

User should be able to supply a dict like

```python
rx.markdown(
    markdown_content,
    markdown_style={
          ""h1"": { ""color"": ""red"" },
          ""h2"": { ""color"": ""blue"" },
          ""codeInline"": { ""background"": ""grey"" },
    },
)
```","2023-07-17T21:09:07Z",false,"CHANGES_REQUESTED"
"Alek99","MEMBER","🔥","2023-07-17T04:20:46Z",false,"APPROVED"
"Alek99","MEMBER","","2023-07-17T18:26:17Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-07-17T18:30:50Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-07-15T21:33:24Z",false,"COMMENTED"
"quietpigeon","CONTRIBUTOR","","2023-07-16T02:59:46Z",false,"COMMENTED"
"quietpigeon","CONTRIBUTOR","","2023-07-16T04:57:10Z",false,"COMMENTED"
"FHU-yezi","CONTRIBUTOR","","2023-07-16T13:54:18Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-16T17:25:37Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-17T02:59:33Z",false,"APPROVED"
"masenf","COLLABORATOR","re-approving to see if the integration tests can pass now","2023-07-17T18:21:05Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for adding!","2023-07-17T18:55:47Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-07-13T20:39:03Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-07-14T10:43:42Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-17T17:10:51Z",false,"APPROVED"
"masenf","COLLABORATOR","Anything else on this one?","2023-07-18T19:22:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-07-13T22:39:44Z",false,"APPROVED"
"Alek99","MEMBER","","2023-07-13T00:09:16Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-07-13T23:02:10Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-07-13T23:14:43Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-14T00:23:19Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-14T00:24:39Z",false,"COMMENTED"
"siddhantgoel","CONTRIBUTOR","","2023-07-14T09:39:38Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-14T18:08:55Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-14T18:09:22Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-14T22:57:42Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-14T22:58:20Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-14T22:58:50Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-14T22:59:40Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-14T23:00:48Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-14T23:01:32Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-15T21:15:16Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome work, tested with a few migrations and worked well for me.

Just one comment about potentially adding a custom error message / warning. We can add it in a follow up","2023-07-17T23:11:35Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-07-17T23:16:31Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-07-17T23:20:52Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-07-19T19:41:32Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","lgtm","2023-07-12T22:33:03Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-07-13T19:45:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome, thanks for adding all the unit tests too","2023-07-13T22:38:42Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice! We can apply debouncing to slider also, I think those are the only two components that really need it (maybe color-picker if we bring that to the core). This test harness is great","2023-07-12T22:42:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-07-11T21:00:14Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-11T22:55:54Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-11T22:58:29Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-11T23:00:02Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-12T17:40:46Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-12T19:22:41Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","awesome, tested this with the debounce PR and it works great","2023-07-12T22:39:53Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","lgtm","2023-07-13T22:36:43Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","looks good to me","2023-07-12T22:15:51Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good to me!","2023-07-12T16:13:13Z",false,"APPROVED"
"danik292","CONTRIBUTOR","","2023-07-12T19:36:13Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-07-12T22:47:09Z",false,"COMMENTED"
"masenf","COLLABORATOR","what is the use case for turning this off? i'm trying to understand who would use this setting
","2023-07-10T17:59:35Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-13T18:12:34Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","looks great!","2023-07-07T14:42:56Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-07-06T22:45:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-07-06T12:52:46Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch","2023-07-06T12:53:13Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-07-05T20:45:17Z",false,"COMMENTED"
"masenf","COLLABORATOR","my concern currently is that a large upload could block UI interactivity if other events cannot be processed until the upload is complete.

secondary concern is that the b64 -> websocket -> b64 -> disk is not optimized like nginx or other proxy servers are at efficiently getting the data to disk without extra slow memory copies and processing steps.

more robust performance characterization is needed","2023-07-06T05:17:18Z",false,"COMMENTED"
"Alek99","MEMBER","👍","2023-07-05T23:01:26Z",false,"APPROVED"
"masenf","COLLABORATOR","Thanks for your contribution 🎉 ","2023-07-05T16:55:11Z",false,"APPROVED"
"Alek99","MEMBER","lgtm","2023-07-05T22:46:31Z",false,"APPROVED"
"masenf","COLLABORATOR","i'm hesitating on this for a few reasons:

* suggesting either `pip` or `poetry` to install the dependencies may be wrong, depending on the project. Shouldn't we suggest installing the `reflex[redis]` or `reflex[plotly]` extras instead?
* duplication on the import checking; i would prefer some kind of utility function that we can call to have the ""X is not installed, do Y to install X"" in one place instead of scattered throughout the codebase

Otherwise i think we can take this in, since plotly and redis functionality are currently not core to any built in workflow. If you're using them, then you would know about it and can adjust accordingly.","2023-07-18T19:17:27Z",false,"CHANGES_REQUESTED"
"Alek99","MEMBER","👍","2023-07-05T23:01:55Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-07-05T23:02:11Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good - some places we are missing capitalization. You can replace Pynecone with Reflex first and then pynecone with reflex","2023-07-01T04:25:43Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-07-05T18:06:36Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-06-30T22:00:58Z",false,"APPROVED"
"Alek99","MEMBER","👍","2023-06-30T20:11:30Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-06-30T15:40:20Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","thanks for the updates!","2023-06-30T16:35:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-06-29T19:09:39Z",false,"APPROVED"
"masenf","COLLABORATOR","excellent. have you audited any other places in the code where we're introducing race conditions like this for no reason?","2023-06-29T19:09:44Z",false,"APPROVED"
"Alek99","MEMBER","lgtm","2023-06-29T22:58:50Z",false,"APPROVED"
"masenf","COLLABORATOR","works for me; thanks!","2023-06-28T23:11:07Z",false,"APPROVED"
"Alek99","MEMBER","Good catch","2023-06-29T23:00:51Z",false,"APPROVED"
"allComputableThings","NONE","","2023-06-28T22:17:00Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-06-28T22:32:15Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch, we should add a comment describing why this line is necessary so we don't forget in the future","2023-06-30T01:46:33Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-06-30T21:17:12Z",false,"APPROVED"
"Alek99","MEMBER","Nice just put it into google translate to check but looks good to me","2023-06-29T22:59:49Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch","2023-06-27T20:02:45Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch!","2023-06-27T00:03:05Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","I think you need to run `poetry install` to update the lock file","2023-06-27T00:05:58Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-06-27T01:30:06Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for the clean up!","2023-06-26T21:32:52Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice!","2023-06-27T20:07:35Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for the cleanup! Agreed that these should become optional dependencies.

We need to test that the package will still work without these installed. I believe for example in `utils/format.py` we import plotly at the top, so importing that entire module will fail now.

We can maybe move the imports for plotly and redid to the parts of the code where they are actually used, so users who don't need them won't hit the imports.

Also looks like we need to rebase since we updated a dependency lately.","2023-06-27T20:02:14Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Great work, thanks for adding this!

We will also need to add a line in `reflex/components/__init__.py` for the shorthand initializer.

Could you post an example app using the component to test if it works?","2023-06-27T20:06:56Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-06-25T23:59:41Z",false,"APPROVED"
"Alek99","MEMBER","🚀","2023-06-25T23:26:36Z",false,"APPROVED"
"Lendemor","COLLABORATOR","Looks good to me.","2023-06-23T19:15:18Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-06-22T21:24:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-06-23T18:46:21Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-06-23T19:56:47Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","great catch! we will soon abstract this all out so we don't have to repeat the logic twice","2023-06-23T18:36:07Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","just a formatting comment","2023-06-21T20:12:26Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-06-21T20:31:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice! just some small comments","2023-06-23T18:35:14Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","looks good, just one question we can discuss offline if we need to update ","2023-06-27T19:57:33Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","looks good to me!","2023-06-27T21:49:12Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-06-27T21:08:45Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","looks good to me","2023-06-28T18:54:33Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","sweet","2023-06-20T21:51:30Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","lgtm","2023-06-20T15:33:49Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-06-19T21:50:07Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-06-19T21:44:20Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-06-19T21:10:31Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-06-16T19:59:21Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Works well for me","2023-06-16T20:07:51Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-06-16T18:15:44Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-06-16T18:19:16Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome work","2023-06-16T20:36:20Z",false,"APPROVED"
"Alek99","MEMBER","👍","2023-06-16T06:40:47Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-06-15T22:34:30Z",false,"COMMENTED"
"ozeranskii","CONTRIBUTOR","","2023-06-15T22:36:42Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-06-16T01:05:11Z",false,"COMMENTED"
"ozeranskii","CONTRIBUTOR","","2023-06-16T03:26:02Z",false,"COMMENTED"
"sheldonchiu","CONTRIBUTOR","","2023-06-16T13:17:39Z",false,"COMMENTED"
"ozeranskii","CONTRIBUTOR","","2023-06-16T15:41:52Z",false,"COMMENTED"
"ozeranskii","CONTRIBUTOR","","2023-09-19T13:40:27Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-19T14:19:02Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-09-21T20:11:52Z",false,"COMMENTED"
"ozeranskii","CONTRIBUTOR","","2023-10-02T15:32:08Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-06-15T13:39:53Z",false,"CHANGES_REQUESTED"
"ozeranskii","CONTRIBUTOR","","2023-06-15T13:46:19Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","looks good","2023-06-15T13:54:59Z",false,"APPROVED"
"milochen0418","CONTRIBUTOR","","2023-06-13T05:39:51Z",false,"APPROVED"
"milochen0418","CONTRIBUTOR","","2023-06-13T05:44:32Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice!","2023-06-13T18:14:28Z",false,"APPROVED"
"Alek99","MEMBER","","2023-06-10T01:45:43Z",false,"APPROVED"
"Lendemor","COLLABORATOR","Lgtm","2023-06-09T19:11:06Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-06-09T18:16:57Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome, I was seeing this warning everyone I ran pcweb, nice to get it fixed","2023-06-09T16:34:25Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-06-09T17:40:25Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-06-09T17:55:07Z",false,"APPROVED"
"Alek99","MEMBER","Works for me now","2023-06-09T18:35:25Z",false,"APPROVED"
"Alek99","MEMBER","🔐","2023-06-09T00:40:08Z",false,"APPROVED"
"Lendemor","COLLABORATOR","I think I prefer this method over #1170 ","2023-06-08T18:03:16Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","deleted code is the best code","2023-06-09T16:36:18Z",false,"APPROVED"
"Lendemor","COLLABORATOR","Looks good to me.","2023-06-08T17:51:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice","2023-06-09T17:55:35Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome","2023-06-07T18:46:52Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for fixing","2023-06-07T18:43:45Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","Nice catch!","2023-06-07T16:14:47Z",false,"APPROVED"
"Lendemor","COLLABORATOR","Looks good to me.","2023-06-09T16:37:33Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","lgtm","2023-06-09T16:37:37Z",false,"APPROVED"
"Alek99","MEMBER","Tested works well 👍","2023-06-07T03:26:44Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice job getting this working","2023-06-17T02:29:23Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-06-06T19:25:40Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-06-06T19:25:41Z",false,"APPROVED"
"masenf","COLLABORATOR","it needs to be really clear that the download files are on the backend server (port 8080 unless changed).

there should be a component that makes it easy to root-relative link to a downloadable file, by dereferencing the `api_url` config value. as it is now, there's no reliable way for the frontend to link to a downloadable file.

it might be nicer to leverage the `static_files` feature of `FastAPI`.","2023-06-07T01:38:30Z",false,"CHANGES_REQUESTED"
"TaiJuWu","CONTRIBUTOR","","2023-06-07T03:17:57Z",false,"COMMENTED"
"TaiJuWu","CONTRIBUTOR","","2023-06-07T03:18:21Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-06-07T03:51:16Z",false,"COMMENTED"
"TaiJuWu","CONTRIBUTOR","","2023-06-08T03:36:44Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-06-07T18:49:38Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-06-06T16:58:42Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-06-05T21:27:21Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice work, just a couple comments. Can you also add an example in the description to show how to use the component? Also sent you a DM about the internship 🙂 ","2023-06-06T03:54:19Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","great work, the example app looks good to me!","2023-06-06T18:57:45Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice fix, works for me","2023-06-06T03:16:59Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-06-05T18:24:14Z",false,"APPROVED"
"milochen0418","CONTRIBUTOR","Nice feature, 
It's very useful and convenient for pynecone application developers to use. ","2023-06-04T17:51:46Z",false,"APPROVED"
"Alek99","MEMBER","Nice! Love the default template aswell","2023-06-12T06:13:51Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","lgtm","2023-06-05T00:52:14Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome, thanks for fixing!","2023-06-05T00:09:32Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch, thanks!","2023-06-03T20:44:23Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","I think this will work, but may break the functionality of the convenience initializer. I think we can just rename the argument name in the `create` method","2023-06-05T00:51:51Z",false,"COMMENTED"
"jiangyangcreate","CONTRIBUTOR","","2023-06-05T01:01:15Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-06-06T18:53:10Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-06-07T19:25:27Z",false,"COMMENTED"
"jiangyangcreate","CONTRIBUTOR","","2023-06-08T03:13:13Z",false,"COMMENTED"
"masenf","COLLABORATOR","Not sure why these would need to be separate components when the same effect can be achieved by passing `pc.input(..., type_=""datetime-local"")`","2023-06-04T00:10:38Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Thanks for adding! Just some comments about naming to keep it consistent with the other components","2023-06-05T00:29:22Z",false,"COMMENTED"
"aidanjrauscher","CONTRIBUTOR","","2023-06-05T01:12:17Z",false,"COMMENTED"
"aidanjrauscher","CONTRIBUTOR","","2023-06-05T01:12:40Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","thanks for the update!","2023-06-05T01:13:02Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks!","2023-06-02T19:17:46Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for fixing","2023-06-02T19:19:08Z",false,"APPROVED"
"Lendemor","COLLABORATOR","Seems fine to me.","2023-06-09T15:54:02Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-06-18T01:22:04Z",false,"APPROVED"
"Alek99","MEMBER","👍","2023-06-01T01:11:11Z",false,"APPROVED"
"masenf","COLLABORATOR","would it be possible to implement this as a component that we could add and style to fit our app? the current implementation seems kind of hard coded and fixed
","2023-05-31T23:14:49Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome! I think we just need to update it so the warning is written in Pynecone so it can be customized","2023-06-01T02:53:45Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","nice! just a couple leftover statements to cleanup","2023-06-02T19:22:33Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-06-02T22:43:56Z",false,"COMMENTED"
"masenf","COLLABORATOR","Having _less_ special case rendering logic in the jinja templates will increase maintainability and customization from the python side. Where possible, the client side state (not the State dict, but any other `useState` hook call) should be exposed to the pynecone compiler via `BaseVar` declarations that can be used like any other State var when constructing the frontend page.","2023-06-04T00:27:18Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2023-06-05T18:34:52Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","awesome","2023-06-05T20:55:05Z",false,"APPROVED"
"TaiJuWu","CONTRIBUTOR","","2023-05-31T12:13:14Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome! We can also rename the folder to `docs/zh` if we want to add any additional docs in there in the future.","2023-06-01T00:16:40Z",false,"APPROVED"
"Alek99","MEMBER","","2023-06-02T04:20:43Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome work, just some minor comments and I think some updates to the unit tests to get the build passing","2023-05-30T19:56:40Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Looks good! We can merge this in and do a follow up for the comments","2023-06-01T00:22:00Z",false,"APPROVED"
"Alek99","MEMBER","👍","2023-05-30T05:08:01Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome, works well for me! Eventually we should replace this with a Pynecone UI with all the same features so we can customize it more.

Just some minor comments about cleaning up the code, and I think we need to rebase as we modified the `pyproject.toml` in the main branch. Then we can merge this in.","2023-06-01T02:58:51Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","awesome, thanks for adding this!","2023-06-06T18:49:17Z",false,"APPROVED"
"TaiJuWu","CONTRIBUTOR","","2023-05-28T04:16:30Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome works well for me! Just some minor comments","2023-05-30T04:23:00Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-05-31T04:13:47Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome LGTM. Can you update the PR/commit message before merging","2023-06-01T00:13:48Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","sweet, great work!","2023-06-01T00:47:05Z",false,"APPROVED"
"chrisrosner","NONE","Is there any reason to make this optional? Seems like it'd be a sensible default.","2023-05-27T07:00:00Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","Looks good to me.","2023-05-26T23:44:59Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice, this seems to work for me! Is this good to merge?","2023-05-30T04:05:08Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Looks good to me, great work!","2023-05-30T19:59:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-05-26T17:52:42Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice!","2023-05-26T18:43:29Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","This doesn't seem to work for me - I think the compiled code ends up being the same. Do you have an example app to test this?","2023-05-30T04:02:37Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","Tested with pcweb, looks good to me.","2023-05-26T17:21:16Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","lgtm","2023-05-25T14:55:45Z",false,"APPROVED"
"Alek99","MEMBER","","2023-05-24T23:04:28Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice!","2023-05-26T18:29:31Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-05-24T19:19:26Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","lgtm","2023-05-25T18:38:44Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice addition","2023-05-24T19:44:17Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","sweet thanks for the update","2023-05-24T19:43:14Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","tested this and it works for me.","2023-05-24T15:17:08Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice!","2023-05-30T04:32:07Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-05-31T04:35:40Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-05-24T00:45:11Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome thank you!","2023-05-22T20:46:40Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice work! In a follow-up we need to add comments for all the props","2023-05-22T20:54:32Z",false,"APPROVED"
"TaiJuWu","CONTRIBUTOR","","2023-05-22T21:04:21Z",false,"COMMENTED"
"TaiJuWu","CONTRIBUTOR","","2023-05-22T21:04:59Z",false,"COMMENTED"
"Alek99","MEMBER","Nice thanks","2023-05-19T05:56:45Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome, tested and works well!","2023-05-18T19:39:03Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good! Just need to run the linters, see the bottom here; https://github.com/pynecone-io/pynecone/blob/main/CONTRIBUTING.md","2023-05-18T18:16:29Z",false,"COMMENTED"
"Unknownsentinel193","CONTRIBUTOR","","2023-05-18T18:27:38Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Great work!","2023-05-22T20:49:20Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for this change!

I think we don't need the `.env` inside the component files anymore. We can import it in `state.js` instead so that file will have all the constants. Currently we are passing in the constants to the state.js files which is why we needed it here, but we can remove that now.","2023-05-18T18:31:00Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","awesome, thanks for this update!","2023-05-19T16:58:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","sweet!","2023-05-18T04:26:47Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-05-18T04:46:08Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-05-18T19:22:04Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-05-18T19:28:59Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Great work! Wasn't sure how to add to this so I opened a new branch with some fixes that make it work: #1044

You can base your PR on that - once this is cleaned up I'm thinking we make this the default `pc.select` component since it's much better than the current one.","2023-05-18T01:41:24Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Thanks for adding this, this is a huge improvement over the default one. Just a couple typing issues to get the build passing for Python < 3.9 and then we can merge this","2023-05-23T19:04:53Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","awesome!","2023-05-24T19:42:42Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-05-17T08:14:46Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","thanks for fixing","2023-05-17T17:03:31Z",false,"APPROVED"
"r0b2g1t","CONTRIBUTOR","","2023-05-17T09:10:41Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","Thanks for pointing this out","2023-05-17T14:39:26Z",false,"APPROVED"
"Alek99","MEMBER","","2023-05-17T00:02:25Z",false,"APPROVED"
"Alek99","MEMBER","Tested works for me","2023-05-16T19:27:50Z",false,"APPROVED"
"Alek99","MEMBER","","2023-05-16T18:23:40Z",false,"APPROVED"
"Alek99","MEMBER","👍","2023-05-16T18:37:54Z",false,"DISMISSED"
"Alek99","MEMBER","","2023-05-16T18:52:22Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","sweet! thanks for adding more tests too","2023-05-17T03:32:46Z",false,"APPROVED"
"Alek99","MEMBER","👍","2023-05-16T04:03:58Z",false,"APPROVED"
"Lendemor","COLLABORATOR","","2023-05-15T21:15:19Z",false,"COMMENTED"
"iron3oxide","CONTRIBUTOR","","2023-05-15T21:20:50Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","thanks for adding!","2023-05-18T00:10:26Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome!","2023-05-17T23:05:21Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice!

We can technically remove it from the template completely, since in the Config class we set the default value already. I included it there originally so that it was clear you could override it since it was the first field we added to the config.","2023-05-15T01:59:13Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","good call, thanks for adding","2023-05-15T01:54:41Z",false,"APPROVED"
"Alek99","MEMBER","","2023-05-12T20:49:17Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch!","2023-05-12T20:40:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Tested it and works great - thanks for the fix!","2023-05-12T23:58:13Z",false,"APPROVED"
"Alek99","MEMBER","","2023-05-12T07:04:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Left some comments - have some ideas on how we can simplify things let's discuss tomorrow","2023-05-11T23:53:53Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-05-12T20:50:36Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-05-12T21:14:46Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome! Some nits that we can do in a follow up","2023-05-12T23:39:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice!","2023-05-11T23:54:35Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks for the fix!","2023-05-12T23:36:54Z",false,"APPROVED"
"Alek99","MEMBER","lgtm","2023-05-11T06:18:14Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good, this will be an awesome feature! Had one suggestion to potentially simplify in a follow up.

Also - do you think we should update the API to be `pc.var(cache=True)` rather than introducing a new variable? It may require some fancy Python checks since we should still support `pc.var` rather than converting those to `pc.var()`.","2023-05-12T00:40:25Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-05-12T01:08:19Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-05-10T17:07:04Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","I think we had that originally so that it's clear these are bash commands, but I think it will still be clear","2023-05-10T08:00:58Z",false,"APPROVED"
"masenf","COLLABORATOR","Much easier to copy paste without the dollar signs","2023-05-10T15:12:25Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for adding! I think we just need the prop, shouldn't need to modify any methods.","2023-05-10T07:56:56Z",false,"CHANGES_REQUESTED"
"Unknownsentinel193","CONTRIBUTOR","","2023-05-10T14:51:20Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","The PR should be good once we remove the function, we just need to add the new field 🙂 ","2023-05-10T17:43:15Z",false,"COMMENTED"
"Unknownsentinel193","CONTRIBUTOR","Changed the function, similar to the radio component","2023-05-11T16:13:36Z",false,"COMMENTED"
"Unknownsentinel193","CONTRIBUTOR","Please tell if this is the correct thing. I am a beginner, I apologize for extending this small issue","2023-05-11T16:14:41Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome, thanks for the updates!","2023-05-11T16:51:46Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","Just had to run the linter","2023-05-12T00:01:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-05-10T02:34:30Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice, thanks for rebasing and updating!","2023-05-10T08:04:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice","2023-05-10T02:38:25Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch!","2023-05-09T21:36:23Z",false,"APPROVED"
"Alek99","MEMBER","Lgtm we will add back following the computed var fixes","2023-05-09T00:54:38Z",false,"APPROVED"
"Alek99","MEMBER","","2023-05-08T21:12:45Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-05-08T16:54:15Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","Tested this out, Aside minor comment about dead code, it looks good","2023-05-08T18:14:52Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-05-08T19:08:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","We just merged a big PR #915 that uses Jinja for the templating now, so this will have to be reworked unfortunately","2023-05-09T21:38:51Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-05-09T21:31:30Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-05-07T06:01:09Z",false,"APPROVED"
"Alek99","MEMBER","Nice fix, works for me


Tested by 
```python 

""""""Welcome to Pynecone! This file create a counter app.""""""
import pynecone as pc
import random


class State(pc.State):
    """"""The app state.""""""
    options = [""Option 1"", ""Option 2"", ""Option 3""]
    text: str = ""No Selection""

    def do_some_action(self, something):
        print(something)

def index():
    """"""The main view.""""""
    return pc.center(
        pc.vstack(
            pc.button(
                ""Click Me"",
                on_click=[
                    lambda: State.do_some_action(State.text)
                ]
            ),
            padding=""1em"",
            bg=""#ededed"",
            border_radius=""1em"",
            box_shadow=""lg"",
        ),
        padding_y=""5em"",
        font_size=""2em"",
        text_align=""center"",
    )


# Add state and page to the app.
app = pc.App(state=State)
app.add_page(index, title=""Counter"")
app.compile()
```","2023-05-07T22:43:26Z",false,"APPROVED"
"Alek99","MEMBER","Lgtm. Also tested with some more nested ds and works well.

```python 

class State(pc.State):
   _test: str = ""test""

   _test_data  ={
         ""test"": ""test"",   
         ""more"": [""test"", ""test2""]
   }

   def test(self):
        print(self._test)
        print(self._test_data)
        self._test = random.randint(0, 100)
        self._test_data[""test""] = random.randint(0, 100)
        self._test_data[""more""].append(random.randint(0, 100))


@pc.route()
def index() -> pc.Component:
   return pc.button(
       ""Check _backend var"",
      
 ```","2023-05-07T23:07:36Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks!","2023-05-06T19:01:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice catch!

I think you just have to run the linter, see here: https://github.com/pynecone-io/pynecone/blob/main/CONTRIBUTING.md","2023-05-06T19:05:22Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2023-05-12T01:50:12Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice fix!","2023-05-06T19:25:48Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","lgtm","2023-05-05T16:38:36Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice, much cleaner","2023-05-05T22:02:01Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Tested and it works great - nice work!","2023-05-06T19:56:22Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice","2023-05-05T17:13:58Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice check and message","2023-05-06T19:18:47Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-05-04T15:26:34Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome","2023-05-04T16:45:09Z",false,"APPROVED"
"Alek99","MEMBER","","2023-05-04T01:56:42Z",false,"APPROVED"
"Alek99","MEMBER","Nice catch","2023-05-02T04:31:15Z",false,"APPROVED"
"Alek99","MEMBER","","2023-05-15T05:27:55Z",false,"APPROVED"
"Alek99","MEMBER","","2023-05-02T00:00:38Z",false,"APPROVED"
"masenf","COLLABORATOR","This is awesome 😁 Thank you 🙏 ","2023-05-04T06:37:45Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","Awesome work, this is much cleaner now. I think we need to update [NextLink](https://github.com/pynecone-io/pynecone/blob/c344a5c0d75de0001717d717fb52cd174af48042/pynecone/components/navigation/nextlink.py#L7) to use the new default import and figure out the code block issue then the integration tests should pass hopefully.","2023-05-04T07:36:16Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-05-04T17:05:27Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","","2023-05-05T04:02:08Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","nice work! lgtm","2023-05-01T11:42:27Z",false,"DISMISSED"
"ElijahAhianyo","COLLABORATOR","awesome! lgtm","2023-05-01T11:15:16Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome! One small comment but looks good initially. I'll review this more thoroughly and try to include in the following release.","2023-05-01T23:53:25Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-05-02T00:09:11Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-05-04T06:32:03Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Tested this out on `pcweb` and seems to work really well - awesome work! Much cleaner and more performant calculating the dependencies upfront like this.","2023-05-04T07:04:12Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-05-04T07:24:53Z",false,"COMMENTED"
"masenf","COLLABORATOR","","2023-05-04T07:31:50Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-05-04T07:35:02Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-05-03T17:35:24Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-05-03T17:36:54Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","@PeterYusuke awesome work!! Tested this change with the main website and it works well","2023-05-09T21:27:33Z",false,"APPROVED"
"r0b2g1t","CONTRIBUTOR","See comments before.","2023-04-29T22:03:25Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","lets go!","2023-05-12T01:36:47Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-28T02:23:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-04-28T01:48:40Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-04-28T01:52:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-04-28T01:56:17Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","lgtm","2023-04-27T21:22:07Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-27T18:41:52Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-27T03:07:42Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-27T03:18:29Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-27T03:28:19Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-27T03:48:56Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-27T03:59:42Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-27T04:17:02Z",false,"APPROVED"
"Alek99","MEMBER","Lgtm","2023-04-27T02:29:19Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-27T00:02:39Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-26T23:34:59Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-26T21:45:53Z",false,"APPROVED"
"milochen0418","CONTRIBUTOR","","2023-05-02T15:45:38Z",false,"COMMENTED"
"masenf","COLLABORATOR","😎 ","2023-04-26T19:45:05Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","awesome","2023-04-26T19:53:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice catch - I think we can delete the template `pynecone.json` in a follow up now.","2023-04-26T21:40:12Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-26T15:23:28Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Great work","2023-04-26T21:39:09Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-26T06:48:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-04-26T06:29:51Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-26T05:28:38Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-26T04:49:24Z",false,"APPROVED"
"Alek99","MEMBER","Lg excited for the static analysis coming soon","2023-04-26T04:21:47Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-04-26T04:10:39Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-04-25T10:42:23Z",false,"APPROVED"
"masenf","COLLABORATOR","Not sure what exactly the problem is, but the following test case fails with this change:

```python
def test_child_state():
    class MainState(State):
       v: int = 2

    class ChildState(MainState):
        @ComputedVar
        def rendered_var(self):
            return self.v

    ms = MainState()
    cs = ms.get_substate(ChildState.get_name())
    assert ms.v == 2
    assert cs.v == 2
    assert cs.rendered_var == 2
```

-----------------------------------

```console
____________________________________________________________________ test_child_state _____________________________________________________________________

    def test_child_state():
        class MainState(State):
           v: int = 2
    
        class ChildState(MainState):
            @ComputedVar
            def rendered_var(self):
                return self.v
    
>       ms = MainState()

tests/test_state.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
pynecone/state.py:93: in __init__
    self.substates[substate.get_name()] = substate().set(parent_state=self)
pynecone/state.py:111: in __init__
    self.__getattribute__(cvar)
pynecone/state.py:530: in __getattribute__
    return super().__getattribute__(name)
tests/test_state.py:823: in rendered_var
    return self.v
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <[AttributeError(""'NoneType' object has no attribute 'v'"") raised in repr()] ChildState object at 0x137761550>, name = 'v'

    def __getattribute__(self, name: str) -> Any:
        """"""Get the state var.
    
        If the var is inherited, get the var from the parent state.
    
        If the Var is a dependent of a ComputedVar, track this status in computed_var_dependencies.
    
        Args:
            name: The name of the var.
    
        Returns:
            The value of the var.
        """"""
        try:
            # Check if tracking is enabled.
            if super().__getattribute__(""track_vars""):
                # Get the non-computed vars.
                all_vars = {
                    **super().__getattribute__(""vars""),
                    **super().__getattribute__(""backend_vars""),
                }
                # Add the var to the tracked vars.
                if name in all_vars:
                    super().__getattribute__(""tracked_vars"").add(name)
        except AttributeError:
            pass
    
        inherited_vars = {
            **super().__getattribute__(""inherited_vars""),
            **super().__getattribute__(""inherited_backend_vars""),
        }
        if name in inherited_vars:
>           return getattr(super().__getattribute__(""parent_state""), name)
E           AttributeError: 'NoneType' object has no attribute 'v'

pynecone/state.py:527: AttributeError
```

I think it has something to do with [this line](https://github.com/pynecone-io/pynecone/pull/864/files#diff-cd99a17b23a92f255b06f6811a1dbf6db64cf86404193878dfda96cafee4d34dR93); it's setting the `parent_state` attribute _after_ `__init__`, so the state tracking breaks when it has to access an inherited var.","2023-04-25T04:38:09Z",false,"COMMENTED"
"Alek99","MEMBER","nice lgtm","2023-04-25T20:51:31Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-25T00:51:24Z",false,"APPROVED"
"Alek99","MEMBER","Nice just tested the new version works for me, thanks!","2023-04-24T20:43:45Z",false,"APPROVED"
"masenf","COLLABORATOR","🚢 👍 ","2023-04-24T02:42:48Z",false,"APPROVED"
"Alek99","MEMBER","Lg","2023-04-24T03:17:32Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-04-24T17:31:50Z",false,"APPROVED"
"Alek99","MEMBER","lgtm","2023-04-21T18:52:05Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice! I left one comment - I think the `dirty_substates` prop may be useful for performance reasons.

I have this PR #872  that temporarily disables the computed var dependency checks until we have the static checks from #870 so we don't have any breaking changes.

We can either merge this PR in before #870 with the checks disabled for now, or wait until we have that, either way should be okay.","2023-04-26T04:24:04Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","nice! Just some nits we can clean up in a follow up","2023-05-09T22:54:04Z",false,"APPROVED"
"Alek99","MEMBER","Nice!","2023-04-25T01:46:44Z",false,"APPROVED"
"masenf","COLLABORATOR","","2023-04-20T19:24:09Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-21T21:04:07Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice","2023-04-19T17:55:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-04-19T17:56:59Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","good catch!","2023-04-19T18:08:22Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","looks good to me, thanks for adding!","2023-04-25T04:25:00Z",false,"APPROVED"
"Alek99","MEMBER","Nice Nikhil tested it look good!","2023-04-24T00:42:36Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-29T23:54:23Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-30T01:55:20Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice","2023-04-17T17:05:54Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-15T18:11:45Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome!","2023-04-15T16:59:16Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-04-14T10:35:17Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-04-14T17:14:35Z",false,"COMMENTED"
"cheuora","NONE","","2023-04-15T08:16:27Z",false,"COMMENTED"
"Chixonya22","NONE","","2023-04-13T13:52:27Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-04-13T16:32:11Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice lgtm","2023-04-13T16:23:29Z",false,"APPROVED"
"danik292","CONTRIBUTOR","","2023-04-13T18:39:58Z",false,"APPROVED"
"Alek99","MEMBER","lgtm","2023-04-16T04:10:13Z",false,"APPROVED"
"Chixonya22","NONE","","2023-04-13T13:19:29Z",false,"APPROVED"
"danik292","CONTRIBUTOR","","2023-04-13T18:49:15Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","Nice work. Tested this locally and it works locally, perhaps we could add some unit tests for this, and its good to merge","2023-04-17T10:37:19Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","This looks good to me!","2023-04-25T04:31:13Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-04-25T07:48:49Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-11T04:20:41Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome thanks for this! I think you just need to run the linter (See the bottom here: https://github.com/pynecone-io/pynecone/blob/main/CONTRIBUTING.md)","2023-04-11T03:16:55Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","Great work!","2023-04-11T16:01:11Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-10T05:06:46Z",false,"APPROVED"
"Alek99","MEMBER","Approved but you will need to change version to 0.1.23","2023-04-10T04:54:43Z",false,"APPROVED"
"danik292","CONTRIBUTOR","","2023-04-13T18:53:12Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice!","2023-04-25T04:37:03Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-09T05:44:59Z",false,"APPROVED"
"Alek99","MEMBER","nice looks good to me","2023-04-08T17:45:45Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-04-05T04:34:32Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","nice","2023-04-05T04:37:35Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice work! Mostly minor comments","2023-04-05T23:10:38Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-04-06T16:10:46Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","thanks for the updates!","2023-04-06T22:50:01Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-04T01:15:53Z",false,"APPROVED"
"Alek99","MEMBER","","2023-04-04T00:34:37Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","lgtm","2023-04-04T00:04:29Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice check","2023-04-03T23:54:35Z",false,"APPROVED"
"Alek99","MEMBER","Nice been looking out for the feature, very cool!

This may need to be refactored since the repo has changed a bit since the pr, seems like the tests are not passing.","2023-04-05T01:29:30Z",false,"COMMENTED"
"danik292","CONTRIBUTOR","I think meybe it's better when we implement a library and call it","2023-04-13T18:55:46Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-04-03T22:10:41Z",false,"APPROVED"
"Alek99","MEMBER","Nice thanks for the pr, this look good to me! One comment can you add the `DBConfig` to the base __init__.py

`from .config import Config, DBConfig`

See this line:
https://github.com/pynecone-io/pynecone/blob/8eea6ac8229b7dc460af1e2a4f51214ffd32e415/pynecone/__init__.py#L12","2023-04-04T01:11:43Z",false,"COMMENTED"
"Alek99","MEMBER","Nice","2023-04-04T04:37:55Z",false,"APPROVED"
"Alek99","MEMBER","lgtm","2023-04-02T23:57:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","lgtm","2023-04-02T22:31:34Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice check","2023-04-02T22:32:15Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome job","2023-04-02T22:37:49Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice, thanks for updating the tests!","2023-04-02T22:38:33Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Good catch!","2023-03-30T01:39:25Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","looks good","2023-04-02T23:47:53Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","lgtm","2023-03-29T17:16:37Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Good catch! Looks like we need to update the unit tests - then we can merge this. (Also make sure to lint, etc. https://github.com/pynecone-io/pynecone/blob/main/CONTRIBUTING.md)","2023-03-30T01:16:56Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","Awesome! Didn't know about this library, this will be super useful","2023-03-30T01:21:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice, looks good!","2023-03-30T01:23:17Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","lgtm","2023-03-27T21:39:40Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice! Good feature to have","2023-03-30T01:25:37Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","lgtm","2023-03-27T21:44:04Z",false,"APPROVED"
"r0b2g1t","CONTRIBUTOR","","2023-03-28T23:00:30Z",false,"APPROVED"
"danik292","CONTRIBUTOR","","2023-03-27T13:16:16Z",false,"APPROVED"
"danik292","CONTRIBUTOR","","2023-03-27T13:16:28Z",false,"APPROVED"
"danik292","CONTRIBUTOR","","2023-03-27T13:17:01Z",false,"DISMISSED"
"ElijahAhianyo","COLLABORATOR","","2023-03-23T16:11:26Z",false,"CHANGES_REQUESTED"
"danik292","CONTRIBUTOR","","2023-03-24T06:40:28Z",false,"COMMENTED"
"milochen0418","CONTRIBUTOR","","2023-03-24T08:29:35Z",false,"COMMENTED"
"danik292","CONTRIBUTOR","","2023-03-25T16:38:03Z",false,"COMMENTED"
"chrisrosner","NONE","","2023-05-27T15:33:17Z",false,"COMMENTED"
"danik292","CONTRIBUTOR","","2023-05-27T17:37:47Z",false,"APPROVED"
"milochen0418","CONTRIBUTOR","","2023-05-27T17:44:29Z",false,"COMMENTED"
"chrisrosner","NONE","","2023-05-27T17:53:42Z",false,"APPROVED"
"milochen0418","CONTRIBUTOR","","2023-05-27T18:35:45Z",false,"COMMENTED"
"TaiJuWu","CONTRIBUTOR","","2023-05-28T04:18:54Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-05-28T20:22:53Z",false,"APPROVED"
"danik292","CONTRIBUTOR","","2023-03-21T07:53:06Z",false,"APPROVED"
"Alek99","MEMBER","","2023-03-23T06:51:48Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice, great work!","2023-03-17T22:08:50Z",false,"APPROVED"
"Alek99","MEMBER","","2023-03-17T17:19:30Z",false,"APPROVED"
"Alek99","MEMBER","","2023-03-17T20:01:23Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","I think we need a more thorough check - we can merge the other parts of the PR in first if you want, and then add this fix in a follow up.","2023-03-17T22:06:59Z",false,"CHANGES_REQUESTED"
"HellAmbro","CONTRIBUTOR","","2023-03-18T00:16:24Z",false,"COMMENTED"
"danik292","CONTRIBUTOR","","2023-03-27T11:57:55Z",false,"APPROVED"
"danik292","CONTRIBUTOR","","2023-03-21T08:33:16Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","Tested this out locally and it doesn't work as intended","2023-03-31T12:36:37Z",false,"CHANGES_REQUESTED"
"ElijahAhianyo","COLLABORATOR","","2023-03-31T12:45:26Z",false,"CHANGES_REQUESTED"
"PeterYusuke","CONTRIBUTOR","","2023-04-05T11:11:27Z",false,"COMMENTED"
"ElijahAhianyo","COLLABORATOR","","2023-04-12T13:31:47Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome work @PeterYusuke! I made a [follow-up ticket ](https://github.com/pynecone-io/pynecone/issues/817 )as I see some warnings in the console, but it works great. Will merge this in now","2023-04-13T16:54:42Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-04-13T17:33:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","I think we want to prefer `bun` for unix systems because it's much faster. Maybe we can update `pynecone/config.py` and change `bun_path` to `package_manager_path`, then those who prefer `npm` can set it there. ","2023-03-17T22:19:00Z",false,"COMMENTED"
"danik292","CONTRIBUTOR","","2023-03-27T13:40:29Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice! I think this needs to be rebased on the latest `main`. Also does this handle the case for returning event handlers?","2023-03-16T05:42:14Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome, seems to work well","2023-03-16T23:54:45Z",false,"APPROVED"
"Alek99","MEMBER","","2023-03-16T05:37:28Z",false,"CHANGES_REQUESTED"
"HellAmbro","CONTRIBUTOR","","2023-03-17T08:55:57Z",false,"COMMENTED"
"Alek99","MEMBER","lgtm
","2023-03-17T22:13:22Z",false,"APPROVED"
"Alek99","MEMBER","","2023-03-16T05:24:32Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-03-16T05:44:30Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-03-16T05:45:22Z",false,"COMMENTED"
"d29107d","CONTRIBUTOR","","2023-03-16T07:19:34Z",false,"COMMENTED"
"danik292","CONTRIBUTOR","","2023-03-27T07:54:23Z",false,"APPROVED"
"Chixonya22","NONE","","2023-04-13T14:23:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch!","2023-03-14T17:33:43Z",false,"APPROVED"
"Alek99","MEMBER","","2023-03-13T15:09:15Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice","2023-03-13T04:29:44Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for breaking this up - that file was getting big and had many circular imports.

Could we make the following changes:
* Create a `pynecone/utils` directory where all these new files will go under
* Move the new files into the new folder e.g. `pynecone/utils/format.py` and `pynecone/utils/imports.py`
* In the files that import these, import the module rather than the individual functions - for example `from pynecone.utils import format` and then call the functions like `format.format_state`","2023-03-12T20:48:35Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","Just one issue, otherwise seems to work well!","2023-03-16T16:33:34Z",false,"CHANGES_REQUESTED"
"iron3oxide","CONTRIBUTOR","","2023-03-16T16:48:55Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","thanks for the huge refactor","2023-03-16T17:27:55Z",false,"APPROVED"
"Alek99","MEMBER","","2023-03-12T05:04:45Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome, thanks for adding this!","2023-03-10T20:48:08Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome","2023-03-10T20:38:11Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice work!","2023-03-10T21:00:42Z",false,"APPROVED"
"Alek99","MEMBER","Nice ","2023-03-10T00:30:01Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","Nice. We could probably use some unit tests for this, esp the render method

","2023-03-10T17:02:08Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Great work! Just a couple minor comments - also make sure to run the linters to make sure the build passes: https://github.com/pynecone-io/pynecone/blob/main/CONTRIBUTING.md","2023-03-10T20:43:10Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","Looks good!","2023-03-11T19:37:54Z",false,"APPROVED"
"fnwinter","NONE","","2023-06-23T16:25:10Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Nice! Just some minor comments for a follow up","2023-03-09T22:57:16Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome work, we really needed this!

Just have 2 main questions and some minor typo comments.","2023-03-07T22:33:49Z",false,"COMMENTED"
"PeterYusuke","CONTRIBUTOR","","2023-03-08T03:49:16Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","awesome!","2023-03-08T22:36:35Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice clean up!","2023-03-07T22:36:04Z",false,"APPROVED"
"Alek99","MEMBER","nice","2023-03-07T01:37:33Z",false,"APPROVED"
"Alek99","MEMBER","lgtm","2023-03-07T00:39:02Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","looks good!","2023-03-07T21:48:46Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Sorry for the delay - nice work!","2023-03-10T21:08:01Z",false,"APPROVED"
"Alek99","MEMBER","","2023-03-04T22:11:08Z",false,"APPROVED"
"Alek99","MEMBER","","2023-03-04T22:11:45Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice job adding all this! There's some lint errors to clean up then we can merge it in.","2023-03-13T01:33:57Z",false,"COMMENTED"
"danik292","CONTRIBUTOR","","2023-03-27T09:48:03Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome, looks good!","2023-04-03T21:21:59Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good! You need to run the linter. See the bottom here: https://github.com/pynecone-io/pynecone/blob/main/CONTRIBUTING.md","2023-03-03T21:22:37Z",false,"COMMENTED"
"DeathShort","CONTRIBUTOR","","2023-03-04T17:48:07Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","looks good!","2023-03-04T20:37:36Z",false,"APPROVED"
"d29107d","CONTRIBUTOR","LGTM","2023-03-03T13:21:42Z",false,"APPROVED"
"Alek99","MEMBER","","2023-03-03T21:19:22Z",false,"APPROVED"
"Alek99","MEMBER","lgtm","2023-03-03T21:22:04Z",false,"APPROVED"
"Alek99","MEMBER","","2023-03-04T03:37:10Z",false,"APPROVED"
"Alek99","MEMBER","","2023-03-01T04:09:00Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice one!","2023-03-01T00:43:38Z",false,"APPROVED"
"d29107d","CONTRIBUTOR","I think we should take these changes to a single file.
If we create a new component, we add it to this single file.","2023-03-01T00:45:21Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","This looks great - in a follow up maybe we can convert your example app into a unit test too 🙂 ","2023-02-28T21:26:32Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks!","2023-02-28T19:28:13Z",false,"APPROVED"
"Alek99","MEMBER","Lgtm","2023-02-28T03:12:35Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-02-28T03:12:52Z",false,"APPROVED"
"Alek99","MEMBER","","2023-02-24T23:16:01Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","This looks good - we can rethink the `on_load` design for a more flexible approach in a follow-up

https://github.com/pynecone-io/pynecone/issues/603","2023-02-25T18:10:16Z",false,"APPROVED"
"Alek99","MEMBER","","2023-02-25T06:43:21Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","This looks good - great work!","2023-02-28T02:18:49Z",false,"APPROVED"
"Alek99","MEMBER","","2023-02-23T00:24:50Z",false,"APPROVED"
"Alek99","MEMBER","Thanks Peter! Great pr, I will add documentation for this in the next release on the website.","2023-02-23T05:31:41Z",false,"APPROVED"
"Alek99","MEMBER","lgtm","2023-02-22T01:25:37Z",false,"APPROVED"
"Alek99","MEMBER","Nice just tested an still works on Mac, nice fix for windows users. Thanks!","2023-02-21T23:13:46Z",false,"APPROVED"
"Alek99","MEMBER","","2023-02-21T07:31:51Z",false,"APPROVED"
"Alek99","MEMBER","lg","2023-02-21T05:58:16Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice","2023-02-21T03:53:25Z",false,"APPROVED"
"Alek99","MEMBER","Sorry for the delay response just checked out your pr and the results of the code from the issue is still showing as all together `123` and `456`. It should look like `['1', '2', '3']`
and `['4', '5', '6']` right?
","2023-02-21T23:19:24Z",false,"DISMISSED"
"picklelo","CONTRIBUTOR","Tested it out and seems to work well - nice job!","2023-03-04T20:54:45Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-02-24T02:44:04Z",false,"COMMENTED"
"d29107d","CONTRIBUTOR","","2023-02-24T07:45:16Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-03-03T02:24:53Z",false,"COMMENTED"
"d29107d","CONTRIBUTOR","","2023-03-03T02:31:01Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","nice!","2023-03-03T02:32:26Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for the update! Just a small comment","2023-02-20T20:08:20Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-02-20T20:11:41Z",false,"COMMENTED"
"PeterYusuke","CONTRIBUTOR","","2023-02-21T09:10:25Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-02-21T18:40:54Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","nice","2023-02-21T18:41:08Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice, didn't know about this!","2023-02-18T05:54:25Z",false,"APPROVED"
"Alek99","MEMBER","","2023-02-17T19:58:44Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Sweet! Thanks for the iterations","2023-02-17T01:46:32Z",false,"APPROVED"
"Alek99","MEMBER","lgtm","2023-02-16T22:46:11Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome! Just one comment about avoiding an extra dep","2023-02-16T07:39:19Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-02-16T07:43:43Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Nice!","2023-02-16T08:02:33Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome! Can we add a unit test in`test_format_props` in `test_tag.py` so we can make sure this works? 

This is great currently we do some special logic for data frames and plotly graphs - we will convert them to use this logic. ","2023-02-16T06:19:04Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-02-16T06:21:10Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Nice","2023-02-16T06:16:03Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice addition! Just one small comment","2023-02-16T06:12:43Z",false,"COMMENTED"
"PeterYusuke","CONTRIBUTOR","","2023-02-16T09:09:50Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome!","2023-02-16T19:33:40Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for adding - can we make a `scripts/` directory and put this file in there to keep the project root clean? ","2023-02-16T06:09:27Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-02-20T02:17:59Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice catch","2023-02-16T06:07:24Z",false,"APPROVED"
"r0b2g1t","CONTRIBUTOR","","2023-02-14T18:58:46Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice","2023-02-14T20:07:35Z",false,"APPROVED"
"Alek99","MEMBER","","2023-02-13T23:26:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice","2023-02-13T05:45:42Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","I think the iterable code got removed? What's the use case for this again?","2023-02-14T20:04:07Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-02-12T22:53:17Z",false,"APPROVED"
"Alek99","MEMBER","","2023-02-12T21:47:19Z",false,"APPROVED"
"Alek99","MEMBER","","2023-02-12T21:34:08Z",false,"APPROVED"
"Alek99","MEMBER","","2023-02-12T21:09:29Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Sweet!","2023-02-12T17:23:52Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Good catch!","2023-02-12T17:26:40Z",false,"APPROVED"
"Alek99","MEMBER","","2023-02-12T17:55:29Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-02-12T00:59:59Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-02-12T01:11:01Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-02-12T01:16:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-02-12T01:19:57Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-02-12T01:33:03Z",false,"APPROVED"
"Alek99","MEMBER","","2023-02-12T00:47:51Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","This looks good! Should we remove the `Model.create_all()` line in `app.py` so that we don't create the models twice?","2023-02-12T00:49:50Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Sweet!","2023-02-12T01:57:06Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome! Just a small nit comment","2023-02-12T01:01:38Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-02-12T09:55:31Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome","2023-02-12T17:37:01Z",false,"APPROVED"
"TommyDew42","CONTRIBUTOR","","2023-02-11T16:41:16Z",false,"COMMENTED"
"r0b2g1t","CONTRIBUTOR","Looks good for me.","2023-02-11T14:35:12Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice!","2023-02-12T01:04:54Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good! I think there's some Pyright issues - you can add a `#type: ignore` if they are just some weird cases.","2023-02-12T01:21:29Z",false,"COMMENTED"
"sid77x","NONE","","2023-02-12T07:13:40Z",false,"APPROVED"
"ElijahAhianyo","COLLABORATOR","","2023-02-12T10:29:05Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome - tested it locally and it's working nicely!","2023-02-12T20:51:32Z",false,"APPROVED"
"Alek99","MEMBER","lgtm","2023-02-12T00:41:14Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice","2023-02-10T22:59:49Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome - tested it out with Redis and it's working nicely now!","2023-02-10T20:23:23Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice! Just a minor comment","2023-02-10T20:46:34Z",false,"COMMENTED"
"r0b2g1t","CONTRIBUTOR","","2023-02-10T20:56:07Z",false,"COMMENTED"
"r0b2g1t","CONTRIBUTOR","","2023-02-10T20:56:17Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Sweet!","2023-02-10T23:19:54Z",false,"APPROVED"
"r0b2g1t","CONTRIBUTOR","","2023-02-10T09:16:42Z",false,"COMMENTED"
"r0b2g1t","CONTRIBUTOR","","2023-02-10T09:16:47Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Nice clean up","2023-02-10T20:43:01Z",false,"APPROVED"
"Alek99","MEMBER","","2023-02-10T05:45:17Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-02-10T20:40:53Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Nice!","2023-02-12T17:35:06Z",false,"APPROVED"
"FHU-yezi","CONTRIBUTOR","","2023-02-09T06:21:10Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-02-09T19:40:47Z",false,"COMMENTED"
"elyanah-aco","CONTRIBUTOR","","2023-02-14T02:11:36Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-02-14T02:17:10Z",false,"COMMENTED"
"elyanah-aco","CONTRIBUTOR","","2023-02-14T02:25:33Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Nice! Just some nits and I think this needs a rebase","2023-02-10T03:54:26Z",false,"COMMENTED"
"thavocado","CONTRIBUTOR","","2023-02-10T06:52:05Z",false,"COMMENTED"
"thavocado","CONTRIBUTOR","","2023-02-10T06:52:13Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome, the errors are all gone now!","2023-02-10T07:57:43Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice!","2023-02-09T02:23:55Z",false,"APPROVED"
"Alek99","MEMBER","","2023-02-09T00:24:28Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-02-08T22:00:01Z",false,"COMMENTED"
"r0b2g1t","CONTRIBUTOR","","2023-02-08T22:18:43Z",false,"COMMENTED"
"r0b2g1t","CONTRIBUTOR","","2023-02-08T22:26:00Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-02-08T22:38:32Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-02-08T22:38:43Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice!","2023-02-08T05:52:16Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","good catch","2023-02-08T05:54:04Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Good calling adding this `id` field . I'm a bit confused though - looks like the Anchor class got reverted? Don't we need that?","2023-02-08T22:03:14Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Nvm, tried this locally and it works great - awesome work!","2023-02-08T22:07:26Z",false,"APPROVED"
"Alek99","MEMBER","","2023-02-06T22:48:54Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice!","2023-02-06T18:32:44Z",false,"APPROVED"
"Alek99","MEMBER","","2023-02-06T01:49:31Z",false,"APPROVED"
"Alek99","MEMBER","","2023-02-05T23:00:24Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome job!! This will really clean up our API

Just a couple high level comments:
* We can remove the `children = []` line in all the functions I believe
* Maybe we can add the new kwargs in the function signature? What do you think","2023-02-05T21:19:18Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-02-05T21:27:16Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-02-05T21:31:03Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-02-05T21:33:26Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome thanks for the updates!","2023-02-06T00:01:29Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-02-09T00:42:00Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","This looks great except for pynecone/compiler/templates.py - let's undo all the changes there. The apps won't run with the code as is","2023-02-09T09:40:06Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","Awesome thanks for fixing!","2023-02-09T19:32:18Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome job!! Tested locally and it worked nicely - just a couple comments","2023-02-05T21:30:47Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-02-05T21:34:11Z",false,"COMMENTED"
"thavocado","CONTRIBUTOR","","2023-02-06T07:13:59Z",false,"COMMENTED"
"thavocado","CONTRIBUTOR","","2023-02-06T07:28:47Z",false,"COMMENTED"
"thavocado","CONTRIBUTOR","","2023-02-06T07:56:11Z",false,"COMMENTED"
"thavocado","CONTRIBUTOR","","2023-02-06T07:58:03Z",false,"COMMENTED"
"thavocado","CONTRIBUTOR","","2023-02-06T08:21:00Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Sweet great job!","2023-02-06T18:36:48Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-02-06T18:37:32Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Sweet thanks for this","2023-02-04T18:56:05Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks like this needs to be ilnted with `black`","2023-02-04T18:57:56Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2023-02-05T00:10:33Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-02-04T18:54:45Z",false,"CHANGES_REQUESTED"
"PeterYusuke","CONTRIBUTOR","","2023-02-05T00:39:46Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-02-05T21:28:51Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome!","2023-02-06T18:40:47Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome","2023-02-04T18:49:56Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-02-04T18:52:25Z",false,"CHANGES_REQUESTED"
"sijirama","NONE","","2023-02-04T19:12:18Z",false,"COMMENTED"
"sijirama","NONE","","2023-02-04T19:38:14Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","I think there's still lint errors: make sure all the checks in the [Contributing guide](https://github.com/pynecone-io/pynecone/blob/main/CONTRIBUTING.md) pass","2023-02-04T20:52:30Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","Good call!","2023-02-04T18:49:01Z",false,"APPROVED"
"Alek99","MEMBER","Looks good to me we can improve prompts/cli message in following prs. Nice!","2023-02-01T05:20:55Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Sorry for the delay - looks great!","2023-02-04T18:45:44Z",false,"APPROVED"
"Alek99","MEMBER","","2023-01-31T03:21:22Z",false,"APPROVED"
"Alek99","MEMBER","","2023-01-31T02:25:25Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice","2023-01-30T23:57:44Z",false,"APPROVED"
"Alek99","MEMBER","","2023-01-30T22:33:55Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice","2023-01-30T18:27:01Z",false,"APPROVED"
"Alek99","MEMBER","","2023-01-30T05:42:07Z",false,"APPROVED"
"Alek99","MEMBER","","2023-01-30T04:54:45Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome, just some comments to clean up the code","2023-01-30T03:01:36Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-01-30T03:13:45Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Sweet","2023-01-30T04:10:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-01-30T04:19:09Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Sweet - just one question otherwise looks good :) ","2023-01-30T00:44:10Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-01-30T01:06:02Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-01-30T02:54:14Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-01-30T00:30:51Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-01-30T00:36:13Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice work","2023-01-29T23:47:32Z",false,"APPROVED"
"Alek99","MEMBER","Nice, looks good!","2023-01-30T05:03:46Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for adding","2023-01-29T23:42:41Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Just one change to make the linter happy","2023-01-29T23:44:26Z",false,"CHANGES_REQUESTED"
"HellAmbro","CONTRIBUTOR","","2023-01-30T09:24:46Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome","2023-01-30T20:10:10Z",false,"APPROVED"
"Alek99","MEMBER","Looks good to me. Thanks!","2023-01-29T18:42:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","One small change","2023-01-29T19:15:02Z",false,"CHANGES_REQUESTED"
"r0b2g1t","CONTRIBUTOR","","2023-01-29T23:10:20Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Sweet","2023-01-29T23:58:51Z",false,"APPROVED"
"Alek99","MEMBER","Very nice just tested and works well! ","2023-01-30T20:38:22Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Great job finding this","2023-01-29T19:18:36Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome","2023-01-29T19:16:38Z",false,"APPROVED"
"Alek99","MEMBER","Awesome job on this pr, I really like how detailed your guide is!","2023-01-29T05:30:41Z",false,"APPROVED"
"Alek99","MEMBER","","2023-01-28T21:10:34Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome!","2023-01-28T17:17:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks, this will be super useful!","2023-01-28T17:20:56Z",false,"CHANGES_REQUESTED"
"r0b2g1t","CONTRIBUTOR","","2023-01-28T08:36:59Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for this","2023-01-28T17:25:25Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Sweet!","2023-01-28T17:23:10Z",false,"APPROVED"
"r0b2g1t","CONTRIBUTOR","","2023-01-27T23:47:44Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice thanks for the explicit message","2023-01-28T01:18:14Z",false,"APPROVED"
"r0b2g1t","CONTRIBUTOR","Discussion is needed to clarify the finding.","2023-01-28T00:17:38Z",false,"CHANGES_REQUESTED"
"r0b2g1t","CONTRIBUTOR","","2023-01-28T00:24:03Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","","2023-01-28T01:23:36Z",false,"COMMENTED"
"SaarthakMaini","CONTRIBUTOR","","2023-01-28T14:06:48Z",false,"COMMENTED"
"SaarthakMaini","CONTRIBUTOR","","2023-01-28T14:07:17Z",false,"COMMENTED"
"SaarthakMaini","CONTRIBUTOR","","2023-01-28T14:28:44Z",false,"COMMENTED"
"SaarthakMaini","CONTRIBUTOR","","2023-01-28T17:07:16Z",false,"COMMENTED"
"SaarthakMaini","CONTRIBUTOR","","2023-01-28T17:07:34Z",false,"COMMENTED"
"SaarthakMaini","CONTRIBUTOR","","2023-01-28T17:10:00Z",false,"COMMENTED"
"r0b2g1t","CONTRIBUTOR","","2023-01-28T18:14:07Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Thanks for adding!

Can we also add some unit tests to show how it should work. I'll play around with it a bit too","2023-01-28T01:54:49Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Really great job! Excited to have this in the next release","2023-02-02T08:21:04Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-01-27T06:53:52Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for adding","2023-01-26T10:26:15Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice","2023-01-25T22:57:49Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-01-25T21:22:26Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Nice","2023-01-25T21:36:38Z",false,"APPROVED"
"Alek99","MEMBER","","2023-01-25T21:38:10Z",false,"COMMENTED"
"TommyDew42","CONTRIBUTOR","","2023-01-25T15:25:12Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-01-25T18:51:48Z",false,"COMMENTED"
"TommyDew42","CONTRIBUTOR","","2023-01-26T17:35:08Z",false,"COMMENTED"
"kbrgl","CONTRIBUTOR","","2023-01-27T01:12:32Z",false,"COMMENTED"
"TommyDew42","CONTRIBUTOR","","2023-01-27T08:35:04Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome job! Tested this out on an app locally and it works nicely. May be some edge cases we need to fix in the future, but will go ahead and merge this in now :) ","2023-01-28T18:48:41Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-01-25T18:42:00Z",false,"CHANGES_REQUESTED"
"qu3vipon","CONTRIBUTOR","","2023-01-25T23:36:32Z",false,"COMMENTED"
"qu3vipon","CONTRIBUTOR","","2023-01-26T14:38:16Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-01-27T03:49:48Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-01-27T03:55:03Z",false,"COMMENTED"
"qu3vipon","CONTRIBUTOR","","2023-01-27T04:00:47Z",false,"COMMENTED"
"qu3vipon","CONTRIBUTOR","","2023-01-27T04:11:19Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","thanks for the fix!","2023-01-27T04:26:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Great job","2023-01-25T01:40:05Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice","2023-01-24T21:38:27Z",false,"APPROVED"
"Alek99","MEMBER","Nice, thanks","2023-01-25T06:25:16Z",false,"APPROVED"
"Alek99","MEMBER","","2023-01-24T05:11:28Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-01-24T05:29:24Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-01-24T05:36:59Z",false,"APPROVED"
"Alek99","MEMBER","Looks good","2023-01-24T02:46:36Z",false,"APPROVED"
"TommyDew42","CONTRIBUTOR","","2023-01-23T19:25:24Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-01-23T23:27:24Z",false,"COMMENTED"
"TommyDew42","CONTRIBUTOR","","2023-01-24T03:00:56Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-01-24T04:17:58Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome","2023-01-24T04:18:44Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Now its official","2023-01-23T03:01:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome!","2023-01-23T01:39:23Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-01-28T18:53:11Z",false,"CHANGES_REQUESTED"
"suarzac","NONE","","2023-01-30T08:52:45Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Sweet!","2023-01-30T20:09:16Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Run black on this","2023-01-30T20:11:50Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","Thanks for this!

Just need to run the linter, see the bottom of the [Contributing guide](https://github.com/pynecone-io/pynecone/blob/main/CONTRIBUTING.md)","2023-01-22T18:22:18Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","Awesome","2023-01-22T18:54:19Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Great work","2023-01-22T18:38:48Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Nice work","2023-01-22T18:56:38Z",false,"APPROVED"
"Alek99","MEMBER","nice good fix","2023-01-22T17:20:32Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice","2023-01-22T17:45:55Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice","2023-01-22T00:00:01Z",false,"APPROVED"
"Alek99","MEMBER","🪟","2023-01-19T05:10:48Z",false,"APPROVED"
"Alek99","MEMBER","","2023-01-19T01:11:46Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice thanks for adding","2023-01-18T22:04:52Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Looks good for fixing this issue","2023-01-17T06:53:35Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Bye bye telemetry","2023-01-17T01:28:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Sweet ","2023-01-17T00:20:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for digging into this!","2023-01-16T22:34:34Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","Forgot to pass in the arg :) ","2023-01-17T16:48:14Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","Awesome!","2023-01-17T22:46:52Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Code looks good, just an idea to possibly simplify the API we expose","2023-01-15T20:08:13Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-01-15T20:19:04Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Awesome","2023-01-15T20:20:02Z",false,"APPROVED"
"Alek99","MEMBER","Nice!","2023-01-15T00:44:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Just a couple style comments :) ","2023-01-15T00:42:42Z",false,"CHANGES_REQUESTED"
"Lendemor","COLLABORATOR","","2023-01-15T00:59:02Z",false,"COMMENTED"
"Lendemor","COLLABORATOR","","2023-01-15T01:10:08Z",false,"COMMENTED"
"FHU-yezi","CONTRIBUTOR","","2023-01-15T01:14:21Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Thanks for the updates!","2023-01-15T02:43:35Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Great job!","2023-01-13T18:32:05Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Great work","2023-01-12T22:35:17Z",false,"APPROVED"
"Alek99","MEMBER","","2023-01-12T01:44:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Sweet!","2023-01-11T19:18:06Z",false,"APPROVED"
"Alek99","MEMBER","","2023-01-11T19:29:59Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-01-11T02:00:11Z",false,"COMMENTED"
"Alek99","MEMBER","looks good","2023-01-11T02:06:41Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-01-11T02:07:10Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-01-10T21:52:44Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Lets goooo ","2023-01-10T20:28:44Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","amazing","2023-01-10T20:19:29Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-01-09T07:22:34Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2023-01-09T07:34:07Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-01-08T21:44:44Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for this change! Just a few comments","2023-01-08T21:18:15Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","Awesome","2023-01-08T21:34:17Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-01-08T21:40:28Z",false,"COMMENTED"
"Alek99","MEMBER","nice","2023-01-08T03:58:11Z",false,"APPROVED"
"Alek99","MEMBER","looks good","2023-01-08T03:56:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-01-05T07:37:21Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Great stuff","2023-01-06T00:39:59Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-01-06T01:16:21Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-01-06T01:17:07Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-01-06T01:19:06Z",false,"COMMENTED"
"Alek99","MEMBER","","2023-01-06T01:20:33Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","LGTM","2023-01-06T01:29:04Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","nice","2023-01-05T05:58:45Z",false,"APPROVED"
"Alek99","MEMBER","Nice re adding of this feature","2023-01-04T23:39:17Z",false,"APPROVED"
"Alek99","MEMBER","looks good to me","2023-01-04T22:54:02Z",false,"APPROVED"
"Alek99","MEMBER","Nice improvement","2023-01-04T22:54:45Z",false,"APPROVED"
"Alek99","MEMBER","Ok nice Ill test this more one pynetree this week","2023-01-04T23:14:05Z",false,"APPROVED"
"Alek99","MEMBER","","2023-01-02T22:56:47Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2023-01-03T00:06:52Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Thanks for making this change!","2022-12-30T07:59:37Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","Looks good to me - it just needs to be linted. You can run
```
poetry run black pynecone
```
and it should format the code for you, then we can merge this","2022-12-30T18:03:45Z",false,"APPROVED"
"Alek99","MEMBER","lgtm","2022-12-27T07:57:27Z",false,"APPROVED"
"Alek99","MEMBER","Looks good","2022-12-27T07:11:31Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome we needed this","2022-12-27T06:49:21Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2022-12-27T06:51:32Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Looks good to me","2022-12-27T06:59:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for the changes!","2022-12-26T18:18:24Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-23T19:18:08Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","LGTM","2022-12-23T19:17:28Z",false,"APPROVED"
"Alek99","MEMBER","Looks good","2022-12-22T23:59:27Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-23T00:07:16Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-22T03:43:16Z",false,"CHANGES_REQUESTED"
"Alek99","MEMBER","","2022-12-22T03:45:37Z",false,"COMMENTED"
"Alek99","MEMBER","This makes sense to me nicely done clever with the txt file","2022-12-22T03:47:32Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2022-12-22T04:04:49Z",false,"COMMENTED"
"Alek99","MEMBER","Nice looks good glad ","2022-12-22T03:40:16Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2022-12-22T01:53:07Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2022-12-22T01:54:38Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2022-12-22T01:59:04Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2022-12-22T01:59:54Z",false,"COMMENTED"
"Alek99","MEMBER","","2022-12-22T02:13:58Z",false,"COMMENTED"
"Alek99","MEMBER","","2022-12-22T02:14:13Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Sweet","2022-12-22T02:17:45Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2022-12-21T06:42:27Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-21T23:09:36Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2022-12-21T23:11:35Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2022-12-21T06:19:44Z",false,"COMMENTED"
"Alek99","MEMBER","","2022-12-21T06:20:51Z",false,"COMMENTED"
"Alek99","MEMBER","","2022-12-21T06:21:40Z",false,"COMMENTED"
"Alek99","MEMBER","","2022-12-21T06:22:43Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Looks good to me","2022-12-21T06:26:05Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2022-12-20T20:24:33Z",false,"COMMENTED"
"Alek99","MEMBER","","2022-12-20T23:19:53Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Nice work","2022-12-20T16:51:34Z",false,"APPROVED"
"Alek99","MEMBER","Looks good to me","2022-12-20T05:36:35Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2022-12-20T04:32:51Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","thanks!","2022-12-16T09:41:53Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-16T07:02:39Z",false,"APPROVED"
"Alek99","MEMBER","Looks good","2022-12-16T06:11:54Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-15T18:49:04Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-15T09:41:34Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-15T08:03:32Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-15T07:42:52Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-15T01:14:22Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Sweet! Just a couple nits","2022-12-14T23:46:35Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","Nice work","2022-12-15T00:12:33Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-14T23:32:09Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome","2022-12-14T05:46:23Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-14T05:12:38Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for making this! Let's just add the Python version also","2022-12-13T19:40:20Z",false,"CHANGES_REQUESTED"
"Alek99","MEMBER","","2022-12-13T19:52:52Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","Nice!","2022-12-13T20:51:22Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-13T18:03:28Z",false,"COMMENTED"
"Alek99","MEMBER","","2022-12-13T18:04:37Z",false,"COMMENTED"
"Alek99","MEMBER","","2022-12-13T18:05:05Z",false,"COMMENTED"
"Alek99","MEMBER","","2022-12-13T18:05:11Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-13T18:10:27Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2022-12-13T19:31:31Z",false,"COMMENTED"
"Alek99","MEMBER","","2022-12-13T03:07:31Z",false,"APPROVED"
"Alek99","MEMBER","just curious what computer/os are you running on because on mine its much faster than 1-3 minutes, more like 30 sec for me","2022-12-12T06:29:13Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2022-12-12T06:49:44Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","Looks good!","2022-12-12T08:26:05Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2022-12-12T05:43:23Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-12T05:43:50Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome","2022-12-13T23:03:06Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-12T00:10:31Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-11T20:10:29Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-11T19:43:20Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Thanks for catching this! Could you update the commands and I will approve this.","2022-12-11T00:25:11Z",false,"COMMENTED"
"kkovary","CONTRIBUTOR","","2022-12-11T07:57:27Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2022-12-11T08:01:39Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2022-12-11T08:03:16Z",false,"COMMENTED"
"ejbills","NONE","","2022-12-10T18:08:52Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Good catch!","2022-12-10T19:45:42Z",false,"APPROVED"
"ejbills","NONE","","2022-12-10T05:40:46Z",false,"COMMENTED"
"Alek99","MEMBER","","2022-12-10T07:09:05Z",false,"COMMENTED"
"ejbills","NONE","","2022-12-10T18:07:47Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2022-12-10T19:26:46Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2022-12-09T22:09:15Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","LGTM","2022-12-09T07:01:41Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-09T01:01:32Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2022-12-08T08:09:04Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-08T05:06:56Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-08T04:27:41Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-07T23:04:25Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-07T01:52:41Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-06T09:09:22Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2022-12-06T09:12:32Z",false,"COMMENTED"
"Alek99","MEMBER","","2022-12-06T09:21:03Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-05T22:24:12Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","LGTM","2022-12-05T22:21:41Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","LGTM!","2022-12-05T08:23:25Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Awesome job, just some nit picky formatting comments","2022-12-05T02:49:05Z",false,"CHANGES_REQUESTED"
"picklelo","CONTRIBUTOR","LGTM! We can fix the typo now or after","2022-12-05T03:33:13Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-01T18:51:01Z",false,"APPROVED"
"Alek99","MEMBER","","2022-12-01T18:55:57Z",false,"APPROVED"
"Alek99","MEMBER","","2022-11-30T03:22:30Z",false,"APPROVED"
"Alek99","MEMBER","","2022-11-30T01:00:48Z",false,"APPROVED"
"Alek99","MEMBER","","2022-11-29T04:11:51Z",false,"APPROVED"
"Alek99","MEMBER","Ok so copy to clipboard is just a pynetree thing for now.
","2022-11-24T20:28:24Z",false,"APPROVED"
"Alek99","MEMBER","","2022-11-22T02:46:53Z",false,"APPROVED"
"Alek99","MEMBER","","2022-11-21T23:31:15Z",false,"APPROVED"
"Alek99","MEMBER","","2022-11-21T20:15:49Z",false,"APPROVED"
"Alek99","MEMBER","","2022-11-21T00:50:04Z",false,"APPROVED"
"Alek99","MEMBER","","2022-11-21T00:10:37Z",false,"CHANGES_REQUESTED"
"Alek99","MEMBER","","2022-11-21T00:12:12Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","","2022-11-20T21:46:23Z",false,"COMMENTED"
"Alek99","MEMBER","","2022-11-20T22:19:26Z",false,"COMMENTED"
"picklelo","CONTRIBUTOR","","2022-11-20T22:32:54Z",false,"COMMENTED"
"Alek99","MEMBER","","2022-11-20T22:33:57Z",false,"APPROVED"
"picklelo","CONTRIBUTOR","Sweet, it's a lot cleaner now for sure","2022-11-20T03:27:06Z",false,"APPROVED"
