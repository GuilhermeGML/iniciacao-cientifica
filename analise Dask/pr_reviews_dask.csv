"fjetter","MEMBER","","2024-08-27T13:47:41Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks @charlesbluca !","2024-08-23T20:42:06Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-08-21T13:22:08Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl ","2024-08-21T13:16:55Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-26T14:42:21Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-26T18:44:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2024-08-26T20:47:48Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-27T08:32:48Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-27T08:49:08Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-27T08:50:37Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-27T09:03:27Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-27T10:53:18Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-27T11:28:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2024-08-27T18:04:27Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-27T18:05:40Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2024-08-27T18:15:17Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-27T18:46:52Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-08-21T08:50:35Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-08-20T07:59:55Z",false,"APPROVED"
"jrbourbeau","MEMBER","Okay, I've patched things up and this should be good to take another look at now ","2024-08-20T19:13:17Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-21T08:52:57Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @phofl! The code is a bit hard to decipher, but that's already been the case.","2024-08-21T08:08:11Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2024-08-27T11:08:09Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-27T11:22:22Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-27T11:23:08Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-27T12:15:41Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-27T13:38:18Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-27T13:38:37Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-27T13:44:55Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-27T13:45:08Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-27T13:45:38Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-27T14:05:24Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-27T15:37:45Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-27T15:40:24Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-27T16:25:07Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-27T16:38:58Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-27T17:02:03Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-27T17:11:32Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @phofl, this looks great!","2024-08-27T17:39:18Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for taking care of this @phofl

For my own understanding, this is stemming from some bad `numpy` / `pandas` interaction with the new `numpy` release, correct? Or am I missing something? If so, might be worth opening an upstream issue if one doesn't already exist","2024-08-19T15:01:01Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-19T15:02:03Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-19T15:02:34Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-19T15:02:58Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2024-08-19T15:06:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2024-08-19T15:07:11Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2024-08-19T17:50:46Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2024-08-27T08:45:22Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl ","2024-08-16T20:46:13Z",false,"APPROVED"
"jrbourbeau","MEMBER","Fine by me 

For my own understanding, how are this and https://github.com/dask/dask/pull/11320 related? Maybe totally unrelated but https://github.com/dask/dask/pull/11320 just happens to be where you observed failures related to this test? ","2024-08-15T17:11:16Z",false,"APPROVED"
"fjetter","MEMBER","","2024-08-15T11:33:28Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-16T09:35:41Z",false,"COMMENTED"
"phofl","COLLABORATOR","small question","2024-08-16T10:15:20Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-16T10:54:37Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-16T10:55:25Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-16T11:05:58Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-16T11:12:35Z",false,"COMMENTED"
"phofl","COLLABORATOR","lgtm","2024-08-16T16:47:54Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2024-08-20T08:49:30Z",false,"COMMENTED"
"phofl","COLLABORATOR","lgtm","2024-08-20T09:28:21Z",false,"APPROVED"
"jrbourbeau","MEMBER","> I think we should be able to get away with this since it's only been one release?

Probably. Can you remind me what has happened here with this config name? ","2024-08-16T15:16:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2024-08-16T15:45:53Z",false,"APPROVED"
"hendrikmakait","MEMBER","Overall LGTM, one (non-blocking) question about spelling consistency.","2024-08-16T15:54:05Z",false,"APPROVED"
"dcherian","CONTRIBUTOR","","2024-08-14T15:27:50Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2024-08-14T15:29:54Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2024-08-14T15:31:06Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2024-08-14T15:31:49Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2024-08-14T15:35:01Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2024-08-14T15:35:32Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-14T16:10:32Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-14T16:10:57Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-14T16:12:05Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-14T16:12:52Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-14T16:13:09Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2024-08-14T16:17:29Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-14T16:29:51Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-14T17:10:24Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2024-08-14T20:03:23Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2024-08-14T20:03:36Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2024-08-14T20:07:55Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-14T20:18:12Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-16T13:05:38Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-16T13:06:57Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-16T13:10:51Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @phofl! This looks like a great improvement. There's one issue left for a follow-up, so this is good to merge.","2024-08-16T13:12:01Z",false,"APPROVED"
"phofl","COLLABORATOR","changes lgtm me, I am fine with moving forward if you are not worried about the regressions. The fully connected layer is indeed an example that is not very likely","2024-08-14T12:54:32Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-08-14T15:08:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2024-08-14T15:49:33Z",false,"COMMENTED"
"rjzamora","MEMBER","","2024-08-14T16:34:53Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-15T12:54:51Z",false,"COMMENTED"
"rjzamora","MEMBER","","2024-08-15T13:24:48Z",false,"COMMENTED"
"rjzamora","MEMBER","","2024-08-15T16:42:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","LGTM, thanks for getting things green ","2024-08-16T14:52:15Z",false,"APPROVED"
"fjetter","MEMBER","","2024-08-13T11:49:46Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-13T11:50:58Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-13T11:53:18Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-13T11:55:01Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-13T11:59:17Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-13T12:41:44Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-13T12:42:04Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2024-08-13T11:44:55Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-08-12T14:25:20Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-12T15:31:22Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-12T15:33:06Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-12T15:35:29Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-12T15:57:15Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-12T16:58:44Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-12T16:59:19Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-13T08:53:30Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-13T08:56:10Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-13T08:59:49Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-13T12:08:13Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-13T12:10:49Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-13T12:12:26Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-13T12:26:57Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-13T12:35:13Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-13T12:43:59Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-13T12:44:07Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-13T12:44:31Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-13T12:47:27Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-13T12:48:55Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-13T12:49:37Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-13T12:58:34Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-13T13:03:32Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-13T13:05:15Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-13T13:10:03Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-13T13:12:25Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-13T13:20:39Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-13T13:32:05Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2024-08-13T15:15:56Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-13T15:23:39Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2024-08-13T15:26:48Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-13T16:39:10Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-14T12:44:09Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2024-08-12T15:01:39Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-12T15:14:37Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-12T15:47:37Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-12T15:48:32Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @phofl! One non-blocking suggestion for testing.","2024-08-12T15:48:55Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2024-08-12T15:03:22Z",false,"APPROVED"
"jakirkham","MEMBER","Thanks Charles! 🙏

Had a few questions below","2024-08-12T20:41:41Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2024-08-13T10:51:21Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-08-09T11:57:01Z",false,"APPROVED"
"lucascolley","CONTRIBUTOR","","2024-08-08T16:41:45Z",false,"COMMENTED"
"lucascolley","CONTRIBUTOR","","2024-08-09T08:24:03Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-09T11:59:31Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-12T14:46:14Z",false,"APPROVED"
"jacobtomlinson","MEMBER","This seems fine to me.

If you look at [cupy as an example](https://github.com/cupy/cupy/blob/50f522128f8a6a5423df2ed96d3caed3f3f4ae21/cupy/__init__.py#L57-L62) it seems to expose more things from numpy than we are exposing here.

Does it make sense to make things consistent with `cupy` and expose the same things?","2024-08-08T16:13:51Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-09T11:58:11Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl. I'll look at the readthedocs build once it's finished, but overall this LGTM ","2024-08-06T16:18:35Z",false,"APPROVED"
"phofl","COLLABORATOR","small question, otherwise lgtm","2024-08-06T13:00:13Z",false,"APPROVED"
"fjetter","MEMBER","","2024-08-06T13:00:43Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-06T13:01:00Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-06T13:02:14Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2024-08-06T11:28:49Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-08-08T11:17:00Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-09T09:34:40Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-09T10:37:01Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-09T10:51:53Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-09T11:04:13Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @phofl! I have a few nits regarding the documentation, but these are non-blocking. The comments are very much appreciated!","2024-08-09T16:31:50Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-08-12T17:05:16Z",false,"COMMENTED"
"fjetter","MEMBER","I assume we should reopen https://github.com/dask/dask/issues/8110? since this is effectively reverting https://github.com/dask/dask/pull/8124","2024-08-08T10:55:06Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-08-08T11:12:39Z",false,"COMMENTED"
"hendrikmakait","MEMBER","LGTM as long as CI ends up being happy. Thanks, @phofl!","2024-08-05T16:39:53Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @scharlottej13 ","2024-07-31T16:02:46Z",false,"APPROVED"
"phofl","COLLABORATOR","this looks good to me, but you certainly know much more about this part of the code than I do","2024-08-02T12:48:59Z",false,"APPROVED"
"dcherian","CONTRIBUTOR","","2024-08-02T18:03:28Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-02T22:58:17Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2024-08-03T02:29:26Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-03T12:18:29Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-05T09:43:03Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-05T11:16:48Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-05T11:19:09Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-05T11:19:43Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-05T11:23:12Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-05T11:24:04Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-05T11:25:38Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-05T11:27:54Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-05T14:17:33Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-05T14:19:00Z",false,"COMMENTED"
"hendrikmakait","MEMBER","LGTM assuming CI is green. Thanks, @phofl","2024-08-05T14:55:16Z",false,"APPROVED"
"dcherian","CONTRIBUTOR","","2024-08-05T15:34:46Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-05T15:40:54Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-07-26T12:53:43Z",false,"APPROVED"
"hendrikmakait","MEMBER","Overall LGTM, it might be good to reference the PyArrow bug (or file an issue if it doesn't exist). That's non-blocking.","2024-07-25T08:22:47Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-07-25T08:25:25Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-07-24T13:16:43Z",false,"APPROVED"
"fjetter","MEMBER","","2024-07-24T11:39:50Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-07-30T12:17:26Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-07-30T12:17:47Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-07-30T12:18:16Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-07-30T12:18:45Z",false,"COMMENTED"
"phofl","COLLABORATOR","gave this a first look and looks good!","2024-07-30T13:44:08Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-07-30T15:13:09Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-26T16:34:55Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-26T16:38:44Z",false,"COMMENTED"
"fjetter","MEMBER","Right now, the Task signature is `key: Key, func: Callable, args: tuple, kwargs: dict` but it is also possible to make it `key: Key, func: Callable, /, *args: Any, **kwargs: Any` which would make it more natural to write a task, e.g. `Task(key, func, arg1, arg2, kwarg1='foo')`.

I chose to not go down this path because it makes internals a little more complex (namely we'd have to either make SequenceOfTasks iterable or remove it entirely). The additional complexity is OK if we want this API change","2024-08-26T16:39:29Z",false,"COMMENTED"
"phofl","COLLABORATOR","This change is only hooked into distributed? I.e. if we get an old style grah then the sync scheduler will still execute the old style graph?

Wouldn't we want to do https://github.com/dask/distributed/pull/8797/files#r1731514684 client side to reduce the upload size?","2024-08-26T18:37:50Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-27T08:52:39Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-27T08:53:11Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-27T08:55:38Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-27T08:56:20Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-27T08:59:55Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-27T09:00:18Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-27T09:36:43Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-27T11:30:16Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-27T11:31:22Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-27T11:31:39Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-27T11:32:13Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-27T11:32:36Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-27T13:59:00Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-27T17:34:56Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-28T08:32:41Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-28T08:35:20Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-28T08:37:08Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-28T08:39:13Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-28T08:39:55Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-28T08:47:02Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-28T09:26:45Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-28T09:27:11Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-28T09:45:50Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-08-28T10:21:10Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-08-28T13:57:54Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-07-30T09:43:57Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2024-08-08T02:50:38Z",false,"APPROVED"
"hendrikmakait","MEMBER","Code looks good to me; one question about unit handling.","2024-07-24T11:13:49Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-07-24T11:49:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","cc @charlesbluca for visibility ","2024-08-05T15:07:46Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-07-19T13:45:05Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl! ","2024-07-17T16:15:22Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2024-07-17T16:15:35Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-07-17T12:27:20Z",false,"APPROVED"
"fjetter","MEMBER","","2024-07-16T15:04:55Z",false,"APPROVED"
"jason-trinidad","NONE","","2024-07-10T19:40:35Z",false,"COMMENTED"
"benrutter","CONTRIBUTOR","","2024-07-10T20:30:40Z",false,"COMMENTED"
"benrutter","CONTRIBUTOR","","2024-07-10T20:31:31Z",false,"COMMENTED"
"jason-trinidad","NONE","","2024-07-10T21:08:09Z",false,"COMMENTED"
"benrutter","CONTRIBUTOR","","2024-07-11T05:45:40Z",false,"COMMENTED"
"jason-trinidad","NONE","","2024-07-11T17:09:50Z",false,"COMMENTED"
"benrutter","CONTRIBUTOR","","2024-07-11T18:33:04Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-07-09T09:04:20Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-07-09T09:07:14Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2024-07-17T07:15:02Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Ah, yeah, thanks for fixing these @scharlottej13 ","2024-07-02T19:22:29Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2024-07-03T13:32:45Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-07-01T19:07:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","@dcherian do you have bandwidth to take a look at this one? For reference, we're releasing on Friday, so this could get pushed out to users soon ","2024-07-03T16:24:17Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @phofl, this is great!","2024-07-02T15:40:54Z",false,"APPROVED"
"fjetter","MEMBER","","2024-07-01T14:53:50Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl ","2024-06-26T17:02:04Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-06-26T17:10:30Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-07-02T15:21:14Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2024-07-02T15:35:11Z",false,"APPROVED"
"hendrikmakait","MEMBER","Generally LGTM, thanks @phofl!","2024-07-01T13:23:16Z",false,"APPROVED"
"fjetter","MEMBER","","2024-06-21T12:39:13Z",false,"APPROVED"
"fjetter","MEMBER","","2024-06-21T12:25:26Z",false,"APPROVED"
"fjetter","MEMBER","Looks good. Thanks for taking care of this!","2024-06-18T14:07:56Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2024-06-20T16:52:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","I'm going to merge this in order to get our docs build passing, but will open an issue to track turning `fail_on_warning` back on ","2024-06-20T19:11:02Z",false,"COMMENTED"
"phofl","COLLABORATOR","Lgtm for now","2024-06-20T19:39:41Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-06-18T15:55:04Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2024-06-21T14:51:38Z",false,"COMMENTED"
"jakirkham","MEMBER","Thanks James! 🙏

Included a few notes on dependencies available on NumPy 2, which includes most (and soon will be all) of the ones commented currently","2024-08-14T20:12:29Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-16T08:35:20Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-16T08:35:34Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-06-15T10:05:54Z",false,"APPROVED"
"jacobtomlinson","MEMBER","I think given the example that @lucascolley gave in https://github.com/data-apis/array-api/issues/832 then I don't see any issues with this.

The main backends we see used are `numpy`, `cupy` and `sparse`. And they all expose the numpy dtypes.

```python
>>> import numpy as np, cupy, sparse
>>> cupy.float64 is np.float64
True
>>> sparse.float64 is np.float64
True
```

If for some reason in the future we want to support something else we would have to do some module level `getattrs` magic. And import order would probably be a gotcha. But given that it's an edge case and we don't have anybody asking for that I don't think we should spend too much time being concerned about it.

```python
# In the future we could do this
import dask.config
dask.config.set({""array.backend"": ""something_new""})

import dask.array as da
# da.int64 should be the something_new dtype instead of numpy
```","2024-08-08T09:51:09Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-06-14T08:45:16Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-06-12T16:06:32Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-06-12T16:06:57Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @hendrikmakait. This LGTM if CI is happy. GitHub actions are down at the moment https://www.githubstatus.com/incidents/lfrlwdg67fn8 so we'll want to bump CI when things are back online","2024-06-11T21:17:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2024-06-12T02:23:35Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2024-06-12T07:44:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2024-06-12T15:07:09Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2024-06-14T15:18:58Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-06-11T10:13:41Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @fjetter!","2024-06-11T11:41:01Z",false,"APPROVED"
"jrbourbeau","MEMBER","@fjetter @hendrikmakait CI is failing here in our Python 3.9 builds ([example build here](https://github.com/dask/dask/actions/runs/9463717561/job/26069521240)) with

```
FAILED dask/tests/test_sizeof.py::test_xarray - AttributeError: module 'xarray' has no attribute 'NamedArray'
```

I'm not sure what version `NamedArray`s were added to `xarray`. Could you take a look? ","2024-06-11T19:07:03Z",false,"COMMENTED"
"YarShev","NONE","","2024-06-11T08:14:19Z",false,"COMMENTED"
"YarShev","NONE","","2024-06-12T08:16:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2024-06-12T12:24:46Z",false,"COMMENTED"
"YarShev","NONE","","2024-06-12T12:41:22Z",false,"COMMENTED"
"YarShev","NONE","","2024-06-12T12:42:22Z",false,"COMMENTED"
"martindurant","MEMBER","","2024-06-12T13:24:37Z",false,"COMMENTED"
"YarShev","NONE","","2024-06-12T13:52:06Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-06-10T12:03:31Z",false,"COMMENTED"
"phofl","COLLABORATOR","small comment, otherwise lgtm

Should we stress that this can increase risiliency if you expect connection issues? Not necessary for this PR, the current status is already an improvement","2024-06-10T12:04:17Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-06-04T11:55:50Z",false,"APPROVED"
"jacobtomlinson","MEMBER","","2024-06-05T12:46:30Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-05-29T16:05:37Z",false,"APPROVED"
"rjzamora","MEMBER","","2024-06-06T04:09:03Z",false,"COMMENTED"
"rjzamora","MEMBER","","2024-06-06T04:09:43Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2024-06-12T18:03:05Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2024-06-12T18:06:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora ","2024-05-23T17:05:59Z",false,"APPROVED"
"charlesbluca","MEMBER","","2024-05-24T19:11:29Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca ","2024-05-28T15:45:56Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-05-22T08:05:17Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for digging in here and fixing @jacobtomlinson!","2024-05-21T20:21:42Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-05-22T09:02:13Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca. Generally this sounds good to me. There are these errors showing up in CI though 

```
15:42:24 _________________ test_sort_values_tasks_backend[False-x-cudf] _________________
15:42:24 [gw2] linux -- Python 3.11.9 /opt/conda/envs/dask/bin/python3.11
15:42:24 
15:42:24 backend = 'cudf', by = 'x', ascending = False
15:42:24 
15:42:24     @pytest.mark.parametrize(
15:42:24         ""backend"", [""pandas"", pytest.param(""cudf"", marks=pytest.mark.gpu)]
15:42:24     )
15:42:24     @pytest.mark.parametrize(""by"", [""x"", ""z"", [""x"", ""z""], [""z"", ""x""]])
15:42:24     @pytest.mark.parametrize(""ascending"", [True, False])
15:42:24     def test_sort_values_tasks_backend(backend, by, ascending):
15:42:24         if backend == ""cudf"":
15:42:24 >           pytest.importorskip(""dask_cudf"")
15:42:24 E           pytest.PytestDeprecationWarning: 
15:42:24 E           Module 'dask_cudf' was found, but when imported by pytest it raised:
15:42:24 E               ImportError('libarrow.so.1600: cannot open shared object file: No such file or directory')
15:42:24 E           In pytest 9.1 this warning will become an error by default.
15:42:24 E           You can fix the underlying problem, or alternatively overwrite this behavior and silence this warning by passing exc_type=ImportError explicitly.
15:42:24 E           See [https://docs.pytest.org/en/stable/deprecations.html#pytest-importorskip-default-behavior-regarding-importerror](https://docs.pytest.org/en/stable/deprecations.html#pytest-importorskip-default-behavior-regarding-importerror%1B[0m)
15:42:24 
15:42:24 dask/dataframe/tests/test_shuffle.py:1602: PytestDeprecationWarning
```","2024-05-20T21:05:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca. I went ahead and merged `main` here to make sure CI still passes with https://github.com/dask/dask/pull/11141 (it should). Will merge if CI is happy ","2024-05-28T15:49:00Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for handling that @charlesbluca ","2024-05-28T19:51:54Z",false,"APPROVED"
"jrbourbeau","MEMBER","I'll plan to merge this in if CI is happy so it's included in the release today (xref https://github.com/dask/community/issues/381). Happy to address any comments in a follow-up PR","2024-05-17T18:44:58Z",false,"COMMENTED"
"jrbourbeau","MEMBER","I'm going to go ahead and merge this PR in so it gets into the release later today (xref https://github.com/dask/community/issues/381). @mrocklin @scharlottej13 my guess is you'll both be okay with the changes here given their minor/nitpicky nature, but if that's not the case I'm happy address any comments you may have in a follow-up PR (sorry for rushing!) 

Also, just wanted to note that the test failures here are unrelated to the changes in this PR and have been resolved over in https://github.com/dask/dask/pull/11131","2024-05-17T19:24:58Z",false,"COMMENTED"
"phofl","COLLABORATOR","small comment, change looks generally good to me","2024-08-19T08:24:31Z",false,"COMMENTED"
"dstansby","CONTRIBUTOR","","2024-08-19T09:57:06Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-19T10:07:00Z",false,"COMMENTED"
"dstansby","CONTRIBUTOR","","2024-08-19T10:44:21Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-19T11:48:35Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-19T11:49:34Z",false,"COMMENTED"
"dstansby","CONTRIBUTOR","","2024-08-19T12:42:46Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-19T13:13:50Z",false,"APPROVED"
"scharlottej13","CONTRIBUTOR","","2024-05-13T16:12:04Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-05-08T16:07:21Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-05-08T11:14:40Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @jrbourbeau! LGTM assuming CI ends up being happy.","2024-05-07T18:13:03Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @jrbourbeau!","2024-05-07T18:09:13Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl -- LGTM if it improves CI ","2024-05-06T19:46:23Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-05-06T20:56:13Z",false,"COMMENTED"
"phofl","COLLABORATOR","lgtm,

can you add a test?","2024-05-06T14:53:46Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for fixing @phofl","2024-05-06T15:52:09Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-05-06T09:42:16Z",false,"APPROVED"
"DimitriPapadopoulos","CONTRIBUTOR","","2024-05-05T09:39:51Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-05-06T09:36:59Z",false,"COMMENTED"
"DimitriPapadopoulos","CONTRIBUTOR","","2024-05-06T15:02:10Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-05-06T15:14:38Z",false,"COMMENTED"
"DimitriPapadopoulos","CONTRIBUTOR","","2024-05-06T17:04:12Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-05-06T19:41:13Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-05-06T09:31:59Z",false,"APPROVED"
"rjzamora","MEMBER","","2024-05-03T18:12:38Z",false,"COMMENTED"
"rjzamora","MEMBER","","2024-05-03T18:14:19Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-05-06T09:43:50Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-05-03T10:05:48Z",false,"APPROVED"
"quasiben","MEMBER","","2024-05-02T17:23:05Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-05-02T18:01:47Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-05-02T20:47:13Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl. Good to see the upstream build running again -- we can address fixing tests in a follow up ","2024-05-02T21:00:04Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2024-04-30T14:33:43Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-04-30T15:07:41Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-04-30T15:08:27Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-04-30T15:15:21Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-04-30T15:17:08Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-04-30T15:19:37Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-04-30T15:23:31Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-04-30T16:52:20Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-04-30T16:57:15Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-04-30T17:00:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2024-04-30T17:10:05Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-04-30T20:09:14Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-04-26T09:31:11Z",false,"CHANGES_REQUESTED"
"rjzamora","MEMBER","","2024-04-26T13:19:32Z",false,"COMMENTED"
"rjzamora","MEMBER","","2024-04-26T13:20:25Z",false,"COMMENTED"
"rjzamora","MEMBER","","2024-04-26T13:37:07Z",false,"COMMENTED"
"rjzamora","MEMBER","","2024-04-26T13:41:08Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-04-23T14:33:23Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-04-23T14:33:46Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-04-23T14:33:02Z",false,"APPROVED"
"rjzamora","MEMBER","","2024-04-22T19:05:30Z",false,"COMMENTED"
"rjzamora","MEMBER","","2024-04-22T19:11:11Z",false,"COMMENTED"
"rjzamora","MEMBER","","2024-04-22T20:36:20Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2024-05-09T13:50:14Z",false,"COMMENTED"
"rjzamora","MEMBER","","2024-05-09T15:02:10Z",false,"COMMENTED"
"charlesbluca","MEMBER","Thanks @rjzamora ","2024-05-10T14:07:55Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-04-23T14:35:09Z",false,"APPROVED"
"jacobtomlinson","MEMBER","","2024-04-19T15:27:49Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jacobtomlinson. Overall this LGTM. Happy to give it a try for the release later today ","2024-04-19T16:16:32Z",false,"APPROVED"
"jacobtomlinson","MEMBER","","2024-04-19T16:22:09Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2024-04-19T16:23:26Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2024-04-19T16:24:21Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2024-04-19T16:24:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2024-04-19T16:26:21Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-04-17T17:09:52Z",false,"APPROVED"
"fjetter","MEMBER","","2024-04-18T09:51:21Z",false,"APPROVED"
"rjzamora","MEMBER","Ah, my mistake for missing this earlier. Thanks @wence- ","2024-04-18T16:33:37Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-04-12T12:10:34Z",false,"APPROVED"
"rjzamora","MEMBER","Thanks @charlesbluca!","2024-04-22T17:07:26Z",false,"APPROVED"
"fjetter","MEMBER","","2024-04-15T12:08:25Z",false,"APPROVED"
"phofl","COLLABORATOR","lgtm","2024-04-04T15:25:59Z",false,"APPROVED"
"galipremsagar","CONTRIBUTOR","","2024-04-03T14:33:10Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-04-03T14:37:23Z",false,"APPROVED"
"phofl","COLLABORATOR","lgtm","2024-04-03T17:00:38Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-04-08T16:52:59Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for tracking this one down @phofl ","2024-03-27T14:23:37Z",false,"APPROVED"
"rjzamora","MEMBER","","2024-04-03T23:51:26Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-04-08T15:21:15Z",false,"APPROVED"
"fjetter","MEMBER","","2024-03-25T22:43:19Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2024-04-01T16:14:02Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2024-04-01T17:31:59Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2024-04-01T17:37:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Happy to merge this after CI finishes ","2024-04-01T17:37:50Z",false,"APPROVED"
"phofl","COLLABORATOR","lgtm ","2024-03-25T18:30:08Z",false,"APPROVED"
"phofl","COLLABORATOR","thx!

Please feel free to reach out if you run into any issues while creating the examples","2024-03-25T18:23:04Z",false,"APPROVED"
"jrbourbeau","MEMBER","It looks like some, but not all, of the failures here are present elsewhere (for example [this CI build](https://gpuci.gpuopenanalytics.com/job/dask/job/dask/job/prb/job/dask-prb/5792/CUDA_VER=11.8.0,LINUX_VER=ubuntu20.04,PYTHON_VER=3.10,RAPIDS_VER=24.04/console) from https://github.com/dask/dask/pull/11009). Looks like there are some `dask-expr` connections as well cc @rjzamora","2024-03-19T18:31:02Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2024-03-22T18:36:27Z",false,"APPROVED"
"phofl","COLLABORATOR","thx","2024-03-25T18:24:20Z",false,"APPROVED"
"phofl","COLLABORATOR","sounds good","2024-03-25T18:28:15Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @DimitriPapadopoulos","2024-03-12T19:32:54Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2024-03-08T14:14:23Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-03-08T14:20:26Z",false,"COMMENTED"
"hendrikmakait","MEMBER","LGTM assuming CI is green.","2024-03-08T14:57:23Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-03-08T14:58:09Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-03-08T14:58:25Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-03-08T15:05:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @phofl -- LGTM if CI is happy ","2024-03-07T15:30:44Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2024-03-04T18:22:15Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-03-04T18:26:32Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-03-04T19:10:57Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @phofl! `test_to_parquet_overwrite_files_from_read_parquet_in_same_call_raises` isn't happy on Windows, but I consider that non-blocking.","2024-03-05T07:51:44Z",false,"APPROVED"
"mrocklin","MEMBER","","2024-03-04T14:42:42Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-03-04T14:46:36Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @phofl! `test_groupby_dataframe_cum_caching` failed once, I'm not sure if that's related. Anyhow, I'm inclined to merge this to unblock `distributed` CI regardless.","2024-03-04T17:27:16Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","LGTM, thanks @phofl!","2024-03-02T11:24:27Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-03-04T12:01:44Z",false,"APPROVED"
"fjetter","MEMBER","I don't have a 32bit system available but the test adjustments look harmless so I'll go ahead and merge. Thank you!","2024-03-01T12:45:13Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-03-04T12:03:21Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-03-01T09:35:39Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","LGTM, thanks @phofl!","2024-03-02T15:30:11Z",false,"APPROVED"
"rjzamora","MEMBER","","2024-02-29T15:10:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @phofl ","2024-02-29T15:19:57Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-02-29T15:37:57Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-02-29T15:38:19Z",false,"COMMENTED"
"fjetter","MEMBER","@rjzamora @jrbourbeau I read your comments as nonblocking. If anything comes up we'll address it in a follow up but I'd like to move this along asap.","2024-03-04T14:00:04Z",false,"APPROVED"
"jorisvandenbossche","MEMBER","","2024-03-10T20:24:04Z",false,"COMMENTED"
"rjzamora","MEMBER","","2024-03-11T00:22:09Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2024-03-11T07:50:12Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-03-11T07:53:49Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2024-03-11T07:57:31Z",false,"COMMENTED"
"martindurant","MEMBER","","2024-02-28T22:28:42Z",false,"COMMENTED"
"lgray","CONTRIBUTOR","","2024-02-28T22:36:20Z",false,"COMMENTED"
"martindurant","MEMBER","","2024-02-28T22:37:54Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2024-03-04T10:19:09Z",false,"APPROVED"
"fjetter","MEMBER","This looks great, thank you @lgray ","2024-03-04T10:19:27Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-02-28T11:49:09Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","LGTM, thanks! ","2024-02-28T13:18:22Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @crusaderky ","2024-02-27T18:57:22Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @wimglenn ","2024-02-27T18:49:25Z",false,"APPROVED"
"rjzamora","MEMBER","","2024-02-26T15:35:08Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @fjetter!","2024-02-26T15:45:46Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","LGTM! Thanks, @phofl ","2024-02-26T12:31:26Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2024-02-26T13:34:34Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-02-23T13:58:47Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2024-02-23T11:43:05Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2024-02-22T16:27:36Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-02-20T14:39:31Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-02-20T15:32:00Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl -- this LGTM if CI is happy. Just one non-blocking question ","2024-02-20T15:51:11Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-02-22T13:08:01Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-02-20T14:51:23Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-02-19T16:55:10Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","Changes for the better!

Only one suggestion really w/ a couple example comments of changing the `with open` contexts to use pathlib styled `read/write_text` which could happen in _many_ places. But leave that for you to decide.","2024-02-20T08:13:24Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-02-20T11:18:20Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-02-19T10:33:54Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","One small comment, take it or leave it. Looks good otherwise, thanks @crusaderky!","2024-02-19T12:00:29Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-02-19T12:15:30Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-19T12:16:18Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-16T16:08:54Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-16T16:09:32Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-16T16:09:40Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-16T16:11:19Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-16T16:13:35Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-16T16:15:35Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-16T16:16:47Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-16T16:17:23Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-16T16:21:07Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-16T16:22:30Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-16T16:23:51Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","Some minor suggestions.

A tweak that I'd like to see, to prevent confusion from the output of `dask config find`, is to print out the value in the default files embedded in the packages, if any.
This however can be postponed to a follow-up PR.","2024-02-16T16:27:31Z",false,"CHANGES_REQUESTED"
"milesgranger","CONTRIBUTOR","","2024-02-19T07:15:47Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2024-02-19T07:20:06Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2024-02-19T08:03:49Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2024-02-19T08:10:13Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-19T11:59:03Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2024-02-19T12:05:22Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-19T12:08:40Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-19T12:11:50Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-19T12:13:27Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2024-02-19T13:05:33Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2024-02-19T13:06:07Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-19T16:34:59Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-03-04T16:37:18Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","LGTM, thanks @crusaderky.
[
CI failure seems unrelated](https://github.com/dask/dask/actions/runs/7920595136/job/21623975906?pr=10928#step:8:32035):
> FAILED dask/dataframe/tests/test_dataframe.py::test_ffill - ValueError: All NaN partition encountered in `fillna`. Try using ``df.repartition`` to increase the partition size, or specify `limit` in `fillna`.","2024-02-16T12:00:28Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","Nice, thank you @crusaderky.

","2024-02-16T12:01:21Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","Good find and fix, @crusaderky, thanks!","2024-02-16T12:04:55Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-02-15T10:48:30Z",false,"CHANGES_REQUESTED"
"crusaderky","COLLABORATOR","","2024-02-15T12:14:58Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2024-02-14T15:52:51Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-14T15:56:02Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @crusaderky!","2024-02-14T17:04:29Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2024-02-14T19:06:56Z",false,"APPROVED"
"crusaderky","COLLABORATOR","The new command dumps out your _whole_ dask config to `~/.config/dask/dask.yaml`.

I would like to treat this as an antipattern, as it will cause many problems down the line when some developer changes a default of some obscure setting but the users don't pick up the change. What's worse, wiping and rebuilding the conda environment won't reflect the change. Also, the user will have no indication, when they do open that config file, about which settings were their own intentional changes from a month before and which were just copy-pasted defaults.

Could you change the code to add the new explicit config override to whatever was already there in `~/.config/dask/dask.yaml`, but nothing in addition to that?

Finally, could you document the new command in `docs/source/configuration.rst`?","2024-02-14T15:30:48Z",false,"CHANGES_REQUESTED"
"crusaderky","COLLABORATOR","","2024-02-14T15:32:21Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-14T15:35:24Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-14T15:38:06Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2024-02-15T05:48:52Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-15T11:01:15Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-15T11:01:51Z",false,"APPROVED"
"crusaderky","COLLABORATOR","Could you document the new command in docs/source/configuration.rst?
Everything else LGTM","2024-02-15T11:05:33Z",false,"CHANGES_REQUESTED"
"crusaderky","COLLABORATOR","","2024-02-15T17:50:47Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2024-02-12T22:45:57Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-02-14T10:46:31Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-02-12T16:13:23Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-12T16:14:31Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-02-09T16:12:47Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2024-02-09T22:17:58Z",false,"APPROVED"
"rjzamora","MEMBER","This seems reasonable to me - Thanks @phofl!","2024-02-09T17:55:16Z",false,"APPROVED"
"fjetter","MEMBER","","2024-02-12T12:35:55Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-02-12T12:40:50Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-02-12T12:56:27Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-12T16:35:38Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-12T16:36:22Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-12T16:36:59Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-12T16:37:16Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-12T16:40:08Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-02-14T16:48:08Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-14T17:46:13Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-14T17:49:45Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-14T17:50:01Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-14T17:50:09Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-02-14T18:02:43Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-02-14T18:05:15Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @crusaderky! LGTM assuming CI is green","2024-02-14T18:06:47Z",false,"APPROVED"
"fjetter","MEMBER","","2024-02-09T12:27:56Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-02-09T15:35:05Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","Nice catch! Looks good to me.","2024-02-09T09:05:17Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-02-09T10:12:25Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-02-09T10:16:31Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2024-02-08T18:00:06Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","Good for me, assuming CI is happy. Thanks @phofl! ","2024-02-08T11:52:15Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-02-08T12:42:27Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-08T13:45:56Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-02-08T13:49:08Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-02-08T13:49:19Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-02-07T10:50:47Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2024-02-06T16:05:42Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-02-06T19:16:38Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-02-08T14:28:31Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","Good for me, thanks! ","2024-02-06T11:32:43Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-02-14T10:44:13Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2024-02-06T14:55:41Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-02-05T15:28:06Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-02-05T11:19:51Z",false,"APPROVED"
"crusaderky","COLLABORATOR","thank you!","2024-02-05T10:53:56Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @milesgranger. Would you mind updating the minimum version listed for `mimesis` in https://docs.dask.org/en/stable/install.html#optional-dependencies? Otherwise, this LGTM ","2024-02-05T16:44:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Ah, nevermind then. I thought this was a new API. Thanks again @milesgranger ","2024-02-06T14:52:55Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","LGTM, assuming CI is happy-ish. :+1: ","2024-02-02T13:20:30Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-02-05T14:22:08Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-05T15:05:45Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-02-05T15:19:50Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-05T15:55:33Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-02-05T23:23:24Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-02-14T13:35:00Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","Nothing stands out to me, looks good. Thanks, @crusaderky!","2024-02-12T08:59:16Z",false,"APPROVED"
"fjetter","MEMBER","","2024-02-12T11:04:28Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-02-12T11:42:49Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-02-12T11:44:58Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-02-12T12:02:08Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-02-12T12:03:58Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-12T16:59:23Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-12T17:02:31Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-12T17:05:06Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @mrocklin. Overall this looks like a nice improvement to me. All the comments / suggestions I left are non-blocking ","2024-02-01T16:54:52Z",false,"APPROVED"
"mrocklin","MEMBER","","2024-02-01T19:32:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2024-02-01T19:32:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2024-02-01T21:04:07Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-02-02T17:00:04Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-02-02T17:58:03Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl -- overall this LGTM. I left a few comments, the main one I care about is the new API page being top-level in the DataFrame toc. All the other comments are just non-blocking suggestions. ","2024-02-01T02:36:31Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-02-01T11:55:58Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-02-01T11:56:16Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-02-01T11:56:33Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-02-01T11:57:06Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-30T21:18:35Z",false,"APPROVED"
"jrbourbeau","MEMBER","Nice! Looks like running on M1 Macs reduces test runtime from ~50 mins to ~25 mins

For other who may be interested, here's the corresponding GitHub announcement https://github.blog/changelog/2024-01-30-github-actions-introducing-the-new-m1-macos-runner-available-to-open-source/

Also noting the test failure here is unrelated (xref https://github.com/dask/dask/issues/10875) ","2024-01-30T19:42:11Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-01-31T16:49:33Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-02-06T12:02:44Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-02-06T12:04:08Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-06T12:24:31Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-06T12:26:02Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-02-06T12:39:01Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-02-06T12:53:34Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @crusaderky! Consider the nits non-blocking and the comment just a clarification for my understanding.","2024-02-06T15:11:25Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-02-06T15:40:54Z",false,"COMMENTED"
"phofl","COLLABORATOR","thx! assuming ci is happy","2024-01-29T17:24:33Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-29T17:01:05Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","LGTM, thanks!","2024-02-01T12:47:40Z",false,"APPROVED"
"hendrikmakait","MEMBER","CI failures appear to be unrelated. Thanks, @phofl!","2024-01-29T16:10:24Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-29T16:11:14Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-01-29T12:56:39Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @phofl! LGTM assuming CI is happy.","2024-01-29T10:44:32Z",false,"APPROVED"
"fjetter","MEMBER","","2024-01-29T11:06:54Z",false,"APPROVED"
"ntabris","CONTRIBUTOR","","2024-01-26T22:04:16Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-01-29T09:29:41Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-01-29T11:13:31Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-01-29T14:28:42Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-01-29T14:34:43Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-01-29T15:05:09Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-01-26T16:07:53Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-01-26T16:12:05Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-01-26T16:23:04Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-01-26T16:24:58Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-01-26T16:56:23Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-01-26T16:58:14Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @fjetter! LGTM assuming CI is happy.","2024-01-26T16:59:57Z",false,"APPROVED"
"fjetter","MEMBER","","2024-01-26T16:06:09Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-29T09:30:31Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","Good for me, thanks @jrbourbeau!","2024-01-25T19:44:45Z",false,"APPROVED"
"scharlottej13","CONTRIBUTOR","","2024-01-23T20:14:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2024-01-23T20:57:12Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2024-01-23T21:27:18Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-01-23T13:01:01Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-01-23T13:48:12Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @crusaderky!","2024-01-23T15:36:53Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-01-23T10:01:02Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-29T23:06:56Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2024-01-23T15:38:30Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @crusaderky!","2024-01-23T09:59:50Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-29T09:51:48Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @crusaderky!","2024-01-22T13:57:50Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @crusaderky!","2024-01-22T11:10:39Z",false,"APPROVED"
"hendrikmakait","MEMBER","❤️ ","2024-01-23T10:48:25Z",false,"APPROVED"
"charlesbluca","MEMBER","","2024-01-22T17:30:13Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2024-01-19T16:53:04Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-19T22:37:11Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2024-01-22T08:58:37Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-01-19T17:45:30Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-19T22:33:55Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-01-20T21:16:31Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-01-20T21:17:31Z",false,"APPROVED"
"crusaderky","COLLABORATOR","CI is very red now","2024-01-20T21:52:50Z",false,"DISMISSED"
"phofl","COLLABORATOR","","2024-01-19T15:50:56Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-19T14:01:57Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-19T12:28:50Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","","2024-01-19T11:33:03Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-01-23T15:52:28Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @crusaderky!","2024-01-22T09:03:33Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @phofl, these changes look reasonable to me!","2024-01-19T09:48:53Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","Getting close, thanks @phofl!","2024-01-19T11:35:08Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2024-01-29T13:44:31Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-18T14:39:08Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-18T13:13:43Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-18T14:36:13Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-18T18:41:13Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-01-17T15:41:14Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-17T15:57:24Z",false,"APPROVED"
"phofl","COLLABORATOR","thx","2024-01-17T15:39:43Z",false,"APPROVED"
"crusaderky","COLLABORATOR","I think this works given the current de-facto implementation. Should be _good enough_ in all but the degenerate cases.","2024-01-18T11:49:19Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-01-17T14:27:19Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-01-17T14:30:42Z",false,"APPROVED"
"hendrikmakait","MEMBER","The changes make sense as far as I can tell. I don't quite like the fact that we're `xfail`ing numerous tests for `dask-expr` because something is not supported (yet) without linking issues for the respective items. I suppose that this is to improve velocity before the release. I'm fine with that as long as we go through whatever `xfail`s and adjustments that remain in the test suite before the first major release of `dask-expr` and collect remaining issues at that point in time.","2024-01-17T15:14:55Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-08-19T14:45:13Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-16T18:44:50Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-01-16T14:22:07Z",false,"APPROVED"
"fjetter","MEMBER","","2024-01-17T10:05:10Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","Test is now failing","2024-01-17T11:23:25Z",false,"CHANGES_REQUESTED"
"fjetter","MEMBER","","2024-01-17T14:04:08Z",false,"COMMENTED"
"fjetter","MEMBER","","2024-01-25T14:52:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @milesgranger! One minor comment about a comment ","2024-01-16T19:17:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2024-01-16T19:31:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2024-01-16T19:44:51Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @crusaderky ","2024-01-16T16:11:27Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-16T11:40:53Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-16T11:40:18Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-01-15T14:21:36Z",false,"COMMENTED"
"phofl","COLLABORATOR","Thx","2024-01-15T20:41:31Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-01-15T12:10:32Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-15T12:37:50Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-15T12:38:13Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2024-01-15T12:39:54Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-15T12:42:22Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-15T15:33:03Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-15T15:33:44Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-17T15:44:11Z",false,"COMMENTED"
"dhruvishah15","NONE","","2024-01-17T16:44:56Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-18T16:58:45Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2024-01-12T13:07:07Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","","2024-01-12T12:15:51Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","Looks good, the failing test doesn't appear related. 
> FAILED dask/dataframe/tests/test_dataframe.py::test_describe_empty - Failed: DID NOT WARN. No warnings of type (<class 'RuntimeWarning'>,) were emitted.
The list of emitted warnings is: [].

Also failed in the [most recent `main` tests](https://github.com/dask/dask/actions/runs/7547529630/job/20547691508#step:8:26336)

Thanks, @phofl!","2024-01-17T05:53:49Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","LGTM, thank you! :+1: ","2024-01-12T04:28:00Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","Small comment, but looks great otherwise. :+1: ","2024-01-12T04:30:03Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-12T08:34:24Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2024-01-12T08:55:02Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2024-01-11T13:00:09Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-11T15:07:20Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-11T15:07:24Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-11T12:49:22Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2024-01-11T12:57:30Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-11T15:07:59Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","","2024-01-15T07:11:58Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","Mostly nits","2024-01-15T11:37:51Z",false,"CHANGES_REQUESTED"
"crusaderky","COLLABORATOR","","2024-01-15T11:41:48Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2024-01-15T11:44:43Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-01-15T11:46:19Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","I know it's still draft, but if you're happy, I'm happy.","2024-01-11T11:23:21Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-01-10T23:46:19Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-11T09:04:21Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-01-12T10:38:38Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-10T22:00:51Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-01-10T23:37:45Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-01-10T23:37:55Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @fjetter! One nit regarding hygiene.","2024-01-11T09:18:54Z",false,"APPROVED"
"crusaderky","COLLABORATOR","It doesn't seem to work:

https://github.com/crusaderky/dask/pull/25
https://github.com/crusaderky/dask/pull/25/checks?check_run_id=20354061965
https://github.com/crusaderky/dask/actions/runs/7478648117/job/20354047349

> 2024-01-10 17:31:53 +0000 - publish - WARNING - Could not find any JUnit XML files for artifacts/**/*.xml

[EDIT] not a collision.
Log for Upload test results:
> Warning: No files were found with the provided path: reports. No artifacts will be uploaded.","2024-01-10T18:03:26Z",false,"CHANGES_REQUESTED"
"crusaderky","COLLABORATOR","","2024-01-10T18:05:58Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","Looks good. 

ATM it's quite unusable though, because the report is flooded with failures from the dask-expr environment. Not sure if we want to spend time to omit that env for now or if we just want to wait for it to become green?

cc @fjetter @phofl ","2024-01-11T10:07:06Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-10T11:15:30Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-01-10T16:10:41Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-11T09:05:00Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-11T09:05:18Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-01-10T11:05:48Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-10T12:03:41Z",false,"APPROVED"
"fjetter","MEMBER","","2024-01-10T11:01:55Z",false,"APPROVED"
"phofl","COLLABORATOR","lgtm","2024-01-10T09:15:06Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-10T09:16:03Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-01-10T09:41:46Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-10T09:42:23Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Changes look good to me, thanks @phofl","2024-01-10T11:24:10Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR"," One question and nit about `pytest.skip` uses is all. LGTM otherwise, thank you!

---

Edit: The 3.12 failures ought to be fixed after update, fixed in https://github.com/dask-contrib/dask-expr/pull/689. The other seems unrelated...

```
FAILED dask/tests/test_delayed.py::test_name_consistent_across_instances - AssertionError: assert 'identity-096...f6f4120187a73' == 'identity-4f3...7c3ac07f7201a'
  - identity-4f318f3c27b869239e97c3ac07f7201a
  + identity-09699241ef8c5469dd9f6f4120187a73
```","2024-01-10T13:43:33Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-10T13:55:48Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-10T13:56:10Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2024-01-10T13:59:08Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-10T14:00:31Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","The one non-cosmetic change is support for duplicated columns changed from skip to xfail. It's a missing feature in dask-expr we expect to add eventually.","2024-01-09T14:36:53Z",false,"CHANGES_REQUESTED"
"phofl","COLLABORATOR","","2024-01-09T15:27:41Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-01-10T11:28:22Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-10T11:30:33Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-01-10T14:41:32Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-01-10T14:44:09Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-10T14:45:09Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-01-10T15:03:43Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-10T15:05:38Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2024-01-10T15:27:09Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2024-01-09T14:13:29Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","LGTM!","2024-01-09T14:19:05Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-09T09:27:46Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","LGTM!","2024-01-08T11:30:10Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-08T13:19:10Z",false,"APPROVED"
"hendrikmakait","MEMBER","TIL: You can't evaluate the config in `pytest.mark`s. LGTM, just a small PEP8 nit.","2024-01-08T09:42:01Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2024-01-08T09:21:12Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-08T09:45:27Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @phofl. Feel free to ignore the existing nit.","2024-01-08T10:02:49Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-01-08T16:20:20Z",false,"APPROVED"
"phofl","COLLABORATOR","Can you add a test that checks that we raise a FutureWarning?","2024-01-05T11:40:56Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-05T17:24:52Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","Only a question for grouper issue todo, looks super duper otherwise!

---

Failure must be unrelated I think...

https://github.com/dask/dask/actions/runs/7464584164/job/20311878732?pr=10749#step:10:26188

```
FAILED dask/dataframe/io/tests/test_parquet.py::test_create_metadata_file[pyarrow-fastparquet-a] - AssertionError: DataFrame are different

DataFrame shape mismatch
[left]:  (100, 2)
[right]: (99, 2)
``","2024-01-10T13:54:39Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-10T13:57:56Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-10T13:58:21Z",false,"COMMENTED"
"rjzamora","MEMBER","LGTM. gpuci failures are obviously unrelated (and should be resolved soon).","2024-01-04T15:59:32Z",false,"APPROVED"
"phofl","COLLABORATOR","feel free to merge when ci is green","2024-01-04T13:33:47Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2024-01-02T23:28:07Z",false,"COMMENTED"
"phofl","COLLABORATOR","lgtm

feel free to merge @hendrikmakait if you want to take a look as well, otherwise I'll merge tomorrow","2024-01-03T17:19:34Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @crusaderky!","2024-01-04T11:31:49Z",false,"APPROVED"
"martindurant","MEMBER","","2024-03-19T13:37:46Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2024-03-19T14:50:25Z",false,"COMMENTED"
"martindurant","MEMBER","","2024-03-19T14:56:34Z",false,"COMMENTED"
"phofl","COLLABORATOR","Hi, thanks for taking a stab at this, could you please add a test?","2024-01-02T16:31:21Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-30T00:09:48Z",false,"COMMENTED"
"bouweandela","CONTRIBUTOR","","2024-01-30T10:20:57Z",false,"COMMENTED"
"phofl","COLLABORATOR","Lgtm","2023-12-22T16:05:16Z",false,"APPROVED"
"fjetter","MEMBER","@phofl in case you want to have another look","2024-01-10T13:41:15Z",false,"COMMENTED"
"phofl","COLLABORATOR","the logic looks fine, I think the test failures are something that we can fix by adjusting the test","2024-01-10T14:27:14Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-01-03T17:00:25Z",false,"APPROVED"
"TomAugspurger","MEMBER","These changes seem reasonable to me. Would we need to make this change with a deprecation cycle? I'm leaning towards not needing a deprecation, but maybe I'm missing out on some use case where the outcome is sensitive to the hashing.","2024-03-24T01:29:05Z",false,"COMMENTED"
"fjetter","MEMBER","Sorry, didn't want to stop merging this. I agree this is an improvement and the edge cases that are not handled well by tokenize are likely rarely if ever hit by this code.

I also don't think this needs a deprecation cycle. Thanks for you work and sorry for the delay @cisaacstern ","2024-04-08T09:55:40Z",false,"APPROVED"
"scharlottej13","CONTRIBUTOR","","2023-12-20T01:40:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @scharlottej13 

The spacing looks good on a small screen (though the `...` wrapping in the first bullet point is a little off):

<img width=""1552"" alt=""Screenshot 2023-12-20 at 9 51 37 AM"" src=""https://github.com/dask/dask/assets/11656932/c22dd125-0590-4e93-ad14-19f7b6b80bb1"">

but there's still lots of whitespace on a large screen:

![Screenshot 2023-12-20 at 9 51 22 AM](https://github.com/dask/dask/assets/11656932/541bcf69-3173-4778-8f3e-8b548297d0b7)

Is it easy to play around with the sizing of the animation to have it display better on a large screen? ","2023-12-20T16:07:02Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @jrbourbeau!","2023-12-20T09:59:28Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-12-19T14:00:00Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-12-19T14:01:29Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2024-01-03T07:06:53Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2024-01-03T07:13:31Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-03T09:38:51Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-03T09:39:15Z",false,"COMMENTED"
"phofl","COLLABORATOR","one small comment, otherwise lgtm","2024-01-03T09:46:59Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","LGTM, thanks! :+1: ","2023-12-19T09:26:59Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2023-12-19T08:46:34Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @fjetter ","2023-12-18T15:30:58Z",false,"APPROVED"
"crusaderky","COLLABORATOR","A few minor nits","2024-01-05T15:06:44Z",false,"CHANGES_REQUESTED"
"phofl","COLLABORATOR","","2024-01-05T15:09:38Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-05T15:10:52Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-05T15:13:55Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-05T15:14:44Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-01-05T15:16:42Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","I'm seeing a regression in `test_groupby.py::test_dataframe_aggregations_multilevel` in the 3.9 CI envs","2024-01-05T17:15:32Z",false,"CHANGES_REQUESTED"
"crusaderky","COLLABORATOR","","2024-01-05T18:12:57Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-12-15T19:34:10Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-12-15T18:21:21Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @mrocklin. Looking now. If I have any minor nitpicks, I'll either keep them to myself, or push them directly to get this in before releasing today","2023-12-15T18:45:29Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @mrocklin -- this looks like a nice improvement. I pushed up a commit with a few minor updates (e.g. standardized spelling of ""DataFrame""). 

Also left a couple of non-blocking comments ","2023-12-15T19:27:36Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @fjetter!","2023-12-18T17:24:15Z",false,"APPROVED"
"fjetter","MEMBER","","2023-12-19T09:05:35Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @phofl, this should fix our problem for the most common case.","2023-12-14T18:18:45Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for taking the time to add this @phofl. ","2023-12-14T20:14:48Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-12-14T21:10:17Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-12-14T21:11:29Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-12-14T21:23:00Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-12-14T21:23:03Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-12-14T21:23:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-12-15T18:42:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-12-15T18:42:29Z",false,"APPROVED"
"charlesbluca","MEMBER","","2023-12-13T18:42:10Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-12-13T19:14:44Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-12-13T20:21:15Z",false,"COMMENTED"
"fjetter","MEMBER","I'm fine with this fix. Is there anything left to discuss?","2023-12-18T13:30:09Z",false,"APPROVED"
"mrocklin","MEMBER","","2023-12-13T17:51:06Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @mrocklin -- taking a look now ","2023-12-13T17:59:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @mrocklin. Overall this looks good to me -- just left a few minor comments","2023-12-13T18:12:20Z",false,"COMMENTED"
"mrocklin","MEMBER","","2023-12-13T20:13:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2023-12-13T20:13:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-12-14T03:50:50Z",false,"APPROVED"
"fjetter","MEMBER","","2023-12-14T10:20:05Z",false,"APPROVED"
"hendrikmakait","MEMBER","Generally looks good to me, though I do not fully understand the change.","2023-12-13T17:11:31Z",false,"COMMENTED"
"hendrikmakait","MEMBER","LGTM after a second pass.","2023-12-13T17:15:11Z",false,"APPROVED"
"hendrikmakait","MEMBER","@Andrew-S-Rosen: Simply forwarding the `__annotations__` unfortunately does not work here. With your change, the following happens:

```python3
import inspect
from dask import delayed

def add(a: int, b: int) -> int:
    return a

print(inspect.signature(add))
# <Signature (a: int, b: int) -> int>

print(isinstance(add(1, 2), int))
# True
# As expected, add is eagerly evaluated and returns an integer

deladd = delayed(add)
print(inspect.signature(add))
# <Signature (a: int, b: int) -> int>
# Signature of deladd matches add

print(isinstance(add(1, 2), int))
# False
# ERROR: The expected return type does not match the actual type! 

print(deladd(1, 2))
# Delayed('add-7892a429-a034-4821-9e5e-ad482e18f217')
# deladd returns a `Delayed` object
```

I'd recommend removing the `__annotations__` forwarding and sticking to `__wrapped__` for this PR.","2023-12-14T09:26:23Z",false,"CHANGES_REQUESTED"
"hendrikmakait","MEMBER","Thanks for your contribution, @Andrew-S-Rosen!","2023-12-14T17:09:04Z",false,"APPROVED"
"fjetter","MEMBER","","2023-12-12T15:29:54Z",false,"APPROVED"
"fjetter","MEMBER","","2023-12-13T09:39:49Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2023-12-18T13:33:42Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2023-12-12T13:49:59Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-12-12T19:11:33Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @mrocklin!","2023-12-12T16:07:01Z",false,"APPROVED"
"fjetter","MEMBER","","2023-12-06T11:26:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2023-12-08T22:32:53Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-12-08T22:36:01Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2023-12-17T01:45:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2023-12-18T02:32:32Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2023-12-18T03:10:37Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-18T15:37:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2023-12-18T15:55:20Z",false,"COMMENTED"
"mrocklin","MEMBER","","2023-12-18T15:56:33Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2023-12-19T17:47:52Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-12-20T17:03:00Z",false,"CHANGES_REQUESTED"
"crusaderky","COLLABORATOR","","2023-12-20T17:06:17Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-12-20T17:13:25Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-12-20T17:15:06Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2023-12-20T17:25:16Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-12-22T16:29:16Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-12-22T16:37:28Z",false,"APPROVED"
"phofl","COLLABORATOR","Ideally you shouldn't reach optimise either, that's also expensive if you read from remote storage for example

lgtm otherwise","2023-12-22T22:29:21Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","Thanks Matt, I like these changes overall (especially fewer words), and it's really nice to have the APIs higher up above the fold.","2023-12-05T22:16:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2023-12-05T22:42:00Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2023-12-05T23:08:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2023-12-05T23:09:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2023-12-06T16:21:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @fjetter. This LGTM. I left one non-blocking comment (feel free to address or not)","2023-12-05T15:50:56Z",false,"APPROVED"
"fjetter","MEMBER","","2023-12-06T08:36:27Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-06T10:35:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-12-05T15:52:09Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-12-05T15:55:27Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-12-04T22:19:07Z",false,"APPROVED"
"phofl","COLLABORATOR","","2024-08-19T14:44:38Z",false,"COMMENTED"
"joanrue","CONTRIBUTOR","","2024-08-19T14:58:39Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-19T14:59:41Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-19T15:00:29Z",false,"COMMENTED"
"lucascolley","CONTRIBUTOR","","2024-08-19T15:11:32Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-19T15:17:54Z",false,"COMMENTED"
"joanrue","CONTRIBUTOR","","2024-08-19T15:21:40Z",false,"COMMENTED"
"lucascolley","CONTRIBUTOR","","2024-08-19T15:23:18Z",false,"COMMENTED"
"lucascolley","CONTRIBUTOR","thanks @joanrue, looks good to me! (I'm not familiar with the Dask codebase, so take that with a pinch of salt!)","2024-08-20T10:44:14Z",false,"APPROVED"
"phofl","COLLABORATOR","small comment","2024-08-20T10:50:02Z",false,"COMMENTED"
"joanrue","CONTRIBUTOR","","2024-08-20T13:54:04Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2024-08-20T14:00:00Z",false,"APPROVED"
"phofl","COLLABORATOR","thx","2023-12-12T17:18:00Z",false,"APPROVED"
"fjetter","MEMBER","","2023-12-08T09:58:40Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-08T14:40:19Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-08T14:45:49Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-08T14:47:04Z",false,"COMMENTED"
"hendrikmakait","MEMBER","A few minor comments/nits from the first superficial round.","2023-12-11T13:19:25Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-12-11T13:20:45Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-12-11T13:47:11Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-12-11T13:55:39Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-12-11T13:57:30Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-12-11T13:59:38Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-11T15:12:14Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-11T15:12:51Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-11T15:13:06Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-11T15:14:57Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-11T15:28:01Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-12-11T15:35:33Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-11T16:31:47Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-11T16:52:01Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-11T16:56:38Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-12-11T17:29:24Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-12-12T10:25:37Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-12T15:03:42Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-12T15:05:12Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-12T15:06:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! ","2023-11-28T21:26:19Z",false,"APPROVED"
"d-v-b","MEMBER","","2023-11-24T18:36:01Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2023-11-25T10:23:59Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2023-11-25T11:04:32Z",false,"COMMENTED"
"rjzamora","MEMBER","Makes sense to me. Thanks @phofl ","2023-11-28T16:21:28Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-11-28T16:43:35Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks @phofl - Seems good to me.","2023-11-21T17:49:56Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-11-21T17:57:29Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-06T08:39:20Z",false,"APPROVED"
"charlesbluca","MEMBER","","2023-11-21T14:38:07Z",false,"APPROVED"
"fjetter","MEMBER","","2023-12-13T15:26:39Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-11-15T17:00:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @fjetter -- just a couple of minor comments ","2023-11-15T17:01:03Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-11-20T11:30:00Z",false,"APPROVED"
"fjetter","MEMBER","","2023-11-10T08:23:32Z",false,"APPROVED"
"pentschev","MEMBER","+1 to this. Thanks @jacobtomlinson .","2023-11-09T12:20:25Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jacobtomlinson! This seems totally fine to me. Could you also make similar updates to the various `mindeps` conda env files and the nightly conda package [here](https://github.com/dask/dask/blob/c71fc7453d143c65ccce18441d0ead1673e6b782/continuous_integration/recipe/meta.yaml#L30). Otherwise, this looks good to me

Also, merging `main` should fix the unrelated `test_quantile` failures ","2023-11-09T15:25:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-11-10T16:03:17Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-11-09T18:24:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for handling this @fjetter. A couple of thoughts:

- Having the warning at the `import dask.dataframe as dd` level seems a little heavy handed. IIRC we only use `pyarrow` in a few place (i.e. Parquet / ORC / `engine=""pyarrow""` in `read_csv` and auto-inferring pyarrow strings). Can we just emit this warning in those cases? 
- Does adding `pyarrow-hotfix` as a core `dask` dependency have any downside? It's a small, pure Python package with no dependencies (not even `pyarrow`). That would ensure that no matter what, if you're using a new version of Dask, you're not impacted by the issue.  

Also cc @rjzamora for visibility ","2023-11-10T03:07:12Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-11-08T16:16:29Z",false,"APPROVED"
"fjetter","MEMBER","","2023-11-09T09:10:25Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-11-20T11:31:52Z",false,"APPROVED"
"rjzamora","MEMBER","Thanks for the fix @charlesbluca ! Sorry for missing this.

It looks like the original `split_out=None` deprecation warning was added to `groupby.agg` more than a year ago (https://github.com/dask/dask/pull/9491). Unfortunately, it seems like we have **not** been warning for other APIs (like `drop_duplicates`).

**Questions**:

1. Should we try to find a simple way to add a temporary deprecation warning for **all** APIs using `split_out`?
2. Should we just move ahead with the deprecation now, and start raising a clear `TypeError` in `_determine_split_out_shuffle`?
  - Related question: Is there a reason that dask-sql needs to use `split_out=None` for now? If so, how much time do you think is needed to address the deprecation?","2023-11-03T14:09:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @milesgranger. In general I'm supportive of this move. Do we know what performance looks like? 

There are a few more minor `crick` references we can get rid of too 

```
continuous_integration/environment-3.12.yaml:  # Need a new `crick` release with support for `numpy=1.24+`
continuous_integration/environment-3.12.yaml:  # https://github.com/dask/crick/issues/25
continuous_integration/environment-3.12.yaml:  # - crick
dask/array/percentile.py:    # Before it was establishing a TDigest from crick and adding to the sample
dask/array/percentile.py:    # Before swapping crick, TDigest would merge all samples then compute tdigest.
```","2023-11-02T15:57:05Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2023-11-03T07:38:40Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-11-06T10:45:45Z",false,"CHANGES_REQUESTED"
"jrbourbeau","MEMBER","","2023-11-01T18:02:41Z",false,"APPROVED"
"charlesbluca","MEMBER","","2023-10-31T17:44:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! ","2023-10-31T18:45:25Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @mariosasko @martindurant. This is in ","2023-10-30T16:32:37Z",false,"APPROVED"
"rjzamora","MEMBER","","2023-10-26T13:51:58Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-10-26T21:12:41Z",false,"COMMENTED"
"mrocklin","MEMBER","","2023-10-26T21:20:14Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-10-26T21:44:03Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-10-27T19:13:16Z",false,"APPROVED"
"phofl","COLLABORATOR","Change itself looks good, but I don't know enough about boto3 to guarantee that this does exactly what we need","2023-10-26T17:33:00Z",false,"COMMENTED"
"graingert","MEMBER","","2023-10-25T12:17:01Z",false,"COMMENTED"
"graingert","MEMBER","","2023-10-25T12:31:03Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @graingert! This is in ","2023-10-25T14:57:54Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-10-24T14:12:46Z",false,"APPROVED"
"hendrikmakait","MEMBER","Changes look good to me, I'm wondering if we should add a test for this.","2023-10-26T12:29:45Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-10-26T17:31:35Z",false,"APPROVED"
"rjzamora","MEMBER","","2023-10-26T20:43:25Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2023-10-27T11:33:39Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2023-10-27T11:37:47Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2023-10-27T11:48:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2023-10-27T12:01:50Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2023-10-27T12:07:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2023-10-27T12:11:41Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-10-27T13:42:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Just checking in here -- are there any other changes that need to be made here, or is this good to go? ","2023-10-30T17:52:12Z",false,"COMMENTED"
"QuLogic","CONTRIBUTOR","","2023-11-26T03:09:43Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-11-27T22:34:17Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-10-20T14:06:12Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-10-24T16:54:49Z",false,"COMMENTED"
"martindurant","MEMBER","","2023-10-24T17:19:59Z",false,"COMMENTED"
"martindurant","MEMBER","","2023-10-24T17:24:14Z",false,"COMMENTED"
"martindurant","MEMBER","","2023-10-24T17:27:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @martindurant! This is in ","2023-10-25T22:01:22Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-10-19T14:25:06Z",false,"APPROVED"
"phofl","COLLABORATOR","Do we have to catch any warnings if a user specifies a deprecated freq in shift so that the warning isn’t raised for every partition?

fine as a follow up","2023-10-19T16:38:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-10-18T21:25:49Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-10-18T21:13:05Z",false,"APPROVED"
"graingert","MEMBER","","2023-10-18T12:56:08Z",false,"COMMENTED"
"graingert","MEMBER","","2023-10-18T12:56:19Z",false,"COMMENTED"
"graingert","MEMBER","","2023-10-19T10:46:07Z",false,"COMMENTED"
"graingert","MEMBER","","2023-10-19T17:07:16Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-10-20T11:24:02Z",false,"APPROVED"
"graingert","MEMBER","","2023-10-18T13:30:40Z",false,"COMMENTED"
"graingert","MEMBER","","2023-10-18T13:31:02Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-10-18T14:14:54Z",false,"APPROVED"
"graingert","MEMBER","","2023-10-18T13:28:10Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-10-18T14:14:05Z",false,"APPROVED"
"phofl","COLLABORATOR","can you add tests?","2024-02-25T13:41:30Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-10-12T15:46:12Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-10-12T16:48:05Z",false,"COMMENTED"
"phofl","COLLABORATOR","Could you add a test?","2023-11-20T11:33:13Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-11-20T16:36:11Z",false,"APPROVED"
"wence-","CONTRIBUTOR","Some very minor nits","2023-10-12T14:56:07Z",false,"APPROVED"
"rjzamora","MEMBER","","2023-10-12T15:48:52Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-10-12T15:50:28Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","","2023-10-12T15:51:19Z",false,"APPROVED"
"rjzamora","MEMBER","","2023-10-12T15:53:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-10-09T18:07:08Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-10-12T14:39:31Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-10-12T16:44:21Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-10-12T19:02:00Z",false,"COMMENTED"
"phofl","COLLABORATOR","sounds good to me","2023-10-13T20:20:55Z",false,"APPROVED"
"phofl","COLLABORATOR","2 small comments, otherwise lgtm","2023-10-18T09:20:40Z",false,"COMMENTED"
"graingert","MEMBER","","2023-10-18T09:27:39Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-10-18T09:28:38Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-10-18T10:00:34Z",false,"APPROVED"
"graingert","MEMBER","","2023-10-18T10:31:09Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-10-18T12:29:11Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-10-18T12:29:30Z",false,"COMMENTED"
"graingert","MEMBER","","2023-10-18T12:36:44Z",false,"COMMENTED"
"graingert","MEMBER","","2023-10-18T13:57:56Z",false,"COMMENTED"
"graingert","MEMBER","","2023-10-18T13:58:03Z",false,"COMMENTED"
"graingert","MEMBER","","2023-10-18T14:10:39Z",false,"COMMENTED"
"graingert","MEMBER","","2023-10-18T15:23:28Z",false,"COMMENTED"
"graingert","MEMBER","","2023-10-19T10:40:25Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @fjetter!","2023-10-06T10:47:53Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @graingert ","2023-10-27T21:30:02Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @mrocklin 

Isn't this type of problem what the `DASK_CONFIG` environment variable is for? I don't care that much about the proposed change here, though it does seem like it's adding extra code for a case we already support (maybe I'm missing something though)

We should add a bullet point for this new place configuration files can live in https://docs.dask.org/en/stable/configuration.html ","2023-09-27T15:10:36Z",false,"COMMENTED"
"fjetter","MEMBER","Currently, there are still failing tests

- `test_prefer_short_dependents` requires me to adjust the ""finish now"" logic to account for the artificial root task
- `test_order_with_equal_dependents` TODO
- `test_run_smaller_sections` see comment","2023-09-26T16:59:42Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-09-27T06:50:33Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-09-27T07:04:51Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-10-02T10:51:16Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-10-02T10:52:16Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-10-02T10:57:56Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-10-02T16:41:26Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-10-02T16:42:27Z",false,"COMMENTED"
"fjetter","MEMBER","I left inline comments to explain all the changes that happened here. This can either guide a reviewer or help a forensic analysis in case something blows up after all","2023-10-05T10:35:06Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks for adding the comments. They make it ~easier~ feasible to understand what's going on. Generally, the commentary and testing seem reasonable to me. I haven't done an in-depth check of the functional changes, but at least there is nothing obvious going awry. This is good enough for me to merge 👍","2023-10-10T07:51:43Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2023-10-10T07:59:39Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-10-10T09:47:39Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-10-10T10:01:40Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks again for working on this @BrandonSmithJ - I was able to take a high-level look, and I like the general idea.

I left a few comments/questions. I'd also suggest that we find a way to test the changes (or somehow confirm that the changes are already covered by existing tests - including distributed execution).","2023-09-28T15:55:41Z",false,"COMMENTED"
"BrandonSmithJ","NONE","","2023-09-28T17:29:25Z",false,"COMMENTED"
"BrandonSmithJ","NONE","","2023-09-28T17:33:19Z",false,"COMMENTED"
"BrandonSmithJ","NONE","","2023-09-28T17:38:50Z",false,"COMMENTED"
"BrandonSmithJ","NONE","","2023-09-28T17:46:41Z",false,"COMMENTED"
"BrandonSmithJ","NONE","","2023-09-28T17:59:47Z",false,"COMMENTED"
"BrandonSmithJ","NONE","","2023-09-28T18:08:00Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-10-02T15:54:39Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-10-02T16:36:04Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-09-26T13:17:13Z",false,"APPROVED"
"charlesbluca","MEMBER","","2023-09-25T15:07:13Z",false,"APPROVED"
"hendrikmakait","MEMBER","LGTM, one out-of-scope issue with variable naming that has become apparent in this PR.","2023-10-02T12:44:46Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2023-10-02T16:35:47Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-10-02T16:38:23Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-10-02T16:40:46Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-09-26T13:04:08Z",false,"APPROVED"
"fjetter","MEMBER","Thank for cleaning everything up!","2023-09-14T15:13:19Z",false,"APPROVED"
"jrbourbeau","MEMBER","@crusaderky there's a merge conflict following https://github.com/dask/dask/pull/10499 being merged. Would you mind resolving it here? ","2023-09-14T15:40:02Z",false,"COMMENTED"
"betatim","NONE","","2023-09-13T13:55:18Z",false,"COMMENTED"
"kmpaul","NONE","Looks good!  Thanks, @jacobtomlinson!  I made one comment, but it might be nitpicking, so you can ignore it if that is the case. ","2023-09-13T14:51:14Z",false,"APPROVED"
"jacobtomlinson","MEMBER","","2023-09-18T08:17:12Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2023-09-18T08:17:35Z",false,"COMMENTED"
"hendrikmakait","MEMBER","@benrutter, I'm sorry for the late review! The change looks good to me. Could you also add a regression test for the reproducer in #10438 to ensure that things keep working as expected when calling `to_zarr`?","2023-12-12T13:25:38Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @benrutter!","2023-12-12T17:10:22Z",false,"APPROVED"
"fjetter","MEMBER","","2023-09-12T16:48:37Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-09-12T16:53:09Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-09-08T14:25:31Z",false,"APPROVED"
"rjzamora","MEMBER","Thanks @hendrikmakait ! Any chance we can address [my other comment](https://github.com/dask/dask/pull/10500#discussion_r1319887298) from #10500 here?

Otherwise, this is good.","2023-09-08T13:44:34Z",false,"APPROVED"
"rjzamora","MEMBER","Thanks for the quick turnaround @hendrikmakait !","2023-09-08T14:34:38Z",false,"APPROVED"
"fjetter","MEMBER","","2023-09-08T13:31:52Z",false,"APPROVED"
"rjzamora","MEMBER","","2023-09-08T13:34:52Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-09-08T13:39:22Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-09-08T13:40:23Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-09-08T13:44:57Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-09-08T13:49:46Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-09-08T10:30:18Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-09-08T14:32:24Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-09-08T14:41:00Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-09-11T14:59:13Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-09-14T15:11:08Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @crusaderky ","2023-09-14T15:32:54Z",false,"APPROVED"
"fjetter","MEMBER","","2023-09-08T13:36:30Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2023-09-08T16:08:38Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-09-08T16:11:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-09-08T17:48:57Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-09-08T17:53:13Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-09-08T17:55:10Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-09-12T12:10:52Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-09-14T15:29:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-09-14T16:00:39Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-09-06T16:21:24Z",false,"APPROVED"
"phofl","COLLABORATOR","Change looks good to me.

There is also a ``test_distributed.py`` file in dask/dask that you could use for the test","2023-09-06T10:10:51Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @wence- this is in ","2023-09-05T19:21:16Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-09-01T17:10:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-09-01T18:09:46Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @crusaderky!","2023-09-01T12:16:30Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2023-08-30T17:45:44Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-08-30T17:46:04Z",false,"COMMENTED"
"phofl","COLLABORATOR","very small non blocking comments, I don't have merge permissions though","2023-09-05T07:58:11Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2023-09-05T11:06:16Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-09-05T12:32:58Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-09-05T13:07:42Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-09-05T13:09:36Z",false,"APPROVED"
"jrbourbeau","MEMBER","Great detective work @crusaderky! 

This seems totally fine to me given it unblocks CI and the original motivating example works with this change ","2023-08-30T17:09:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @crusaderky. This looks good, just left a few small comments ","2023-08-30T16:32:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @crusaderky ","2023-08-30T17:58:52Z",false,"APPROVED"
"phofl","COLLABORATOR","Looks good generally, I'll do some tests as well","2023-08-30T08:28:57Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-08-30T13:16:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @phofl this is in
","2023-08-30T18:08:44Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-08-29T16:37:30Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @hendrikmakait! Could you add a test for what this is fixing? ","2023-08-24T14:55:02Z",false,"COMMENTED"
"phofl","COLLABORATOR","change looks good","2023-08-28T17:25:52Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @crusaderky!","2023-08-24T11:43:45Z",false,"APPROVED"
"rjzamora","MEMBER","","2023-08-21T21:41:40Z",false,"COMMENTED"
"fjetter","MEMBER","This looks good. Most of my comments are nice to haves and should not block this.","2023-09-05T15:58:13Z",false,"APPROVED"
"rjzamora","MEMBER","","2023-09-05T21:44:16Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-09-05T21:48:33Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-09-05T21:54:55Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-09-05T22:14:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-08-17T16:04:45Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-08-17T16:44:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-09-08T16:00:12Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @rjzamora!","2023-08-17T09:53:45Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @GenevieveBuckley!","2023-08-15T14:44:43Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2023-08-15T14:46:44Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-08-14T13:09:18Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-08-14T13:17:16Z",false,"COMMENTED"
"benrutter","CONTRIBUTOR","","2023-08-14T14:59:58Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-08-14T15:07:04Z",false,"COMMENTED"
"benrutter","CONTRIBUTOR","","2023-08-14T15:22:35Z",false,"COMMENTED"
"hendrikmakait","MEMBER","The code looks good to me. I have some additional recommendations for improving the test.","2023-08-14T15:39:39Z",false,"COMMENTED"
"benrutter","CONTRIBUTOR","","2023-08-14T16:01:25Z",false,"COMMENTED"
"benrutter","CONTRIBUTOR","","2023-08-14T16:12:11Z",false,"COMMENTED"
"hendrikmakait","MEMBER","The updated test looks great. Thanks for your contribution, @benrutter!","2023-08-14T17:05:06Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-08-25T11:33:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @phofl!","2023-08-31T21:18:31Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-08-31T21:19:37Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-08-31T21:19:59Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-08-31T21:21:01Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jakirkham ","2023-08-02T18:50:10Z",false,"APPROVED"
"phofl","COLLABORATOR","thx, this looks good to me","2023-08-02T20:15:25Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-07-25T17:59:20Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-07-25T17:59:43Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-07-25T18:25:54Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-07-25T18:28:22Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-07-25T18:31:04Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-07-25T18:42:10Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-07-25T18:43:19Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-07-25T19:04:32Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-07-25T19:42:07Z",false,"COMMENTED"
"phofl","COLLABORATOR","thx! lgtm. ","2023-07-27T08:26:16Z",false,"APPROVED"
"jacobtomlinson","MEMBER","Thanks @charlesbluca ","2023-07-25T16:12:57Z",false,"APPROVED"
"fjetter","MEMBER","","2023-07-24T13:14:56Z",false,"APPROVED"
"hendrikmakait","MEMBER","The code generally looks good, with one question regarding the tests. I'd like someone with more dataframe experience to review before signing off (cc @phofl). ","2023-08-02T07:17:15Z",false,"COMMENTED"
"phofl","COLLABORATOR","lgtm","2023-08-08T16:36:49Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-08-16T12:43:48Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-07-21T12:04:05Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-07-24T11:07:22Z",false,"CHANGES_REQUESTED"
"fjetter","MEMBER","I'm fine with the renaming without the additional stuff @crusaderky asked for. The renaming is not a functional change while all the other requested changes are changes to logic, even if it is about the removal of dead code.

Given the size of the diff alone, I would recommend to do the functional changes in a follow up PR. This way the changes are dedicated commits which makes things much easier in case one needs to bisect, blame, etc.","2023-07-24T12:01:11Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @GFleishman! 

It looks like the code linter is unhappy -- could you run `pre-commit` to handle those? See https://docs.dask.org/en/stable/develop.html#code-formatting for more details

Also could you add a test to make sure we're covering this case (if we're not already)? ","2023-07-20T15:47:52Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-07-20T08:12:51Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2023-08-02T06:52:01Z",false,"COMMENTED"
"johanols","CONTRIBUTOR","","2023-08-15T18:15:39Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @johanols, this looks great!","2023-08-17T10:12:45Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @j-bennet!","2023-07-21T11:41:47Z",false,"APPROVED"
"phofl","COLLABORATOR","thx","2023-07-17T18:42:51Z",false,"APPROVED"
"graingert","MEMBER","","2023-07-13T09:53:16Z",false,"COMMENTED"
"graingert","MEMBER","","2023-07-13T10:00:25Z",false,"COMMENTED"
"ntabris","CONTRIBUTOR","","2023-07-13T11:43:23Z",false,"COMMENTED"
"ntabris","CONTRIBUTOR","","2023-07-13T11:53:08Z",false,"COMMENTED"
"graingert","MEMBER","","2023-07-13T12:34:09Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @ntabris! This looks like a nice improvement ","2023-07-13T13:39:33Z",false,"APPROVED"
"phofl","COLLABORATOR","so this is better now?","2023-07-12T23:44:16Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @j-bennet!","2023-07-14T15:28:49Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2023-07-13T10:49:59Z",false,"APPROVED"
"phofl","COLLABORATOR","small comment, otherwise lgtm","2023-08-02T08:02:18Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-08-15T13:47:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-08-15T14:05:58Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-08-15T14:51:35Z",false,"COMMENTED"
"phofl","COLLABORATOR","lgtm, except the failures

probably worth killing the arrow build as a follow up","2023-07-19T05:33:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-07-19T18:59:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Okay, I think this is ready for review (cc @phofl). I left a few comments with extra context for reviewers ","2023-07-19T21:18:06Z",false,"COMMENTED"
"phofl","COLLABORATOR","thx, lgtm","2023-07-20T09:03:38Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @epizut. This looks reasonable to me. Will merge after CI is finished ","2023-07-03T16:45:49Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl! 

I take it the segfault we were working around no longer occurs? ","2023-07-03T16:47:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Just looked at this workaround was added 6 years ago (xref https://github.com/dask/dask/pull/2835). CI is passing (including our `mindeps` build) so I'm fine saying this isn't needed anymore. ","2023-07-03T17:50:18Z",false,"APPROVED"
"phofl","COLLABORATOR","Gave it a first look","2023-07-08T10:32:36Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-07-09T06:00:47Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-07-09T06:02:47Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-07-09T06:06:58Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-07-09T06:07:39Z",false,"COMMENTED"
"fjetter","MEMBER","Thanks @j-bennet !","2023-07-18T07:23:12Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-07-25T05:14:27Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-07-25T07:13:38Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-07-25T08:52:22Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-07-25T15:59:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Seems fine to me, thanks @phofl 

Just cross-referencing https://github.com/dask-contrib/dask-expr/pull/199 where this is being used","2023-06-30T17:51:40Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @sk1p @matbryan52. cc @j-bennet @crusaderky who were involved in https://github.com/dask/dask/pull/10354","2023-06-30T20:05:57Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","👍 ","2023-07-03T21:18:23Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2023-07-05T17:28:50Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-06-29T10:36:43Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-06-30T16:45:40Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-07-04T15:10:17Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-07-04T15:12:06Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2023-07-04T15:30:22Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-07-04T15:32:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for fixing @douglasdavis ","2023-06-28T19:39:14Z",false,"APPROVED"
"douglasdavis","MEMBER","Definitely makes sense to have this check!","2023-06-28T15:40:33Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jacobtomlinson ","2023-06-30T15:14:27Z",false,"APPROVED"
"fjetter","MEMBER","Thank you!","2023-07-05T09:42:35Z",false,"APPROVED"
"fjetter","MEMBER","Thank you!","2023-07-05T09:42:39Z",false,"APPROVED"
"phofl","COLLABORATOR","lgtm","2023-06-26T19:22:19Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-06-23T16:13:46Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2023-06-23T07:21:31Z",false,"APPROVED"
"fjetter","MEMBER","","2023-09-08T13:08:33Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-09-08T13:11:21Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-09-08T13:12:05Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-20T15:19:31Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-20T15:21:28Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-20T15:25:33Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-12-20T15:26:51Z",false,"COMMENTED"
"fjetter","MEMBER","Can you please add a test for this as well somewhere? https://github.com/dask/dask/issues/10340 provides an example that triggers this leakage w/out spans and I'd like to test this behavior.","2023-06-21T08:39:01Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-06-21T15:10:27Z",false,"COMMENTED"
"ntabris","CONTRIBUTOR","","2023-06-21T15:41:07Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","Missing unit tests:
- the code inside `with dask.annotate()` raises
- annotations in two different asyncio tasks or threads[1] running in parallel do not interfere with each other

[1] only need one. Pick whatever is easier/cleaner to write.
","2023-06-21T16:01:32Z",false,"CHANGES_REQUESTED"
"crusaderky","COLLABORATOR","","2023-06-21T21:31:18Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-06-21T21:31:56Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","Missing unit test:
annotations in two different asyncio tasks or threads[1] running in parallel do not interfere with each other.
[1] only need one. Pick whatever is easier/cleaner to write.","2023-06-21T21:43:55Z",false,"CHANGES_REQUESTED"
"crusaderky","COLLABORATOR","","2023-06-21T22:06:17Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-06-21T22:10:09Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","This is ready to be merged as soon as you revert the temporary CI changes in https://github.com/dask/distributed/pull/7935","2023-06-22T18:10:20Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @rjzamora! Looks good to me, we can always move toward explicit keyword arguments once the interface is stable.","2023-06-21T20:55:56Z",false,"APPROVED"
"jrbourbeau","MEMBER","Nice, thanks @phofl ","2023-06-20T17:52:01Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-06-20T10:10:49Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-06-20T10:38:51Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-06-20T12:18:23Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-06-20T12:18:26Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @crusaderky!","2023-06-20T12:57:56Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-06-22T22:48:12Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-06-23T08:09:11Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","👍 ","2023-06-23T20:11:33Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2023-07-10T11:48:21Z",false,"APPROVED"
"jrbourbeau","MEMBER","Ah, sorry for such a delayed response @jakirkham. Just took this for a spin and confirmed it works as expected. This is in ","2023-08-02T01:41:20Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2023-06-14T11:06:43Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2023-06-20T07:48:35Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2023-06-26T19:18:55Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-07-13T10:21:51Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2023-07-13T16:10:53Z",false,"COMMENTED"
"phofl","COLLABORATOR","lgtm","2023-06-14T07:15:54Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @galipremsagar -- this is in ","2023-06-20T20:05:37Z",false,"APPROVED"
"crusaderky","COLLABORATOR","@j-bennet see my review commit
Merging as soon as you confirm you're happy with my changes","2023-06-19T11:10:03Z",false,"APPROVED"
"rjzamora","MEMBER","","2023-07-05T14:40:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora, apologies for not getting to this one ","2023-07-11T14:22:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Yeah, thank you @jorisvandenbossche ","2023-07-13T13:38:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet! If `pandas` is deprecating `first`, we should probably do the same thing here. Would you like to handle that in this PR, or save for someone in a follow-up? (either option is totally fine)

xref https://github.com/pandas-dev/pandas/pull/53419, the corresponding upstream `pandas` PR, for reference ","2023-06-13T18:10:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet! This is in ","2023-06-13T21:57:54Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl! This is in. I left one non-blocking question -- it's mostly just for my own understanding ","2023-06-13T20:05:56Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-06-14T07:14:38Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-06-14T07:17:40Z",false,"COMMENTED"
"phofl","COLLABORATOR","small comment, otherwise looks generally good to me.","2023-06-14T07:18:06Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-06-14T15:23:44Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-06-14T18:52:25Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Overall, the code looks good. I have one open question/suggestion around test readability and one potential new issue we should file.","2023-06-22T13:55:23Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-06-22T15:57:24Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-06-22T17:02:30Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-22T18:35:15Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @j-bennet!","2023-06-23T07:19:06Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-06-13T15:48:43Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @mroeschke! Believe it or not I was just about to open a `pandas` issue about this. I guess you read my mind. 

I added the `upstream` label and pushed an empty commit to trigger our CI build that tests against nightly installs. Will merge after CI is finished ","2023-06-12T20:14:51Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2023-06-12T13:00:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @hendrikmakait!

For others, this is a nice follow-up to https://github.com/dask/distributed/pull/7801 where we stopped relying on the annotations machinery for P2P shuffling. 

`get_default_shuffle_algorithm` is used in some tests over in `distributed`. Could you make a similar update there too? It'd be good to merge this PR and that one at the same time/ ","2023-06-12T15:12:00Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-06-12T17:30:11Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-06-13T09:10:56Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @hendrikmakait. Documenting / making this setting explicit seems like a nice update. Will merge after CI is finished ","2023-06-12T15:05:10Z",false,"APPROVED"
"hendrikmakait","MEMBER","The approach generally looks good to me, some minor suggestions.","2023-06-12T10:57:46Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2023-06-12T13:26:00Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-12T13:46:18Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2023-06-12T14:07:48Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-12T14:15:07Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @milesgranger!","2023-06-12T14:18:45Z",false,"DISMISSED"
"milesgranger","CONTRIBUTOR","","2023-06-12T16:27:12Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-12T16:39:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @milesgranger ","2023-06-12T22:14:00Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2023-06-13T06:49:29Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2023-06-13T06:49:44Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2023-06-13T06:51:50Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2023-06-13T06:52:25Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2023-06-13T06:54:01Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2023-06-13T06:54:19Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2023-06-13T06:57:37Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-13T08:11:42Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-13T08:19:42Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-13T08:36:37Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2023-06-13T09:05:39Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-13T09:37:16Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-13T09:38:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-06-16T02:58:33Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-16T14:50:59Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2023-06-21T04:14:30Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @milesgranger! From my perspective, this looks good. I'm not sure if @jrbourbeau would like to take another look. I'll merge this PR in 24h if nothing else pops up.","2023-06-21T10:07:40Z",false,"APPROVED"
"phofl","COLLABORATOR","lgtm","2023-06-12T05:52:50Z",false,"APPROVED"
"fjetter","MEMBER","Hi @tmillenaar! Thank you for your PR and sorry for the delay. 

The test failures look indeed unrelated and I suggest to rebase it to the latest commit on main. This particular test failure may occur due to a drift between dask/dask and dask/distributed version and our unit test typically test against dask/distributed@main. This should hopefully make the failures go away.","2023-06-13T12:04:45Z",false,"COMMENTED"
"tmillenaar","NONE","","2023-06-13T15:13:47Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-07T14:41:54Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-07T14:42:07Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","Looks overall fine, though I am confused why the test disappears.","2023-06-07T15:03:47Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-07T15:05:39Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-07T15:14:04Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","","2023-06-07T16:28:51Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","Looks good as far as I can see. :+1: ","2023-06-12T09:14:46Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-06-12T15:15:45Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-15T15:33:06Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-15T15:34:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-06-15T15:37:31Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-05T13:44:12Z",false,"APPROVED"
"ncclementi","MEMBER","Thanks James LGTM","2023-06-12T21:20:45Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @graingert! This is in ","2023-06-02T14:52:19Z",false,"APPROVED"
"hendrikmakait","MEMBER","The code looks good to me, but before merging, we should add a regression test for the issue in #10322 to avoid running into this in the future.","2023-05-31T08:52:54Z",false,"CHANGES_REQUESTED"
"hendrikmakait","MEMBER","Thanks for adding the test, @j-bennet; looks great!","2023-06-01T08:17:07Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for fixing and adding a test @j-bennet. It's not totally clear to me what the underlying issue was -- could you provide a bit more context as to how the changes here are fixing things? (Clearly the changes here improve things)","2023-06-01T16:39:39Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","I am not sure I understand your logic. What's wrong with the basic functionality of Callback?

```python
def posttask(key, result, dsk, state, worker_id):
    print(result)

with Callback(posttask=posttask):
    dask_collection.compute()
```","2023-06-05T11:53:38Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-06-06T23:23:18Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-06-21T12:11:50Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-06-21T15:04:23Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-06-21T15:30:44Z",false,"COMMENTED"
"fjetter","MEMBER","> What I want to do is get the original collection name, and add a -print suffix.

If you care about this you should write a test for it. That's the best way to verify and a requirement for any feature you actually care about. Otherwise it is just very likely that a later refactoring will change this behavior.

","2023-06-22T09:45:37Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-06-22T16:08:08Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-06-23T10:48:50Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-06-24T04:23:14Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-07-26T13:56:09Z",false,"CHANGES_REQUESTED"
"j-bennet","CONTRIBUTOR","","2023-07-27T21:57:07Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-07-27T22:28:18Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-07-28T00:36:44Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-07-28T00:36:54Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-07-31T12:23:19Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-07-31T12:25:13Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-08-02T21:54:32Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-08-04T11:30:10Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks for fixing this, @rjzamora! I have one question for clarification/food for thought directed at avoiding similar issues.","2023-05-31T13:46:53Z",false,"APPROVED"
"rjzamora","MEMBER","","2023-05-31T13:53:18Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-05-31T14:41:18Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora ","2023-06-01T02:14:24Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2023-05-31T13:49:08Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks for fixing this, @crusaderky!","2023-05-26T13:32:14Z",false,"APPROVED"
"charlesbluca","MEMBER","","2023-05-25T15:33:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Explicitly install `anaconda-client` from conda-forge when uploading conda nightlies","2023-05-25T15:52:47Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2023-05-24T18:36:21Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @graingert -- will merge once CI finishes ","2023-05-24T18:49:43Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl 

Can we safely remove the 

```python
                warnings.warn(
                    ""'inplace' argument for dask series will be removed in future versions"",
                    PendingDeprecationWarning,
                )
```

a few lines below now? ","2023-05-31T15:33:30Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-06-12T06:08:36Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @phofl! This looks good to me, and all of @jrbourbeau's concerns seem to have been addressed.","2023-06-23T07:29:31Z",false,"APPROVED"
"rjzamora","MEMBER","","2023-06-09T13:01:51Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-06-09T13:48:14Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-09T14:03:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora -- I'll take a look after pushing out the release. Agreed we should get this in shortly after that's out ","2023-06-09T15:58:03Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Adding the dispatch makes sense to me. Since I'm not overly familiar with the best practices around dispatching, I have one question for clarification.","2023-06-12T18:28:46Z",false,"APPROVED"
"rjzamora","MEMBER","","2023-06-12T18:33:50Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-12T18:34:20Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-06-12T18:35:33Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-12T18:39:54Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-12T18:42:44Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-12T18:44:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-06-12T18:44:21Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-06-12T18:51:14Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-12T18:52:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","cc @charlesbluca ","2023-05-24T00:30:14Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca ","2023-05-31T03:20:52Z",false,"APPROVED"
"graingert","MEMBER","","2023-05-24T13:24:50Z",false,"COMMENTED"
"graingert","MEMBER","","2023-05-24T13:35:26Z",false,"COMMENTED"
"graingert","MEMBER","","2023-05-24T13:36:31Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-24T16:15:07Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-24T16:16:07Z",false,"COMMENTED"
"graingert","MEMBER","","2023-05-24T16:37:04Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-24T18:36:04Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-24T18:37:44Z",false,"COMMENTED"
"graingert","MEMBER","","2023-05-25T10:57:19Z",false,"COMMENTED"
"graingert","MEMBER","","2023-05-25T11:00:02Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-05-25T14:17:21Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-25T21:57:44Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-26T17:12:49Z",false,"COMMENTED"
"hendrikmakait","MEMBER","The code looks good overall, one clarifying question for a test.","2023-06-05T13:36:44Z",false,"COMMENTED"
"hendrikmakait","MEMBER","The code looks good overall, one clarifying question for a test.","2023-06-05T13:36:47Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-06-06T20:45:36Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-06-09T18:04:19Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-06-09T18:04:28Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-06-09T18:09:24Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-06-09T18:47:08Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @j-bennet!","2023-06-12T17:47:45Z",false,"APPROVED"
"phofl","COLLABORATOR","Lgtm, thx","2023-05-22T21:15:21Z",false,"APPROVED"
"phofl","COLLABORATOR","Lgtm","2023-05-22T21:15:58Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @rcomer! This is in ","2023-05-23T15:17:49Z",false,"APPROVED"
"jrbourbeau","MEMBER","Nice -- thanks @phofl. Mind adding a small test case for `na_action=""ignore""`? ","2023-05-22T15:21:46Z",false,"COMMENTED"
"jrbourbeau","MEMBER","This looks great -- will merge after CI is finishes ","2023-05-22T17:16:55Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl ","2023-05-22T15:24:35Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl ","2023-05-19T15:52:13Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-19T16:02:18Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-19T16:03:14Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-05-19T16:26:21Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-05-19T16:26:48Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-05-19T16:31:55Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @jrbourbeau. This looks good to me.","2023-05-22T18:32:59Z",false,"APPROVED"
"jrbourbeau","MEMBER","Nice -- thanks @phofl ","2023-05-18T15:47:11Z",false,"APPROVED"
"scharlottej13","CONTRIBUTOR","","2023-05-17T21:31:54Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @scharlottej13. This looks reasonable to me. ","2023-05-17T21:58:15Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-05-17T22:00:18Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2023-05-17T22:39:08Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","This looks great thanks @scharlottej13 ","2023-05-18T10:10:31Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-05-20T15:13:13Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-05-22T11:17:53Z",false,"CHANGES_REQUESTED"
"jrbourbeau","MEMBER","Thanks for handling this @graingert! 

Should also be able to drop some code here too 

https://github.com/dask/dask/blob/8cb00000a9c327362bbb58fb342acddeec7068f8/dask/base.py#L910-L918","2023-05-22T15:58:25Z",false,"COMMENTED"
"graingert","MEMBER","","2023-05-24T11:33:34Z",false,"COMMENTED"
"graingert","MEMBER","","2023-05-24T11:49:37Z",false,"COMMENTED"
"graingert","MEMBER","","2023-05-24T11:53:26Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-05-24T12:43:32Z",false,"COMMENTED"
"graingert","MEMBER","","2023-05-24T13:05:16Z",false,"COMMENTED"
"graingert","MEMBER","","2023-05-24T14:35:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-05-24T15:08:10Z",false,"COMMENTED"
"phofl","COLLABORATOR","lgtm","2023-05-24T15:12:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks again @graingert. I'd like confirmation on https://github.com/dask/dask/pull/10295#pullrequestreview-1442144445, but otherwise this PR looks good to go.

I'd like to have this PR and https://github.com/dask/distributed/pull/7840 go in at the same time. I'll make sure to merge them simultaneously ","2023-05-24T15:18:42Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks again @graingert. I'd like confirmation on https://github.com/dask/dask/pull/10295#pullrequestreview-1442144445, but otherwise this PR looks good to go.

I'd like to have this PR and https://github.com/dask/distributed/pull/7840 go in at the same time. I'll make sure to merge them simultaneously ","2023-05-24T15:18:45Z",false,"APPROVED"
"graingert","MEMBER","","2023-05-24T15:25:30Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-05-24T16:55:44Z",false,"APPROVED"
"jacobtomlinson","MEMBER","","2023-05-17T16:03:02Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2023-05-17T16:04:47Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks for the ping here @jacobtomlinson!

I spent some time thinking about this today, and found myself surprisingly distressed by the sawtooth behavior this PR is addressing.

My personal opinion is that the output partition count should **always** satisfy two criteria:

1. It should be **exactly** equal to `npartitions` when the argument is not `None`, and is `<=len(seq)`.
2. When neither `npartitions` nor `partition_size` is specified, we should calculate a default `npartitions` value that monotonically increases with respect to `len(seq)`.

For example, I believe the following code (while a bit rough) will satisfy both of these criteria:

```python
    remainder = 0
    seq = list(seq)
    seq_len = len(seq)
    if partition_size is None:

        if npartitions is None:
            if seq_len <= 100:
                npartitions = seq_len
            else:
                npartitions = math.floor(100.0 * math.sqrt(seq_len/ 100.0))
            npartitions = max(1, npartitions)
        
        partition_size = int(math.floor(seq_len / npartitions))
        remainder = seq_len % npartitions

    if remainder:
        start_size = partition_size + 1
        start_count = start_size * remainder
        parts = list(partition_all(start_size, seq[:start_count])) + list(partition_all(partition_size, seq[start_count:]))
    else:
        parts = list(partition_all(partition_size, seq))
```","2023-05-23T21:19:01Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora. I'm slightly confused about the motivation here. Does reintroducing `gather_statistics` here somehow help development over in `dask-expr`? Why not just push forward on partition statistics over in `dask-expr` separately? ","2023-05-17T16:12:10Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-15T16:49:57Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-15T17:18:06Z",false,"COMMENTED"
"Oreilles","NONE","","2023-05-15T18:31:00Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-15T19:58:20Z",false,"COMMENTED"
"Oreilles","NONE","","2023-05-15T20:06:24Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-15T20:17:33Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-16T16:37:48Z",false,"APPROVED"
"jrbourbeau","MEMBER","Nice -- thanks @mrocklin ","2023-05-15T15:57:49Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl -- one suggestion, but otherwise this looks good to go ","2023-05-15T19:26:18Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-15T19:48:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @phofl. Will merge after CI is done 👍 ","2023-05-15T19:59:18Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-05-15T20:00:03Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-15T20:00:18Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-05-15T20:00:52Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-15T08:22:07Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet -- sorry, but it looks like @jacobtomlinson included this fix in https://github.com/dask/dask/pull/10286 already ","2023-05-15T16:22:36Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @j-bennet! I have one minor nit wrt. readability (take it or leave it).","2023-05-16T15:49:44Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @j-bennet! I have one minor nit wrt. readability (take it or leave it).","2023-05-16T15:49:45Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-05-16T16:08:48Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-05-16T17:51:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Nice -- thanks @phofl. Just one small question, but otherwise this looks good ","2023-05-15T16:31:17Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-15T16:54:54Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-15T16:58:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-05-15T22:13:53Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","👍 ","2023-05-11T00:26:46Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @Illviljan. What kind of performance speed up does this give us? Do you have a small example benchmark? ","2023-05-08T16:43:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @Illviljan -- would you mind updating this to extend `has_keyword` to accept an iterable instead of adding a new `has_keywords` helper as mentioned here https://github.com/dask/dask/pull/10269#discussion_r1187657005? 

Also, I'm still curious about this performance impact. It'd be (pleasantly) surprising to me if you're seeing performance improvements in practice with this change. ","2023-05-15T18:17:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @mrocklin, I agree about the image

Here's a screenshot for others

![Screenshot 2023-05-05 at 10 59 37 AM](https://user-images.githubusercontent.com/11656932/236508539-6c6dd498-ffa0-4b1d-abab-e28926d57efa.png)
","2023-05-05T16:00:18Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-05-05T16:02:20Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-05T16:11:56Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","👍 , but also test `upstream`.","2023-05-05T16:36:14Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-05-08T18:05:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-05-08T18:28:40Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @novdanody! This is in 

Also, I noticed this is your first code contribution to this repository. Welcome!","2023-05-04T18:18:07Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-05-05T19:05:40Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","👍 , + test `upstream`.","2023-05-05T19:05:52Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-05-08T08:31:59Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-08T18:04:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-05-17T01:52:50Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","This is nice. 👍 

+ test `upstream`","2023-05-05T19:36:21Z",false,"APPROVED"
"hendrikmakait","MEMBER","LGTM (even though I hate the fact that there's even a need for this).","2023-05-17T14:12:47Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-05-17T15:59:21Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for following up here @phofl ","2023-05-04T14:44:16Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-05-05T19:56:53Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","Mostly 👍 , one small question.","2023-05-05T19:59:05Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-05-08T09:22:36Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-08T17:49:50Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-09T09:39:41Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","👍 

Nitpick: if the PR template checkboxes don't make sense to you, I would suggest to delete them from PR, rather than leave unchecked. I mean these:

```
- [ ] Closes #xxxx
- [ ] Tests added / passed
- [ ] Passes pre-commit run --all-files
```

In the list of PRs, unchecked boxes create the wrong impression that you're still working on it:

![image](https://github.com/dask/dask/assets/637013/300619f7-0a64-4fbf-9603-d54a94b8344a)","2023-05-09T15:48:24Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","Nice. Make sure to test `upstream` as well.","2023-05-05T19:32:20Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl. Just one small comment ","2023-05-05T20:25:15Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-08T08:45:46Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-05-17T01:51:42Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl -- one small suggestion ","2023-05-04T14:50:53Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-04T15:28:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @phofl ","2023-05-04T17:23:49Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl! 

@j-bennet do you have bandwidth to review? Looks like this is an alternative to https://github.com/dask/dask/pull/10255 ","2023-05-04T19:46:48Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","Upstream is green, LGTM. Thank you @phofl.","2023-05-04T19:56:44Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-05-05T19:23:20Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-05T19:24:03Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-05T19:26:53Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-05T19:28:08Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-05T19:29:42Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-05T19:30:26Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-05T19:30:56Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-05T19:45:52Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-05T19:49:12Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-08T08:56:23Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-08T08:56:36Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","👍 ","2023-05-08T17:31:03Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl! Confirmed these aren't being used anywhere else (we could always easily add back if needed).

I take it the dtypes these methods used to cover are going through a different code path now? ","2023-05-03T15:23:01Z",false,"APPROVED"
"hendrikmakait","MEMBER","LGTM, @phofl!","2023-05-05T16:16:59Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-05-05T19:17:53Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-05T19:22:20Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-05T19:40:07Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-05T19:41:02Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-05T19:49:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-05-17T01:55:48Z",false,"APPROVED"
"hendrikmakait","MEMBER","LGTM as long as we clean up tests in a follow-up. Thanks, @phofl!","2023-05-05T14:52:10Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-05-03T10:59:38Z",false,"APPROVED"
"rjzamora","MEMBER","I appreciate your attention on this @erayaslan !

This change may make sense, but I'd like to avoid unnecessary imports (if possible). Let me know if there is any reason we can't use a lock for this.

Regarding the `try`/`except` pattern: Please feel free to use the faster pattern, since it is probably considered more ""pythonic"" anyway.","2023-05-08T13:48:49Z",false,"APPROVED"
"erayaslan","CONTRIBUTOR","","2023-05-10T10:29:23Z",false,"COMMENTED"
"rjzamora","MEMBER","These changes LGTM. Thanks @erayaslan !

@pentschev - Any chance you have bandwidth to take a quick look as well?","2023-05-10T14:49:14Z",false,"APPROVED"
"pentschev","MEMBER","Changes make sense to me, I've left one minor comment regarding the tests, but otherwise looks good to me. Thanks @erayaslan and @rjzamora !","2023-05-10T15:01:51Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for handling this @phofl. Overall looks good -- just left a couple of small suggestions ","2023-05-02T17:08:56Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-02T20:33:38Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-02T20:35:46Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @phofl! Just fixed a merge conflict + included a small fixup -- this looks good to go now 👍 Will merge when CI finishes ","2023-05-03T15:53:12Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl! ","2023-05-02T18:25:21Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-03T11:01:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @phofl -- this is in ","2023-05-03T15:26:39Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet! 

","2023-05-01T20:33:42Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet ","2023-05-01T21:06:00Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-01T21:43:11Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-01T21:45:01Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-01T21:49:20Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-01T22:03:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-05-01T22:15:16Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-01T22:21:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet ","2023-05-02T00:51:56Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","👍 ","2023-04-28T19:07:59Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl -- will merge when CI is finished ","2023-04-30T18:57:25Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl. Is there an upstream `pandas` issue for this? Is `pandas` also removing `numeric_only=` from these methods, or something else? ","2023-04-28T18:59:47Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","Very nice.","2023-04-28T21:25:59Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-04-28T19:12:22Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-28T19:57:44Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-28T20:02:48Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-28T20:03:50Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-28T20:06:03Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-28T21:15:06Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-28T21:18:17Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-28T22:45:36Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-30T09:41:29Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-30T09:47:38Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-30T20:04:15Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-01T16:00:10Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-02T10:36:01Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","👍 ","2023-05-02T17:11:50Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl for the update and @j-bennet for reviewing ","2023-05-02T17:50:19Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","👍 ","2023-04-28T19:08:57Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! ","2023-05-01T19:07:33Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jacobtomlinson -- it looks like the docs build is failing due to some warnings ","2023-04-27T15:29:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jacobtomlinson ","2023-04-27T21:44:51Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl ","2023-04-27T15:21:50Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","LGTM. I wonder what that magical number 400 is, in `sizeof_pandas_index`.","2023-04-28T19:10:52Z",false,"APPROVED"
"jrbourbeau","MEMBER","> I wonder what that magical number 400 is, in sizeof_pandas_index

From looking through https://github.com/dask/dask/pull/9776, where this was added, IIUC this is to account for the sizeof an empty `pd.Index` (we then add the sizeof the data here to get the full `sizeof` estimate). 

```python
In [1]: from dask.sizeof import sizeof

In [2]: import pandas as pd

In [3]: s = pd.Series([1, 2, 3], index=[4, 5, 6])

In [4]: s.index[:0]
Out[4]: Index([], dtype='int64')

In [5]: sizeof(s.index[:0])
Out[5]: 400
```

@crusaderky is that correct?

If that is the case (again, not totally sure) I'm curious why we're hardcoding `400` instead of computing `sizeof` on a corresponding empty index since there are cases where `400` isn't always the correct size

```python
In [21]: s = pd.Series([1, 2, 3])

In [22]: sizeof(s.index[:0])
Out[22]: 524
```

Maybe this is for performance reasons? ","2023-05-01T20:48:02Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-05-17T18:31:49Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-04-27T11:59:57Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","Why not, makes it a little more concise.","2023-04-26T16:53:12Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl. I left a couple of code location-related comments, but overall this looks good. ","2023-04-28T18:49:56Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-28T20:00:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-04-28T20:53:18Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-28T21:08:51Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-28T21:08:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Will merge once CI is finished ","2023-04-28T22:07:30Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-04-28T15:47:45Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-28T15:55:04Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-28T15:56:54Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-28T16:02:12Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-28T16:03:35Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-28T16:03:55Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-28T16:21:20Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-28T16:23:03Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-05-01T15:43:52Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @fjetter!","2023-04-27T09:20:11Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","FWIW, looks good to me! :) ","2023-04-28T12:33:25Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","👍 ","2023-04-28T19:54:56Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl ","2023-04-30T17:12:14Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl! This file location is good 👍 Though is this actually testing what we want? I noticed this test passes when using `pandas=1.3` and `pandas=2.0` prior to https://github.com/dask/dask/pull/10221 being merged ","2023-04-26T17:38:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-05-19T15:55:08Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl. Overall this looks good -- left one non-blocking question ","2023-04-28T01:37:39Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-04-28T07:58:55Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-04-25T15:54:29Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-25T15:59:18Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-25T15:59:25Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-04-25T16:14:06Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl @fjetter. Is there some sort of test we could reasonably add for this? I could imagine someone through in the future rewriting things and, unintentionally, changing this subtle behavior. (I'm thinking less about this specific change, and more about if we end up making several similar updates)","2023-04-25T16:43:52Z",false,"COMMENTED"
"hendrikmakait","MEMBER","The code generally looks good to me, someone with more knowledge of this part of the codebase should have another look though.","2023-04-28T12:55:01Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-28T22:53:41Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-28T22:55:03Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-30T09:50:18Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-30T09:54:11Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @phofl for the updates here and @j-bennet for reviewing ","2023-04-30T16:57:47Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-04-30T21:58:38Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-30T21:59:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for fixing @phofl ","2023-04-24T15:15:58Z",false,"COMMENTED"
"mrocklin","MEMBER","When to use meta/meta_nonempty is always hard.  Sometimes user code expects real data.  Of course sometimes it does bad things with that data.  Given the motivating issue it probably seems like the right choice to drop the fake values generally.","2023-04-24T08:46:01Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-24T08:51:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2023-04-24T08:58:11Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for fixing @phofl! I've gone ahead and merged `main` to fix some unrelated test failures that have already been fixed. Also left one non-blocking question ","2023-04-24T16:11:12Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-04-24T16:12:47Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-24T16:13:10Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-24T16:13:11Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-24T16:14:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-04-24T16:22:03Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-04-22T18:59:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for digging in here and fixing @crusaderky! @rjzamora do you have bandwidth to review? ","2023-04-24T15:55:46Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks @crusaderky ! I can't say I feel completely comfortable with the way None is being used in `blockwise`/`from_array`.  However, your solution seems reasonable to me.","2023-05-09T18:31:50Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2023-05-10T18:38:39Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-05-10T18:38:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet

In the past I would have not been in favor of closing PRs, but today I'm fairly indifferent about it. I know folks like @fjetter (in the past) would have liked to see something like this.

cc @rjzamora @jacobtomlinson @charlesbluca for their thoughts too ","2023-04-21T15:09:20Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","I'm generally -1 on this. 

I've tried stale automation like this in other projects like @opsdroid and experienced it myself as a contributor in other projects. It generally leaves folks feeling disappointed and unappreciated.

Having a human close an inactive PR is a way better experience than having an automation close it. Especially given that the config here means in theory someone could open a PR, nobody reviews it for 60 days and then a bot closes it without a human ever interacting with it. I've had that happen and it sucks.

The only time I think this is ok is if a PR has been given a review with a status of ""Request changes"" and then some period of time has passed without an update from the contributor. ","2023-04-21T16:18:30Z",false,"COMMENTED"
"charlesbluca","MEMBER","Wonder if a happy medium for now would be marking issues/PRs as stale but not closing them automatically? This would give us some time to gauge if the automated label/comment actually revives old issues/PRs in practice, and we could presumably update the workflow retroactively if we decide we do want to automatically close them moving forward.","2023-04-21T20:22:37Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-24T16:07:32Z",false,"COMMENTED"
"graingert","MEMBER","","2023-04-19T19:40:03Z",false,"APPROVED"
"eli-schwartz","NONE","","2023-10-26T01:32:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @graingert, this LGTM. Will merge after CI is finished ","2023-04-19T15:38:27Z",false,"APPROVED"
"jrbourbeau","MEMBER","Woo -- thanks @graingert! ","2023-04-19T15:39:45Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-04-18T01:02:23Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","LGTM.","2023-04-14T18:37:16Z",false,"APPROVED"
"jbrockmendel","NONE","","2023-04-14T21:05:12Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-14T21:06:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-04-18T01:09:29Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-04-24T17:25:32Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-24T17:29:10Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","👍 ","2023-04-24T18:19:00Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-04-25T17:03:31Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-25T17:03:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @phofl @j-bennet ","2023-04-28T01:59:43Z",false,"APPROVED"
"charlesbluca","MEMBER","Consolidating my thoughts in this PR since https://github.com/dask/distributed/pull/7775 roughly mirrors this","2023-04-14T03:25:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca

I've not seen many people ask for this. Usually if someone needs to use the `main` branch of `dask`, installing from source with `pip install git+https://github.com/dask/dask` works. My reading of the discussion in https://github.com/dask/dask/pull/10167 is that RAPIDS would find this slightly useful. My preference would be to hold off on this until more people ask for it, or go out and find more use cases there a nightly wheel would provide some positive impact. My concern is that this would only be useful to a small number of people and not really worth the associated maintenance cost. 

I wouldn't block us from publishing a nightly wheel, but would ask that someone (my guess is you?) commit to maintaining whatever infrastructure is added. Similar to what you're already doing for the nightly conda package (thank you for that). I'd also prefer hosting a nightly wheel alongside the nightly conda package in https://anaconda.org/dask (option 2 here https://github.com/dask/dask/pull/10167#issuecomment-1502667121). I've seen folks (myself included) use the release history on PyPI and wouldn't want to see it consist mostly of nightly releases. 

Also, feel free to include any extra context I may be missing. ","2023-04-14T17:23:26Z",false,"COMMENTED"
"vyasr","CONTRIBUTOR","","2023-04-14T17:31:59Z",false,"COMMENTED"
"vyasr","CONTRIBUTOR","","2023-04-14T17:34:10Z",false,"COMMENTED"
"vyasr","CONTRIBUTOR","","2023-04-14T17:34:48Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-14T19:15:08Z",false,"COMMENTED"
"vyasr","CONTRIBUTOR","","2023-04-19T23:38:54Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-14T15:46:41Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet! This is in","2023-04-14T16:28:53Z",false,"APPROVED"
"jrbourbeau","MEMBER","Nice LGTM once CI is passing ","2023-04-13T21:26:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca ","2023-04-14T00:44:09Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-04-14T15:48:27Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @erayaslan 

Minor comment, it seems a bit off that these are in a block quote

![Screenshot 2023-04-14 at 10 58 53 AM](https://user-images.githubusercontent.com/11656932/232095891-2a93c95d-677b-4fe9-af31-0e059033c02a.png)

Mind putting them in a note section instead? ","2023-04-14T16:00:24Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","👍 ","2023-04-21T07:58:11Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @erayaslan -- this is in ","2023-04-21T14:38:33Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl! This LGTM, I added the `upstream` label and merged `main` here to run against the nightly version of `pandas`. Will merge after CI is done ","2023-04-14T16:24:26Z",false,"APPROVED"
"jrbourbeau","MEMBER","Nice, thanks @phofl! Could leave a comment and/or link to a specific issue that lets us know when we can remove this pin? ","2023-04-13T15:28:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Okay, sounds good. Let's keep the original issue opened so we can circle back to this version restriction. Thanks for fixing! ","2023-04-13T15:58:07Z",false,"APPROVED"
"phofl","COLLABORATOR","lgtm. I guess the actual documentation makes sense for users to see?","2023-04-24T17:30:32Z",false,"APPROVED"
"jrbourbeau","MEMBER","Nice -- thanks @j-bennet! ","2023-04-24T22:30:52Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-04-13T12:39:11Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-13T15:40:04Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-13T15:41:18Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","Just a clarifying question, otherwise looks goodie to me! :+1: ","2023-04-25T06:57:05Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-04-25T08:04:28Z",false,"COMMENTED"
"rhshadrach","NONE","","2023-04-25T11:09:23Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-25T16:04:03Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-25T16:04:25Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-26T09:01:05Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @j-bennet!","2023-05-02T07:43:22Z",false,"APPROVED"
"galipremsagar","CONTRIBUTOR","This PR fixes `dask-cudf` 👍 ","2023-04-13T16:34:16Z",false,"APPROVED"
"phofl","COLLABORATOR","looks good","2023-04-13T18:32:44Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet ","2023-04-13T19:04:44Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl 

xref https://github.com/pandas-dev/pandas/pull/52527","2023-04-12T17:10:28Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-12T17:11:38Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-12T17:12:21Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-04-12T17:18:24Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-13T20:10:47Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-13T20:13:09Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-13T20:44:50Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-13T20:50:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @phofl -- just one final comment ","2023-04-13T21:09:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @phofl. Will merge after CI is finished (had to resolve a small merge conflict)","2023-04-14T19:27:01Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl 

cc @martindurant for visibility ","2023-04-12T16:07:21Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-12T16:17:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-04-15T02:26:56Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-04-12T11:10:50Z",false,"APPROVED"
"phofl","COLLABORATOR","lgtm","2023-04-11T17:56:59Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl! One suggestion, but otherwise this looks good to go ","2023-04-11T17:09:11Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-11T17:41:54Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Will merge once CI is finished 👍 ","2023-04-11T18:00:57Z",false,"APPROVED"
"jrbourbeau","MEMBER","Nice! Thanks @phofl -- this is in ","2023-04-11T18:16:51Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl ","2023-04-11T17:59:15Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-11T18:33:07Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-11T18:33:27Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-11T18:34:04Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-11T18:37:07Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-11T18:42:40Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-13T13:03:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @phofl. There are merge conflicts, but otherwise this looks good to go ","2023-04-15T02:33:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @phofl -- this is in ","2023-04-18T01:06:54Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-04-15T02:29:08Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-04-11T08:48:28Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-11T08:48:44Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-11T08:49:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @phofl! 

It looks like this takes care of things in the test suite, but we typically also want to make relevant changes to non-test code too to make sure we both emit a similar warning as `pandas` but also only emit one warning in the users' session. With the current state of this PR, we get `npartitions` + 1 of the same warnings for `to_pydatetime` (possibly something similar for `apply`)

```python
In [7]: ddf
Out[7]:
Dask DataFrame Structure:
              str_col int_col          dt_col string_col
npartitions=4
E              object   int64  datetime64[ns]     string
f                 ...     ...             ...        ...
g                 ...     ...             ...        ...
h                 ...     ...             ...        ...
h                 ...     ...             ...        ...
Dask Name: from_pandas, 1 graph layer

In [8]: ddf.dt_col.dt.to_pydatetime().compute()
/Users/james/projects/dask/dask/dask/dataframe/accessor.py:92: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  out = getattr(getattr(obj, accessor, obj), attr)(*args, **kwargs)
/Users/james/projects/dask/dask/dask/dataframe/accessor.py:92: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  out = getattr(getattr(obj, accessor, obj), attr)(*args, **kwargs)
/Users/james/projects/dask/dask/dask/dataframe/accessor.py:92: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  out = getattr(getattr(obj, accessor, obj), attr)(*args, **kwargs)
/Users/james/projects/dask/dask/dask/dataframe/accessor.py:92: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  out = getattr(getattr(obj, accessor, obj), attr)(*args, **kwargs)
/Users/james/projects/dask/dask/dask/dataframe/accessor.py:92: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  out = getattr(getattr(obj, accessor, obj), attr)(*args, **kwargs)
Out[8]:
E           1970-01-01 00:00:01
f    1970-01-01 00:00:01.100000
g    1970-01-01 00:00:01.200000
h                           NaT
dtype: object
```

In general, we try to have one warning emitted at graph construction time and then catch / ignore that warning during the actual graph computation. Here's a recent example of such a change https://github.com/dask/dask/pull/10133","2023-04-11T16:47:29Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-11T17:54:24Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-11T17:54:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-04-11T18:14:15Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-11T18:32:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Okay, looks like `test_dt_accessor` had a minor issue which I pushed a small commit for (hope that's okay). Will merge this in once CI finishes. 

There are new `upstream` failures like 

```
dask/dataframe/io/tests/test_parquet.py::test_columns_index[pyarrow-fastparquet]: AssertionError: Index are different

Attribute ""inferred_type"" are different
[left]:  empty
[right]: integer
```

but those are totally unrelated to the changes here","2023-04-11T20:41:07Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","This can solve the ""unsolvable environment"" while nightlies are being worked on.","2023-04-25T21:10:39Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-04-11T16:33:36Z",false,"APPROVED"
"rjzamora","MEMBER","","2023-04-10T22:11:15Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-12T17:42:11Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-04-12T20:19:49Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-13T18:49:24Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-04-14T13:13:35Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-14T17:30:03Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks @j-bennet !

I suggest we modify the check in `_validate_condition` a bit. Otherwise, this looks good.","2023-04-29T20:47:26Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-01T16:14:33Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-01T16:21:06Z",false,"COMMENTED"
"rjzamora","MEMBER","LGTM","2023-05-01T18:10:11Z",false,"APPROVED"
"jorloplaz","CONTRIBUTOR","","2023-05-03T07:22:31Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2023-05-03T07:37:59Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-05-03T20:16:44Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2023-05-04T07:04:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Nice -- thanks @j-bennet. I remember us doing this somewhere else recently and it fixed things. Let's do the same here","2023-04-10T17:19:11Z",false,"APPROVED"
"charlesbluca","MEMBER","Most of the test failures have been resolved at this point, the only ones remaining I've left because I'm not sure if we'd prefer bumping the minimum supported version or just patching the tests with some compat code:

- the fastparquet failures are due to lack of support for reading/writing statistics & nullable dtypes
- the zarr failures are due to `zarr.Array` expecting an initialized store rather than a string or path-like","2023-04-08T04:29:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! ","2023-04-10T16:59:46Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-10T18:12:20Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-10T18:28:33Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-10T18:36:11Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-10T19:14:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-04-10T20:44:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-04-10T20:45:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-04-10T20:46:06Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-04-10T21:56:45Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-11T02:50:06Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca. This is looking really close ","2023-04-11T20:26:07Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-11T20:32:15Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-11T20:35:02Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-11T20:57:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-04-11T21:06:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-04-11T21:23:34Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-11T21:25:09Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-11T21:28:39Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-11T22:13:55Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-12T06:10:02Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-04-12T16:04:25Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-12T19:45:03Z",false,"COMMENTED"
"jrbourbeau","MEMBER","This looks great, thanks for all your work here @charlesbluca ","2023-04-19T17:38:15Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @gjoseph92. I don't have strong thoughts here -- this seems reasonable. Also, as @fjetter mentioned in https://github.com/dask/dask/issues/10155#issuecomment-1498844818, even though it's a slight change in behavior, it should be relatively safe based on existing third-party packages we're aware of that hook into `dask`s config system. 

I left one small suggestion, but otherwise this look good. 

Oh, also I merged `main` to resolve some unrelated CI failures that have already been fixed elsewhere 

Also cc @djhoese for the config connection","2023-04-07T15:24:42Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2023-04-07T15:58:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","@douglasdavis is this something you have bandwidth to look at? ","2023-04-12T21:08:43Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","I haven't gone through the tests yet, because I think I don't understand properly what `rechunk` is supposed to produce.","2023-05-24T08:30:03Z",false,"COMMENTED"
"fjetter","MEMBER","I'm OK with this change. 

@wence- raise two concerns about implementation details. If we can address those easily, I'm in favor of doing this. If either requires significant work I suggest to not do it right now and merge this PR as is to unblock follow up work.","2023-05-24T10:00:58Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2023-05-24T15:43:17Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-05-24T15:56:35Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-05-24T16:04:27Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","","2023-05-24T16:04:43Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-05-24T16:11:10Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-05-24T16:20:53Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-05-24T16:35:00Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","","2023-05-24T16:57:21Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","","2023-05-24T16:59:50Z",false,"APPROVED"
"rjzamora","MEMBER","","2023-04-10T21:34:29Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-18T14:46:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca ","2023-04-19T17:29:47Z",false,"APPROVED"
"phofl","COLLABORATOR","Can we parametrize the failing groupby value_counts and unique tests over dtype int32 and int64 to ensure that we see the failures on all builds?","2023-04-06T10:49:21Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-06T17:02:54Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-06T17:11:35Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-06T17:27:29Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-06T17:31:57Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-06T17:51:04Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-06T18:15:48Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-06T20:58:25Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-06T21:16:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet for the fixes and @phofl for reviewing. Will merge after CI finishes ","2023-04-06T21:50:41Z",false,"APPROVED"
"galipremsagar","CONTRIBUTOR","","2023-04-12T18:21:20Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-12T18:30:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-04-12T19:36:03Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-12T22:09:46Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-05T19:12:36Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl ","2023-04-06T21:58:48Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-11T10:21:08Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-11T10:21:39Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-11T10:22:03Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-13T10:26:50Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks, @phofl!","2023-05-05T11:16:46Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl ","2023-04-06T22:14:47Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-11T10:30:10Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-11T10:31:33Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-11T10:31:36Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-11T10:36:50Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-11T10:36:59Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-13T10:52:17Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-05-05T11:32:58Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-05-19T19:16:27Z",false,"APPROVED"
"jrbourbeau","MEMBER","Apologies for the delayed response. I think the test coverage added here is already covered in https://github.com/dask/dask/pull/10071 (just merged), but let me know if that's not the case ","2023-04-19T17:32:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Just a driveby comment since I saw ""tmate"" in the PR name. You may find this GHA useful

https://github.com/dask/distributed/blob/a1765d95e7a0d3ef269f7573dbe877a866cb3596/.github/workflows/tests.yaml#L208-L210

At least Guido has found it useful in the past ","2023-04-05T18:29:57Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2023-04-04T19:50:34Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-04-04T17:39:37Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-04T17:44:47Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-04T18:08:31Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","👍 ","2023-04-04T18:08:41Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","Ooof, this quickly became not pretty. I don't feel so good about matching `pandas` behavior with 2.0 but not below.

If I understand this correctly, index dtype was enforced to be the same as original dtype so that what we have in meta matches what we have in result. Perhaps it's better to remove our previous tweaks, and accept the fact that in some (hopefully rare) cases meta index dtype will disagree with result index dtype. We probably will have to modify `assert_eq` to accept an extra parameter for that.

I'd like to hear what @jrbourbeau thinks about it.","2023-04-06T23:50:18Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @phofl! @charlesbluca I think you were looking into something similar. Do you have bandwidth to review this PR? 

> Failure seems unrelated

+1 -- see https://github.com/dask/dask/pull/10145","2023-04-04T19:29:08Z",false,"COMMENTED"
"charlesbluca","MEMBER","Thanks @phofl! This LGTM, some relevant sections from the 2.0 migration guide to contextualize these changes:

- https://docs.sqlalchemy.org/en/14/changelog/migration_20.html#implicit-and-connectionless-execution-bound-metadata-removed
- https://docs.sqlalchemy.org/en/14/changelog/migration_20.html#select-no-longer-accepts-varied-constructor-arguments-columns-are-passed-positionally","2023-04-19T21:36:58Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the fix @phofl and reviewing @charlesbluca! ","2023-04-19T21:43:42Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","👍 ","2023-04-03T20:11:04Z",false,"APPROVED"
"charlesbluca","MEMBER","Cool! In that case, how do you feel about reverting the changes to the environment file (since testing should be getting handled in #10161)?","2023-04-10T20:56:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca 

> dask/gpu team isn't a collaborator on this repo

Looking at the repo settings, `dask/gpu` is listed as a collaborator. Does the team need certain permissions? It current just has `read` permissions 

Also, I'm fine with the changes here if they fix CI failures. Do you know if the `dask/gpu` team being pinged on these PRs is actually useful? ","2023-04-03T16:54:03Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @erayaslan. @rjzamora do you have bandwidth to look at this? ","2023-04-03T20:49:02Z",false,"COMMENTED"
"rjzamora","MEMBER","This is great @erayaslan - Thanks for the work!

I made a bunch of nit-picks and re-wording suggestions, but I don't think any of my comments should be treated as blockers.","2023-04-04T14:22:35Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2023-04-04T17:25:30Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2023-04-04T17:26:34Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks @erayaslan - Looks good!

Have you been able to confirm that the formatting looks good when you build the docs locally? (didn't have time to do this myself)","2023-04-05T14:01:37Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet! Just a few small comments -- overall this looks good

> Pretty sure test failures are unrelated.

Definitely. Merging `main` should fix those. ","2023-04-05T18:59:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-04-06T19:56:48Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-06T20:36:40Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-06T21:00:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet -- will merge once CI is finished ","2023-04-06T21:31:36Z",false,"APPROVED"
"gjoseph92","COLLABORATOR","Thanks @DavidNguyen2002! This looks good.","2023-04-06T23:08:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca ","2023-04-03T16:54:38Z",false,"APPROVED"
"galipremsagar","CONTRIBUTOR","","2023-03-30T14:58:05Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for fixing this @wence-. I agree this is a bit of an edge case, but one that we should account for. I kicked off another CI build that includes the `upstream` job to make sure `pandas=2.0` is happy (I don't anticipate any failures related to these changes though). Will merge after CI is done ","2023-03-30T17:18:09Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @bphillips-exos. It looks like this is pointing to an issue upstream in `pandas` (xref https://github.com/pandas-dev/pandas/issues/52283). Adding a workaround here seems good in the meantime 

> Would mind adding a simple test (maybe test_valid_divisions?) to dask/dataframe/tests/test_utils_dataframe.py?

I'm certainly not opposed to this, but just wanted to point out that doctests should catch the tuple case added here ","2023-03-29T20:33:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @bphillips-exos ","2023-03-30T18:16:52Z",false,"APPROVED"
"rjzamora","MEMBER","","2023-03-29T16:48:37Z",false,"COMMENTED"
"mrocklin","MEMBER","","2023-03-29T18:37:03Z",false,"COMMENTED"
"rjzamora","MEMBER","This seems both safe and reasonable to me. Thanks!","2023-03-29T20:05:45Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @mrocklin @rjzamora -- will merge after CI finishes ","2023-03-29T20:19:29Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @graingert ","2023-03-29T16:30:44Z",false,"APPROVED"
"fjetter","MEMBER","","2023-03-31T09:59:31Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-03-28T02:05:27Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2023-04-03T10:40:04Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @hendrikmakait. This looks sensible. Could you add a test for this? ","2023-03-27T17:25:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Looks like the new test over in https://github.com/dask/distributed/pull/7708 is passing -- thanks @hendrikmakait ","2023-03-27T21:28:35Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-03-25T05:14:15Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet -- this is in ","2023-03-27T15:59:05Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-03-24T15:54:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @phofl! 

cc @j-bennet @rjzamora ","2023-03-24T15:58:12Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-24T22:27:58Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","There's a test failure in pyarrow build (the one named `Tests / test (ubuntu-latest, 3.10, pyarrow)`).

```
FAILED dask/dataframe/io/tests/test_parquet.py::test_null_partition_pyarrow[None] - AssertionError: DataFrame.index are different

Attribute ""dtype"" are different
[left]:  int64
[right]: Int64
FAILED dask/dataframe/io/tests/test_parquet.py::test_null_partition_pyarrow[processes] - AssertionError: DataFrame.index are different

Attribute ""dtype"" are different
[left]:  int64
[right]: Int64
```

Looks related to this PR. Unfortunately, the build is showing up green because we allow this build to fail. You have to open the build log and scroll aaaaalll the way to the bottom of the test run to see the failure:

https://github.com/dask/dask/actions/runs/4513009458/jobs/7947245854?pr=10115#step:8:41817

Sorry, I know it's quite cumbersome.","2023-03-24T22:43:43Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-03-24T23:48:16Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","👍  Thank you @phofl,  nice work.","2023-03-25T00:28:38Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl ","2023-03-29T17:22:46Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-03-30T16:57:11Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-03-30T17:00:10Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-03-30T17:01:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-04-03T22:08:41Z",false,"APPROVED"
"jacobtomlinson","MEMBER","","2023-03-24T11:48:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jacobtomlinson. Will take a closer look later today. Marking as DNM for now to signal this should go in after the release today ","2023-03-24T15:44:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-24T15:46:34Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2023-03-27T09:53:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Looks great, thanks @jacobtomlinson! 

I opened up https://github.com/dask/dask/issues/10119 to discuss this topic more broadly ","2023-03-27T15:32:22Z",false,"APPROVED"
"graingert","MEMBER","","2023-03-23T12:16:31Z",false,"COMMENTED"
"graingert","MEMBER","","2023-03-23T12:17:04Z",false,"COMMENTED"
"graingert","MEMBER","","2023-03-23T15:11:51Z",false,"APPROVED"
"graingert","MEMBER","","2023-03-23T15:12:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jacobtomlinson @graingert. This looks reasonable to me. 

For reference, `dask.compatibility` is intended to be private so I wouldn't use anything in this module in other projects. Though I acknowledge we're not doing a great job of signaling that through use of leading underscores. I'll open an issue for this later ","2023-03-23T15:18:18Z",false,"APPROVED"
"graingert","MEMBER","","2023-03-23T15:19:17Z",false,"APPROVED"
"charlesbluca","MEMBER","","2023-03-28T16:49:32Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-28T17:08:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet! 

Given the deprecation warning says ""Check the dtypes on the base object instead"", is there a reason we can't just do something like

```diff
diff --git a/dask/dataframe/groupby.py b/dask/dataframe/groupby.py
index e5ff39ecb..252160c42 100644
--- a/dask/dataframe/groupby.py
+++ b/dask/dataframe/groupby.py
@@ -311,7 +311,7 @@ def numeric_only_deprecate_default(func):
                     ""'numeric_only=False' is not implemented in Dask.""
                 )
             numerics = self.obj._meta._get_numeric_data()
-            has_non_numerics = set(self._meta.dtypes.columns) - set(numerics.columns)
+            has_non_numerics = set(self.obj.dtypes.index) - set(numerics.columns)
             if has_non_numerics and PANDAS_GT_150 and not PANDAS_GT_200:
                 if numeric_only is no_default:
                     warnings.warn(
@@ -351,9 +351,7 @@ def numeric_only_not_implemented(func):
                         ""'numeric_only=False' is not implemented in Dask.""
                     )
                 numerics = self.obj._meta._get_numeric_data()
-                has_non_numerics = set(self._meta.dtypes.columns) - set(
-                    numerics.columns
-                )
+                has_non_numerics = set(self.obj.dtypes.index) - set(numerics.columns)
                 if has_non_numerics:
                     if numeric_only is False or (
                         PANDAS_GT_200 and numeric_only is no_default
```

?

When I make those changes locally, `dask/dataframe/tests/test_groupby.py` passes (with the exception of `test_groupby_aggregate_categorical_observed` which is a different issue https://github.com/pandas-dev/pandas/issues/52151). Maybe I'm missing some subtlety here ","2023-03-28T18:00:21Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-28T21:13:17Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-28T23:06:54Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet -- this is in ","2023-03-29T15:08:13Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet ","2023-03-23T17:25:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-23T20:48:39Z",false,"APPROVED"
"jrbourbeau","MEMBER","LGTM if CI is happy 

EDIT: Will merge once CI is finished ","2023-03-22T21:28:59Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet ","2023-03-23T21:28:11Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! ","2023-03-22T18:12:50Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-03-22T19:08:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca ","2023-03-22T21:16:07Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! This LGTM if CI is happy ","2023-03-22T16:25:06Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-22T18:59:36Z",false,"APPROVED"
"graingert","MEMBER","","2023-03-22T15:37:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-22T15:38:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-22T15:38:33Z",false,"COMMENTED"
"graingert","MEMBER","","2023-03-22T15:39:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-22T15:40:45Z",false,"COMMENTED"
"graingert","MEMBER","","2023-03-23T12:05:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-24T17:22:07Z",false,"APPROVED"
"graingert","MEMBER","","2023-03-22T12:16:37Z",false,"COMMENTED"
"charlesbluca","MEMBER","LGTM; remaining CI failures should be resolved with https://github.com/dask/dask/pull/10101","2023-03-22T13:00:26Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @graingert. Here's the issue this PR closes https://github.com/dask/dask/issues/10099","2023-03-22T15:07:35Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @graingert! Overall this looks great, thanks for handling all of this. I left a couple of small suggestions and a question. It also looks like there's a merge conflict

@jakirkham would you mind taking a quick look at this if you have a moment? Should be similar to the corresponding PR over in `distributed` that you've reviewed ","2023-03-28T15:22:46Z",false,"COMMENTED"
"graingert","MEMBER","","2023-03-28T15:31:03Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-28T15:56:28Z",false,"COMMENTED"
"graingert","MEMBER","","2023-03-28T15:57:05Z",false,"COMMENTED"
"graingert","MEMBER","","2023-03-28T16:01:13Z",false,"COMMENTED"
"jakirkham","MEMBER","","2023-03-29T09:03:35Z",false,"COMMENTED"
"graingert","MEMBER","","2023-03-29T13:48:52Z",false,"COMMENTED"
"jakirkham","MEMBER","","2023-03-29T17:34:34Z",false,"COMMENTED"
"graingert","MEMBER","","2023-03-29T17:37:05Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2023-03-29T18:13:30Z",false,"COMMENTED"
"jakirkham","MEMBER","","2023-03-29T19:29:29Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @graingert for all your work here -- and @jakirkham @douglasdavis for the reviews","2023-03-30T14:45:08Z",false,"APPROVED"
"graingert","MEMBER","","2023-04-05T14:05:15Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-03-22T01:23:11Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-22T04:31:40Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-22T04:35:46Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-03-22T12:54:25Z",false,"APPROVED"
"graingert","MEMBER","","2023-03-22T14:17:24Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet ","2023-03-22T15:08:27Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","👍 ","2023-03-21T16:13:13Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-03-21T02:41:36Z",false,"APPROVED"
"charlesbluca","MEMBER","","2023-03-21T21:40:02Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-21T22:03:53Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-21T22:25:57Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-03-22T15:58:11Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-22T17:41:21Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-03-23T13:41:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet! I left a couple of small comments, but overall this looks good ","2023-03-23T16:04:51Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-23T17:10:13Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-23T18:17:45Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-23T18:34:44Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-23T19:52:42Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-23T20:18:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet. I just pushed a commit to fix a merge conflict, but this looks good to go. Will merge after CI finishes ","2023-03-23T20:56:56Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-03-20T18:26:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-20T18:31:26Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-03-20T22:10:32Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-03-22T14:12:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-22T15:47:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-22T15:50:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-22T21:07:29Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-03-23T13:34:29Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-03-23T13:35:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-23T15:37:19Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","👍 ","2023-03-23T21:03:07Z",false,"APPROVED"
"rjzamora","MEMBER","Oops! Thanks @wence- !","2023-03-20T18:23:01Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-03-20T18:28:17Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-03-22T19:41:19Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet. I think we want to check the actual number of tasks, not the layer structure. Something like

```diff
diff --git a/dask/bag/tests/test_bag.py b/dask/bag/tests/test_bag.py
index a28989e30..cea4b93f6 100644
--- a/dask/bag/tests/test_bag.py
+++ b/dask/bag/tests/test_bag.py
@@ -1622,6 +1622,7 @@ def test_dask_layers_to_delayed(optimize):
 def test_to_dataframe_optimize_graph():
     pytest.importorskip(""dask.dataframe"")
     from dask.dataframe.utils import assert_eq as assert_eq_df
+    from dask.dataframe.utils import pyarrow_strings_enabled

     x = db.from_sequence(
         [{""name"": ""test1"", ""v1"": 1}, {""name"": ""test2"", ""v1"": 2}], npartitions=2
@@ -1640,14 +1641,16 @@ def test_to_dataframe_optimize_graph():
     d = y.to_dataframe()

     # All the `map` tasks have been fused
-    assert len(d.dask.layers) < len(y.dask.layers)
+    assert len(d.dask) < len(y.dask) + d.npartitions * int(pyarrow_strings_enabled())

     # no optimizations
     d2 = y.to_dataframe(optimize_graph=False)

     # Graph hasn't been fused. It contains all the original tasks,
     # plus one extra layer converting to DataFrame
-    assert len(d2.dask.layers) > len(y.dask.layers)
+    assert len(d2.dask.keys() - y.dask.keys()) == d.npartitions * (
+        1 + int(pyarrow_strings_enabled())
+    )

     # Annotations are still there
     assert hlg_layer_topological(d2.dask, 1).annotations == {""foo"": True}
```","2023-03-22T19:40:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet

Note that failures are unrelated and have been resolved on `main` ","2023-03-22T21:21:19Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca. It feels a little strange to link to a PR preview version of a documentation page (I'm assuming that's what this is based on the url, but correct me if that's not the case). Maybe we just leave this link out until the GHA refactor happens? 

Btw, I'm curious when you think the GHA migration might happen","2023-03-20T18:56:27Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","Nice.","2023-03-17T16:47:28Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet! I pushed a small commit to just use `._mgr` unconditionally since that appears to exist for all supported `pandas` versions (including dev `pandas`). 

@phofl the deprecation warning says to use a public API instead of `._data`. `._mgr` works, but is still private. Is there a public API you'd recommend? Alternatively, is there a different approach we could take in this function? This function is meant to produce a unique, deterministic hash for a given `pd.DataFrame` ","2023-03-17T14:44:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-17T15:29:51Z",false,"APPROVED"
"jrbourbeau","MEMBER","Given this should be uncontroversial, I'll plan to merge in a bit if no further comments ","2023-03-17T14:46:06Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-16T05:38:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet 

Also cc @rjzamora as I think this is in line with a previous suggestion you made about passing these types of variables down through the parquet engine backend ","2023-03-16T17:23:17Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-16T17:42:23Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-16T17:59:36Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-17T18:39:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet 

Also cc @phofl in case you have bandwidth to take a look at the changes here ","2023-04-05T19:17:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-04-06T21:40:41Z",false,"APPROVED"
"phofl","COLLABORATOR","lgtm","2023-04-11T12:13:50Z",false,"APPROVED"
"rjzamora","MEMBER","","2023-03-15T19:21:04Z",false,"COMMENTED"
"ayushdg","CONTRIBUTOR","","2023-03-15T20:57:36Z",false,"COMMENTED"
"phofl","COLLABORATOR","We did this in pandas as well
We added these 2:

```
  ""error::ResourceWarning"",
  ""error::pytest.PytestUnraisableExceptionWarning"",
```

We get a bunch of false positives because of flaky ci though","2023-04-12T13:42:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca. There have been some recent updates to how we generate non-empty meta objects with extension dtypes recently. The test added here now passes when run on `main`. Want to make this a tests-only update (as the test added here provides extra coverage)? ","2023-04-18T15:27:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-04-18T17:20:36Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-19T03:03:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-04-19T16:03:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca -- this is in ","2023-04-19T16:03:51Z",false,"APPROVED"
"graingert","MEMBER","","2023-03-15T13:23:21Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @graingert! Overall the changes here look reasonable

Is it easy to add a test for this? Otherwise, would the lack of a warning over in `distributed`s CI suffice? ","2023-03-15T15:17:24Z",false,"COMMENTED"
"graingert","MEMBER","","2023-03-15T15:26:37Z",false,"COMMENTED"
"graingert","MEMBER","","2023-03-15T15:28:30Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2023-03-15T15:55:57Z",false,"COMMENTED"
"graingert","MEMBER","","2023-03-15T16:19:06Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-15T18:42:07Z",false,"COMMENTED"
"jakirkham","MEMBER","","2023-03-15T18:58:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @graingert! ","2023-03-16T15:27:05Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet! ","2023-03-15T22:22:42Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-16T01:00:23Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-16T01:02:22Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-16T01:07:44Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-16T01:08:15Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-16T16:35:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet! This looks good to go. I pushed one tiny commit with a minor simplification -- hope that's okay. Will merge once CI finishes ","2023-03-16T21:14:16Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca ","2023-03-14T18:46:17Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @douglasdavis! I left one comment about avoiding `lambda`s but otherwise this looks good ","2023-03-14T18:50:59Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2023-03-14T19:34:41Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2023-03-14T19:53:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @douglasdavis! ","2023-03-15T00:19:50Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","👍 ","2023-03-14T17:14:20Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @rjzamora! I'm curious what's stopping us from just using the same file order if a list of paths are provided? This seems niche enough that adding a new public keyword to `read_parquet` feels like too much. ","2023-03-14T16:32:32Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-15T14:36:27Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-15T14:38:57Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-15T14:41:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-28T22:24:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-29T13:18:49Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-29T14:30:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-29T15:25:48Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-04-07T15:53:46Z",false,"COMMENTED"
"jrbourbeau","MEMBER","> I'm assuming codecov is wrong

Yeah, me too. xref https://github.com/dask/dask/issues/10165

> Let me know if you have any concerns with changing the fsspec mindep

Nope! In fact, @charlesbluca is bumping it to `fsspec>=2021.9.0` in https://github.com/dask/dask/pull/10161 ","2023-04-10T22:04:11Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-04-10T22:34:29Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","Looks good. Thank you for making the changes! 👍 ","2023-04-25T16:11:37Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-04-25T16:22:33Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-25T16:23:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @Oreilles ","2023-04-25T16:24:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for handling this @douglasdavis! I've not taken a close look (yet), but did want to point you to the corresponding PR on the `distributed` side https://github.com/dask/distributed/pull/7629. It'd be good to take the same approach both in `dask/dask` and `dask/distributed` ","2023-03-13T17:59:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet! This looks reasonable from a high level approach","2023-03-14T21:26:28Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-14T21:46:51Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-14T22:05:02Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-14T22:41:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-15T22:04:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-16T17:38:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-16T22:23:53Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-17T04:24:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-17T14:48:58Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-17T15:59:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet. This is in ","2023-03-17T20:34:13Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet

It's not totally clear to me whether this is a case where we should convert to `string[pyarrow]` or leave as `object` when combining mixed dtype columns (e.g. combining strings and floats). What's your thinking behind the current approach? ","2023-03-13T17:23:29Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-13T17:58:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-13T20:13:13Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-13T20:19:58Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-13T20:21:03Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-13T20:22:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-13T20:38:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-13T20:43:00Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-13T21:02:46Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-13T21:10:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet -- will merge after CI finishes ","2023-03-13T21:11:22Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-03-10T22:58:58Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","Nice!","2023-03-10T23:28:37Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","👍 ","2023-03-10T22:03:32Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-03-10T22:08:15Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-10T22:09:09Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-10T22:09:46Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","👍 ","2023-03-10T21:02:40Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","👍 ","2023-03-10T22:49:47Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @rjzamora 

> Some RAPIDS developers have been seing p2p errors while using the ""cudf"" backend (which does not support the p2p method just yet)

I'm curious what errors folks are running into. I'm aware of https://github.com/dask/dask/issues/10014 -- are there other failures? ","2023-03-09T21:03:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","It looks like `dask/dataframe/tests/test_groupby.py::test_groupby_apply_cudf` is still failing in gpuCI. Just to clarify, is the idea that `dask-cudf` will set the `dataframe.shuffling.method` config option to `tasks`? 

~~Also, it looks like `dd.shuffle` / `dd.DataFrame.shuffle` don't support `p2p` or the new `dataframe.shuffling.method` config option. Maybe another approach would be for us to have `shuffle(...)` use `get_default_shuffle_algorithm` internally~~ Nvm, looking closer, `shuffle(...)` does support `p2p` and the config option ","2023-03-10T15:49:47Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-24T14:31:16Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-24T14:42:38Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-24T14:48:11Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-24T14:50:46Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-24T15:54:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","@rjzamora have you confirmed this won't break anything in the rapids stack? ","2023-03-24T15:56:16Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-24T16:40:07Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-24T16:59:08Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-24T16:59:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","cc @bnavigator","2023-03-09T16:48:52Z",false,"COMMENTED"
"bnavigator","CONTRIBUTOR","","2023-03-10T05:06:37Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-10T15:42:35Z",false,"COMMENTED"
"bnavigator","CONTRIBUTOR","","2023-03-11T23:00:44Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-13T15:05:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","I'll defer to you on this one @rjzamora ","2023-03-24T16:36:09Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-24T17:02:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-24T17:27:11Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-24T17:39:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet! ","2023-03-09T19:25:09Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-09T19:28:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-09T19:31:14Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-09T19:31:46Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-09T19:32:50Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-09T19:37:32Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-09T19:44:29Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-09T19:55:43Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-03-09T20:22:38Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-09T20:49:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-09T21:00:16Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-09T21:09:34Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-09T21:10:39Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-09T21:15:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-09T21:42:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet! Will merge after CI finishes ","2023-03-10T03:04:21Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @rjzamora! Will merge after CI finishes ","2023-03-08T21:22:24Z",false,"APPROVED"
"jrbourbeau","MEMBER","This is fine by me. Is there somewhere with more info about the regression? ","2023-03-08T17:06:31Z",false,"APPROVED"
"hendrikmakait","MEMBER","LGTM assuming CI will be green.","2023-03-08T17:06:58Z",false,"APPROVED"
"fjetter","MEMBER","","2023-03-08T17:45:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet! I left some small comment, but otherwise this looks great ","2023-03-07T22:42:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet ","2023-03-08T16:14:13Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","👍 ","2023-03-07T19:30:11Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","Looks good. Still makes me wonder why the test is only failing intermittently.","2023-03-07T18:44:29Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","👍 ","2023-03-07T21:04:29Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2023-03-07T08:36:57Z",false,"COMMENTED"
"fjetter","MEMBER","sorry, somehow missed the new test cases","2023-03-08T14:55:08Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @hendrikmakait. Overall this looks good, just a couple of small questions ","2023-03-08T16:26:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-08T16:27:09Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-03-08T16:27:45Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-03-08T16:30:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-08T17:18:14Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-03-06T19:57:36Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-06T20:17:50Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-06T20:20:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-06T20:54:16Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-03-07T10:00:26Z",false,"APPROVED"
"rjzamora","MEMBER","","2023-03-08T15:37:12Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-08T16:20:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-08T16:34:22Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-08T17:53:39Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-08T17:54:13Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","👍 ","2023-03-08T01:32:36Z",false,"APPROVED"
"fjetter","MEMBER","","2023-03-08T17:41:52Z",false,"APPROVED"
"fjetter","MEMBER","","2023-03-06T13:29:43Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-03-03T22:12:09Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","👍 ","2023-03-06T20:53:39Z",false,"APPROVED"
"rjzamora","MEMBER","","2023-03-07T05:33:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-07T16:21:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-03T16:45:20Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-03T20:26:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-03T20:27:43Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","While working on https://github.com/dask/dask/pull/10000, I found that a lot of tests that break with pyarrow strings and pandas 1.5, are fixed in pandas 2.0, I think in particular, because in 2.0 `min` reduction was added for `ArrowStringArray`. Since the work on extension dtypes is still ongoing in `pandas`, it might make more sense to use nightly panda builds for this workflow. Otherwise we'll keep looking at same old 1.5.3 issues.","2023-03-03T20:36:57Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","Nice! 🚀 ","2023-03-03T21:58:02Z",false,"APPROVED"
"rjzamora","MEMBER","Thanks for picking this up @cmarmo - Nice work!  I made a few suggestions.","2023-06-14T17:27:23Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-06-14T17:31:02Z",false,"COMMENTED"
"cmarmo","CONTRIBUTOR","","2023-06-15T00:10:18Z",false,"COMMENTED"
"cmarmo","CONTRIBUTOR","","2023-06-15T00:10:42Z",false,"COMMENTED"
"cmarmo","CONTRIBUTOR","","2023-06-15T00:13:25Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks for revising @cmarmo - Only one more thing jumps out at me. Otherwise, this looks good.

>I'm not sure I am the right person to answer https://github.com/dask/dask/pull/10016#discussion_r1229911545 though...

Not a problem. That was more of a ""note to self"" (and can be addressed separately).","2023-06-15T12:37:09Z",false,"COMMENTED"
"cmarmo","CONTRIBUTOR","","2023-06-15T21:05:41Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-06-20T21:14:26Z",false,"COMMENTED"
"rjzamora","MEMBER","Looks good to me. Thanks @cmarmo !

@pentschev @jakirkham - Let me know if either of you want to review. Otherwise, I'll probably merge this tomorrow.","2023-06-20T21:17:43Z",false,"DISMISSED"
"pentschev","MEMBER","If I understand it correctly, the number of chunks for the highest dimension must match its size, is that correct? If so, then the benchmark from the PR's description must be `a = da.from_array(x, chunks=(100, dimy))` (instead of `chunks=(100, 100)`), it errors out instead. Doing that and using Dask's random state to generate data and persisting the data before compute, I seem to only get mildly better results:

![Dask+NumPy+compute()](https://github.com/dask/dask/assets/4398246/5d4ad395-61f6-4253-8440-21b9018cdbee)

However, if I use `persist()` instead of `compute()` the results are now more unstable and difficult to draw a conclusion but seem worse:

![Dask+NumPy+persist()](https://github.com/dask/dask/assets/4398246/f198c94e-3e27-418f-9650-df52afcc6cd7)

I was mainly attempting to see how that would perform for CuPy, but simply replacing NumPy arrays by CuPy arrays I see both with equivalent performance:

![Dask+CuPy+compute()](https://github.com/dask/dask/assets/4398246/0f02f731-4ea1-42fe-a1a6-88d8ec676366)

And with `persist()` I see also similar instability and potentially worse results too:

![Dask+CuPy+persist()](https://github.com/dask/dask/assets/4398246/76838975-1df3-474a-8d4e-5b26960bae43)

The changes look good to me, but the results I've seen above are not conclusively better, it's also possible I did something wrong. For reference, here's the code I ran:

<details><summary>NumPy code</summary>

```python
import dask
import numpy as np
import dask.array as da
import time
from dask.distributed import Client, progress
import matplotlib.pyplot as plt


client = Client(processes=False, threads_per_worker=4,
                n_workers=1, memory_limit='4GB')
exponent = np.arange(4,9)
n_elem = np.power(10, exponent)
dimx = 100
t_da = np.zeros(len(n_elem))
t_da_chunks = np.zeros(len(n_elem))
niter = 10
i = 0
for n in n_elem:
    dimy = int(n / dimx)
    rs = da.random.RandomState(RandomState=np.random.RandomState)
    a = rs.randint(n, size=(dimx, dimy), chunks=(100, dimy)).persist()
    for ni in np.arange(niter):
        tic = time.perf_counter_ns()
        a.ravel().persist()
        toc = time.perf_counter_ns()
        if ni:
            t_da[i] += (toc - tic)
    for ni in np.arange(niter):
        tic = time.perf_counter_ns()
        a.ravel_chunks().persist()
        toc = time.perf_counter_ns()
        if ni:
            t_da_chunks[i] += (toc - tic)
    i += 1


client.close()

t_np /= niter - 1
t_da /= niter - 1
t_da_chunks /= niter - 1
print(f""Numpy ravel: {t_np}"")
print(f""Dask ravel: {t_da}"")
print(f""Dask ravel by chunk: {t_da_chunks}"")

# plot
fig, ax = plt.subplots()

plt.xscale('log')
plt.yscale('log')
plt.xlabel('number of elements')
plt.ylabel('time in nsec')

ax.plot(n_elem, t_da, linestyle='-', marker='o', label='ravel')
ax.plot(n_elem, t_da_chunks, linestyle='-', marker='o', label='ravel_chunks')
ax.legend()

plt.show()
```

</details>

<details><summary>CuPy code</summary>

```python
import dask
import cupy as np
import dask.array as da
import time
from dask.distributed import Client, progress
import matplotlib.pyplot as plt
from dask_cuda import LocalCUDACluster

cluster = LocalCUDACluster()
client = Client(cluster)
exponent = np.arange(4,9)
n_elem = np.power(10, exponent)
dimx = 100
t_np = np.zeros(len(n_elem))
t_da = np.zeros(len(n_elem))
t_da_chunks = np.zeros(len(n_elem))
niter = 10
i = 0
for n in n_elem:
    dimy = int(n / dimx)
    rs = da.random.RandomState(RandomState=np.random.RandomState)
    a = rs.randint(n, size=(dimx, dimy), chunks=(100, dimy)).persist()
    for ni in np.arange(niter):
        tic = time.perf_counter_ns()
        a.ravel().persist()
        toc = time.perf_counter_ns()
        if ni:
            t_da[i] += (toc - tic)
    for ni in np.arange(niter):
        tic = time.perf_counter_ns()
        a.ravel_chunks().persist()
        toc = time.perf_counter_ns()
        if ni:
            t_da_chunks[i] += (toc - tic)
    i += 1


client.close()

t_np /= niter - 1
t_da /= niter - 1
t_da_chunks /= niter - 1
print(f""Numpy ravel: {t_np}"")
print(f""Dask ravel: {t_da}"")
print(f""Dask ravel by chunk: {t_da_chunks}"")

# plot
fig, ax = plt.subplots()

plt.xscale('log')
plt.yscale('log')
plt.xlabel('number of elements')
plt.ylabel('time in nsec')

ax.plot(n_elem.get(), t_da.get(), linestyle='-', marker='o', label='ravel')
ax.plot(n_elem.get(), t_da_chunks.get(), linestyle='-', marker='o', label='ravel_chunks')
ax.legend()

plt.show()
```

</details>","2023-06-21T13:39:42Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-03-03T10:49:50Z",false,"APPROVED"
"hendrikmakait","MEMBER","LGTM; I haven't been aware of the prevalent usage of `method`. Note that merging this PR will break parts of the `dask/distributed` test suite.","2023-03-06T09:07:54Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","👍 Looks good.","2023-03-01T23:36:40Z",false,"APPROVED"
"jrbourbeau","MEMBER","Great, thanks for reviewing @j-bennet ","2023-03-02T15:55:45Z",false,"COMMENTED"
"charlesbluca","MEMBER","Thanks @wkrasnicki! Don't have a deep understanding of the array internals but some comments around the warning filtering","2023-04-26T20:52:38Z",false,"COMMENTED"
"krokosik","CONTRIBUTOR","","2023-05-02T13:08:08Z",false,"COMMENTED"
"krokosik","CONTRIBUTOR","","2023-05-02T13:20:42Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-05-31T01:06:08Z",false,"COMMENTED"
"krokosik","CONTRIBUTOR","","2023-05-31T15:57:42Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-06-02T15:16:09Z",false,"COMMENTED"
"charlesbluca","MEMBER","Thanks @wkrasnicki! ","2023-06-02T15:16:27Z",false,"APPROVED"
"martindurant","MEMBER","I have finally had a look at the code myself. I appreciate the effort you have taken to cover all the possible cases in tests.

It would be good to describe what implicit_complex_dtype does for the user - this isn't an argument derived from numpy, so should be covered by our docs, I think.

For the tests, there are a bunch of warning ignore blocks, but I think we want to assert a warning *IS* raised for these cases, with [`pytest.warns`](https://docs.pytest.org/en/7.1.x/how-to/capture-warnings.html#warns). ","2023-08-28T14:27:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-28T19:15:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-20T17:48:28Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-21T16:56:42Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-21T16:57:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora ","2023-03-22T01:31:43Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-22T02:56:24Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-22T03:22:36Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-22T03:24:08Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-22T14:40:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-22T14:40:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-22T21:44:37Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-22T23:26:28Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-23T16:29:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora -- will merge after CI finishes ","2023-03-23T21:34:58Z",false,"APPROVED"
"jorisvandenbossche","MEMBER","","2023-04-04T12:04:14Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-04-04T13:36:42Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2023-04-04T14:43:54Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for fixing @fjetter ","2023-02-28T19:33:55Z",false,"APPROVED"
"pentschev","MEMBER","Looks sensible to me. Does it make sense to update the CuPy tests as well or is there a reason not to do that now? They should all be in `dask/array/tests/test_cupy_*.py`.","2023-03-10T12:45:38Z",false,"COMMENTED"
"pentschev","MEMBER","LGTM, thanks so much for making all these changes @erayaslan !","2023-03-13T12:19:42Z",false,"APPROVED"
"rjzamora","MEMBER","Thanks for the great work here @erayaslan ! Sorry for letting this sit for so long. I'll make sure these changes get merged as soon as I'm confident CI is green.","2023-04-07T13:33:06Z",false,"APPROVED"
"wence-","CONTRIBUTOR","","2023-02-28T15:57:50Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-02-28T18:48:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet ","2023-03-02T17:04:17Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-03-01T19:48:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","https://github.com/dask/partd/pull/64 should fix some of the shuffle-related serialization errors. You might try temporarily pointing CI environments at that PR to see what tests start passing ","2023-03-02T20:51:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-03T22:38:58Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-04T01:35:38Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-06T01:19:10Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-06T17:49:45Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-06T18:41:42Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-06T18:42:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-06T19:02:54Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-06T22:46:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-06T22:48:29Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-07T00:11:45Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-07T01:06:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-07T17:28:53Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-07T18:40:41Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-03-07T18:58:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-07T19:04:54Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for all your work here @j-bennet!","2023-03-08T21:15:25Z",false,"APPROVED"
"jakirkham","MEMBER","","2023-02-24T21:53:01Z",false,"APPROVED"
"jrbourbeau","MEMBER","Good catch -- thanks @charlesbluca! ","2023-02-28T19:22:07Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","Thank you @grusky , this looks good.","2023-04-05T16:20:59Z",false,"APPROVED"
"phofl","COLLABORATOR","lgtm","2023-04-12T14:08:16Z",false,"APPROVED"
"fjetter","MEMBER","","2023-02-22T15:27:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @fjetter! I've not thought too deeply about this yet, but will devote some cycles to it. 

FWIW it looks like the `dask/tests/test_distributed.py::test_fused_blockwise_dataframe_merge` failure is genuinely related to the change in default 

Also cc @quasiben who asked me about this a few days ago ","2023-02-22T15:55:52Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-02-23T13:41:49Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-02-23T14:09:25Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-02-23T17:16:55Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","","2023-02-24T14:42:47Z",false,"COMMENTED"
"hendrikmakait","MEMBER","Thanks @fjetter! The guards seem reasonable to me and should avoid user pains. Given the lack of negative feedback and the strictly positive results we've seen in testing, I'd say we should go ahead and roll this out. @wence-: Any chance you managed to break things in the meantime and would want to veto this?","2023-02-24T14:44:25Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2023-02-24T17:37:24Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-02-24T17:38:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-28T19:53:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-28T19:58:36Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-03-01T13:08:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! @quasiben maybe you could take a look at this if you have a moment? ","2023-02-22T02:33:29Z",false,"COMMENTED"
"rjzamora","MEMBER","This make sense to me. I was initially a bit uncomfortable until I realized that the modified lines are within an `if hasattr(dsk, ""__dask_graph__"")` block, which is equivalent to asserting that [is_dask_collection(dsk)](https://github.com/dask/dask/blob/556d3df9dac70c014c25eb3c0a5351fe2bebfad5/dask/base.py#L164) is `True`. Therefore, I agree that we shouldn't be hindering existing test coverage.","2023-02-22T00:08:17Z",false,"DISMISSED"
"rjzamora","MEMBER","","2023-02-22T00:16:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2023-02-22T00:27:14Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-02-22T03:18:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-02-22T15:12:51Z",false,"APPROVED"
"fjetter","MEMBER","","2023-02-21T14:57:50Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-02-21T15:37:55Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-02-22T16:02:51Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-02-22T17:15:43Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-03-21T14:43:16Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-03-21T14:49:37Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-21T23:15:32Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-21T23:21:20Z",false,"COMMENTED"
"rjzamora","MEMBER","Things are looking good to me @fjetter - I appreciate your work on this!

My only real concern is about backwards compatibility: I have heard of at least one Dask/RAPIDS user deploying a scheduler process on GPU-free hardware.  I'm worried that users like this will start to see errors when `pickle.loads` starts to require device-memory allocations on the scheduler.

I think it is fine for `distributed` to tighten the official environment and hardware requirements. However, I think it is important that we acknowledge that this decision is being made, and that the decision will likely break some real-world code. Note that I was originally hoping that we could provide a temporary escape hatch that would materialized the graph and use legacy communication. However, it is not clear to me that the pre-HLG graph-communication logic still exists?","2023-03-22T00:12:16Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-03-22T15:45:51Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-22T20:15:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2023-03-23T14:23:01Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-03-23T15:02:12Z",false,"COMMENTED"
"jakirkham","MEMBER","","2023-02-27T20:27:21Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @erayaslan for the update and @jakirkham for reviewing","2023-03-02T21:26:41Z",false,"COMMENTED"
"rjzamora","MEMBER","This seems fine to me. Thanks for the clear rational and documentation updates!

cc @jakirkham in case he has any thoughts","2023-02-22T15:25:00Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","👍 ","2023-02-21T17:04:18Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @antonl

cc @rjzamora","2023-02-20T19:53:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","@antonl those failures are unrelated to the changes here and should be fixed by merging `main` into this branch ","2023-03-02T19:22:39Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks for the contribution @antonl !  I'd like to expand test coverage a bit, but the general change seems good to me. ","2023-03-06T14:57:08Z",false,"COMMENTED"
"antonl","CONTRIBUTOR","","2023-03-09T01:14:57Z",false,"COMMENTED"
"antonl","CONTRIBUTOR","","2023-03-09T01:15:50Z",false,"COMMENTED"
"rjzamora","MEMBER","This is looking good @antonl - Only have a few small suggestions.","2023-03-09T16:42:43Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-09T16:47:44Z",false,"COMMENTED"
"antonl","CONTRIBUTOR","","2023-03-10T01:38:44Z",false,"COMMENTED"
"antonl","CONTRIBUTOR","","2023-03-10T01:41:05Z",false,"COMMENTED"
"antonl","CONTRIBUTOR","","2023-03-10T01:41:25Z",false,"COMMENTED"
"antonl","CONTRIBUTOR","","2023-03-10T01:52:09Z",false,"COMMENTED"
"rjzamora","MEMBER","LGTM - Thanks for the nice contribution @antonl !","2023-03-13T23:21:16Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet, this is nice to see ","2023-02-20T21:02:56Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-21T17:35:29Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-21T18:51:06Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-02-21T19:14:19Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-21T21:12:47Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-21T21:46:13Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-21T23:43:44Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-21T23:44:38Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks for pushing on this @j-bennet !

My current preference is to roll back any changes to `dask/dataframe/io/parquet/core.py` and instead add a `""convert_string""` element to the `""kwargs""` entry at the end of `_collect_dataset_info`. Let me know if you run into any problems or feel that this solution doesn't make sense.","2023-02-22T16:43:42Z",false,"CHANGES_REQUESTED"
"j-bennet","CONTRIBUTOR","","2023-02-23T00:03:04Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-23T01:27:17Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks again @j-bennet!  This is looking really good - I only have a few more minor comments.","2023-02-23T15:31:33Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-23T17:29:21Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-23T17:31:08Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-02-23T18:24:00Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-02-23T18:34:11Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-24T01:08:37Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-24T01:26:08Z",false,"COMMENTED"
"rjzamora","MEMBER","LGTM - Thanks for iterating on this @j-bennet !","2023-02-24T15:28:13Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","👍 ","2023-02-17T19:05:03Z",false,"APPROVED"
"ncclementi","MEMBER","This LGTM, had small comment that I think it might be a typo","2023-02-17T15:34:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for writing this up @TomAugspurger. Looks great overall, just left a couple of minor comments ","2023-02-17T16:18:12Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2023-02-18T03:37:12Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2023-02-18T03:37:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @TomAugspurger ","2023-02-20T19:45:50Z",false,"APPROVED"
"fjetter","MEMBER","Since the original issue is about key collision, I suggest to add a test that actually tests for a collision.
Should be easy to produce a failing test case on main. In the end we do not care that much about the concrete implementation details of the default renamer but we care strongly about avoiding collisions","2023-02-24T08:18:44Z",false,"COMMENTED"
"jochenott","CONTRIBUTOR","","2023-02-24T09:03:45Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-02-24T11:22:38Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-02-24T11:24:12Z",false,"COMMENTED"
"jochenott","CONTRIBUTOR","","2023-02-24T12:00:11Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-02-24T12:27:30Z",false,"COMMENTED"
"jochenott","CONTRIBUTOR","","2023-02-24T13:13:05Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-02-24T13:20:55Z",false,"COMMENTED"
"jochenott","CONTRIBUTOR","","2023-02-24T13:22:35Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-02-24T13:25:38Z",false,"COMMENTED"
"jochenott","CONTRIBUTOR","","2023-02-24T13:31:28Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-02-24T13:42:18Z",false,"COMMENTED"
"jochenott","CONTRIBUTOR","","2023-02-24T14:10:18Z",false,"COMMENTED"
"jochenott","CONTRIBUTOR","","2023-02-24T15:07:53Z",false,"COMMENTED"
"jochenott","CONTRIBUTOR","","2023-02-24T19:15:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet! ","2023-02-15T22:44:27Z",false,"APPROVED"
"phofl","COLLABORATOR","Generally looks good to me","2023-04-05T14:34:19Z",false,"COMMENTED"
"michaeldleslie","CONTRIBUTOR","","2023-04-07T19:29:03Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-10-04T18:21:42Z",false,"COMMENTED"
"michaeldleslie","CONTRIBUTOR","","2023-10-04T19:03:25Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-10-04T19:04:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-16T20:26:42Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-16T20:36:54Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-16T20:37:12Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-16T20:38:00Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-16T21:06:49Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-16T21:09:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet ","2023-02-17T21:29:16Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","The previous test was, ""dask dataframe stays the same after repartitioning and resetting its index to the same index"". The current test reads like ""dask dataframe after repartitioning and resetting the index to old index is the same as pandas dataframe after resetting the index to old index"". Not quite the same, but probably close enough.","2023-02-14T21:34:49Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @crusaderky. Will merge after CI finishes ","2023-02-14T16:29:17Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @crusaderky! I've not looked into the cause yet, but it looks like the test failures are related to the changes here ","2023-02-14T17:11:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-16T16:14:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @crusaderky ","2023-02-16T16:16:11Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-02-14T17:57:18Z",false,"APPROVED"
"jrbourbeau","MEMBER","Okay, so I think this PR is ready for a review whenever folks get a chance.

I ended up bumping the minimum version of `numpy` from 1.18 to 1.21 in order to make working with pandas extension dtypes easier. Like `pandas=1.3`, `numpy=1.21` is also >19 months old. It's also [NEP-29 compliant](https://numpy.org/neps/nep-0029-deprecation_policy.html#support-table) -- though we don't necessarily strictly adhere to NEP-29, in the past folks have voiced support for it. 

@charlesbluca it looks like gpuCI is still pulling in pandas=1.2 in the Python 3.8 build. Are there changes you'd recommend making here to 1.3 is used, or should that be handled upstream in the docker images being used by gpuCI? ","2023-02-15T22:21:30Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","It's really nice to see all the deleted code.","2023-02-16T23:54:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-17T17:20:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-17T17:23:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca. Comparing the linux Python 3.11 build in [this PR](https://github.com/dask/dask/actions/runs/4167078178/jobs/7212219144) vs the [latest commit on `main`](https://github.com/dask/dask/actions/runs/4166918103/jobs/7211860161), it looks like this change saves ~30 seconds in environment setup time. This seems probably not worth the code complexity added. Though I could certainly be missing something ","2023-02-13T21:05:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-13T19:37:11Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-14T04:59:06Z",false,"COMMENTED"
"jrbourbeau","MEMBER","This looks great, thanks @j-bennet ","2023-02-14T17:07:38Z",false,"APPROVED"
"jrbourbeau","MEMBER","Nice, thanks @rjzamora. Should we consider deprecating passing callables to `engine` in favor of the recent backend dispatching work? 

Also cc @phofl for visibility ","2023-02-14T21:31:12Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-02-14T21:33:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-02-14T22:31:51Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-02-14T22:33:52Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-02-14T23:32:52Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-05T16:36:36Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-04-05T17:16:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora for the changes here and @phofl  for reviewing. Will merge after CI finishes 

EDIT: Note that CI failures are unrelated to the changes here and have either already been resolved on `main` or are in the process of being resolved ","2023-04-05T18:17:45Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jacobtomlinson! ","2023-02-13T16:34:11Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl! ","2023-02-16T20:28:07Z",false,"APPROVED"
"charlesbluca","MEMBER","Thanks for taking on this task @cmarmo 😄 looks like this has been long asked for, so this should be a great addition to the docs.

Some initial comments/questions on the work so far:

- from first glance, it was a little difficult to understand how to interpret the table, and I feel like it could be reformatted to condense the column count and improve discoverability of Dask array functions; here's a mockup inspired by [CuPy](https://docs.cupy.dev/en/stable/reference/comparison.html) and [CuNumeric's](https://nv-legate.github.io/cunumeric/22.03/comparison/comparison.html) comparison tables:

| NumPy function   | supported or equivalent Dask function?           | notes                                   |
|------------------|----------------------|-----------------------------------------|
| `numpy.absolute()` | ✅                    |                                         |
| `numpy.all()`      | `dask.array.all()`     |                                         |
| `numpy.argsort()`  | `dask.array.argtopk()` | some notes about behavioral differences |

- would be interested in seeing how you generated this table; was this done manually or did you use a script? If the latter, something like that might be nice to commit to the codebase and even include as part of the docs generation process so that the table is updated automatically; if the former, then we should probably include a note on this page mentioning that the table is subject to become out-of-date. For reference, it looks like CuPy uses [this script](https://github.com/cupy/cupy/blob/43930f27d2ba76404b410a80663a43f8fcf5e192/docs/source/_comparison_generator.py) to generate its comparison table. ","2023-02-14T16:16:04Z",false,"COMMENTED"
"cmarmo","CONTRIBUTOR","","2023-02-23T23:44:34Z",false,"COMMENTED"
"charlesbluca","MEMBER","Thanks again @cmarmo 😄 this looks good to me, just some small comments / questions:","2023-04-04T16:37:19Z",false,"COMMENTED"
"cmarmo","CONTRIBUTOR","","2023-04-04T20:07:00Z",false,"COMMENTED"
"cmarmo","CONTRIBUTOR","","2023-04-04T20:09:13Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-26T19:24:15Z",false,"COMMENTED"
"charlesbluca","MEMBER","Thanks @cmarmo! This looks good to merge in from my perspective.

cc @jrbourbeau could you (or any other maintainers) take a look at this if you get a chance?","2023-04-26T19:26:09Z",false,"APPROVED"
"jacobtomlinson","MEMBER","This looks great thanks @cmarmo and thanks for the review @charlesbluca.","2023-07-25T15:57:34Z",false,"APPROVED"
"pentschev","MEMBER","","2023-02-10T20:18:10Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! 

> both python 3.8 and 3.10 on each PR

I'm curious why Python 3.10 instead of Python 3.11?","2023-02-13T17:18:43Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-02-13T18:38:55Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-02-13T19:31:52Z",false,"COMMENTED"
"jakirkham","MEMBER","","2023-02-13T20:19:08Z",false,"COMMENTED"
"jakirkham","MEMBER","","2023-02-13T20:19:14Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca ","2023-02-14T16:36:33Z",false,"APPROVED"
"fjetter","MEMBER","","2023-02-24T14:26:57Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-02-24T14:34:46Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-02-24T14:37:55Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-02-24T15:50:20Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","I see a change happened as I was reading (and your crystal ball is good!)","2023-02-24T15:55:09Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-02-24T16:20:28Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-02-24T16:21:42Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-02-24T17:23:05Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet! This looks good to me. For reference, I confirmed the changes here fix `dask/dataframe/tests/test_groupby.py::test_numeric_column_names` when running with the nightly version of `pandas`","2023-02-10T18:26:59Z",false,"APPROVED"
"milesgranger","CONTRIBUTOR","Just one nit/question, but I don't think my approval truly means anything yet without more permissions. :) ","2023-04-05T09:01:06Z",false,"APPROVED"
"hendrikmakait","MEMBER","Thanks, @j-bennet. I have one minor nit; feel free to ignore it.","2023-04-05T15:55:28Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2023-04-05T16:03:59Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-05T17:42:08Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-05T17:44:22Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-05T17:50:47Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2023-04-05T18:56:11Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-05T22:40:55Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-05T22:43:02Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-04-06T14:34:45Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-04-06T14:39:23Z",false,"COMMENTED"
"milesgranger","CONTRIBUTOR","","2023-04-06T15:33:47Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","I really like the way this has been laid out. It talks through a lot of important factors that advanced users will want to think about. Especially when rolling Dask out within orgs. As you say much of this is out of scope for core Dask.

I like how it starts with the challenges and then neatly directs users off to other projects and companies that solve those problems. This seems like a really great way to direct folks away to other projects and commercial offerings.","2023-02-08T19:34:47Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2023-02-09T01:55:32Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","Thanks for writing this up @gjoseph92 ","2023-02-13T12:13:31Z",false,"APPROVED"
"jrbourbeau","MEMBER","> The problem is our test data being so small. We chunk it into even smaller separate Series. If a Series is only 1 or 2 records long, it doesn't infer index frequency

Does the original `_meta` (before we call `to_timestamp`) have the correct `freq`? If so, we might be able to construct the appropriate output `_meta` for `to_timestamp` and then manually set the `freq` attribute ","2023-02-11T03:24:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet. Let's go ahead and include this change as is. I've opened https://github.com/dask/dask/issues/9954 to not loose track of the possibility of keeping `freq` when operating on small partitions ","2023-02-14T01:54:39Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for your work here @j-bennet. It looks like there are other similar failures (e.g. `dask/dataframe/tests/test_multi.py::test_merge_by_multiple_columns`, `dask/dataframe/tests/test_shuffle.py::test_set_index_overlap_2`, etc) that are still happening. Would you like to handle those here, or in a follow-up? ","2023-02-13T19:48:02Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet. Overall this looks reasonable. Are these changes more of a workaround and we should follow-up to make the index match, or is this a good long-term solution? ","2023-02-14T19:19:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet! ","2023-02-10T18:32:56Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-10T22:22:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-10T22:51:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet -- this is in ","2023-02-13T19:07:36Z",false,"APPROVED"
"jrbourbeau","MEMBER","Okay, I've gone ahead and removed the temporary test changes. This PR now just adds a new `dataframe.convert_string` config option (off by default) that you can set to `True` to automatically cast string data to use `pyarrow` strings. 

This should be ready for review whenever folks get a chance. 

cc @rjzamora @j-bennet @charlesbluca @phofl  for visibility ","2023-02-15T20:59:52Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","Very nice.","2023-02-15T21:26:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-15T22:25:21Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-16T01:02:30Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","👍 ","2023-02-16T01:03:39Z",false,"APPROVED"
"phofl","COLLABORATOR","Couple of comments from a pandas point of view. Feel free to ignore them if I am missing something from the Dask side.
","2023-02-16T11:03:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-16T15:52:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-16T15:53:55Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-02-16T15:57:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-16T15:58:39Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-02-16T16:00:23Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-02-16T18:06:51Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-02-16T18:24:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-16T18:28:39Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-02-16T18:43:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-16T18:45:48Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-02-16T18:50:19Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-02-16T19:10:05Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-02-16T19:13:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-16T20:13:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-16T20:38:46Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the feedback @j-bennet @phofl @rjzamora. I'll plan to merge tomorrow if there are no further comments ","2023-02-16T23:01:50Z",false,"COMMENTED"
"phofl","COLLABORATOR","small comment","2023-02-16T23:11:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-17T16:22:13Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","👍 🚀 ","2023-02-09T22:01:32Z",false,"APPROVED"
"epizut","CONTRIBUTOR","","2023-06-30T15:49:42Z",false,"COMMENTED"
"epizut","CONTRIBUTOR","","2023-06-30T15:51:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-06-30T15:55:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca!

Just checking, it looks like there are some test change but no updates to the groupby logic (yet). If so, that's totally fine, just wanted to make sure I wasn't missing anything ","2023-02-06T19:25:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet! Just one minor comment, but overall this looks good ","2023-02-06T17:24:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","This looks great, thanks @j-bennet","2023-02-06T22:31:31Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet, this looks great. Will merge once once CI finishes  ","2023-02-03T20:57:13Z",false,"APPROVED"
"jrbourbeau","MEMBER","Turns out there's an issue with the `is_numeric` -> `is_numeric_dtype` replacement that's being suggested (xref https://github.com/pandas-dev/pandas/issues/51152). The deprecation is going to be updated to use `is_any_real_numeric_dtype` instead of `is_any_real_numeric_dtype` (xref https://github.com/pandas-dev/pandas/pull/51160). Just pushed a commit up which adds a `is_any_real_numeric_dtype` compatibility utility. ","2023-02-06T16:54:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell","2023-02-03T18:27:53Z",false,"APPROVED"
"quasiben","MEMBER","","2023-02-02T14:47:10Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-02-02T15:03:19Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2023-02-03T00:02:08Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-02-03T15:01:33Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks for writing this up Sarah!  Some of this seems good to me, some not.  I've put some remarks here but mostly I think we leave this and wait and see what other non Coiled affiliated people think. ","2023-02-03T04:53:42Z",false,"CHANGES_REQUESTED"
"mrocklin","MEMBER","","2023-02-03T13:13:09Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","> page is intended as a hub for other relevant Dask projects (i.e. Dask Cloud Provider, Dask Kubernetes, and Dask Gateway) to link back to. This could be a sentence at the top of the docs index for these projects. Something like ""Dask Gateway is one of many ways to deploy Dask; for an overview of other options see the Dask documentation

Such a page sounds a lot like https://docs.dask.org/en/stable/deploying.html to me. That already looks like a ""hub"" page that lists and links to the many options for deploying Dask.

It's a dense list right now, and we could probably do a lot to make it easier to navigate:
- cut down and summarize the current prose into ~1 paragraph
- organize the list of links by where you're deploying dask to (single machine, HPC, k8s, cloud, ad-hoc cluster
- perhaps also organize the list (via tabs at the top?) by who you're deploying dask for: ""just me"" vs ""my team""? For example, dask-gateway likely isn't relevant to a single user; dask-cloudprovider is probably not a good solution for a team. Some options, including the commercial solutions, would be in both.

So basically, I like the idea of having a good ""hub"" page that makes it easy for users to navigate all the different options for deploying Dask. I just think the title of that page is probably ""Deploy Dask Clusters"", not ""Dask Deployment Best Practices"". Since ""Deploy Dask Clusters"" already exists, maybe we should be improving that page, not making a new one?","2023-02-04T19:43:45Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2023-02-08T17:44:36Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2023-02-08T21:58:17Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2023-02-16T02:54:57Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2023-02-16T02:55:07Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","This looks good. I think there's more work we can do to the deployment page (I still find the text a bit long, and having the individual vs team split would be nice), but I think we should tackle that incrementally. This is already an improvement to the organization!","2023-02-16T22:52:18Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2023-02-17T01:40:54Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2023-02-17T01:42:11Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2023-02-17T01:43:23Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2023-02-17T01:43:42Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2023-02-17T01:45:13Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2023-02-17T01:45:34Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2023-02-23T09:28:40Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","This looks great, thanks for the effort here.","2023-02-23T09:29:10Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","🎉 ","2023-02-01T22:34:59Z",false,"APPROVED"
"charlesbluca","MEMBER","","2023-02-01T22:36:17Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","👍 ","2023-02-01T22:50:01Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","Very nice.","2023-02-01T22:50:51Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @mroeschke! Happy to move away from `pandas.core`

> pd.core is also used for pulling docstrings like

Yeah, that's a good point. Grepping through the codebase it looks like we use

- `pd.core.groupby.GroupBy`
- `pd.core.groupby.DataFrameGroupBy.aggregate`
- `pd.core.groupby.DataFrameGroupBy.agg`
- `pd.core.groupby.DataFrameGroupBy`
- `pd.core.groupby.SeriesGroupBy`
- `pd.core.groupby.SeriesGroupBy.aggregate`
- `pd.core.groupby.SeriesGroupBy.agg`
- `pd.core.indexing.IndexingError`

So mostly groupby-related things and `IndexingError`. I'm not sure about the groupby objects though

For `IndexingError` it looks like we can use `pd.errors.IndexingError` instead 

```python
In [1]: import pandas as pd

In [2]: pd.errors.IndexingError
Out[2]: pandas.errors.IndexingError

In [3]: pd.core.indexing.IndexingError
Out[3]: pandas.errors.IndexingError
```
","2023-02-01T16:31:18Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Sorry I didn't check beforehand, it looks like `pd.errors.IndexingError` was only added in `pandas=1.5` (our current minimum supported version is `1.0`). I'd recommend something like the following 


```diff
diff --git a/dask/dataframe/_compat.py b/dask/dataframe/_compat.py
index 9791345ad..a0434065e 100644
--- a/dask/dataframe/_compat.py
+++ b/dask/dataframe/_compat.py
@@ -106,3 +106,9 @@ def dtype_eq(a: type, b: type) -> bool:
     ):
         return False
     return a == b
+
+
+if PANDAS_GT_150:
+    IndexingError = pd.errors.IndexingError
+else:
+    IndexingError = pd.core.indexing.IndexingError
diff --git a/dask/dataframe/indexing.py b/dask/dataframe/indexing.py
index 9a88c7b36..656a9cf8d 100644
--- a/dask/dataframe/indexing.py
+++ b/dask/dataframe/indexing.py
@@ -9,7 +9,7 @@ from pandas.api.types import is_bool_dtype
 from dask.array.core import Array
 from dask.base import tokenize
 from dask.dataframe import methods
-from dask.dataframe._compat import PANDAS_GT_130
+from dask.dataframe._compat import PANDAS_GT_130, IndexingError
 from dask.dataframe.core import Series, new_dd_object
 from dask.dataframe.utils import is_index_like, is_series_like, meta_nonempty
 from dask.highlevelgraph import HighLevelGraph
@@ -93,7 +93,7 @@ class _LocIndexer(_IndexerBase):
             if len(key) > self.obj.ndim:
                 # raise from pandas
                 msg = ""Too many indexers""
-                raise pd.errors.IndexingError(msg)
+                raise IndexingError(msg)

             iindexer = key[0]
             cindexer = key[1]
diff --git a/dask/dataframe/tests/test_indexing.py b/dask/dataframe/tests/test_indexing.py
index 514b94041..bef985daf 100644
--- a/dask/dataframe/tests/test_indexing.py
+++ b/dask/dataframe/tests/test_indexing.py
@@ -5,7 +5,7 @@ import pytest
 import dask
 import dask.dataframe as dd
 from dask.base import tokenize
-from dask.dataframe._compat import PANDAS_GT_110, PANDAS_GT_120, tm
+from dask.dataframe._compat import PANDAS_GT_110, PANDAS_GT_120, IndexingError, tm
 from dask.dataframe.indexing import _coerce_loc_index
 from dask.dataframe.utils import assert_eq, make_meta

@@ -188,17 +188,17 @@ def test_loc2d():
     assert_eq(d.loc[3:, [""a""]], full.loc[3:, [""a""]])

     # 3d
-    with pytest.raises(pd.errors.indexing.IndexingError):
+    with pytest.raises(IndexingError):
         d.loc[3, 3, 3]

     # Series should raise
-    with pytest.raises(pd.errors.indexing.IndexingError):
+    with pytest.raises(IndexingError):
         d.a.loc[3, 3]

-    with pytest.raises(pd.errors.indexing.IndexingError):
+    with pytest.raises(IndexingError):
         d.a.loc[3:, 3]

-    with pytest.raises(pd.errors.indexing.IndexingError):
+    with pytest.raises(IndexingError):
         d.a.loc[d.a % 2 == 0, 3]
```
","2023-02-01T19:51:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @mroeschke! This is in 

Also, I noticed this is your first code contribution to this repository. Welcome!","2023-02-02T03:42:41Z",false,"APPROVED"
"ncclementi","MEMBER","Thanks for adding this @gjoseph92, it LGTM!  ","2023-01-31T20:39:22Z",false,"APPROVED"
"charlesbluca","MEMBER","","2023-01-31T19:10:35Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-02-01T19:34:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-01T20:41:05Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-02-01T21:05:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! ","2023-02-01T22:03:28Z",false,"APPROVED"
"gjoseph92","COLLABORATOR","","2023-02-01T20:17:55Z",false,"APPROVED"
"ncclementi","MEMBER","Thanks @guillaumeeb, adding this context is helpful. I left some comments/questions. 

It might be helpful having someone else to take a look at this too just in case, maybe @jacobtomlinson ","2023-01-31T19:03:42Z",false,"COMMENTED"
"guillaumeeb","MEMBER","","2023-02-01T06:39:54Z",false,"COMMENTED"
"guillaumeeb","MEMBER","","2023-02-01T06:42:00Z",false,"COMMENTED"
"guillaumeeb","MEMBER","","2023-02-01T06:45:44Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","This looks reasonable to me. I agree with @ncclementi that more links are better. But if there isn't anything obvious to link to then I suggest we go ahead and merge.","2023-02-13T14:20:31Z",false,"APPROVED"
"ncclementi","MEMBER","LGTM thanks @guillaumeeb, this goes in 🎉 ","2023-02-15T23:57:05Z",false,"APPROVED"
"jrbourbeau","MEMBER","It looks like https://github.com/dask/dask/pull/1171 is where this was added (IIUC) though it's not clear to me why `tuple` was added. It looks like the test added in that PR is still around. I'm personally happy with the changes here if tests pass ","2023-02-01T20:59:15Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-02-01T21:11:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Apologies for the delayed response here @charlesbluca. I left a comment about making it so users don't see the `np.VisibleDeprecationWarning`, but otherwise this LGTM ","2023-03-14T19:09:37Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-03-15T17:04:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","> users will still see this warning at compute time once the underlying pandas APIs are called, so we'll still need to filter warnings on the assert_eq call here

Would swapping out those specific `operator.getitem` calls with something like:

```python
def getitem_ignore_numpy_deprecation(*args, **kwargs):
    with warnings.catch_warnings():
        # emitted in cases like df[[('a', 'b'), 'c']]
        if not PANDAS_GT_150:
            warnings.simplefilter(
                ""ignore"", category=np.VisibleDeprecationWarning
            )
        
        return operator.getitem(*args, **kwargs)
```

fix that? It'd be especially good to a warning being emitted in each task ","2023-03-15T19:02:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-01-30T18:01:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","I'll plan to merge this as soon as CI finishes in order to unblock CI (PRs, `main`, etc. are all failing right now). Happy to address any review comments in follow-up PRs ","2023-01-30T18:38:06Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @wence-! 

Note the test failures are unrelated and being resolved in https://github.com/dask/dask/pull/9897 ","2023-01-30T18:12:03Z",false,"APPROVED"
"phofl","COLLABORATOR","","2023-01-29T23:20:21Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @phofl! Happy to merge this as is or we can update the pandas contributing list as you mentioned ","2023-02-03T16:37:58Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-02-03T16:43:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-03T18:29:28Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phofl! 

Also, I noticed this is your first code contribution to this repository. Welcome!","2023-01-28T04:19:12Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet! This will be nice to have -- looking forward to seeing it merged ","2023-01-30T19:40:00Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-01-31T02:09:32Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-01-31T02:20:34Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-01-31T18:07:48Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-01-31T18:26:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-01-31T19:04:58Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-02T21:29:10Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-02T21:38:06Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-02T21:39:10Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-02T21:40:45Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-02T21:45:14Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-02T22:01:33Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-02T22:10:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Turns out there were a couple of bugs in older versions of `pandas` that weren't straightforward to workaround. I pushed https://github.com/dask/dask/pull/9889/commits/a9e27d921b2b8941327b0a9a20f5a18933033646 which just skips those specific configurations for now. I'll also push up a PR that bumps our minimum `pandas` version (it's been a while since we've done that). ","2023-02-06T17:35:00Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-09T17:36:25Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-02-09T17:40:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-09T18:28:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet! ","2023-02-10T22:26:59Z",false,"APPROVED"
"jsignell","MEMBER","Thanks for opening this PR! I think you should only put the information in one place though to avoid duplication.

![image](https://user-images.githubusercontent.com/4806877/215114040-5df86ed5-d044-469d-9ec7-c51785f7b0be.png)

https://dask--9887.org.readthedocs.build/en/9887/generated/dask.dataframe.DataFrame.drop_duplicates.html","2023-01-27T14:49:30Z",false,"COMMENTED"
"jsignell","MEMBER","","2023-01-27T14:38:56Z",false,"COMMENTED"
"jayeshmanani","CONTRIBUTOR","","2023-01-27T16:09:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora 

@jorisvandenbossche does this look like something that you'd like to see mirrored on the `pyarrow` side? (xref https://github.com/dask/dask/issues/9845#issuecomment-1416114411)","2023-03-06T22:53:55Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-07T02:09:16Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-07T02:36:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-07T16:26:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-07T17:09:46Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-03-07T17:28:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-03-07T19:16:42Z",false,"COMMENTED"
"rjzamora","MEMBER","I think this utility makes sense @charlesbluca - Thanks!

My only preference would be to replace the term `serial` with `meta` throughout.  I think this would make it clearer that we are extracting the module name for collection's current ""meta"" property.  This naming would also be more consistent with the existing `meta_lib_from_array` dispatch.

**Side note**: I agree with your decision to use a utility instead of a dispatch function (like `meta_lib_from_array`). The same logic already works for cudf, pandas, cupy and numpy. Therefore, there is really no reason to over-engineer a dispatch-based solution for this.","2023-02-13T22:17:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","+1 this seems reasonable to me. I can think of other places where this utility would be useful. Also agree with @rjzamora about the name change to something like `get_meta_library` ","2023-02-16T19:23:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! ","2023-02-17T17:16:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! Apologies for the delayed response. 

Overall this looks good. I have one minor question about adding the `rapidsai-nightly` channel, but otherwise this PR could be merged as is. 

A couple of non-blocking comments:

1. Have you confirmed the changes here close https://github.com/dask/dask/issues/9880? It might be good to add a test
2. `test_get_meta_library` covers the usual, `numpy` / `pandas` backed cases. It might be worth adding a second test that `cupy` / `cudf` backed collections. ","2023-03-13T18:46:05Z",false,"COMMENTED"
"rjzamora","MEMBER","Agree with @jrbourbeau that we should test that this resolves the motivating issue. Otherwise, this looks good. Only had a nit-pick suggestion.","2023-03-13T19:23:13Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-03-13T19:25:16Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-03-13T19:26:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca. Overall this looks good. Just had a couple of final questions about the `to_datetime`-specific changes ","2023-04-21T14:58:22Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-21T15:30:56Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-24T15:41:00Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-04-25T18:07:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the ping @j-bennet. I agree with @charlesbluca, this looks good to go 👍 ","2023-05-23T20:25:37Z",false,"APPROVED"
"charlesbluca","MEMBER","","2023-01-26T18:06:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","> I gave this approach a shot in https://github.com/dask/dask/pull/8263 but ended up closing because I wasn't sure how we felt about the suboptimal performance we get in some cases (particularly when by[0] is a repetitive column)

Ah, apologies for the lack of engagement there. Given the user interest (e.g. https://github.com/dask/dask/issues/958 has 6 👍 on the initial comment and anecdotally I've run into a few people who have asked for this offline), I think it'd be better to provide something that works for multi-column sorting, even if inefficient in some cases, than not provide support at all. ","2023-01-26T21:22:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-01-26T21:23:36Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-01-27T18:19:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-01-26T17:15:57Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-01-25T20:38:52Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-02-03T13:06:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Nice! I hadn't realized there were nightly wheels, thanks for pointing that out @jorisvandenbossche. It looks like the nightly version of `pyarrow` is getting installed correctly (currently `pyarrow=11.0.0.dev517` is installed).

Could you move these lines

https://github.com/dask/dask/blob/2a2b9d3cb503c052fd65e5693575498df1f9cd23/continuous_integration/scripts/install.sh#L19-L28

where we were installing from the nightly conda channel? 

Also, we have a test for packages installed in the `upstream` build. We should be able to uncomment `pyarrow` here now 

https://github.com/dask/dask/blob/2a2b9d3cb503c052fd65e5693575498df1f9cd23/dask/tests/test_ci.py#L29

","2023-01-25T15:59:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jorisvandenbossche! ","2023-02-10T21:16:13Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet ","2023-01-25T19:33:36Z",false,"APPROVED"
"ayushdg","CONTRIBUTOR","Thanks for the fix! I've confirmed this fixes the repro in the issue as well as my workflow usecase.","2023-01-26T12:48:29Z",false,"APPROVED"
"fjetter","MEMBER","","2023-01-24T13:36:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @fjetter -- switching back to the previous order here seems reasonable. 

Left one non-blocking comment about the test added here. Happy to merge this as is or possibly simplify ","2023-01-26T16:28:04Z",false,"APPROVED"
"fjetter","MEMBER","","2023-01-26T17:09:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet! Apologies for the delayed reply here. The `dask/dataframe/tests/test_dataframe.py::test_describe_without_datetime_is_numeric` `mindeps` failure looks legitimate. ","2023-02-06T18:04:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet! Will merge once CI finishes ","2023-02-09T21:59:57Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","Looks good! Left some minor comments.","2023-02-01T22:59:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-02T21:35:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-02T21:35:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-02-02T22:14:47Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","This looks good.","2023-02-06T20:17:01Z",false,"APPROVED"
"charlesbluca","MEMBER","","2023-01-23T16:29:03Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @cmarmo! This is in 

Just out of curiosity, did you happen to randomly stumble across this, or are you interested in writing your own collection backend? 

Also, I noticed this is your first code contribution to this repository. Welcome!","2023-01-23T16:19:45Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @cmarmo!","2023-01-23T16:31:11Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet! Overall this looks good to me. Just one small suggestion.

Also, I see this is marked as a draft PR. Are there other things you'd still like to include here? ","2023-01-23T22:23:07Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-01-23T23:42:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-01-24T16:28:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet ","2023-01-24T16:29:00Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-01-24T17:26:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet! 

Is this part of the larger change in the default of `numeric_only` (xref https://github.com/dask/dask/issues/9471)? If so, while I agree this change gets this test passing, I think we'll also want to add `numeric_only=` support to `quantile`. Said another way, with `pandas=2.0`, dask's `quantile` and pandas' `quantile` don't have the same behavior. ","2023-01-19T22:16:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","> quantile in Dask already supports numeric_only

Ah, great! 

> If we want to mimic Pandas behavior, and have a different default depending on Pandas version, then yes, this needs more changes

👍 ","2023-01-20T18:19:00Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-01-20T21:23:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet! This should be good to go -- will merge after CI finishes ","2023-02-09T23:12:16Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","👍 ","2023-01-19T18:16:03Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for reviewing @j-bennet! Going to merge this in before waiting for CI as this won't impact any of the jobs run on PRs ","2023-01-19T18:18:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for moving forward with this @rjzamora. Question: based on this comment in the original issue

> The dask.dataframe.merge API should use a broadcast-based merge when broadcast=True. The only exception should be when a broadcast-based algorithm is prohibited for the specified how and/or shuffle arguments

could we just raise an error if the user specifies values for `how` / `shuffle` that are inconsistent with `broadcast=True`? That seems like a better UX than silently not using broadcast ","2023-01-25T15:53:39Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-01-17T18:53:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-01-17T18:59:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-01-17T19:37:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-01-18T19:04:30Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-01-18T19:12:59Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-01-18T19:13:14Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca. Will merge after CI finishes ","2023-01-17T17:27:25Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @fjetter! ","2023-01-17T16:59:24Z",false,"APPROVED"
"jrbourbeau","MEMBER","@rjzamora can you take a look? 

EDIT: Whoops, looks like Matt beat me to it ","2023-01-17T16:53:10Z",false,"COMMENTED"
"rjzamora","MEMBER","This change seems like a net positive to me. Thanks @fjetter !

Although I suppose it is possible that downstream users/libraries are using `kwargs` with `make_blockwise_graph`, it seems pretty unlikely to me. I'm assuming that this function is only really used within `dask.blockwise` itself, where the convention is to embed key-word arguments into the callable function (usually a `SubgraphCallable`).

I suppose we *could* add a clear error message to inform the user that `make_blockwise_graph` no longer accepts arbitrary key-word arguments. However, I really doubt that such an error is necessary, so I'd be comfortable either way.","2023-01-17T18:44:46Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @fjetter and reviewing @rjzamora ","2023-01-17T20:11:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @martindurant! I'm curious what the motivation for this change is? Maybe `import` speedup? ","2023-01-14T19:21:35Z",false,"COMMENTED"
"martindurant","MEMBER","","2023-01-15T01:52:30Z",false,"COMMENTED"
"martindurant","MEMBER","","2023-01-15T02:04:09Z",false,"COMMENTED"
"hendrikmakait","MEMBER","LGTM; thanks for taking care of this @jrbourbeau!","2023-01-13T10:07:14Z",false,"APPROVED"
"fjetter","MEMBER","","2023-01-12T14:12:17Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-01-12T14:13:55Z",false,"COMMENTED"
"graingert","MEMBER","","2023-01-12T14:32:55Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-01-12T14:34:46Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2023-01-12T14:41:34Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-01-13T11:42:29Z",false,"APPROVED"
"fjetter","MEMBER","@jrbourbeau @rjzamora I'd like to get this merged asap. I can revert to the previous behavior for the occurences where this changes something but I would actually prefer having a consistent pick of these algorithms unless there are concerns about.

FWIW there is for instance https://github.com/dask/distributed/issues/5554 that provides an example where disk shuffle is significantly slower than tasks based shuffle. However, I believe this is caused by the data distribution and not due to ""where the shuffle is used"".
Overall I'm wondering why we pick the one algo over the other in some circumstance.

FWIW this change would make it very simple to switch to P2P once that is ready.","2023-01-17T14:58:33Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-01-17T16:00:25Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-01-17T17:51:38Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-01-20T13:37:04Z",false,"COMMENTED"
"rjzamora","MEMBER","I'd also like to use `get_default_shuffle_algorithm` for the shuffle-based `groupby`, but agree with the decision to hold off on moving from ""tasks"" for now. Thanks for being flexible.","2023-01-20T17:33:16Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @SultanOrazbayev. How does this differ from the example directly above? They appear to be the same to me

https://github.com/dask/dask/blob/66f0cde91a5cde9dee31ec227a5164d5fe489098/dask/dataframe/io/sql.py#L530-L538","2023-01-11T16:36:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Going to merge this in as it seems uncontroversial and will get our `upstream` report working again. Happy to handle any feedback in a follow-up PR ","2023-01-11T18:45:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-01-26T21:29:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-01-27T17:23:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-01-27T17:48:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! Just a couple of minor comments -- overall this looks like a nice improvement ","2023-01-09T23:01:34Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-01-10T01:46:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! This is in ","2023-01-10T02:55:49Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2023-01-09T23:03:25Z",false,"APPROVED"
"graingert","MEMBER","","2023-01-09T22:15:03Z",false,"APPROVED"
"graingert","MEMBER","","2023-01-11T10:28:43Z",false,"COMMENTED"
"graingert","MEMBER","","2023-01-11T10:28:59Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","The skipping logic is hard to read. At this point, I would probably have separate tests for different versions of pandas, pyarrow and fastparquet, and used `skipif` instead, but on the other hand, you're avoiding duplication here, so that's a tradeoff.","2023-01-19T17:14:02Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for reviewing. Yeah, I agree the skipping / xfail logic for this test is getting pretty gnarly. Might be worth revisiting in the future ","2023-01-19T18:27:06Z",false,"COMMENTED"
"graingert","MEMBER","","2023-01-05T17:19:11Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-01-05T17:35:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","We're seeing 

```
09:15:35 ERROR: while parsing the following warning configuration:

09:15:35 

09:15:35   ignore:.*:dask.tests.warning_aliases.RemovedIn20Warning

09:15:35 

09:15:35 This error occurred:

09:15:35 

09:15:35 Traceback (most recent call last):

09:15:35   File ""/opt/conda/envs/dask/lib/python3.9/site-packages/_pytest/config/__init__.py"", line 1690, in parse_warning_filter

09:15:35     category: Type[Warning] = _resolve_warning_category(category_)

09:15:35   File ""/opt/conda/envs/dask/lib/python3.9/site-packages/_pytest/config/__init__.py"", line 1728, in _resolve_warning_category

09:15:35     m = __import__(module, None, None, [klass])

09:15:35 ModuleNotFoundError: No module named 'dask.tests.warning_aliases'
```

failing in the gpuCI here. @charlesbluca @graingert any thoughts on why that may be? ","2023-01-09T21:42:23Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-01-05T16:38:43Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-01-05T16:40:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @fjetter ","2023-01-10T16:16:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-01-10T16:17:33Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-01-10T18:17:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @fjetter ","2023-01-12T19:16:01Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @graingert. Zooming back a bit, why is this change needed? From skimming the PEP, it looks like it's for improved Windows support. Is that the case? Are there other reasons? ","2023-01-10T17:00:32Z",false,"COMMENTED"
"graingert","MEMBER","","2023-01-11T10:33:22Z",false,"COMMENTED"
"graingert","MEMBER","","2023-01-11T10:35:15Z",false,"COMMENTED"
"fjetter","MEMBER","","2023-01-05T13:02:09Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @SultanOrazbayev! This is in ","2023-01-10T17:07:10Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-01-17T22:52:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-01-17T23:01:54Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","Nice.","2023-01-17T23:50:52Z",false,"APPROVED"
"j-bennet","CONTRIBUTOR","","2023-01-17T20:53:54Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-01-17T21:00:14Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-01-20T20:22:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Just checking in, @j-bennet any additional comments? Or is this good to go? ","2023-01-23T19:54:49Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","Yes, looks good to me. I think it's ready to merge.","2023-01-24T17:28:27Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @hendrikmakait. This LGTM. If you've got time to make this point directly to `SubprocessCluster` in the `distributed` API docs, that would be a nice improvement ","2022-12-23T22:18:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-12-22T22:08:48Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-01-17T19:38:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-01-17T20:24:54Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","👍 ","2023-01-17T23:44:06Z",false,"APPROVED"
"mrocklin","MEMBER","","2022-12-21T16:42:31Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-12-21T23:28:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","One small suggestion, otherwise this LGTM ","2022-12-22T18:20:15Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-01-18T22:40:40Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-01-19T15:07:47Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-12-21T11:22:33Z",false,"APPROVED"
"mrocklin","MEMBER","","2022-12-20T20:05:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-12-20T20:14:26Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-12-20T20:16:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Okay, looks like this gets our Python 3.11 build passing. I'll plan to merge this after CI finishes in order to get CI passing ASAP. Happy to handle any review comments in a follow-up PR ","2022-12-20T20:22:38Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-12-19T17:03:11Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-12-19T17:03:57Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-12-19T17:04:46Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-12-20T11:55:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-12-20T14:30:12Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-12-20T15:48:11Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-12-20T16:28:41Z",false,"COMMENTED"
"mrocklin","MEMBER","What's here seems well thought-out to me.  Thank you for the work @crusaderky 

cc also @ntabris who was asking about this","2022-12-20T18:16:11Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2022-12-21T11:37:59Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-12-21T11:42:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @QuLogic! ","2022-12-19T19:32:19Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @QuLogic! This seems reasonable to me. I'm curious what issue you ran into due to this file being executable. My guess is something packaging-related, but I'm not sure what it could be ","2022-12-19T18:46:21Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @aywandji! Would you mind adding a unit test to make sure things are working as expected? Also, it looks like these changes are only being made the the `pyarrow` engine -- do you know if the same issue occurs with the `fastparquet` engine? 

Also cc @rjzamora for visibility ","2022-12-17T01:55:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @aywandji! Just a couple minor comments, overall this looks good ","2022-12-20T20:45:23Z",false,"COMMENTED"
"aywandji","CONTRIBUTOR","","2023-01-08T22:39:26Z",false,"COMMENTED"
"aywandji","CONTRIBUTOR","","2023-01-08T22:42:02Z",false,"COMMENTED"
"rjzamora","MEMBER","Looks reasonable to me. Thanks @aywandji !","2023-01-09T14:58:17Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @aywandji -- this is in 

Also, I noticed this is your first code contribution to this repository. Welcome!
","2023-01-17T20:20:21Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-12-16T20:49:57Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-12-16T21:01:52Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-01-04T21:17:58Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-01-09T20:20:10Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-01-10T18:02:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! ","2023-01-10T21:27:18Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-01-11T16:38:29Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-01-11T17:11:29Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-01-11T17:42:34Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-01-11T18:03:17Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-01-11T18:07:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-01-11T18:49:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","The `dask/dataframe/tests/test_shuffle.py::test_sort_values_nullable_column` failure looks to be coming from `data` containing only `pd.NA` here 

https://github.com/dask/dask/blob/6d639d2cfc9acc365ab90dea453c87c38e7c4edb/dask/dataframe/partitionquantiles.py#L428

This seems like an upstream issue in `pandas` (just opened up https://github.com/pandas-dev/pandas/issues/50681). In the meantime, we can probably just work around the warning here ","2023-01-11T21:59:28Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-01-13T18:56:02Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-01-13T19:28:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-01-13T19:59:39Z",false,"COMMENTED"
"pentschev","MEMBER","","2023-01-13T20:10:01Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-01-13T20:31:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2023-01-13T20:36:25Z",false,"COMMENTED"
"ncclementi","MEMBER","@jayeshmanani Thank you for this PR and apologies it took a while to get to it. 

The GIF looks great, I left a couple of comments to review.

I think we can work on the descriptions, having two columns that say almost the same is a bit repetitive, and I think is causing some indentations issues. 

I also pinged the person that worked on this change to confirm what the colors mean, because I think there is a misunderstanding regarding the percentages. I think when you say 50% is actually 70%.","2023-01-09T19:56:58Z",false,"COMMENTED"
"jayeshmanani","CONTRIBUTOR","","2023-01-16T15:03:28Z",false,"COMMENTED"
"jayeshmanani","CONTRIBUTOR","","2023-01-16T15:39:29Z",false,"COMMENTED"
"jayeshmanani","CONTRIBUTOR","","2023-01-16T15:40:45Z",false,"COMMENTED"
"jayeshmanani","CONTRIBUTOR","","2023-01-16T15:42:55Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2023-01-19T17:26:16Z",false,"CHANGES_REQUESTED"
"crusaderky","COLLABORATOR","","2023-01-19T17:27:44Z",false,"COMMENTED"
"jayeshmanani","CONTRIBUTOR","","2023-01-19T19:21:18Z",false,"COMMENTED"
"ncclementi","MEMBER","","2023-01-19T20:19:34Z",false,"APPROVED"
"hendrikmakait","MEMBER","LGTM, thanks @crusaderky!","2022-12-19T17:03:34Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-12-13T19:51:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora. I haven't been able to look at the changes here thoroughly. Overall the user-facing API is sensible.

I can weigh in on aspects of the implementation if there are concerns you have. But you've been leading/tending to the recent backend-related changes, so if you're okay continuing to support the new functionality here then I think we should move forward whenever you think this is good to merge. ","2023-01-26T21:12:54Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-01-27T04:40:20Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-01-27T04:42:41Z",false,"COMMENTED"
"pentschev","MEMBER","","2023-01-27T12:41:25Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-01-27T14:58:59Z",false,"COMMENTED"
"pentschev","MEMBER","","2023-01-27T19:04:58Z",false,"COMMENTED"
"phofl","COLLABORATOR","small comment, otherwise lgtm","2023-04-04T16:22:44Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-04T16:28:54Z",false,"COMMENTED"
"phofl","COLLABORATOR","","2023-04-04T16:33:30Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2023-04-04T17:02:38Z",false,"COMMENTED"
"phofl","COLLABORATOR","I'll check whether we can suppress the warning in pandas, but no blocker for this pr","2023-04-11T12:15:22Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet ","2023-05-02T04:10:38Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-12-13T16:37:31Z",false,"APPROVED"
"jrbourbeau","MEMBER","Will plan to merge in a bit if no further comment ","2022-12-20T16:59:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Will plan to merge in a bit if no further comment ","2022-12-20T16:59:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-12-12T18:25:39Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-12-13T10:21:39Z",false,"CHANGES_REQUESTED"
"jrbourbeau","MEMBER","","2022-12-13T20:26:00Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-12-13T23:27:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-12-20T22:59:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Will plan to merge this in a bit if there are no further comments","2022-12-20T23:00:08Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","Thanks for the fix! I checked out the CI build of the docs and this fixes the issue. The Windows 3.10 failure is unrelated.","2022-12-12T14:45:19Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @chaokunyang! This is in ","2022-12-12T17:01:42Z",false,"APPROVED"
"phobson","CONTRIBUTOR","","2022-12-12T15:08:26Z",false,"APPROVED"
"mroeschke","CONTRIBUTOR","","2022-12-12T19:35:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-12-12T20:34:18Z",false,"COMMENTED"
"mroeschke","CONTRIBUTOR","","2022-12-13T02:03:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Okay, after testing the implementation here against the notebook Ian put together (https://gist.github.com/ian-r-rose/41d5199412154faf1eff5a2df2e8b94e) I uncovered some issues that have been resolved in the latest commit. Leaving a couple of comments to highlight what was wrong and what changed. ","2022-12-13T22:00:29Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-12-13T22:04:29Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Planning to merge tomorrow if not further comments","2022-12-15T02:24:40Z",false,"COMMENTED"
"mroeschke","CONTRIBUTOR","","2022-12-15T02:47:45Z",false,"COMMENTED"
"mroeschke","CONTRIBUTOR","","2022-12-15T02:48:47Z",false,"APPROVED"
"mroeschke","CONTRIBUTOR","","2022-12-16T00:23:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the nudge @djhoese, apologies for the delayed response. The changes here generally seem good to me. Just one minor question","2023-01-13T21:12:44Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2023-01-13T21:22:12Z",false,"COMMENTED"
"quasiben","MEMBER","","2023-02-22T16:30:28Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2023-02-22T16:55:28Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2023-02-22T17:00:36Z",false,"COMMENTED"
"ncclementi","MEMBER","LGTM, the other failures in upstream seem unrelated to this change","2022-12-09T15:41:42Z",false,"APPROVED"
"jakirkham","MEMBER","","2022-12-20T01:19:35Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2022-12-20T03:19:14Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-12-20T04:22:02Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2023-04-28T18:31:41Z",false,"COMMENTED"
"jakirkham","MEMBER","","2023-05-08T19:51:03Z",false,"COMMENTED"
"ncclementi","MEMBER","LGTM","2022-12-08T21:53:15Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-12-08T23:13:03Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","Thanks for the Pr @sorenwacker.

I'm not intimately familiar with our picot_table machinery. But it looks like everything is here and the tests are passing 🎉 ","2022-12-07T21:30:25Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @graingert! LGTM overall, just had one minor question ","2022-12-07T16:02:13Z",false,"COMMENTED"
"graingert","MEMBER","","2022-12-07T16:36:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-12-07T16:42:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-12-07T16:42:23Z",false,"APPROVED"
"jrbourbeau","MEMBER","Ah, nice. Glad to see more recent version of `tiledb-python` no longer give a segfault. 

@ihnorton out of curiosity, do you know when the issue we were seeing in https://github.com/dask/dask/pull/9569 was fixed? ","2022-12-07T16:16:45Z",false,"COMMENTED"
"graingert","MEMBER","","2022-12-07T16:17:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @graingert -- will merge once CI finishes ","2022-12-07T16:36:36Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet!

I see this is marked as a draft still -- are there additional changes you'd still like to make? ","2022-12-07T18:03:26Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2022-12-07T19:07:55Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2022-12-08T01:28:40Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-12-08T14:30:08Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2022-12-08T21:20:03Z",false,"COMMENTED"
"ncclementi","MEMBER","@j-bennet This is looking good! I left some comments and suggestions for when you have time to look at it. ","2022-12-08T21:44:35Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2022-12-09T00:40:03Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2022-12-09T00:41:32Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2022-12-09T01:28:42Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-12-09T15:21:53Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-12-09T15:29:16Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @j-bennet @ncclementi. I left a few final comments. They're all minor, overall this PR looks great. Looking forward to seeing it merged ","2022-12-09T17:41:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @j-bennet! Will merge once CI finishes ","2022-12-09T21:07:45Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @mrocklin! Is this something we can add a test for? Clearly our current test suite isn't capturing the many-client-in-many-threads issues you ran into

Also, in https://github.com/dask/distributed/issues/7377 you mentioned `Client.current()` is using `ContextVars` and might be a better way to go. Should we be using `Client.current()` here instead? ","2022-12-07T17:14:28Z",false,"COMMENTED"
"fjetter","MEMBER","","2022-12-12T11:22:06Z",false,"COMMENTED"
"fjetter","MEMBER","","2022-12-14T13:11:03Z",false,"APPROVED"
"fjetter","MEMBER","","2022-12-14T13:15:57Z",false,"CHANGES_REQUESTED"
"jrbourbeau","MEMBER","Thanks for the extra context @fjetter. Just pushed a commit to make this PR just swap out `get_client()` for `default_client()`","2022-12-14T17:24:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-12-06T21:53:30Z",false,"COMMENTED"
"mroeschke","CONTRIBUTOR","","2022-12-06T22:12:56Z",false,"COMMENTED"
"mroeschke","CONTRIBUTOR","","2022-12-06T22:16:11Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-12-06T22:26:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","So after thinking about it more, I switched this PR to keep `user_nullable_dtypes` strictly a `bool` and instead add a `dataframe.nullable_backend=""pandas""|""pyarrow""` config option to determine whether `numpy`-backed or `pyarrow`-backed extension dtypes should be used. 

@mroeschke I'm curious to get your thoughts on the discussion here https://github.com/dask/dask/issues/9631#issuecomment-1340231182 about whether we should go with `nullable_backend`, or some other name, for the config options in `pandas` / `dask`","2022-12-09T16:12:43Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-12-09T17:30:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-12-09T18:02:03Z",false,"COMMENTED"
"jrbourbeau","MEMBER","There's a pandas community meeting happening tomorrow where we'll discuss the name of the config option used to specify the dtype backend (currently called `nullable_backend`). Barring any further comments, I'll plan on updating this PR to match whatever comes out of that community meeting (i.e. keep `nullable_backend` or change the name to whatever is decided on) and then merge this PR in. ","2022-12-13T18:38:01Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-12-06T00:48:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-12-06T02:46:03Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-12-06T17:50:59Z",false,"COMMENTED"
"mroeschke","CONTRIBUTOR","","2022-12-07T18:20:54Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-12-07T18:33:16Z",false,"COMMENTED"
"rjzamora","MEMBER","Only see one issue, otherwise this looks good. Thanks!","2022-12-07T18:43:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-12-07T19:16:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @wence-! ","2022-12-06T18:32:24Z",false,"APPROVED"
"jrbourbeau","MEMBER","Okay, there are two related test failures in CI 

- `dask/dataframe/io/tests/test_parquet.py::test_use_nullable_dtypes_with_types_mapper` 
- `dask/dataframe/io/tests/test_parquet.py::test_use_nullable_dtypes`

Interestingly I'm when I run those tests individually locally, they pass. But when I run the entire `dask/dataframe/io/tests/test_parquet.py` test module I can reproduce the failures. So seems like there is some sort of interference across tests. Will need to look into this more...

EDIT: nvm -- this was me being silly. Pushing a commit to use a context manager when setting `string_storage` in `test_pandas_string_storage_option` ","2022-12-02T18:52:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Nice detective work @graingert. Sounds like we can safely `xfail` the unhappy hdf-related tests on Python 3.11 ","2022-12-07T16:21:02Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-12-14T18:42:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Restarting failed builds as it looks like  the linux Python 3.11 build stalled for some reason","2022-12-14T19:00:11Z",false,"COMMENTED"
"graingert","MEMBER","","2022-12-14T19:34:20Z",false,"COMMENTED"
"graingert","MEMBER","","2022-12-14T19:35:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Okay, looks like the issue was due to the `libprotobuf` pin. That's only needed for the `pyarrow`-nightly build and has since been moved to a different file anyways. After removing the `libprotobuf` pin, I was able to get a solved Python 3.11 environment locally on my mac. Let's see if it solves in CI. ","2022-12-15T22:02:10Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-12-16T11:08:46Z",false,"APPROVED"
"jrbourbeau","MEMBER","The Linux 3.11 build stalled for some reason, so I just retriggered CI to see if the stall happens consistently or not. If it doesn't, I think this is good to go ","2022-12-16T15:43:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @graingert @crusaderky @jakirkham! ","2022-12-16T19:22:20Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @graingert! I see this is marked as a draft still -- are there other changes you'd like to add? 

@douglasdavis do you have bandwidth to review? ","2022-12-01T17:53:41Z",false,"COMMENTED"
"douglasdavis","MEMBER","This looks fine, thanks for catching it!","2022-12-01T18:04:29Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @wence- ","2022-11-30T19:42:03Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","","2022-12-01T10:10:26Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","","2022-12-01T11:16:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @JacobHayes, this looks great! 

Note the test failure here is unrelated to the changes in this PR and being handled over in https://github.com/dask/dask/pull/9701 

Also, I noticed this is your first code contribution to this repository. Welcome!","2022-11-30T20:58:09Z",false,"APPROVED"
"jrbourbeau","MEMBER","Woo, thanks @rjzamora! Just to clarify, this should close https://github.com/dask/dask/issues/8795, correct? ","2022-11-30T20:39:18Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-11-30T23:49:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! ","2022-12-01T00:26:14Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-12-06T00:56:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! Grokking the changes here still, but thought I'd leave a few initial comments ","2022-12-06T22:16:57Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-12-07T02:18:40Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-12-07T02:26:47Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-12-07T02:27:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora. I tried the example from https://github.com/dask/dask/issues/9631#issuecomment-1340136291 with this PR and `filesystem=""pyarrow""` but it looks like we're having trouble with the filepath parsing when creating the arrow filesystem.

```python
import dask.dataframe as dd

df = dd.read_parquet(
    ""s3://nyc-tlc/trip data/fhvhv_tripdata_2022-06.parquet"",
    split_row_groups=True,
    use_nullable_dtypes=True,
    filesystem=""pyarrow"",
)
```

gives 

```
Traceback (most recent call last):
  File ""/Users/james/projects/dask/dask/dask/backends.py"", line 125, in wrapper
    return func(*args, **kwargs)
  File ""/Users/james/projects/dask/dask/dask/dataframe/io/parquet/core.py"", line 494, in read_parquet
    fs, paths, dataset_options, open_file_options = engine.extract_filesystem(
  File ""/Users/james/projects/dask/dask/dask/dataframe/io/parquet/arrow.py"", line 369, in extract_filesystem
    fs = type(pa_fs.FileSystem.from_uri(urlpath[0])[0])(
  File ""pyarrow/_fs.pyx"", line 470, in pyarrow._fs.FileSystem.from_uri
  File ""pyarrow/error.pxi"", line 144, in pyarrow.lib.pyarrow_internal_check_status
  File ""pyarrow/error.pxi"", line 100, in pyarrow.lib.check_status
pyarrow.lib.ArrowInvalid: Cannot parse URI: 's3://nyc-tlc/trip data/fhvhv_tripdata_2022-06.parquet'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File ""/Users/james/projects/dask/dask/test.py"", line 3, in <module>
    df = dd.read_parquet(
  File ""/Users/james/projects/dask/dask/dask/backends.py"", line 127, in wrapper
    raise type(e)(
pyarrow.lib.ArrowInvalid: An error occurred while calling the read_parquet method registered to the pandas backend.
Original Message: Cannot parse URI: 's3://nyc-tlc/trip data/fhvhv_tripdata_2022-06.parquet'
```

Any idea what might be going on here? 

Should note that `filesystem=""fsspec""` (the default) works as expected","2022-12-14T21:20:06Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for all your work here @rjzamora! Overall this looks good to me. I've left several small comments -- looking forward to getting this merged ","2022-12-15T18:24:51Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-12-15T18:47:26Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-12-15T18:47:36Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-12-15T18:47:47Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-12-15T18:48:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-12-15T18:51:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-12-15T18:52:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-12-15T18:55:20Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-12-15T19:08:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! Looking forward to folks taking this for a spin ","2022-12-15T20:16:06Z",false,"APPROVED"
"fjetter","MEMBER","","2022-11-25T16:28:57Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2022-12-09T14:53:10Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @McToel. Apologies for the delayed response. 

The code changes here look good. For my own understanding, when did `pandas` drop support for `sqlalchemy<1.4`? I ask because Dask currently supports older versions of `pandas` (back to 1.0) and I'm wondering if it makes sense to keep this functionality around until we increase the minimum supported `pandas` version to one that's more recent than when `sqlalchemy<1.4` was dropped. 

Also cc @martindurant who was involved with reviewing https://github.com/dask/dask/pull/8158 ","2022-12-22T02:48:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @McToel, that's good to know. 

> How and when does dask decide to drop support for old versions of pandas?

Historically we've continued to maintain support for ""recent"" versions of `pandas` (no strict policy here, but usually something like <12-18 months old) or until there's a maintenance burden associated with continuing to support an older version of `pandas`.

In this case, I don't fee strongly either way. The code here that supports `sqlachemy<1.4` seems to be working and I don't recall folks opening up issues that would require changes to this portion of the codebase (i.e. not currently a maintenance burden). At the same time, we've had deprecation warnings in place for almost a year in Dask -- so I think removing support is also okay. Given that you've already taken the time to push this PR up, I'm inclined to go ahead and just merge this in. Will do so in the next 24 hours if there aren't any objections. ","2022-12-22T17:30:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @McToel -- this is in ","2022-12-23T16:24:07Z",false,"APPROVED"
"ncclementi","MEMBER","Interesting, I would have not arrived to this fix after seeing `TypeError: map_blocks() got an unexpected keyword argument 'dtype'`","2022-11-22T21:07:11Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @ncclementi 

>  I would have not arrived to this fix after seeing TypeError: map_blocks() got an unexpected keyword argument 'dtype'

I got here because I saw that the `a` in `a.map_blocks` was an `xr.DataArray` and xarray's `map_blocks` doesn't have a `dtype=` kwargs. It was clear that Dask's `map_blocks` was intended to be used. here. Since `asarray` knows how to convert `xarray.DataArray`s to Dask arrays, that means we could use it to get to Dask's `map_blocks` as expected. This is also consistent with other Dask functions (e.g. `da.sum(...)`) which return Dask arrays when an `xarray.DataArray` is used as input ","2022-11-22T21:56:23Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-11-22T21:09:27Z",false,"APPROVED"
"TomAugspurger","MEMBER","Looks good to me!","2022-11-22T15:22:32Z",false,"APPROVED"
"rjzamora","MEMBER","Seems fine to me. Thanks @benrutter!","2022-11-30T14:27:42Z",false,"APPROVED"
"keewis","CONTRIBUTOR","","2022-11-22T11:31:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Will plan to merge in a bit (after CI finishes) if no further comments ","2022-11-22T16:45:59Z",false,"COMMENTED"
"jrbourbeau","MEMBER","cc @charlesbluca -- I assume this is good to go if CI passes? ","2022-11-18T18:00:00Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","This is good to go","2022-11-20T00:15:04Z",false,"APPROVED"
"charlesbluca","MEMBER","","2022-11-21T15:35:43Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-11-21T15:49:03Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @rjzamora! 

When I run the example in the new test I see this error message:

```python
TypeError: Dispatch call failed in <function from_dict at 0x138c56e60>
Original Message: from_dict() got an unexpected keyword argument 'unsupported_kwarg'
```

From that message it's still not clear which backend `from_dict` is coming from. Could this be updated to include the fully qualified name of the method or the name of the backend that's being used when an error is encountered? ","2022-11-21T16:18:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-11-21T17:45:57Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-11-21T17:54:36Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-11-21T17:56:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-11-21T18:07:40Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-11-21T18:18:34Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-11-21T18:21:44Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-11-21T18:35:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora ","2022-11-21T19:49:56Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for fixing @charlesbluca! 

Unrelated to the changes here, but I see we're getting the following failure in gpuCI:

```python
FAILED dask/dataframe/io/tests/test_io.py::test_from_dict_backends[cudf] - TypeError: from_dict() got an unexpected keyword argument 'constructor'
```

cc @rjzamora @galipremsagar for visibility. We're planning to release `dask` soon. Is this failure problematic for that? 

EDIT: my guess is ""no"" as it looks like this is an issue on the `cudf` side of things ","2022-11-18T16:25:34Z",false,"APPROVED"
"ncclementi","MEMBER","This LGTM.","2022-11-17T20:20:56Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @gjoseph92! Let's wait to merge this and https://github.com/dask/distributed/pull/7329 at the same time ","2022-11-17T21:35:00Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @rjzamora ","2022-11-23T20:01:46Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @rjzamora. I need to catch up on https://github.com/dask/dask/issues/9619 to get a better understanding for the motivation behind this change, but thought I'd leave a couple of drive-by comments in the meantime ","2022-11-16T20:22:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-11-17T14:54:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-11-17T14:56:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-11-17T22:30:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Checking in here -- @rjzamora the code changes here generally look good and seem pretty straightforward. What additional changes / benchmarking do you think need to be done (if any)? 

Also, could we add a test for the functionality added here? It'd be good to confirm that we swap between `s3fs` / `pyarrow` S3 filesystems under the expected conditions","2022-11-22T01:14:29Z",false,"COMMENTED"
"jrbourbeau","MEMBER","@martindurant I didn't quite follow https://github.com/dask/dask/pull/9669#issuecomment-1323974937 -- do you know if it's possible to use `ArrowFSWrapper` to get an `fsspec`-compatible object that still gets the performance benefits of using `pyarrow`s S3 filesystem? @rjzamora mentioned offline that he tried this but ran into some issues (I don't have any details here -- perhaps Rick could fill them in). 

Regardless, I think we all view this as a temporary optimization. Long-term, it'd be great to have `s3fs` be just as performant and rip out the changes in this PR. However, given that it looks like users will see a sizeable performance improvement, and the code changes here are relatively straightforward / isolated, I think it makes sense to include these changes until we can make upstream changes to `s3fs`. 

","2022-11-23T01:48:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @martindurant

> things that appear to work on the client will maybe not work on workers

Hmm I don't follow this point. Could you give an example fail case? 

> the change does not appear in any higher documentation

That's a fair point. @rjzamora thoughts on adding a note about this in the docstring? 

> the configuration of s3fs and arrow's fs are not the same, they require different kwargs. Here we have dealt with exactly one: anonymous access.

This seems okay to me. `anon`/`anonymous` seems somehow special as it's very commonly used -- I think special casing that one keyword is reasonable. Other than that, `s3fs.S3FileSystem` and `pyarrow.S3FileSystem` share no arguments, and since we handle falling back to `s3fs` gracefully, any existing code that specifies `s3fs`-specific storage options will continue to use `s3fs.S3FileSystem`. I don't anticipate any change in behavior/performance when a non-trivial `storage_options` is provided. 

We could make this more explicit by saying ""if `storage_options` has anything other than `anon`/`anonymous` use `s3fs`"". @rjzamora mentioned the current approach would make it easier for folks using `pyarrow.S3FileSystem` outside of Dask to start using Dask. This seems fine, but not super motivated. I'd be happy adding a more explicit `storage_options` check if that's what you would prefer. 

> all other config that might be passed in storage_options are lost, so any data requiring, for example, profile= will not be usable at all, which is a big regression

I think this also falls under the point above

> there is no way not to do this

Users could specify a `open_file_options` value that uses `s3fs.S3FileSystem`. Fully admit that's not a very obvious workaround, but I wanted to highlight there is _a_ way to override the new default behavior proposed here. 

> Things might magically work if auth can be automatically determined without any kwargs, but boto and arrow probably don't have the same try order for the various config options either (e.g., .boto3 file will only be used by boto/s3fs).

That's a fair point that hadn't occurred to me. I wonder (1) how common this is, (2) what we can do in those cases. Maybe gracefully fallback to `s3fs` is the initial metadata can't be read? @rjzamora I'd be curious about your thoughts here  ","2022-11-23T18:49:15Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks for looking into this @jrbourbeau ! CI failure seems like a known flake.

**EDIT**: Looks like my approval was a few seconds too late :)","2022-11-16T19:17:21Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-11-21T21:51:29Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-11-22T15:03:57Z",false,"COMMENTED"
"fjetter","MEMBER","I think tuples are just as common as lists. We're also handling this for `by`.

If we include these suggestions, I'm +1 for merging. I think this is a really nice improvement! Thanks @rjzamora ","2022-11-29T10:52:54Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-11-29T16:21:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora for the improvement and @fjetter for reviewing ","2022-11-30T19:04:18Z",false,"APPROVED"
"ncclementi","MEMBER","This LGTM","2022-11-15T16:18:12Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jakirkham ","2022-11-15T16:20:31Z",false,"APPROVED"
"charlesbluca","MEMBER","","2022-11-15T15:06:19Z",false,"APPROVED"
"fjetter","MEMBER","I like the suggestion with the user warning","2022-12-01T09:53:58Z",false,"APPROVED"
"ncclementi","MEMBER","This LGTM, we are seeing multiple failures but they are unrelated to this PR. 
The only doubt I have and not sure what's going on is with the linting check","2022-11-15T00:44:17Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-11-15T16:13:59Z",false,"APPROVED"
"ncclementi","MEMBER","","2022-11-14T21:38:09Z",false,"APPROVED"
"charlesbluca","MEMBER","Thanks @jrbourbeau! Looks like the affected tests are passing now so this LGTM","2022-11-15T02:15:14Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-11-14T20:19:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Alright, the changes here get out `upstream` CI build running again. Assuming there are no related failures, I'll plan to merge this PR after CI finishes as I suspect the changes here aren't particularly controversial and it'd be good to get our `upstream` build running ASAP. Happy to address any comments folks have in a follow-up PR ","2022-11-14T20:28:40Z",false,"COMMENTED"
"ncclementi","MEMBER","This LGTM","2022-11-14T20:57:23Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-11-14T21:02:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @keewis -- this is in. Again, apologies for the delayed response ","2023-03-07T18:51:09Z",false,"APPROVED"
"phobson","CONTRIBUTOR","Thanks, @martindurant ","2022-11-11T22:13:19Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-11-14T15:01:29Z",false,"COMMENTED"
"martindurant","MEMBER","","2022-11-14T16:01:27Z",false,"COMMENTED"
"rjzamora","MEMBER","One minor comment fix. Otherwise, LGTM","2022-11-14T16:37:59Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @martindurant. I think we want to trigger an upstream CI build by including a commit with `test-upstream` in it so we can make sure `fastparquet_version > parse_version(""0.8.3"")` is `True` (note you'll also want to merge `main` as there were some changes to fix the `upstream` build that were just merged)","2022-11-14T21:55:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for fixing @rjzamora! ","2022-11-10T21:55:41Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-11-10T23:39:52Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-11-10T23:42:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora, this LGTM -- will merge once CI finishes. ","2022-11-21T20:31:02Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-11-21T21:17:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-11-21T21:32:24Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks @mrocklin !","2022-11-10T15:02:22Z",false,"DISMISSED"
"rjzamora","MEMBER","","2022-11-10T15:04:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-11-10T15:25:38Z",false,"COMMENTED"
"rjzamora","MEMBER","gpuci failures are unrelated.","2022-11-10T15:47:37Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @mrocklin ","2022-11-10T16:04:02Z",false,"APPROVED"
"rjzamora","MEMBER","Thanks @jrbourbeau !

It's interesting that the motivating bug is caused by the [use of a single-column DataFrame](https://github.com/dask/dask/blob/9d624c6dfd452ad8966ff5011b736614a32793d2/dask/dataframe/shuffle.py#L474) instead of a `Series`. Perhaps we should raise an error in [`set_partitions_pre`](https://github.com/dask/dask/blob/9d624c6dfd452ad8966ff5011b736614a32793d2/dask/dataframe/shuffle.py#L848) when `s` is not series-like?","2022-11-10T15:22:14Z",false,"APPROVED"
"phobson","CONTRIBUTOR","Good catch. Pending CI builds, 👍🏻 from me","2022-11-09T16:22:29Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca -- will merge once CI finishes ","2022-11-09T16:29:05Z",false,"APPROVED"
"phobson","CONTRIBUTOR","Love this. ","2022-11-09T01:01:29Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","Ooh nice!","2022-11-09T11:39:30Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @rjzamora -- I'll take a look at this ","2022-11-08T22:59:36Z",false,"COMMENTED"
"fjetter","MEMBER","> However, there may still be messy datasets where each partition really does need to correspond to a distinct row-group count (from 1+ files)

What use case would that be? Honestly, I don't think we should offer this functionality at all. Row groups are more or less random chunks with statistics to optimize data access. Why would we want to guarantee a one-to-one mapping to dask partitions?
Even if that is a use case, how frequent is it really? Is this edge case really worth the complexity?

> Are we okay with chunksize corresponding to an uncompressed storage size, or do we want to use the real in-memory size? Although I was originally planning for in-memory size, I eventually decided on using a value that is available in the parquet metadata (for performance reasons).

I don't see a problem with this as long as it is clearly documented. I'd love some utility functions that could tell the user what the average compression ratio for a given dataset is (even if it is just sampled) to help advanced users make good decisions.
In my experience, compressed vs uncompressed is maybe a factor of 2-3 *unless* the user really knows what they are doing and write a dataset highly compressed (I've seen parquet files with 20-100 compression ratios but this is very rare and this kind of expert user can use the API appropriately).


> What should the default chuksize be when split_row_groups=""auto""? This PR proposes the same as the default blocksize used in read_csv (1/10 the per-core memory).

I was surprised to see the 1/10 implementation. This will break down for all kinds of distributed compute scenarios. Even for a LocalCluster this might be a bit much.

One datapoint: I have a 16GB / 4 CPU notebook. That would create 400MB uncompressed data partitions. That will easily blow up to a GB or more after decompression. That's a bit heavy.
This will, of course, be caught by `min(blocksize, int(64e6))`, i.e. I realistically have `64MB * compression ratio` almost all the time unless somebody has *many* CPUs with virtually no memory

So, two things

1. I think the logic we're applying here is overkill. psutil + rounding down to 64MB sounds smart but in the end it's hard coded 64MB, why not be explicit? Even if it's not rounded, the psutil will lead to confusing results when executing on a distributed cluster. After all, why would the client memory size have an impact on worker memory size? Lastly, the *truly optimal* chunksize should consider cluster size as well... After this argument, why not drop the ""auto"" calculation and just set ""64/100MiB"" as a default? In my experience this is a better UX than some magical/opaque ""auto""
2. 64MB uncompressed feels OK. That'll create 100-500MB uncompressed partitions which I think is a comfortable place for a default value","2022-11-29T10:00:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2023-02-14T19:34:33Z",false,"COMMENTED"
"martindurant","MEMBER","","2023-02-17T21:01:34Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","Thanks for catching this!","2022-11-08T15:35:00Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @qheuristics -- this is in 

Also, I noticed this is your first code contribution to this repository. Welcome!","2022-11-08T16:03:34Z",false,"APPROVED"
"jrbourbeau","MEMBER","It looks like we're getting

```python
cupy.cuda.compiler.JitifyException: Runtime compilation failed
```

in gpuCI (cc @charlesbluca for visibility). Regardless, those failures are definitely unrelated to the changes in this PR, so I'll go ahead and merge this one in ","2022-11-07T22:44:08Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @quasiben! Can we add a test for this? ","2022-11-08T18:02:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-11-08T19:11:00Z",false,"COMMENTED"
"quasiben","MEMBER","","2022-11-08T19:38:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-11-08T19:54:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @quasiben ","2022-11-08T23:10:26Z",false,"APPROVED"
"jacobtomlinson","MEMBER","This makes sense to me. 

The only problem is that it seems to highlight the API in both toc sections now which makes the nav look a bit weird.

<img width=""513"" alt=""image"" src=""https://user-images.githubusercontent.com/1610850/200293921-a4f44818-508a-44b9-a027-7eca6bf88ba8.png"">

Is there a way to link to the API from the ""explanation"" toctree without making it a child? So it would show up in the top list but when you click it you have clearly moved to the reference section of the docs?

If the answer is ""sphinx doesn't let you do this easily"" then that's fine and you can ignore this comment. But if we can do it I think it is an important thing to tweak.","2022-11-07T11:00:08Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @mrocklin. I agree with @jacobtomlinson that it'd be great if we could avoid double-highlighting in the sidebar. I did some Google-ing but couldn't find a way to do this quickly. Let's go ahead and include the changes here as is, as they're an improvement on the current situation. If folks figure out a way to avoid double-highlighting, that would be welcome ","2022-11-07T19:17:43Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-11-07T14:56:04Z",false,"COMMENTED"
"rjzamora","MEMBER","LGTM - Thanks @galipremsagar!","2022-11-08T14:16:11Z",false,"APPROVED"
"phobson","CONTRIBUTOR","Thanks for the PR. This looks good to me.","2022-11-04T19:23:06Z",false,"APPROVED"
"phobson","CONTRIBUTOR","","2022-11-07T16:55:12Z",false,"APPROVED"
"ncclementi","MEMBER","","2022-11-07T19:26:20Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2022-11-07T19:39:33Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2022-11-14T15:21:26Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-11-14T21:20:36Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2022-11-22T16:16:50Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2022-12-01T11:37:05Z",false,"COMMENTED"
"phofl","COLLABORATOR","lgtm, the asset_eq issue can be a follow up","2024-04-12T17:11:06Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @ncclementi!","2022-11-04T16:24:55Z",false,"APPROVED"
"hayesgb","CONTRIBUTOR","","2022-11-03T01:35:05Z",false,"COMMENTED"
"hayesgb","CONTRIBUTOR","","2022-11-03T01:35:35Z",false,"COMMENTED"
"hayesgb","CONTRIBUTOR","","2022-11-03T01:36:57Z",false,"COMMENTED"
"hayesgb","CONTRIBUTOR","","2022-11-03T01:37:21Z",false,"COMMENTED"
"hayesgb","CONTRIBUTOR","This is a very nice addition.  I'm curious about the use of `string[python]` extension dtype vs `string[pyarrow]`.  Given that we're restricting nullables to the pyarrow engine, I would think its consistent to use `string[pyarrow]` but I may be missing something.","2022-11-03T01:42:57Z",false,"COMMENTED"
"mroeschke","CONTRIBUTOR","","2022-11-11T00:45:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose! ","2022-12-01T01:57:00Z",false,"APPROVED"
"phobson","CONTRIBUTOR","Thanks, Hendrik. At the risk of jumping the gun, it looks like the CI is in pretty good shape and will be all green.","2022-11-02T15:00:16Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @hendrikmakait !","2022-11-02T23:12:57Z",false,"APPROVED"
"ncclementi","MEMBER","LGTM

Thank you @rjzamora ","2022-11-02T18:30:05Z",false,"APPROVED"
"rjzamora","MEMBER","Thanks @hayesgb - My only question/concern is if we should move `cov` and `corr` into `DataFrameGroupBy` (and add `NotImplementedError` definitions to `SeriesGroupBy`). It feels funny to check the subclass within the superclass like this.

Also, it looks like the CI failures are due to [this line](https://github.com/dask/dask/blob/9d624c6dfd452ad8966ff5011b736614a32793d2/dask/dataframe/tests/test_groupby.py#L749) in `test_groupby.py`.","2022-11-10T15:44:21Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Will plan to merge this in prior to releasing later today ","2022-10-28T16:26:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! This is definitely a weird one, but I see value in getting our `upstream` CI job passing and this change doesn't seem unreasonable. ","2022-10-28T14:52:10Z",false,"APPROVED"
"charlesbluca","MEMBER","Thanks @jrbourbeau! Just one question","2022-10-27T19:17:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-27T19:30:05Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2022-10-27T15:35:19Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for working on this @ncclementi. Could you say where you were getting the `UnboundLocalError`? Was this when running a specific test, or something else?","2022-10-27T20:54:41Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2022-10-26T17:25:25Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-10-26T17:39:03Z",false,"COMMENTED"
"jakirkham","MEMBER","LGTM. Thanks Charles! 🙏","2022-10-26T17:40:23Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca @jakirkham ","2022-10-26T19:45:55Z",false,"COMMENTED"
"jakirkham","MEMBER","Thanks James! 🙏","2022-10-25T19:55:40Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jakirkham!

IIUC the motivation behind this PR is the pain we went through getting the new `dask` CLI set up on conda-forge. Is that correct, or am I missing something? Since things are now working on conda-forge, I'm wondering how much this change is needed. 

To be clear, I don't have a strong objections to adding `click` -- it's a small, popular, pure Python library. I also suspect many (most?) Dask users today already install `click` because `pip install dask[complete]` and `conda install dask` pull in `click`. I'm just trying to get a better understanding for what problem gets solved by adding `click` as a dependency. 

cc @jacobtomlinson as I believe he had some reservations around making `click` a required dependency (xref https://github.com/dask/dask/pull/9283#issuecomment-1193806208) ","2022-10-26T20:35:50Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-10-27T16:46:40Z",false,"COMMENTED"
"jakirkham","MEMBER","Should we bump the `click` requirement to 7.0 in `setup.py` & `meta.yaml` too?","2022-10-27T21:19:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","> I'm just trying to get a better understanding for what problem gets solved by adding click as a dependency.

Circling back to this point, one thing I'd like to do is update our issue template to use `dask info versions` instead of asking separately for `dask`, `distributed`, and `python` versions as running `dask info versions` is less of an ask for users. Having `click` installed already will reduce barriers for this. I'll admit I only see this as moderate motivation for adding `click` as a dependency, but I also think that's probably okay in this case.

I'll propose we give a bit more time for others to weigh in (@jakirkham asked for feedback here https://github.com/dask/community/issues/283#issuecomment-1291137925 a few days ago) and then merge prior to releasing today.  ","2022-10-28T16:26:01Z",false,"APPROVED"
"ncclementi","MEMBER","","2022-10-25T17:00:35Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-10-24T19:27:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! Theses changes LGTM if @QuLogic confirms they fix https://github.com/dask/dask/issues/9582","2022-10-20T19:55:33Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-10-20T19:58:42Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-10-19T16:14:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-21T13:49:57Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-12-14T15:54:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! A few small comments, but otherwise this looks good ","2022-12-15T18:32:21Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-12-15T19:24:18Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-12-16T01:14:54Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose! I left a few small comments / questions, but overall this looks good","2022-10-18T15:09:49Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-18T15:12:55Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-18T15:13:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-18T15:56:00Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-18T16:01:28Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-18T16:16:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-18T16:24:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-18T16:24:42Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-10-14T20:27:18Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks for taking care of this @ian-r-rose ! Just a few questions.","2022-10-17T13:22:53Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-17T14:58:23Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-17T15:01:09Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks @ian-r-rose !","2022-10-17T16:55:25Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @rjzamora. Just left a few quick comments while passing by, I'll take a more detailed look soon ","2022-10-13T15:02:52Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-13T15:38:43Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-13T15:40:16Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-13T15:46:07Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-13T16:51:11Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-13T17:00:18Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-13T17:14:40Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-13T17:16:28Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-13T17:18:39Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-18T17:32:34Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-18T17:32:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Circling back here, @rjzamora are there any additional changes you'd like to include here? It'd be nice to include this in the release tomorrow if feasible ","2022-11-10T18:00:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-11-10T18:22:01Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-11-10T19:21:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-11-10T20:47:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! ","2022-11-10T22:00:03Z",false,"APPROVED"
"jrbourbeau","MEMBER","So we were consistently encountering some seg faults in our `doctest` and Python 3.10 linux builds. For example, in [this CI build](https://github.com/dask/dask/actions/runs/3235717373/jobs/5300534376) we see:

```
Fatal Python error: Segmentation fault

Current thread 0x00007f823c42a740 (most recent call first):
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/multiprocessing/popen_fork.py"", line 66 in _launch
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/multiprocessing/popen_fork.py"", line 19 in __init__
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/multiprocessing/context.py"", line 277 in _Popen
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/multiprocessing/context.py"", line 224 in _Popen
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/multiprocessing/process.py"", line 121 in start
  File ""/home/runner/work/dask/dask/dask/diagnostics/profile.py"", line 160 in _start_collect
  File ""/home/runner/work/dask/dask/dask/diagnostics/profile.py"", line 171 in __enter__
  File ""<doctest dask.diagnostics.profile.ResourceProfiler[3]>"", line 1 in <module>
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/doctest.py"", line 1334 in __run
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/doctest.py"", line 1481 in run
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/doctest.py"", line 1842 in run
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/_pytest/doctest.py"", line 294 in runtest
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/_pytest/runner.py"", line 166 in pytest_runtest_call
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/pluggy/_callers.py"", line 39 in _multicall
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/pluggy/_manager.py"", line 80 in _hookexec
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/pluggy/_hooks.py"", line 265 in __call__
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/_pytest/runner.py"", line 259 in <lambda>
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/_pytest/runner.py"", line 338 in from_call
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/_pytest/runner.py"", line 258 in call_runtest_hook
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/_pytest/runner.py"", line 219 in call_and_report
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/_pytest/runner.py"", line 130 in runtestprotocol
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/_pytest/runner.py"", line 111 in pytest_runtest_protocol
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/pluggy/_callers.py"", line 39 in _multicall
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/pluggy/_manager.py"", line 80 in _hookexec
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/pluggy/_hooks.py"", line 265 in __call__
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/_pytest/main.py"", line 347 in pytest_runtestloop
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/pluggy/_callers.py"", line 39 in _multicall
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/pluggy/_manager.py"", line 80 in _hookexec
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/pluggy/_hooks.py"", line 265 in __call__
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/_pytest/main.py"", line 322 in _main
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/_pytest/main.py"", line 268 in wrap_session
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/_pytest/main.py"", line 315 in pytest_cmdline_main
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/pluggy/_callers.py"", line 39 in _multicall
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/pluggy/_manager.py"", line 80 in _hookexec
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/pluggy/_hooks.py"", line 265 in __call__
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/_pytest/config/__init__.py"", line 164 in main
  File ""/usr/share/miniconda3/envs/test-environment/lib/python3.9/site-packages/_pytest/config/__init__.py"", line 187 in console_main
  File ""/usr/share/miniconda3/envs/test-environment/bin/pytest"", line 11 in <module>
Error: The operation was canceled.
```

I wasn't able to make much sense of that traceback, so I compared the conda packages installed in a ""bad"" `doctest` build with the seg fault and a recent ""good"" build which passes and got the following diff

```diff
62c62
<   - cryptography=38.0.1=py39hd97740a_0
---
>   - cryptography=38.0.2=py39hd97740a_0
294c294
<   - tifffile=2022.8.12=pyhd8ed1ab_0
---
>   - tifffile=2022.10.10=pyhd8ed1ab_0
296c296
<   - tiledb-py=0.17.4=py39hc25295c_1
---
>   - tiledb-py=0.17.5=py39hc25295c_0
305c305
<   - tzdata=2022d=h191b570_0
---
>   - tzdata=2022e=h191b570_0
341c341
<     - distributed==2022.9.2+20.g37fd8b50
\ No newline at end of file
---
>     - distributed==2022.9.2+21.g470f42c4
\ No newline at end of file
```

This helped narrow things down to a handful of packages, though none of these packages stuck out as clearly linked to the failing tests. I tried pinning `tiledb-py` to the last known ""good"" version and now CI is passing 🤷 

cc @ihnorton in case you've seen anything remotely similar to this over in `tiledb-py`
cc @jakirkham in case you've seen anything remotely similar in conda-forge generally -- it's not clear to me whether or not this is a `tiledb-py` thing, or a packaging thing ","2022-10-13T02:01:24Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T21:08:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Alright, this is probably ready for some eyes at this point. @ian-r-rose I'd be curious what your thoughts are whenever you get a few minutes","2022-10-12T21:16:33Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T21:22:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-12T21:27:58Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-12T21:35:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-12T21:41:32Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-12T22:00:58Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-12T22:02:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-12T22:06:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-12T22:06:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-15T01:13:29Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @jrbourbeau, this looks good to me! Just one non-blocking comment/question.","2022-10-18T18:43:50Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-10-18T20:38:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-11T14:55:09Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-10-18T20:45:10Z",false,"COMMENTED"
"rjzamora","MEMBER","This looks good @ChrisJar - Thanks!

Would you be able to run [`dask_cudf` tests](https://github.com/rapidsai/cudf/blob/branch-22.12/python/dask_cudf/dask_cudf/tests/test_groupby.py) locally to confirm that this doesn't cause any unexpected breakages?","2022-10-21T13:29:43Z",false,"APPROVED"
"jsignell","MEMBER","This looks very reasonable and straightforward to me! Thanks @epizut for the PR!","2022-10-10T15:01:33Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @epizut! This is in ","2022-10-12T00:08:36Z",false,"APPROVED"
"ncclementi","MEMBER","","2022-10-24T16:29:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @fAndreuzzi! ","2022-10-24T20:48:37Z",false,"COMMENTED"
"fandreuz","CONTRIBUTOR","","2022-10-24T23:16:48Z",false,"COMMENTED"
"fandreuz","CONTRIBUTOR","","2022-10-24T23:19:00Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-10-07T01:10:03Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2022-10-07T14:32:17Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","I'm happy with this, thanks @djhoese. I, too, am curious about @DPeterK's use-case such that the underlying array data *need* to be different pieces of memory, and whether we can address that in a way that is more dask-y. But I also suspect that the previous implementation where copy's only happened for single-partition arrays wasn't really solving that use-case either.","2022-10-13T23:33:34Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-10-06T17:02:29Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-10-06T17:14:10Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-10-07T00:54:10Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-10-07T00:49:22Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-10-06T17:13:11Z",false,"APPROVED"
"phobson","CONTRIBUTOR","According to https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file#about-the-dependabotyml-file, I think you're correct, James:

> ## About the dependabot.yml file
> ...
> **You must store this file in the .github directory of your repository.** When you add or update the dependabot.yml file, this triggers an immediate check for version updates. For more information and an example, see ""[Configuring Dependabot version updates](https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/enabling-and-disabling-dependabot-version-updates#enabling-dependabot-version-updates).""

Emphasis mine","2022-10-06T15:23:14Z",false,"APPROVED"
"jrbourbeau","MEMBER","@zklaus I'm curious if this fixes the issue you were encountering ","2022-10-05T15:16:47Z",false,"COMMENTED"
"zklaus","NONE","","2022-10-11T09:08:44Z",false,"COMMENTED"
"zklaus","NONE","","2022-10-11T10:50:26Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-10-12T19:47:49Z",false,"COMMENTED"
"zklaus","NONE","","2022-10-13T14:52:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-13T15:32:30Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-10-13T15:41:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-13T17:25:24Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-10-13T18:28:14Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-10-13T18:28:25Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for working on this @zklaus! 

I don't think we should add a new dependency for this. If a lock is needed, let's use a `theading` / `multiprocessing` / etc. lock instead. Alternatively, I think avoiding the `pop` call until after registration has happened might also avoid the race condition. I'd be curious to get your thoughts on https://github.com/dask/dask/pull/9545. ","2022-10-05T15:07:41Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Let's take it for a spin","2022-10-04T18:10:58Z",false,"APPROVED"
"jacobtomlinson","MEMBER","Neat! We already do this on the helm chart and it works well. https://github.com/dask/helm-chart/blob/main/.github/dependabot.yml

Just one word of warning most GitHub actions strongly use SemVer and dependabot is quite aggressive in adopting major version bumps and it's a little harder to pin to minor bumps only. It's fine but makes a little more work for us 😆.","2022-10-07T16:23:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Nice detective work @ian-r-rose! ","2022-10-04T15:03:47Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-04T15:12:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose -- will merge after CI finishes ","2022-10-04T15:54:47Z",false,"APPROVED"
"rjzamora","MEMBER","Thanks for tackling this @ian-r-rose !","2022-10-04T18:48:28Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-10-04T18:59:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose for the fix and @rjzamora for reviewing ","2022-10-04T20:02:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @mrocklin! Overall the changes look good

cc @rjzamora for visibility ","2022-10-03T15:52:50Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-10-03T15:56:34Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @mrocklin! The content looks good to me. I wonder if it's also worth linking out to the [dedicated parquet page](https://docs.dask.org/en/stable/dataframe-parquet.html) here.","2022-10-03T16:05:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-03T16:10:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-10-03T18:24:41Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-10-03T18:25:06Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-03T18:56:01Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-10-03T19:04:28Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-03T19:16:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for handling this @martindurant ","2022-10-03T18:53:01Z",false,"COMMENTED"
"martindurant","MEMBER","","2022-10-03T19:01:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-03T19:33:31Z",false,"COMMENTED"
"martindurant","MEMBER","","2022-10-03T19:55:58Z",false,"COMMENTED"
"martindurant","MEMBER","","2022-10-03T20:58:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @martindurant ","2022-10-03T21:26:00Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @martindurant! https://github.com/dask/dask/pull/9528 (just merged) added `datetime.time` support. Apologies, I saw that PR first. Do you mind restricting this PR to just `datetime.datetime`?  ","2022-10-01T02:07:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @martindurant! This looks good to me -- will merge after CI finishes. I pushed a small commit related to the test added here (hope you don't mind) ","2022-10-03T15:44:54Z",false,"APPROVED"
"phobson","CONTRIBUTOR","Thanks for the PR. LGTM","2022-10-05T14:48:59Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @douglasdavis! The fix looks good to me, just one minor nit","2022-10-05T14:56:30Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-10-05T15:02:43Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-05T15:06:28Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @douglasdavis, and thanks for reviewing @phobson!","2022-10-05T15:07:09Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @crusaderky, looks reasonable to me","2022-10-03T17:13:41Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-10-03T17:13:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-03T18:14:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @crusaderky -- will merge after CI finishes ","2022-10-03T18:14:57Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2022-10-04T13:40:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @timkpaine! Overall this looks good. `datetime.time` objects can also have `microseconds` and `tzinfo` specified -- could you add test coverage for those as well? ","2022-09-30T03:24:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","This looks great -- thanks @timkpaine! 

Also, I noticed this is your first code contribution to this repository. Welcome!","2022-10-01T02:05:18Z",false,"APPROVED"
"jrbourbeau","MEMBER","Just checking in, @charlesbluca is this good to merge? ","2022-10-03T15:00:29Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks for putting this together @wence- !

I strongly agree with the general idea to make it easier to register custom/external algorithms that may depend on the environment where dask is being used (e.g. distributed exectution on a dask-cuda cluster).  My primary hesitation with this design that `ShuffleRegistry` *may* be trying to do more work than it needs to.

I also wonder if this is another case where entrypoints would be the easiest way to manage/register custom algorithms (in a way that could be extended to other pluggable algorithms - like groupby aggregations and worker-aware reductions). For example, an external library could register a new algorithm by putting something like this in its `setup.cfg`:

```
   [options.entry_points]
   dask.algorithms.shuffle =
      explicit-comms = dask_cuda:ExplicitCommsShuffleMethod
```","2022-09-28T13:46:49Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","","2022-09-28T14:14:18Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","Thank you for this PR @ognis1205!

I've realized that moving information into the caption makes it a lot less eye-catching. Can I suggest for important information like the type, we instead keep it in the table, but let it span across both columns?

The HTML `colspan` allows control of this, eg:
```html
<td colspan=""2""> {{ array.dtype }} {{ array._meta | type | typename }} </td>
```","2022-09-29T01:16:28Z",false,"CHANGES_REQUESTED"
"ognis1205","CONTRIBUTOR","","2022-09-30T05:05:32Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2022-10-03T03:33:51Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","This looks good to me. 

I like the way the screenshots look now, to me it seems a bit clearer. Perhaps @andersy005  would like to weigh in? 

I agree, the test failures are unrelated to this PR, and should not prevent merging. I don't have write access to merge, but I'll mark this approved, and another Dask maintainer should come by soon.","2022-10-03T03:43:01Z",false,"APPROVED"
"phobson","CONTRIBUTOR","Thanks!
","2022-10-17T19:58:20Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","Thanks!","2022-10-17T19:59:05Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose. I took a quick look and this looks good from a high-level. It also looks like this won't impact any existing groupby code -- so I'm happy with the changes here if you are. 

@rjzamora your thoughts are certainly welcome here if you have bandwidth to take a look (though no obligation though) ","2022-10-13T17:44:37Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-13T18:15:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-14T16:22:10Z",false,"APPROVED"
"rjzamora","MEMBER","This is really nice - Thanks @jrbourbeau !","2022-09-23T17:25:30Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-09-23T17:31:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-23T17:43:38Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-23T17:44:51Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-23T17:59:33Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-09-22T20:44:09Z",false,"COMMENTED"
"noumxn","CONTRIBUTOR","","2022-09-22T20:47:50Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-22T22:53:55Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Looks good to me, pending switching back to `distributed@main`.

I don't love how specific the tests are, but I don't think that's something we need to address here.","2022-09-23T18:42:51Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-09-23T19:24:32Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks for adding this @marberi! I agree with @phobson that `test_groupby.py` would be a more natural place for this test.","2022-10-05T16:28:59Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose -- apologies for the delay. Taking a look at this now ","2022-10-04T15:56:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose. Overall these changes looks good -- just left a few small-ish comments / questions 

cc @rjzamora for visibility ","2022-10-07T18:17:27Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-07T18:22:27Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-07T18:25:10Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-07T18:28:50Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-07T18:29:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-07T21:59:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-07T22:10:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-07T22:23:48Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-07T22:32:37Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-07T22:38:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose -- let's merge after CI finishes ","2022-10-07T22:38:57Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose! ","2022-09-16T14:26:36Z",false,"APPROVED"
"jrbourbeau","MEMBER","Okay, so I think this is ready for a review now. The goal of this PR is to filter out all of the `numeric_only` deprecation warnings that will start being emitted in `pandas=1.5`. Note that this doesn't resolve https://github.com/dask/dask/issues/9471 -- it's just a bandaid. However, given `pandas=1.5` is scheduled for release on Monday, I think this is an okay bandaid to apply. We will need to go back and more fully support the `numeric_only` changes in follow-up though. ","2022-09-14T21:20:32Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-09-15T15:09:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-15T15:30:18Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-15T15:31:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-15T18:12:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-15T18:14:03Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-15T21:35:34Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-15T21:38:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-15T21:38:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-15T21:40:56Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-15T21:41:53Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @jrbourbeau!","2022-09-15T21:47:13Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-09-15T21:47:34Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-15T21:49:46Z",false,"COMMENTED"
"ncclementi","MEMBER","It looks good to me. Thank you @jrbourbeau ","2022-09-14T18:09:59Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @wence- ","2022-09-14T16:21:11Z",false,"APPROVED"
"jrbourbeau","MEMBER","add to allowlist","2022-09-14T16:30:21Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose! Would you mind adding a small test (e.g. similar to the example in https://github.com/dask/dask/issues/9490)? ","2022-09-14T14:58:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-14T18:28:19Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-14T18:29:14Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose! ","2022-09-14T21:24:11Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-09-19T15:02:44Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-19T15:41:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-19T16:04:41Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-19T16:13:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-19T16:13:29Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-19T16:17:24Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-19T16:22:31Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-19T16:54:11Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-19T16:58:54Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-19T17:26:43Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-19T19:07:49Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-19T20:04:59Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks for pushing on this @ian-r-rose . I think I am okay with the plan to move to a `sort=True` default.

I also think it makes sense to start with a FutureWarning to give users and down-stream libraries enough time to adapt to the breaking change. Although, it looks like this PR is still making the breaking change for now?","2022-09-21T13:46:10Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-21T14:55:17Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-21T14:55:45Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-21T15:02:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-22T15:15:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-22T15:20:12Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @eriknw!

> I'm surprised this edge case hasn't been caught and fixed earlier.

Looks like this closes https://github.com/dask/dask/issues/8085 : ) 

> Well that's a weird test failure.

Known flaky test https://github.com/dask/dask/issues/8795","2022-09-13T22:14:44Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @ntabris! 

Also, I noticed this is your first code contribution to this repository. Welcome!","2022-09-12T22:24:17Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-09-12T21:29:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-13T15:29:18Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-13T15:34:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-13T15:36:50Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","One small suggestion, otherwise this looks good to me","2022-09-13T15:43:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-13T15:55:51Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-13T16:56:13Z",false,"APPROVED"
"charlesbluca","MEMBER","","2022-09-09T17:14:23Z",false,"APPROVED"
"galipremsagar","CONTRIBUTOR","","2022-09-09T17:14:54Z",false,"APPROVED"
"charlesbluca","MEMBER","Thanks @jrbourbeau! Verified locally that this resolve the failures in dask-sql 🙂 ","2022-09-09T17:12:41Z",false,"APPROVED"
"pavithraes","MEMBER","Thank you for following up on this, @jrbourbeau!","2022-09-09T01:37:18Z",false,"APPROVED"
"rjzamora","MEMBER","Thanks for taking care of this @jrbourbeau - I see that the last commit to the bcolz repo was two years ago, declaring the project ""unmaintained."" Given that status, I think a 7-month deprecation cycle is sufficient. ","2022-09-09T13:45:07Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-09-08T21:27:18Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-08T21:58:43Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-08T22:11:47Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-08T22:12:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora. Still grokking the changes here. Am just leaving comments as I go (hope that's okay)","2022-09-09T15:33:16Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-09T17:26:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-09T17:27:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-09T19:34:33Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-12T19:00:57Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-12T19:01:12Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-12T19:02:06Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-12T19:19:03Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-12T19:31:04Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-12T20:05:42Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-12T20:10:38Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-13T16:00:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-13T20:56:14Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-13T21:27:20Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Apologies for taking so long to take a look @rjzamora! I think this is in pretty good shape. I'm still thinking through your discussion of the import structure, will follow-up with more thoughts later.","2022-09-23T23:46:19Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-24T00:04:54Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-26T13:27:16Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-26T13:43:06Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-26T15:35:47Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-26T15:37:47Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-07T14:21:36Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-07T14:46:27Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-10-12T09:29:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T13:16:34Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","A bunch of suggestions/queries, but nothing major stands out.","2022-10-12T13:18:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T13:41:01Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T13:49:28Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T13:52:38Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","","2022-10-12T13:56:01Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T13:59:02Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","","2022-10-12T14:04:56Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T14:27:47Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T14:38:08Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T14:41:36Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T14:52:24Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T14:52:37Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","","2022-10-12T16:01:40Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T16:20:18Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T16:21:23Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T16:25:31Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T17:21:02Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-10-12T17:42:39Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T18:01:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T18:10:53Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T18:25:50Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-12T18:50:26Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","","2022-10-13T14:14:10Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","","2022-10-13T15:11:21Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-13T15:17:06Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-13T15:18:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-13T15:59:48Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-13T21:09:54Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-13T21:34:33Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-13T22:07:03Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-13T22:16:24Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-13T22:22:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-13T22:47:41Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-13T22:49:00Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-13T22:49:49Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-13T22:57:56Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-13T23:18:45Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-13T23:19:28Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-10-14T00:36:13Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-14T00:43:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Apologies, I wasn't able to get to a detailed review on this today. I have a few non-blocking comments on the `.rst` doc added here but, as they're non-blocking, I'd prefer to just submit a follow-up PR for folks to review. @rjzamora @ian-r-rose, unless I'm needed for something, I'll defer to you two as to when this PR is good to merge. ","2022-10-14T02:42:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-14T16:18:47Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-14T17:15:15Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","I'm happy with where this stands now, thanks for all your work on this @rjzamora!","2022-10-14T19:42:03Z",false,"APPROVED"
"phobson","CONTRIBUTOR","Thanks for the PR, @epizut. This looks good to me. ","2022-09-08T17:41:24Z",false,"APPROVED"
"jsignell","MEMBER","I think the original intent of the docstrings was types (like DataFrame vs Series), not dtype but I'm fine with the change.","2022-09-12T14:11:47Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Sorry to take so long to read through this @rjzamora! I'm very much in favor of the general approach you've taken here. I think that the relatively simple (one could say impoverished) set of metadata tracked on dask dataframes prevents a number of possible improvements, and it's due for a redesign.

Most of my comments are in the vein of trying to make an API that is difficult to get wrong, while retaining the richness that we want. I realize this is a POC, so excuse me if my comments are overly detailed, or are towards things that you deliberately decided to defer until later.","2022-09-26T21:38:03Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-27T15:46:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-27T17:18:50Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-27T17:23:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-08T00:44:00Z",false,"COMMENTED"
"ncclementi","MEMBER","LGTM, had only one comment for learning purposes. ","2022-09-15T19:21:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-15T21:28:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-15T21:30:04Z",false,"COMMENTED"
"mroeschke","CONTRIBUTOR","","2022-09-15T23:12:50Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","Nice change. I like this simplification","2022-09-07T14:20:47Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for reviewing @phobson! ","2022-09-07T15:10:06Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2022-09-07T15:19:48Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-09-07T21:14:10Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","Thanks for the PR. These warnings and tests are helpful","2022-09-07T22:54:52Z",false,"APPROVED"
"charlesbluca","MEMBER","","2022-09-08T16:23:01Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-09-12T18:12:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for working on this @jorisvandenbossche! 

Is there an upstream issue in `pyarrow` somewhere that we can track? It'd be good to know when we can remove this pin ","2022-09-06T16:41:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","@jorisvandenbossche would you mind moving the `libprotobuf` pin to [where we install the `pyarrow` nightly build in the `upstream` build](https://github.com/dask/dask/blob/ef34664a9f7ec477c2e311d968603edcdb0d1dd0/continuous_integration/scripts/install.sh#L10-L13)? That way the `libprotobuf` pin is colocated with the relevant section of code and the pin only happens in the `upstream` build where it's (temporarily) needed. Other than that this looks good to go. 

> I think the failures are mostly related to three changes in pandas:

Thank you for the nice summary and pointing to corresponding upstream threads @jorisvandenbossche -- that's useful ","2022-09-06T19:20:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jorisvandenbossche! I'll merge this after CI finishes

FWIW it looks like this has the unintended consequence of fixing the `libprotobuf` linking issue (though it's already been reported upstream in the conda-forge feedstock https://github.com/conda-forge/libprotobuf-feedstock/pull/128#issuecomment-1238531229)","2022-09-06T22:58:41Z",false,"APPROVED"
"fjetter","MEMBER","","2022-09-06T16:04:50Z",false,"COMMENTED"
"fjetter","MEMBER","","2022-09-06T16:09:28Z",false,"COMMENTED"
"fjetter","MEMBER","","2022-09-06T16:11:58Z",false,"COMMENTED"
"fjetter","MEMBER","Thank you @lukeconibear !","2022-09-06T16:12:10Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @lukeconibear! This is in ","2022-09-06T18:08:41Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-09-07T07:53:48Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @lukeconibear. One small question, but otherwise this looks good ","2022-09-08T15:34:00Z",false,"COMMENTED"
"lukeconibear","CONTRIBUTOR","","2022-09-08T19:43:06Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-08T20:05:58Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @lukeconibear! One small suggestion, but otherwise this looks good to go ","2022-09-06T18:56:51Z",false,"COMMENTED"
"lukeconibear","CONTRIBUTOR","","2022-09-06T19:28:14Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @lukeconibear! ","2022-09-07T01:26:41Z",false,"APPROVED"
"phobson","CONTRIBUTOR","Thanks for the PR! These changes look good to me.","2022-09-06T15:05:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @lukeconibear ","2022-09-08T15:54:23Z",false,"APPROVED"
"charlesbluca","MEMBER","","2022-09-09T15:28:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-09T15:36:59Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2022-09-09T15:45:37Z",false,"COMMENTED"
"lukeconibear","CONTRIBUTOR","","2022-09-09T18:33:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for working on this @lukeconibear. I left a few minor comments, but overall this looks good ","2022-09-06T18:33:18Z",false,"COMMENTED"
"lukeconibear","CONTRIBUTOR","","2022-09-06T19:16:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @lukeconibear! ","2022-09-07T01:28:13Z",false,"APPROVED"
"ncclementi","MEMBER","","2022-09-12T18:25:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-08T20:21:02Z",false,"COMMENTED"
"lukeconibear","CONTRIBUTOR","","2022-09-08T20:25:18Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for working on this @lukeconibear! ","2022-09-09T00:00:22Z",false,"APPROVED"
"rjzamora","MEMBER","Thanks @ian-r-rose !  I don't think I agree with the `split_every` analysis, but I definitely agree that the shuffle-based algorithm should be default for `split_out>1`.

>I expect this to conflict significantly with the proposed alternative in https://github.com/dask/dask/pull/9446

I wouldn't worry about that PR (I will most likely close it).  I'm not crazy about adding a new key-word argument to `aggregate` anyway :)","2022-09-02T13:33:33Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-02T13:55:37Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-02T13:59:07Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-02T14:04:45Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-02T14:09:39Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-02T14:26:34Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-02T15:31:14Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-02T16:12:40Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-02T16:14:41Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-02T17:00:54Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-02T18:19:11Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Just checking in here, it looks like there's good agreement -- is this safe to merge?","2022-09-02T22:11:39Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-06T13:44:35Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-06T15:59:37Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-09-13T15:49:56Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-09-13T15:54:57Z",false,"COMMENTED"
"rjzamora","MEMBER","LGTM - Thanks @ian-r-rose !","2022-09-13T16:03:42Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-09-01T23:40:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @douglasdavis! 

It looks like there are some failing tests related to using `read_csv`s `include_path_column` keyword

cc @martindurant for visibility ","2022-08-30T20:05:03Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! Automating column projection where possible would be great 👍 
","2022-08-30T15:13:59Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! ","2022-08-30T20:50:07Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-08-30T21:50:09Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Cool","2022-08-29T17:36:55Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-08-29T18:09:17Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-08-29T18:21:10Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-29T19:33:36Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-08-29T19:53:34Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-08-29T20:00:54Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @pavithraes @martindurant ","2022-08-29T15:52:35Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-08-30T11:08:54Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-30T15:38:03Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-08-30T18:31:42Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @pavithraes!","2022-09-02T00:24:18Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-08-25T16:57:45Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-08-30T18:30:25Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @pavithraes, this looks great!","2022-09-02T00:38:14Z",false,"APPROVED"
"gjoseph92","COLLABORATOR","Thanks for fixing this here too!","2022-08-25T15:21:51Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-08-25T20:43:14Z",false,"APPROVED"
"jsignell","MEMBER","Thanks for opening this PR @detrout! I think there is maybe just one typo.","2022-08-25T20:12:25Z",false,"COMMENTED"
"detrout","CONTRIBUTOR","","2022-08-25T20:31:31Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-09-12T20:47:48Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-09-13T12:50:43Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-09-13T12:52:00Z",false,"COMMENTED"
"martindurant","MEMBER","So question, do we actually want to remove this capability, reduce our API compliance with pandas? Can the problems with it not be fixed?

Also, do we want to include all the unrelated type and layout changes in this PR?

Same goes for the sorting with nulls. 

Finally, I would definitely remove all the xfails, rather than keep them around forever.","2022-10-02T02:41:23Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-10-11T12:21:10Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-10-11T12:29:56Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-10-11T12:31:39Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-10-11T12:32:43Z",false,"COMMENTED"
"martindurant","MEMBER","","2022-10-11T13:10:15Z",false,"COMMENTED"
"martindurant","MEMBER","","2022-10-11T13:11:53Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-10-11T13:19:58Z",false,"COMMENTED"
"martindurant","MEMBER","","2022-10-11T13:22:25Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @hayesgb, this seems like a reasonable workaround, but I was worried enough about the poor performance that I looked into it a bit more.

Serialization of long python collections isn't just slow, it's pathologically slow, and takes a huge amount of CPU. (When @pavithraes ran the reproducer, she saw a huge amount of garbage collection warnings). And it must be related to serialization, since no such behavior happens for a single-machine scheduler:

```python
import numpy as np
import distributed
import dask
import time

values = list(np.random.randint(2**30, size=1_000_000))

start = time.time()
dask.delayed(values, traverse=False).compute(scheduler=""threads"")
end = time.time()
print(end-start)  # 0.01 seconds
```
But with a distributed scheduler:

```python
import numpy as np
import distributed
import dask
import time

cluster = distributed.LocalCluster()
client = distributed.Client(cluster)

values = [1] * 1_000_000

start = time.time()
dask.delayed(values, traverse=False).compute()
end = time.time()
print(end-start)  # 37 seconds!
```

Furthermore, this isn't *just* due to `pickle.dumps` of the python objects. Serializing them directly with `pickle.dumps` just takes a fraction of a second:

```python
pickle.dumps(values)  # 0.026 seconds
```

I'm fairly certain that we are hitting https://github.com/dask/distributed/issues/6368 . In particular, the serialization framework isn't just serializing the list of values, but traversing that list (unnecessarily, IMO), and serializing *each value* independently. And if my list has things like `np.int64` objects in it instead of native python `int`s, things get slower by another factor of ~2!

So I think something along these lines is a good fix, but I also think that we might want to take a closer look at the serialization logic to see what is going so wrong.","2022-08-23T22:26:14Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @hayesgb, I think this looks like it's ready. Just looks like there is some stray debug code that should be deleted before merging.","2022-09-12T18:21:25Z",false,"COMMENTED"
"hayesgb","CONTRIBUTOR","","2022-09-13T10:57:04Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","> This should be a less expensive operation in the case when `is_dask_collection` is `True`, and as a generator, should be more memory efficient. By contrast `unpack_collections` requires iterating through the entire list regardless of its contents, unpacking and repacking the collections, and materializes both results.

Makes sense. `unpack_collections` would handle the case where there is a *nested* collection, which this approach would not, but that use-case is so niche that I think I would be comfortable moving forward with this.","2022-09-13T14:34:12Z",false,"APPROVED"
"gjoseph92","COLLABORATOR","","2022-08-23T00:10:48Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-08-24T14:43:27Z",false,"COMMENTED"
"jsignell","MEMBER","The `from_delayed` part of this looks really nice and clean!","2022-08-24T14:49:23Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-24T20:37:45Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-08-24T21:15:43Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-24T21:35:31Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-24T21:52:41Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","I must say, making `normalize_chunks` richer fills me with a lot of trepidation -- I already think it's an extremely difficult function to read and reason about, and I would not be at all surprised to find untested-but-valid combinations of the arguments that don't work.

I'm coming to this from the experience of spending a couple of evenings trying to add static type analysis here (and came up with some of the same additional `ValueErrors` that you found). I never wound up opening a PR, though:

https://github.com/dask/dask/compare/main...ian-r-rose:what-are-chunks?expand=1","2022-08-22T22:33:11Z",false,"COMMENTED"
"jsignell","MEMBER","I'm wondering if this could be split into several sub-functions like:

`_with_shape_and_chunks`, `_with_numblocks_and_chunks`, `with_shape_and_numblocks`, `_with_shape_and_numblocks_and_chunks`, `_with_just_chunks`.

I think what makes this function hard to parse is that it is so permissive that at every point you need to check that basically every field exists. ","2022-08-24T14:41:18Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks for looking into this @rjzamora!","2022-08-22T20:35:43Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-08-23T01:24:07Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-23T01:28:53Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-08-23T14:23:11Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-24T00:11:33Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-24T00:14:29Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-08-24T02:47:24Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-08-24T02:49:07Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @rjzamora!","2022-08-24T14:48:17Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-08-18T16:45:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora -- could you say a little more about the API breakage? ","2022-08-18T16:48:06Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-08-18T16:49:36Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-18T16:57:08Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-08-18T17:07:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-18T18:50:36Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-08-18T22:21:39Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks for tackling this @ian-r-rose - Nice work!

I made minor suggestions, but I do feel that your solution is clean-enough to merit a somewhat HLG-related change :)","2022-08-19T13:49:34Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-19T15:11:39Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-19T15:11:57Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-19T15:12:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-19T16:05:19Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-19T16:09:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-19T16:24:30Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-19T16:26:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-19T17:50:09Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-19T17:54:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-19T17:58:22Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-19T18:01:41Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-19T18:11:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose @rjzamora ","2022-08-19T20:23:07Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-08-17T15:49:30Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-08-17T15:52:10Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","Neat thanks I didn't know about this. Glad to see this in use so fast!","2022-08-17T17:40:54Z",false,"APPROVED"
"jsignell","MEMBER","This seems reasonable to me! I just wonder if if belongs in dask/compatibility.py rather than dask/utils.py","2022-08-17T14:07:42Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jacobtomlinson! 

Noting that the gpuCI failure 

```
09:49:43 E           MemoryError: Parquet data was larger than the available GPU memory!
09:49:43 E           
09:49:43 E           See the notes on split_row_groups in the read_parquet documentation.
09:49:43 E           
09:49:43 E           Original Error: std::bad_alloc
09:49:43 
09:49:43 /opt/conda/envs/dask/lib/python3.9/site-packages/dask_cudf/io/parquet.py:265: MemoryError
```

is unrelated to the changes here ","2022-08-17T15:36:05Z",false,"APPROVED"
"jsignell","MEMBER","This seems totally reasonable to me! Thanks for putting in this work @rcomer ","2022-08-17T13:44:35Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @pavithraes! ","2022-08-15T21:37:31Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-08-22T11:14:06Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2022-08-22T14:05:30Z",false,"COMMENTED"
"Zac-HD","NONE","👋 exciting to see this active again!

My best guess is that the `mypy` error is because [you're pinned to `mypy == 1.1`](https://github.com/dask/dask/blob/b2f11d026d2c6f806036c050ff5dbd59d6ceb6ec/.pre-commit-config.yaml#L47-L51) - the current version is 1.7, and has a _lot_ of bugfixes.","2023-11-13T01:12:17Z",false,"COMMENTED"
"jsignell","MEMBER","Seems sane to me!","2022-08-11T21:19:52Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-08-16T23:01:38Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @jrbourbeau ","2022-08-11T20:33:42Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @ncclementi.

One of these days, I think we should reconsider some of the policies around all of these backwards incompatibility checks, and probably phase some of them out. But this approach seems fine for now.","2022-08-08T23:46:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-09T13:40:04Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-08-09T14:17:06Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-08-09T14:36:30Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-08-09T14:57:21Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-08-09T15:12:27Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-08-09T15:14:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-09T15:16:48Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-09T18:48:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-09T19:35:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-09T19:46:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Alright, I think this is ready for another (possibly final) review pass. I opted to only forward only one of `how` or `thresh` in the underlying `map_partitions` call if one of them is specified (we raise an error early if both are specified). This will allow us to be more agnostic to the `pandas` version being used and also not break when operating on `cudf` DataFrames (I think). 

We should still push the conversation forward on https://github.com/dask/dask/issues/8645, but I don't think a conclusion there should block this PR. ","2022-08-10T18:54:14Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-08-11T16:23:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jyap-abc","2022-08-08T20:12:43Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-08T20:15:13Z",false,"COMMENTED"
"jyap-abc","CONTRIBUTOR","","2022-08-08T20:38:21Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-08T21:02:48Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @jjyap!","2022-08-08T23:14:57Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @hendrikmakait, I think this is a nice feature. Can we add similar functionality to `dask.base.unpack_collections`?","2022-08-08T18:48:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-09T14:29:52Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2022-08-09T17:04:02Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2022-08-10T12:31:47Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","LGTM, thanks @hendrikmakait!","2022-08-10T15:49:08Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2022-08-10T16:08:29Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-10T16:16:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR @ahmedibrhm! I'm curious what's motivating these changes. Is there an open issue you can link to? ","2022-08-17T20:45:49Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","This looks great, couple of small comments.","2022-08-08T11:25:43Z",false,"APPROVED"
"scharlottej13","CONTRIBUTOR","","2022-08-08T16:23:50Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-08-08T16:24:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @scharlottej13 for the updates and @jacobtomlinson for reviewing ","2022-08-08T20:27:15Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @jcrist!","2022-08-04T22:42:11Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @crislanarafael. I wasn't aware of `undoc-members`, so thanks for pointing that out. Instead of the current set of changes, I think we should add a new entry to the `LocalCluster` docstring for `memory_limit` as mentioned here https://github.com/dask/dask/issues/8224#issuecomment-1008733987","2022-08-04T18:32:56Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-08-05T15:25:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-16T18:59:52Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-08-17T13:19:38Z",false,"COMMENTED"
"dustinwerran2","NONE","","2022-08-17T14:20:35Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-08-04T13:22:20Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-08-04T13:23:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-04T17:04:02Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-08-04T18:07:59Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-08-04T18:08:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @pavithraes! Just a few final comments, overall this looks really close ","2022-08-04T21:24:46Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-08-05T12:03:14Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-08-05T12:17:32Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-08-05T12:33:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @pavithraes! This looks good to go

I pushed one small commit to change the `DeprecationWarning` we were raising to a `FutureWarning` as this warning is [meant for end users as opposed to developers](https://docs.python.org/3/library/warnings.html#warning-categories-1). Hope that's okay ","2022-08-05T14:55:59Z",false,"APPROVED"
"pavithraes","MEMBER","@ian-r-rose Thank you for working on this, and for including the above (super helpful!) explanation. I think this looks great!","2022-08-09T13:54:38Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-08-03T18:33:03Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @pavithraes! ","2022-08-11T18:12:10Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-08-11T20:34:21Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @pavithraes! ","2022-08-12T03:20:43Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-08-03T18:39:23Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks. I think this correctly captures the original intent of the test.","2022-08-03T19:18:07Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-08-03T13:52:15Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-08-03T14:37:50Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks for working on this @hendrikmakait! I'm a bit uncomfortable with the function mutating its inputs. This basically performs as expected for the case where we bail out when no embedded collections are found. But I'm finding things to be off when I try to actually have some embedded collections to traverse. So, let's say I have something like the following:

```python
from dataclasses import dataclass, replace
import dask
import time
import random

@dask.delayed
def op1(x):
    time.sleep(random.uniform(0,1))
    return replace(x, id=x.id+1, name = x.name + x.name)

@dask.delayed
def op2(x):
    time.sleep(random.uniform(0,1))
    return replace(x, id=x.id*3, name=x.name.title())

@dataclass
class MyClass:
    id: int
    name: str
    
x = MyClass(id=dask.delayed(1), name=dask.delayed(""me""))

results = dask.compute([op1(x), op2(x)], scheduler=""threads"")

print(results)
```

On `main`, this works, and results in `([MyClass(id=2, name='meme'), MyClass(id=3, name='Me')],)`

~~On this branch, it errors, as something seems to be off with the mutation logic:~~
~~I think the above error could likely be fixed, but even then, I would expect the above example to race due to the mutation.~~

(Edit, the original traceback was due to a typo in my example. I've fixed it, and it still behaves incorrectly, though the traceback is no longer relevant)

So I think that I would still prefer to go a route the (1) didn't mutate the inputs, and (2) allowed for frozen dataclasses (I think my original suggestion is one possible route). The cost, of course, is that we couldn't support dataclasses with custom inits that have embedded collections. But that is extremely niche, so I think I could live with it, especially if we could provide a useful error.","2022-08-05T18:38:07Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2022-08-08T08:57:19Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @hendrikmakait! I'm coming around to your view that we may want to deprecate traversing dataclasses all-together, but I'll move discussion around that to your new issue.","2022-08-08T18:23:35Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2022-08-08T18:58:47Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2022-08-09T08:29:21Z",false,"COMMENTED"
"hendrikmakait","MEMBER","","2022-08-09T08:37:48Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-09T18:44:33Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @hendrikmakait! This looks great","2022-08-09T18:46:13Z",false,"APPROVED"
"hendrikmakait","MEMBER","","2022-08-10T11:22:57Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Okay, I think this is close-to-ready for some eyes.

I've added a new set of dispatches for `numel` and `nannumel`, since we want different behaviors for different backends, and doing tricky hasattr checks was feeling unsustainable. I haven't touched cupyx or scipy.sparse yet, they are not really covered by the existing test suite. But the GPU CI bot seems reasonably happy with this.

I'd especially appreciate some thoughts from anyone on the @dask/gpu team as to whether this is likely to cause any problems for cupy.","2022-08-02T23:16:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose! Overall this looks great.

@jakirkham do you have any thoughts on Peter's comment here https://github.com/dask/dask/pull/9342#issuecomment-1204233492? 

It looks like this also closes https://github.com/dask/dask/issues/8280? ","2022-08-08T21:12:53Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-08T21:35:22Z",false,"COMMENTED"
"pentschev","MEMBER","","2022-08-09T18:12:09Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-09T18:15:02Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose, I'll plan to merge this tomorrow if there are no further comments on https://github.com/dask/dask/pull/9342#issuecomment-1204233492

> it seems more involved and may require actual work on the algorithm

I was just going off the reproducer in the OP passing with the changes in this PR ","2022-08-10T19:08:17Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose! ","2022-08-12T03:26:04Z",false,"APPROVED"
"jakirkham","MEMBER","","2022-08-12T06:35:42Z",false,"COMMENTED"
"pavithraes","MEMBER","Thanks, @jsignell!","2022-08-03T15:44:22Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-08-02T15:48:39Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell! ","2022-08-02T16:51:55Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-08-02T00:05:18Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Unfortunate, but let's get CI working. Thanks @jrbourbeau","2022-08-02T00:26:58Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @pavithraes! ","2022-08-01T20:37:59Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-08-01T20:58:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @pavithraes! Will merge after CI finishes. Note the unrelated `distributed` test failures are being handled over in https://github.com/dask/dask/pull/9337 ","2022-08-02T00:06:40Z",false,"APPROVED"
"rcomer","CONTRIBUTOR","","2022-07-30T13:46:41Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-08-02T21:39:17Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks for this work @rcomer! It looks really good. Just want to ping @pentschev to make sure that this doesn't have any repercussions for cupy (I don't think it does though) ","2022-08-02T21:39:28Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @Shadimrad! 

Also, I noticed this is your first code contribution to this repository. Welcome!","2022-07-28T22:27:53Z",false,"APPROVED"
"ncclementi","MEMBER","Leaving some small comments here, but this looks good!! 
@jsignell since you were involved originally in https://github.com/dask/dask/issues/6971 would you mind giving it a second look ","2022-07-28T17:41:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-02T15:23:28Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-08-02T15:42:14Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-07-27T21:59:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-07-28T00:25:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","In order to unblock CI in PRs and `main` I'll plan to merge this after CI finishes. The pinning introduced here seems relatively harmless 

EDIT: The one test failure is a known flaky test https://github.com/dask/dask/issues/8795","2022-07-28T00:26:52Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-07-27T18:52:10Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2022-07-28T00:57:01Z",false,"COMMENTED"
"douglasdavis","MEMBER","Now in the docs preview `dask.utils.apply` looks a bit underwhelming 🙃 :
<img width=""788"" alt=""Screen Shot 2022-07-28 at 9 18 39 AM"" src=""https://user-images.githubusercontent.com/3202090/181535383-9d19218e-e3e5-47f0-be22-f4e11516b201.png"">
What you have here for the .rst page:
```
In the example above:

- ``args`` should be a tuple (eg: ``(arg_1, arg_2, arg_3)``), and
- ``kwargs`` should be a dictionary (eg: ``{""kwarg_1"": value, ""kwarg_2"": value}``
```
Looks like a good start to a docstring

","2022-07-28T14:21:03Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-08-03T13:34:25Z",false,"APPROVED"
"jsignell","MEMBER","","2022-08-03T13:52:22Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2022-08-04T00:45:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @GenevieveBuckley! Hope you don't mind, I merged `main` to resolves some unrelated CI failures. 

cc @pentschev who is both a `cupy` and NEP-35 person ","2022-07-28T15:01:11Z",false,"COMMENTED"
"pentschev","MEMBER","","2022-07-28T20:18:22Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2022-08-03T07:50:56Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2022-08-03T07:53:05Z",false,"COMMENTED"
"pentschev","MEMBER","Looks good to me, thanks @GenevieveBuckley !","2022-08-03T13:18:49Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @GenevieveBuckley! I believe this information is already included [here](https://github.com/dask/dask/blame/7cea3ae7bb5b481b3b09b99b662a33574873eee4/docs/source/graphviz.rst#L116-L131). Perhaps there's a way we could make that more clear or prominent? ","2022-07-27T21:14:42Z",false,"COMMENTED"
"vietnguyengit","NONE","","2022-07-27T06:07:53Z",false,"APPROVED"
"vietnguyengit","NONE","","2022-07-27T06:12:27Z",false,"APPROVED"
"GenevieveBuckley","CONTRIBUTOR","","2022-07-27T06:26:19Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2022-07-27T06:28:32Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-07-28T15:59:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-07-28T22:24:59Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2022-08-03T03:13:50Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2022-08-03T03:37:43Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-08-03T14:28:06Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2022-08-04T00:02:13Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2022-08-04T00:26:49Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2022-08-04T00:37:16Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-08-04T13:28:51Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-08-04T13:30:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca. It looks like this is good to go -- is that correct? ","2022-07-27T16:40:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @pentschev! ","2022-07-26T18:52:44Z",false,"COMMENTED"
"pentschev","MEMBER","","2022-07-26T19:23:03Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @pentschev!

Note the non-gpuCI failures are unrelated to the code changes here (xref https://github.com/dask/dask/issues/9323). Merging as these tests are only run in the gpuCI build, which passed as expected ","2022-07-27T17:27:12Z",false,"APPROVED"
"jacobtomlinson","MEMBER","","2022-07-26T15:04:49Z",false,"COMMENTED"
"jsignell","MEMBER","This looks really good! I just tried to add a bit more about what we are currently doing. Love having this explicit!","2022-07-26T15:12:48Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-07-26T15:13:50Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-07-26T15:22:16Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-07-26T15:24:45Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2022-07-26T16:10:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-07-26T18:27:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-07-26T18:45:02Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-07-27T14:15:33Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-07-27T14:16:45Z",false,"COMMENTED"
"fjetter","MEMBER","","2022-08-10T14:06:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-22T20:32:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-22T20:38:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-22T20:39:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-22T20:46:01Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-08-23T13:42:13Z",false,"APPROVED"
"jacobtomlinson","MEMBER","","2022-08-23T14:01:59Z",false,"APPROVED"
"jrbourbeau","MEMBER","This looks great, thanks @jacobtomlinson! ","2022-07-26T14:27:11Z",false,"APPROVED"
"ncclementi","MEMBER","@ivojuroro this looks great thanks for making the docs better. We need someone that approves the gpuCI bot to run @charlesbluca would you mind? 

Once gpuCI finishes I'll merge this in. ","2022-07-26T15:52:54Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @rjzamora, this is looking great! I have some minor comments, but I think this looks mostly good-to-go.","2022-08-16T22:12:25Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-08-16T23:23:54Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-08-16T23:24:58Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-16T23:27:54Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-08-17T13:49:24Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-08-17T14:11:29Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-08-17T14:34:22Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-17T15:02:28Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-17T15:03:45Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks for all your work on this @rjzamora!","2022-08-17T17:00:26Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-07-18T22:14:54Z",false,"COMMENTED"
"pavithraes","MEMBER","Thank you, @jrbourbeau! This looks great!","2022-07-26T14:14:15Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-07-19T19:46:52Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-07-21T15:14:40Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @rjzamora! This looks good to me, and removes a painful failure mode","2022-08-01T22:49:57Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2022-07-18T18:59:23Z",false,"COMMENTED"
"dylanrstewart","CONTRIBUTOR","","2022-07-19T00:28:05Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-19T12:13:39Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-19T12:14:04Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-19T12:14:20Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-07-18T16:01:57Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-07-19T03:08:45Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-07-20T14:04:39Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-07-17T12:13:26Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-07-17T19:28:22Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-07-18T15:42:15Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-07-18T16:22:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @douglasdavis! Could you provide a bit more context around the motivation for adding this new feature? For example, was this based on user feedback? 

> Do we want to make `click` a hard dependency?

I don't have a strong opinion. I view `click` as a lightweight dependency that already being installed in a lot of cases (e.g. `pip install dask[complete]`, `conda install dask`), so if it makes other things more straightforward, I wouldn't object to adding it as a dependency  ","2022-07-18T19:17:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-07-20T15:47:34Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-07-20T15:55:57Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-07-21T03:58:51Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2022-08-17T13:22:17Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2022-08-17T13:24:59Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-08-23T15:01:59Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","This is generally looking great, thanks @douglasdavis.

I had a go at migrating `dask-ctl` over to this and it was pretty easy. https://github.com/dask-contrib/dask-ctl/pull/50

I left a couple of small comments but happy to coordinate the merging of this and dask/distributed#6735 when ready. Ping me on Slack if you want to sync up to do it.","2022-08-24T10:23:06Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-08-24T13:27:59Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-08-24T13:28:39Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","","2022-08-25T09:38:57Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2022-08-26T15:35:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Okay, all lingering review comments have been addressed. I think this PR, and the accompanying PR in `distributed` (xref https://github.com/dask/distributed/pull/6735), are both good to go. Thanks for your work here @douglasdavis ","2022-10-14T16:33:31Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-07-25T17:02:44Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-25T17:13:41Z",false,"COMMENTED"
"ncclementi","MEMBER","I reviewed this with @pavithraes, the PR looks good we just left a couple of comments and suggestions. ","2022-07-25T17:18:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @pavithraes! Could you add the ""should be replaced by the addresses of the
scheduler"" part back in? I think that helps avoid confusion. Otherwise, this looks good to go ","2022-07-15T18:40:54Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-15T19:10:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for quickly fixing @pavithraes ","2022-07-15T19:41:00Z",false,"APPROVED"
"rjzamora","MEMBER","This change looks good @TomAugspurger - Thanks for addressing this!","2022-07-15T13:50:19Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-07-14T16:33:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @pavithraes! ","2022-07-15T19:05:16Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-07-18T16:39:49Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-21T15:50:23Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-21T16:01:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-07-26T15:24:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @pavithraes! This is in 

Note the unrelated CI failure is due to a flaky test https://github.com/dask/dask/issues/8062","2022-08-02T16:56:22Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @timgates42! This is in ","2022-07-14T01:51:05Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @geraninam! Unfortunately, it looks like these changes will cause an implicit compute to happen when users use `da.min` / `da.max`. We would like to keep these methods lazy (i.e. no compute happens unless users explicitly call `.compute()`). Is there an existing issue for what problem this PR is solving? ","2022-07-13T20:46:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @dustinwerran2, that's good to know. Instead of computing chunksizes and deleting empty chunks, I'd recommend updating the reduction function being passed to `reduction` to be resilient to empty chunks. Something like that should allow us to keep these computation lazy ","2022-07-13T21:36:34Z",false,"COMMENTED"
"dustinwerran2","NONE","","2022-07-18T15:53:45Z",false,"COMMENTED"
"dustinwerran2","NONE","","2022-07-18T15:54:10Z",false,"COMMENTED"
"geraninam","CONTRIBUTOR","","2022-07-25T17:50:55Z",false,"COMMENTED"
"jsignell","MEMBER","This feels like an overly complicated solution to me. I would expect the change to look more like `nanmin`:

https://github.com/dask/dask/blob/c98fab7112e92c6455a1e840a0d0f8b6c7ddc55d/dask/array/reductions.py#L557-L583","2022-07-27T15:41:06Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @geraninam @dustinwerran2! Apologies for such a delayed response. This seems really close -- looking forward to seeing this merged. ","2022-08-01T20:14:15Z",false,"COMMENTED"
"dustinwerran2","NONE","","2022-08-01T20:38:49Z",false,"COMMENTED"
"geraninam","CONTRIBUTOR","","2022-08-02T00:07:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-02T00:08:42Z",false,"COMMENTED"
"geraninam","CONTRIBUTOR","","2022-08-02T00:14:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-02T00:16:11Z",false,"COMMENTED"
"geraninam","CONTRIBUTOR","","2022-08-02T13:55:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-02T15:30:37Z",false,"COMMENTED"
"geraninam","CONTRIBUTOR","","2022-08-02T17:16:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-08-05T00:35:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the updates @geraninam! This is looking really close -- looking forward to seeing this merged. There are two final missing pieces:

1. It looks like GPU tests are failing because we're now always creating NumPy arrays instead of CuPy arrays. I'm not able to test this locally (I don't have GPUs on my laptop) but I believe using our `array_safe` utility instead of `np.array` should fix this (cc @pentschev)

```diff
diff --git a/dask/array/reductions.py b/dask/array/reductions.py
index b135ecd10..630cb8b57 100644
--- a/dask/array/reductions.py
+++ b/dask/array/reductions.py
@@ -27,6 +27,7 @@ from dask.array.creation import arange, diagonal
 # Keep empty_lookup here for backwards compatibility
 from dask.array.dispatch import divide_lookup, empty_lookup  # noqa: F401
 from dask.array.utils import (
+    array_safe,
     asarray_safe,
     compute_meta,
     is_arraylike,
@@ -427,7 +428,7 @@ def min(a, axis=None, keepdims=False, split_every=None, out=None):
 def chunk_min(x, axis=None, keepdims=None):
     """"""Version of np.min which ignores size 0 arrays""""""
     if x.size == 0:
-        return np.array([], ndmin=x.ndim, dtype=x.dtype)
+        return array_safe([], x, ndmin=x.ndim, dtype=x.dtype)
     else:
         return np.min(x, axis=axis, keepdims=keepdims)

@@ -451,7 +452,7 @@ def max(a, axis=None, keepdims=False, split_every=None, out=None):
 def chunk_max(x, axis=None, keepdims=None):
     """"""Version of np.max which ignores size 0 arrays""""""
     if x.size == 0:
-        return np.array([], ndmin=x.ndim, dtype=x.dtype)
+        return array_safe([], x, ndmin=x.ndim, dtype=x.dtype)
     else:
         return np.max(x, axis=axis, keepdims=keepdims)
```

2. We need to add tests to `dask/array/tests/test_reductions.py` that ensure `min`/`max` now work on arrays with empty partitions. I suggest we make sure to cover the case where there's are some (but not all) empty partition in a Dask array as well as a completely empty array (we should check that we raise an error similar to NumPy in that case). ","2022-08-05T15:09:59Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @geraninam! This is in ","2022-08-05T21:08:14Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-07-13T19:20:45Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-07-13T19:22:14Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-07-14T15:09:51Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-07-14T15:38:36Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-07-14T15:47:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-07-14T16:33:36Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @rjzamora!","2022-07-15T23:38:44Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @pavithraes, this seems like a reasonable fix. Just for my own understanding, where does the ordering discrepancy originate from? ","2022-07-12T22:34:40Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @pavithraes!","2022-07-19T20:03:59Z",false,"APPROVED"
"jrbourbeau","MEMBER","Neat! Looking forward to seeing what comes out of this ","2022-07-12T21:40:41Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","My main motivation here was to play around with hypothesis. I think it is a useful tool to have in our test suite, especially for these tests.

It also has a neat feature where it can compare a function with a trusted implementation and verify that results come out the same. This would be really useful for ensuring that the dataframe API matches the Pandas API for example.

This PR was just intended to add `hypothesis` to the test tools and to write a couple of simple hypothesis tests that folks could copy/steal from in the future. So it's good to merge as-is if this is a direction we want to go in.","2022-08-10T12:52:27Z",false,"COMMENTED"
"pavithraes","MEMBER","This looks good to me, thank you @jrbourbeau!","2022-07-12T11:47:45Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @rjzamora ","2022-07-07T20:05:59Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-07-07T20:11:34Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-07-07T20:12:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-07-07T20:15:50Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-07-07T20:20:18Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-07-07T20:25:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-07-07T20:49:29Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-07-07T20:49:49Z",false,"COMMENTED"
"martindurant","MEMBER","","2022-07-11T13:48:43Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-07-12T19:04:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! This is in ","2022-07-12T21:42:01Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks for chasing this down @pavithraes!","2022-07-22T12:53:43Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell! Overall this looks good -- just left a few minor comments. While this PR is useful, I don't think it actually resolves https://github.com/dask/dask/issues/9223 as that issue was specifically concerned with `dask.dataframe.map_partitions` / `dask.DataFrame.map_partitions`. 

Also, FWIW, I like your idea of using a decorator for this (xref https://github.com/dask/dask/issues/9223#issuecomment-1169208059). Not saying we need to include it in this PR, but it would be nice to have a separate issue for that so we don't loose track of the idea ","2022-07-15T02:59:21Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-07-18T19:49:01Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-07-18T19:49:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-07-18T21:27:36Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-07-19T13:44:33Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-07-06T15:40:00Z",false,"COMMENTED"
"fbriol","CONTRIBUTOR","","2022-07-07T05:30:16Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-26T14:43:56Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-07-26T15:24:32Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-07-05T17:34:15Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-07-05T17:34:27Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-05T17:35:55Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-05T17:36:39Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-05T17:43:25Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-05T17:49:51Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-05T17:50:52Z",false,"COMMENTED"
"multimeric","CONTRIBUTOR","","2022-07-06T14:57:44Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-07-07T15:39:31Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-14T16:53:52Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-07-14T16:59:00Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-07-14T17:00:36Z",false,"COMMENTED"
"multimeric","CONTRIBUTOR","","2022-07-14T17:02:12Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-07-14T17:04:49Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-07-14T17:14:24Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-14T17:24:49Z",false,"COMMENTED"
"multimeric","CONTRIBUTOR","","2022-07-14T17:38:13Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-07-14T17:39:06Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-18T13:04:41Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @multimeric!","2022-07-21T15:48:12Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-07-05T15:16:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @pavithraes! It looks like we're currently warning when we shouldn't. Could we add a small regression test to make sure we don't emit a warning in that case with the changes here? ","2022-07-12T22:09:21Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-13T13:45:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @pavithraes! This is in ","2022-07-15T03:02:32Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2022-07-01T11:19:05Z",false,"COMMENTED"
"jsignell","MEMBER","This looks great! Really nice cleanup :)","2022-07-06T15:15:36Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-07-05T18:28:47Z",false,"COMMENTED"
"eriknw","MEMBER","","2022-07-05T22:19:30Z",false,"COMMENTED"
"pavithraes","MEMBER","Thank you for this PR, `@eriknw`!","2022-07-06T13:01:57Z",false,"APPROVED"
"fjetter","MEMBER","","2022-06-30T13:27:23Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-06-30T15:25:45Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-06-30T15:27:21Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-06-30T15:27:32Z",false,"COMMENTED"
"fjetter","MEMBER","","2022-06-30T15:35:01Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-07-01T10:53:54Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-07-05T18:06:00Z",false,"COMMENTED"
"jsignell","MEMBER","Looks good to me!","2022-07-06T17:48:23Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Sorry for the extremely late look at this @rjzamora! I had some comments sitting in GitHub and never clicked submit :/

I agree with your diagnosis of the issues with the existing behavior and docstring. I do wish that we could figure out a way to respect `npartitions` more often. I played around with this PR, and wasn't able to make `npartitions` give me the expected number in the presence of duplicates much at all:

```python
In [1]: from dask.dataframe.io.io import sorted_division_locations

In [2]: L = [""A"", ""A"", ""A"", ""A"", ""A"", ""B"", ""B"", ""C""]

In [3]: sorted_division_locations(L, npartitions=3)
Out[3]: (['A', 'B', 'C'], [0, 5, 8])
```","2022-07-19T22:30:07Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-07-21T01:08:29Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-07-21T01:11:00Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-07-21T01:14:05Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-07-21T01:15:58Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-07-21T01:16:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-07-21T01:25:57Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-07-21T01:26:43Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-07-21T03:33:25Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-07-21T14:43:33Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thank you for your patience on this @rjzamora!

I took a bit of a stochastic approach to trying this out, generating 10,000 random indexes with varying levels of duplication, and I wasn't able to make anything break:

```python
import string
import random

import dask.dataframe as dd
import pandas as pd
from dask.dataframe.core import check_divisions


def check_from_pandas(chunk: bool):
    idx = []
    for _ in range(100):
        idx.extend(random.randint(0, 10) * [random.choice(string.ascii_uppercase)])
    df = pd.DataFrame({""value"": range(len(idx))})  # , index=idx)

    if chunk:
        ddf = dd.from_pandas(df, chunksize=random.randint(1, 100))
    else:
        npartitions = random.randint(1, len(df.index.unique()))
        ddf = dd.from_pandas(df, npartitions=npartitions)
        if ddf.npartitions != npartitions:
            print(f""Failed to match partition count {npartitions}, {ddf.npartitions}"")

    try:
        check_divisions(ddf.divisions)
    except ValueError as e:
        print(e)


for i in range(10_000):
    check_from_pandas(False)
for i in range(100_000):
    check_from_pandas(True)
```

The implementation seems sound, if a bit complex (but it's trying to do a complex thing, so).","2022-08-03T21:59:42Z",false,"APPROVED"
"QuLogic","CONTRIBUTOR","","2022-08-14T02:58:13Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-08-15T14:55:16Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-08-15T15:56:00Z",false,"COMMENTED"
"QuLogic","CONTRIBUTOR","","2022-08-21T07:14:18Z",false,"COMMENTED"
"QuLogic","CONTRIBUTOR","","2022-10-17T00:10:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-10-17T15:34:26Z",false,"COMMENTED"
"QuLogic","CONTRIBUTOR","","2022-10-20T04:09:28Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2022-06-27T15:21:19Z",false,"APPROVED"
"jsignell","MEMBER","This seems reasonable to me! Thanks for the PR.","2022-06-24T14:14:38Z",false,"APPROVED"
"jsignell","MEMBER","This looks great! Thanks @faulaire!","2022-06-24T14:08:13Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-06-29T17:00:13Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Took a look at this with @pavithraes, and it looks good. Thanks!","2022-06-29T17:00:30Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2022-06-30T10:29:23Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks for this @tacaswell!","2022-06-22T17:27:39Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @benjaminhduncan  -- this is in

Also, I noticed this is your first code contribution to this repository. Welcome!","2022-06-21T17:16:20Z",false,"APPROVED"
"ncclementi","MEMBER","","2022-06-22T19:39:14Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-06-23T14:32:43Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-06-23T15:22:14Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-06-23T20:06:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @scharlottej13! This looks like a nice improvement

","2022-06-17T03:18:17Z",false,"APPROVED"
"scharlottej13","CONTRIBUTOR","","2022-06-17T15:44:24Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-16T17:57:41Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-06-22T20:19:50Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-06-23T21:19:59Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-06-23T21:43:45Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-06-23T21:52:03Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-06-24T14:59:36Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-28T17:57:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rrpelgrim! I see this is marked as a draft PR. Often this means someone is working on something but it may not currently be in a state were other people should take time to review. Is this PR where you would you like a review, or is that premature? ","2022-06-16T15:55:12Z",false,"COMMENTED"
"pavithraes","MEMBER","Thanks for this PR, @rrpelgrim! I looked at this with @ncclementi, and this is close!

[`test_ufuc_meta`](https://github.com/dask/dask/runs/6923280147?check_suite_focus=true#step:7:21928) is failing because it checks for docstring similarity with numpy, after removing the Dask specific disclaimers. It'll be tricky to include the `inconsistencies` in the disclaimer test because it's a parameter we pass to `derived_from`.

Taking a step back though, we probably don't want to always display ""Known inconsistencies: None"" because it might suggest that there are no inconsistencies. It'll be nicer to display it only if there are any inconsistencies included. The code we've suggested is implementing this, and they seem to work locally. :)

Also, the linting tests are failing, you can run the pre-commit hooks to fix that locally and then commit: https://docs.dask.org/en/stable/develop.html#code-formatting","2022-06-17T15:28:17Z",false,"COMMENTED"
"avriiil","CONTRIBUTOR","","2022-06-21T13:41:50Z",false,"COMMENTED"
"avriiil","CONTRIBUTOR","","2022-06-21T13:42:13Z",false,"COMMENTED"
"jsignell","MEMBER","This looks great! For posterity: here is what the docstring looks like rendered:

![image](https://user-images.githubusercontent.com/4806877/175098345-f449f330-ebb6-4f67-a761-7eb82bedfb51.png)
","2022-06-22T17:17:47Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @pavithraes! The fix looks good to me, I just have a suggestion to improve the test","2022-06-15T15:44:24Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-07-16T20:52:01Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","Looks great thanks @jrbourbeau ","2022-06-14T09:07:54Z",false,"APPROVED"
"jacobtomlinson","MEMBER","I'm also up for changing things. However, I do want to point out that ""10 minutes to ..."" is a trope that Pandas started and projects inspired by Pandas seem to follow.

https://pandas.pydata.org/docs/user_guide/10min.html
https://docs.rapids.ai/api/cudf/nightly/user_guide/10min.html
https://vaex.readthedocs.io/en/docs/tutorial.html
https://tutorial.xarray.dev/oceanhackweek-2020/xarray-oceanhackweek20.html
https://www.kdnuggets.com/2019/01/practical-apache-spark-10-minutes.html

I also note that other projects go for things like ""quickstart"" or ""absolute basics for beginners"".

https://numpy.org/doc/stable/user/absolute_beginners.html","2022-06-13T16:42:25Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-06-17T21:40:05Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-06-20T18:52:26Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-06-21T21:30:20Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-06-22T18:01:10Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-06-22T18:14:07Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-06-23T18:50:19Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-06-23T20:03:22Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-06-23T20:35:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rrpelgrim! Overall this looks good, just a couple of small points below","2022-06-09T19:56:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rrpelgrim, this is in 

Also, I noticed this is your first code contribution to this repository. Welcome!","2022-06-13T17:07:56Z",false,"APPROVED"
"jcrist","MEMBER",":+1: ","2022-06-09T20:18:33Z",false,"APPROVED"
"jrbourbeau","MEMBER","> Historically we've found that it's better not to copy these.
   We've been doing this in Dask libraries for some time now.

FWIW this seems to be true for `distributed` but not other projects like [`dask-cloudprovider`](https://github.com/dask/dask-cloudprovider/blob/e49944a88bde5816143937581b8317c9153b8bf7/dask_cloudprovider/config.py#L35), [`dask-jobqueue`](https://github.com/dask/dask-jobqueue/blob/58e0ce2111e74484dca4e2469698bbe68a2240b2/dask_jobqueue/config.py#L7), and [`dask-kubernetes`](https://github.com/dask/dask-kubernetes/blob/7c6b8aa4e6033ecce99d0a40a6c6dfe7890667ed/dask_kubernetes/config.py#L10). They're still all using `ensure_file` 

IIUC this means `ensure_file` is no longer being used anymore (or not longer recommended for use). If that's the case, I'd like to deprecate and eventually remove `ensure_file` too ","2022-06-08T20:53:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Nice work, thanks @jcrist. I can confirm this also resolves the example posted in the original issue ","2022-06-07T17:07:52Z",false,"APPROVED"
"charlesbluca","MEMBER","Can you give a minimal reproducer of the dask-cudf failure itself? Might help to add a gpuCI test in this PR to ensure that a breaking change like this isn't made in the future","2022-06-07T13:35:13Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-06-07T14:11:17Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2022-06-07T14:49:32Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2022-06-07T15:11:21Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2022-06-07T15:12:08Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-06-07T16:11:38Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-06-07T16:11:41Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2022-06-07T16:13:29Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2022-06-07T16:14:52Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2022-06-07T16:18:01Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-06-07T17:43:07Z",false,"APPROVED"
"jsignell","MEMBER","nice one :)","2022-06-07T14:44:14Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @scharlottej13! 

> Does anyone know if these logos were used outside this docs page? I didn't see any mention elsewhere in dask/dask.

There's also the marketing.dask.org page. See https://marketing.dask.org/en/latest/logos.html for the section about logos. 

> I don't think we have an updated equivalent for with padding (they are all ""no pad""). Will this be an issue?

My sense is this won't be a big issue. But cc @jacobtomlinson @jsignell for thoughts ","2022-06-06T19:57:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the info @scharlottej13. I opened https://github.com/dask/marketing/issues/13 to see if we should go ahead and archive the `dask/marketing` repo then.

I left one minor comment, otherwise this looks good to go ","2022-06-06T20:56:36Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-06-06T21:23:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-06-07T01:45:50Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-06-07T14:13:08Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-06-07T14:58:09Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-06-07T16:17:50Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","I think ultimately we need to get the designers to add the logos to the style guide page on the main website and then redirect this docs page over there.

But this is nice to have in the meantime.","2022-06-07T16:19:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @scharlottej13. Merging as the docs build has finished and the changes here don't impact tests ","2022-06-07T16:31:21Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-06-06T15:00:16Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","LGTM, thanks @rjzamora ","2022-06-06T19:57:50Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @rjzamora for the fix and @ian-r-rose for reviewing ","2022-06-06T20:02:06Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-06-03T14:02:12Z",false,"COMMENTED"
"Alex-JG3","CONTRIBUTOR","","2022-06-03T15:15:40Z",false,"COMMENTED"
"quasiben","MEMBER","","2022-06-03T16:23:06Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-06-03T16:39:49Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2022-06-08T09:29:46Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2022-06-08T09:34:39Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-06-08T18:14:35Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2022-06-08T18:25:56Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks @madsbk! This change makes sense to me, and the test failure seems unrelated. ","2022-06-14T13:45:06Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-06-02T02:04:58Z",false,"COMMENTED"
"quasiben","MEMBER","","2022-06-06T15:59:12Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-06-06T17:15:03Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose -- this is looking good ","2022-06-06T17:34:18Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-06-06T17:39:02Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-06-06T17:40:27Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-06-06T17:41:38Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-06-06T17:42:29Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-06-06T17:42:57Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-06-06T17:44:01Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-06-06T17:46:27Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-06-06T17:49:41Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-06-06T17:52:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for your work on this @ian-r-rose! The changes here look like a nice addition to me. I'll plan to merge this in tomorrow unless other have feedback (cc @rjzamora @martindurant as you might enjoy looking at this)","2022-06-07T21:37:32Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose. Happy to give this a try, but it would be good to get a couple other CI runs to pass just to have a bit more confidence that this fixes things. Just pushed up an empty commit to see if things are green again ","2022-06-01T22:08:00Z",false,"APPROVED"
"jakirkham","MEMBER","LGTM. Seems like the next run still passed. Anything else we want to do here?","2022-06-02T23:38:54Z",false,"APPROVED"
"jcrist","MEMBER","Thanks Tom!","2022-06-01T13:49:26Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @cakiki 

Also, I noticed this is your first code contribution to this repository. Welcome!","2022-06-01T00:29:27Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @pavithraes! The fix looks good to me, just a couple of minor suggestions on the test","2022-06-01T16:07:48Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-02T13:11:21Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-02T13:15:51Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","LGTM, thanks @pavithraes ","2022-06-02T23:17:39Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @pavithraes -- this is in","2022-06-06T19:22:32Z",false,"APPROVED"
"jorisvandenbossche","MEMBER","","2022-05-31T18:15:27Z",false,"APPROVED"
"jcrist","MEMBER",":+1:","2022-05-31T18:16:24Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-06-01T17:08:32Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-01T17:09:55Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-01T17:10:21Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-01T17:13:31Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-01T17:20:42Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-01T17:22:22Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-01T18:20:50Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-01T18:32:12Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-01T18:43:09Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-01T18:48:36Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-01T18:50:19Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-01T19:01:41Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-02T12:44:12Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-02T12:44:48Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-02T12:45:40Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-02T12:47:28Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-02T12:48:21Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-02T12:54:03Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-02T12:56:09Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-02T13:00:13Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-02T13:07:58Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-06T16:18:47Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-06T16:22:45Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-06T16:24:25Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-06T16:25:25Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-06T16:51:21Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-06-06T17:02:52Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-09T10:07:44Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-09T10:15:08Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-09T10:15:50Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-09T10:20:36Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-09T10:20:49Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-09T10:21:12Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-09T11:06:03Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-09T11:08:05Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-10T17:21:18Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-10T17:51:58Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-11T14:34:33Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-16T13:39:59Z",false,"COMMENTED"
"rjzamora","MEMBER","This is looking really nice @faulaire - Thanks for the work!

Only noticed a couple of minor things.","2022-06-23T15:59:05Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-24T13:25:57Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-06-24T13:40:21Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-06-24T20:14:22Z",false,"COMMENTED"
"rjzamora","MEMBER","LGTM - Thanks @faulaire !","2022-06-29T19:07:33Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @SultanOrazbayev! Overall this looks like things are moving in the right direct

Instead of adding a new module, could you just add `show_versions` to `dask/utils.py`? This is a relatively small utility that I don't think merits its own module ","2022-05-31T17:13:54Z",false,"COMMENTED"
"jsignell","MEMBER","Weird issue, but I tried this out locally and it is giving a different version than `dask.__version__`

```python
In [1]: import dask
   ...: from dask.utils import show_versions

In [2]: show_versions()
{
  ""Python"": ""3.9.10"",
  ""Platform"": ""Linux"",
  ""dask"": ""2022.4.0"",
  ""distributed"": ""2022.4.0"",
  ""numpy"": ""1.22.3"",
  ""pandas"": ""1.4.2"",
  ""cloudpickle"": ""2.0.0"",
  ""fsspec"": ""2022.1.0"",
  ""bokeh"": ""2.4.2"",
  ""fastparquet"": ""0.8.0"",
  ""pyarrow"": ""6.0.1"",
  ""zarr"": ""2.10.3""
}
In [3]: dask.__version__
Out[3]: '2022.05.2+10.g0b9963154.dirty'
","2022-06-07T15:52:42Z",false,"COMMENTED"
"jsignell","MEMBER","This looks great! Thanks @SultanOrazbayev for sticking with this!","2022-06-24T14:05:25Z",false,"APPROVED"
"jorisvandenbossche","MEMBER","","2022-05-31T11:24:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @galipremsagar. The changes here LGTM, I merged `main` to resolve some unrelated test failures ","2022-05-27T19:58:33Z",false,"APPROVED"
"jcrist","MEMBER","Agreed that we should work to better decouple these tests from distributed's internal test infrastructure, but since this fixes the failures it seems good to me. Merging.","2022-05-27T19:31:02Z",false,"APPROVED"
"rjzamora","MEMBER","Thanks for working through this @jcrist !

I definitely +1 on this change. The previous `schema=“infer”` option was a bit of a misnomer (`schema=“sample”` would have been more accurate), and it didn’t do much (anything?) to prevent schema-mismatch errors. I think it makes sense to use the non-empty metadata by default, and simply do a better job of pointing the user towards a “proper”  `schema=` argument when this goes wrong.","2022-05-26T19:37:08Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @jcrist, this looks good to me. Any time we can remove eager computation, I'm in favor.","2022-05-26T20:05:34Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-05-26T20:16:27Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-05-26T20:17:07Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-05-26T20:18:51Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-26T20:41:05Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-05-26T20:56:58Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-26T21:01:59Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-26T21:17:28Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-06-01T16:25:23Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-06-02T13:35:06Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","This looks good to me, thanks @pavithraes!","2022-06-02T23:16:29Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-05-26T11:28:17Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-05-26T20:27:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for working on this @scharlottej13! A few small comments, but overall this looks good","2022-05-26T22:06:41Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-05-26T22:09:07Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-05-26T22:09:51Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-05-26T22:12:58Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @scharlottej13 -- this is in","2022-05-26T23:36:05Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-05-27T10:51:37Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-05-27T15:37:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @pavithraes! @martindurant do you have a moment to look at this? ","2022-05-25T21:04:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @pavithraes! ","2022-05-26T16:03:02Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @ryanrussell -- this is in

Also, I noticed this is your first code contribution to this repository. Welcome!","2022-05-25T01:44:28Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-05-24T15:33:12Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-05-24T15:37:57Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-24T15:41:23Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2022-05-24T15:54:09Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-05-24T16:33:29Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-05-23T19:12:04Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-05-23T19:16:31Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-05-23T19:19:37Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-05-23T19:21:12Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-05-23T19:22:26Z",false,"COMMENTED"
"douglasdavis","MEMBER","Thanks a lot for laying out your plan, @rjzamora! It definitely makes things a bit easier to follow. Chiming in with some small typing comments here now, and still doing a bit more digesting","2022-05-23T21:25:31Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-05-23T21:28:36Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-23T22:37:15Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-24T21:05:19Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-05-24T22:10:03Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-25T17:01:12Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-05-26T12:52:21Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-26T23:51:58Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-05-27T00:28:31Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-05-27T00:29:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-05-27T00:29:55Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-05-27T00:30:56Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-05-27T01:18:11Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-27T16:25:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-05-22T21:28:29Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @mrocklin, this seems like a nice improvement to me (cc @jacobtomlinson who, I think, is using this utility in other projects). Could you add a couple of small tests to make sure this is working as expected? ","2022-05-23T14:59:23Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2022-05-24T09:11:36Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","This seems great to me.","2022-06-13T16:45:35Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-06-13T16:52:17Z",false,"APPROVED"
"jcrist","MEMBER","","2022-05-24T16:01:34Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @musicinmybrain -- cc'ing @jakirkham in case he has thoughts. Should we also include this in [MANIFEST.in](https://github.com/dask/dask/blob/main/MANIFEST.in)?","2022-05-23T19:13:53Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-05-23T20:37:44Z",false,"COMMENTED"
"jakirkham","MEMBER","LGTM. Thanks Ben! 😄","2022-05-23T20:38:01Z",false,"APPROVED"
"jakirkham","MEMBER","","2022-05-23T20:38:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @musicinmybrain @jakirkham -- I can confirm both license files are present in the package build with the changes in this PR. Will merge after CI finishes ","2022-05-23T21:00:40Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @musicinmybrain. Alternatively, I wonder if we could instead not rely on importing the `pandas` test suite. Looking at our existing tests, it appears we only ever import from `pandas.test` here https://github.com/dask/dask/blob/4c0cdfdbdb013cc57cd702c8d79b52f37203f8f3/dask/dataframe/tests/test_extensions.py and our actual usage is pretty minimal -- we just want some extension array objects and dtypes (in this case `DecimalArray`, `DecimalDtype`). I wonder if there is an extension arrary / dtype we can import directly from `pandas`?","2022-05-23T22:18:15Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","I'm happy with this change, it seems harmless enough, and more correct from a downstream consumption perspective.

I also think it's okay to import the pandas testing extension dtypes -- their implementation isn't trivial, and it's kind of nice to use the pandas test suite as a source of truth for what an extension dtype looks like.

Thanks @musicinmybrain!","2022-07-22T14:25:17Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @musicinmybrain! 

> I also think it's okay to import the pandas testing extension dtypes -- their implementation isn't trivial, and it's kind of nice to use the pandas test suite as a source of truth for what an extension dtype looks like.

Totally agree that importing from `pandas` is preferred over implementing our own extension dtype. I mostly just wanted to communicate that it would be nice if we could do such an import from `pandas` instead of the `pandas` test suite (`pandas.test`) as that would make it so we don't need `pandas[test]`. Either way, I agree with you that the changes here seem harmless and better reflect what we're currently doing in our own test suite. ","2022-07-26T15:12:22Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-05-20T17:33:01Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-05-20T17:36:00Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-05-20T22:54:04Z",false,"COMMENTED"
"faulaire","CONTRIBUTOR","","2022-05-20T23:01:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-06-01T00:35:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @faulaire -- this is in 

Also, I noticed this is your first code contribution to this repository. Welcome!","2022-06-01T00:36:58Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @jcrist ","2022-05-19T22:10:14Z",false,"APPROVED"
"jcrist","MEMBER","","2022-05-19T18:58:40Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-05-19T15:56:52Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-19T15:57:23Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-05-19T16:07:49Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-19T16:34:32Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-05-19T18:58:23Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @jcrist ","2022-05-19T20:40:58Z",false,"APPROVED"
"jcrist","MEMBER","Agreed that it'd be nice to rip all this out in favor of just using pickle, but the temporary fix makes sense to me and seems unlikely to cause issues elsewhere.","2022-05-19T16:27:12Z",false,"APPROVED"
"pavithraes","MEMBER","Thanks, @scharlottej13! Looks great!","2022-05-18T12:30:21Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the updates @scharlottej13. I'm curious if the page title updates have SEO implications, or if the meta tag is the primary thing we're after. I ask because I have a slight preference for the original title as it's more compact and conveys, I think, the same information ","2022-05-18T19:01:26Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-05-18T19:22:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-05-18T19:29:42Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-05-18T20:20:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-05-18T20:32:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @scharlottej13! ","2022-05-18T20:32:50Z",false,"APPROVED"
"scharlottej13","CONTRIBUTOR","","2022-05-18T20:40:02Z",false,"COMMENTED"
"jcrist","MEMBER","Assuming the docs build and render properly, this seems mostly fine to me. Just one small nit.","2022-05-19T15:48:58Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-05-19T16:08:37Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-05-19T16:14:28Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for filing the upstream issue @jorisvandenbossche. As a temporary workaround, what if we use `mamba search` to get the latest `pyarrow` nightly release version (similar to what we do over in `distributed` [here](https://github.com/dask/distributed/blob/41ecbca2f94f029ebcbcaa1bbe5ae059e4858865/.github/workflows/conda.yml#L50-L54))? Something like (the code below is untested):

```bash
# Workaround for https://github.com/mamba-org/mamba/issues/1682
arr=($(mamba search --override-channels -c arrow-nightlies pyarrow | tail -n 1))
export PYARROW_VERSION=${arr[1]}
mamba install -y -c arrow-nightlies ""pyarrow=$PYARROW_VERSION""","2022-05-18T18:49:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jorisvandenbossche! ","2022-05-19T17:31:41Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-05-17T12:05:12Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @scharlottej13! ","2022-05-18T16:29:23Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-05-18T21:54:22Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-05-18T22:08:57Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-05-17T20:15:06Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-17T21:08:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose! This is cool to see. I'm not very familiar with the interactive-Jupyter-graph-visualization space -- are there other packages we should be considering? 

Another benefit I of adding a `cytoscape` engine is it helps avoid some of the pain around installing the system `graphviz` package","2022-05-17T21:49:51Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-17T21:54:04Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-17T21:54:39Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-17T21:57:26Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-17T21:57:38Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-17T21:59:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-05-17T22:05:01Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-05-17T22:40:35Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","This is awesome. I love the implementation because it doesn't close us off from alternatives in the future. I also like that the default is configurable, really neat!

The only thing I would say this PR needs is some docs.","2022-05-18T09:35:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-05-19T21:33:53Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-19T21:45:01Z",false,"COMMENTED"
"jrbourbeau","MEMBER","One last comment -- apologies for not noticing before ","2022-05-20T19:28:01Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-20T19:34:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose ","2022-05-24T15:52:28Z",false,"APPROVED"
"ParticularMiner","CONTRIBUTOR","","2022-05-14T09:09:10Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-05-16T07:03:59Z",false,"COMMENTED"
"jakirkham","MEMBER","Thanks @ParticularMiner! 😄

Generally this seems reasonable. Had a few comments and questions below","2022-05-16T22:32:59Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-05-17T06:43:40Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-05-17T09:38:30Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-05-17T10:08:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-05-17T18:11:20Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-05-17T18:24:18Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-05-17T18:30:01Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-05-17T18:33:12Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-05-17T18:34:15Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-05-17T18:34:27Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-05-17T18:37:06Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-05-17T18:48:03Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-05-17T19:03:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-05-17T19:08:01Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-05-17T20:39:50Z",false,"COMMENTED"
"jakirkham","MEMBER","LGTM. Thanks for all the hard work @ParticularMiner! 😄","2022-05-17T20:40:13Z",false,"APPROVED"
"jakirkham","MEMBER","Added a couple suggestions below to fix the lint failure on CI","2022-05-17T20:42:34Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-05-17T20:46:34Z",false,"APPROVED"
"jakirkham","MEMBER","Sorry had one last idea below","2022-05-17T21:02:45Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-05-17T21:08:10Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-05-17T22:38:35Z",false,"APPROVED"
"jakirkham","MEMBER","","2022-05-18T06:40:38Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-05-19T15:29:38Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-05-19T16:29:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-05-19T16:41:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-05-19T18:16:05Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-05-19T18:26:29Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-05-19T20:26:08Z",false,"APPROVED"
"jrbourbeau","MEMBER","Just checking in here. I see this is marked as a draft PR -- @charlesbluca would you like a review or are there additional changes you'd like to push up first? ","2022-05-18T20:12:13Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-05-19T15:43:38Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-05-19T17:26:57Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @GenevieveBuckley ","2022-05-18T19:45:17Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-05-20T14:36:18Z",false,"COMMENTED"
"jsignell","MEMBER","This looks nice and clean but I don't actually see any dependency information in the output. Is it possible that that information isn't actually available until the graph is materialized @gjoseph92?","2022-06-03T15:22:42Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-06-03T15:48:06Z",false,"COMMENTED"
"aomirolis","CONTRIBUTOR","","2022-06-06T18:48:37Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-06-07T14:22:01Z",false,"COMMENTED"
"aomirolis","CONTRIBUTOR","","2022-06-08T22:31:04Z",false,"COMMENTED"
"jsignell","MEMBER","This looks great! Thanks @aomirolis for sticking with it!","2022-06-09T21:00:57Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","LGTM, thanks @rjzamora ","2022-05-17T19:07:42Z",false,"APPROVED"
"wence-","CONTRIBUTOR","","2022-05-16T11:51:25Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-05-16T14:56:38Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks for writing this up @rjzamora, it's really helpful to have something concrete to look at. I'm still digesting this, and haven't really looked much at the compatibility layer or visitor pattern, so my comments/questions are mostly around the API for operations.

Things I like:
1. Having an operation know about it's own dependencies seems like a huge improvement to me.
2. Having an operation know about `divisions`, `npartitions`, etc also seems like a good choice. I wonder if we might also add a `collection_type` that could be `DataFrame`, `Series`, or `Scalar`. That might be too leaky of an abstraction, but I also see that it's somewhat fiddly to reason about what the ""output"" type of an operation currently is.
3. I'm a bit sad to see the `Mapping` interface go, but overall this does look simpler than the status quo.
4. It's fewer lines of code than I expected!

My main concern is around writing down some sort of contract for how these operations work. I'm curious if you think it would be helpful to (1) enforce some sort of immutability on `Operations` to force ""replays"" of things to always go through `regenerate()`, and (2) write down a semi-strict `Protocol` for the interface. I always like operating under some constraints like those, and find it really helpful when both implementing and designing interfaces.","2022-05-17T23:41:18Z",false,"COMMENTED"
"wence-","CONTRIBUTOR","A few more minor comments/thoughts on read-through","2022-05-18T10:16:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-05-18T15:27:26Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-05-18T15:30:08Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-05-18T15:30:59Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-05-18T15:32:38Z",false,"COMMENTED"
"dhirschfeld","NONE","","2022-05-19T01:02:01Z",false,"COMMENTED"
"jsignell","MEMBER","Looks good to me! ","2022-05-12T20:16:37Z",false,"APPROVED"
"jcrist","MEMBER","","2022-05-19T15:39:33Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @brandon-b-miller 

> I am happy to add these tests, but can they be part of this PR itself without creating a chicken and egg situation?

Is it possible to point to that `cudf` PR with a `pip install` like we do for `distributed` here? 

https://github.com/dask/dask/blob/98dac638994c4140d77fea740d7211be262073e8/continuous_integration/gpuci/build.sh#L40-L41","2022-05-17T22:03:38Z",false,"COMMENTED"
"brandon-b-miller","CONTRIBUTOR","","2022-05-18T20:19:17Z",false,"COMMENTED"
"brandon-b-miller","CONTRIBUTOR","","2022-05-18T20:19:49Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2022-05-19T20:30:17Z",false,"APPROVED"
"rjzamora","MEMBER","Thanks for submitting this @MrPowers! I think this fix (and new default) make perfect sense.

However, since we are changing the default output, it might be nice to find a way to ""inform"" users of this change without adding too much noise. Perhaps we can add a detailed error message on the read side when `read_pandas` fails to discover any files (and the `urlpath` input ends in `part`).

For example:

```python
def make_reader(reader, reader_name, file_type):
    def read(
        urlpath,
        blocksize=""default"",
        lineterminator=None,
        compression=""infer"",
        sample=256000,
        sample_rows=10,
        enforce=False,
        assume_missing=False,
        storage_options=None,
        include_path_column=False,
        **kwargs,
    ):
        try:
            return read_pandas(
                reader,
                urlpath,
                blocksize=blocksize,
                lineterminator=lineterminator,
                compression=compression,
                sample=sample,
                sample_rows=sample_rows,
                enforce=enforce,
                assume_missing=assume_missing,
                storage_options=storage_options,
                include_path_column=include_path_column,
                **kwargs,
            )
        except OSError as err:
            if urlpath.endswith(""part""):
                raise OSError(
                    f""WARNING: The default file extension used in to_csv ""
                    f""has changed from '.part' to '.csv'. Please check your ""
                    f""file names.\n\n""
                    f""Original Error: {str(err)}""
                )
            else:
                raise err
```

@jrbourbeau - Does this seem reasonable?","2022-05-13T14:49:14Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-05-19T20:37:06Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Sorry to let this languish @MrPowers! 

Do you have thoughts about whether to implement @rjzamora's suggested user warning about the change?","2022-06-07T20:37:36Z",false,"COMMENTED"
"pavithraes","MEMBER","Thanks, @ParticularMiner! Looks good to me. :)","2022-05-12T13:05:39Z",false,"APPROVED"
"fengsp","NONE","","2022-05-12T03:38:10Z",false,"COMMENTED"
"eriknw","MEMBER","","2022-06-29T17:14:23Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2022-05-11T01:02:53Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-05-11T16:52:16Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-05-11T17:17:46Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks Doug!","2022-05-10T14:30:26Z",false,"APPROVED"
"jsignell","MEMBER","","2022-05-10T14:53:00Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-05-10T15:09:15Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-05-10T15:18:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jakirkham! I'm curious, did you run into a use case where this was needed? ","2022-05-10T21:19:42Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-05-10T22:35:11Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-05-10T22:39:06Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-05-11T04:01:58Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-05-11T15:12:55Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @fengsp! As @pavithraes mentioned, adding a test would be great. @eriknw this may be something you'd be interested in looking at ","2022-05-11T15:55:25Z",false,"COMMENTED"
"jakirkham","MEMBER","LGTM. Thanks Doug! 😄","2022-05-06T23:17:30Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-05-06T21:07:52Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2022-05-06T21:16:48Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-06T21:18:05Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-05-10T01:53:28Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-05-10T01:54:21Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-10T22:38:25Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-10T22:38:57Z",false,"COMMENTED"
"tiran","NONE","","2022-05-12T09:51:01Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-12T17:04:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for working on this @ian-r-rose. I still need to take a more detailed look at the changes here, but from a cursory look I don't see any tests. I'm not familiar with `pyodide` -- is it straightforward to add tests that make sure things are working as expected? ","2022-05-31T15:00:16Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-06-09T18:31:45Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-06-09T18:41:59Z",false,"COMMENTED"
"jakirkham","MEMBER","Added some suggestions below on handling the `get` logic","2022-06-10T05:16:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose -- apologies for the delayed response ","2022-06-14T15:26:25Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-06-15T15:48:08Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-06-15T15:49:18Z",false,"COMMENTED"
"jakirkham","MEMBER","Had a couple small follow up suggestions based on the last change","2022-06-15T19:40:28Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-06-15T20:04:55Z",false,"COMMENTED"
"jakirkham","MEMBER","LGTM

We should keep an eye on CI for a few days to seem if any of the keyword renames in functions cause any issues (though probably not)","2022-06-15T20:08:14Z",false,"APPROVED"
"jcrist","MEMBER","","2022-05-27T19:14:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jakirkham -- LGTM","2022-05-06T20:07:36Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-05-26T20:09:39Z",false,"COMMENTED"
"jcrist","MEMBER","LGTM, thanks @rjzamora!","2022-05-27T19:25:25Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-05-05T19:11:42Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-05-05T19:12:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-05-05T19:47:48Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-05-05T22:19:31Z",false,"COMMENTED"
"jcrist","MEMBER","LGTM, thanks @jrbourbeau!","2022-05-05T22:20:51Z",false,"APPROVED"
"jrbourbeau","MEMBER","![Screen Shot 2022-05-05 at 1 34 06 PM](https://user-images.githubusercontent.com/11656932/166997381-3db24fba-bb79-467d-b87f-a5725d201fa0.png)
","2022-05-05T18:37:29Z",false,"APPROVED"
"jcrist","MEMBER","Thanks @erayaslan. I gave this a skim and left some high level comments. @jakirkham or @pentschev, could you give this a review?

One concern - as far as I can tell, numpy has not deprecated `RandomState`. If their intent is that both implementations will be around for a long time, it would be good to reduce the code duplication between the `Generator` and `RandomState` implementations. If this is tricky to do without complicating things, don't worry about it.","2022-05-11T16:05:53Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-05-12T16:53:44Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-05-12T16:54:52Z",false,"COMMENTED"
"pentschev","MEMBER","I had a brief look but not in too much detail, it does look good and I'm quite pleased to see that CuPy was thought of here too, thanks so much @erayaslan !","2022-05-12T20:14:29Z",false,"APPROVED"
"erayaslan","CONTRIBUTOR","","2022-05-13T15:02:28Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-05-16T14:55:32Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-05-16T14:55:43Z",false,"COMMENTED"
"jakirkham","MEMBER","Thanks for working on this @erayaslan! 🙏

Had a few questions below","2022-05-20T08:34:07Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-05-21T20:07:37Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-05-21T20:09:05Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-05-21T20:10:03Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-05-21T20:12:49Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-05-21T20:15:21Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-05-21T20:15:48Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-05-21T20:16:25Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-05-21T20:34:51Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-05-21T20:50:23Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-05-21T20:53:53Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-05-21T20:54:02Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-05-21T20:54:16Z",false,"COMMENTED"
"rkern","NONE","","2022-06-08T16:15:25Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-06-08T20:17:54Z",false,"COMMENTED"
"rkern","NONE","","2022-06-08T20:33:08Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-06-08T20:39:10Z",false,"COMMENTED"
"rkern","NONE","","2022-06-08T21:05:48Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-06-11T05:37:54Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-08-24T17:06:30Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-08-25T07:05:17Z",false,"COMMENTED"
"jakirkham","MEMBER","Apologies for the slow review.

Had a couple follow up comments. In particular as it seems we are copying over `RandomState` code am curious how we can minimize copying in favor of reusing that code directly. That may also make this change smaller and easier to review/test/maintain/etc.","2022-10-12T18:57:38Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-10-14T05:31:53Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-10-14T20:23:14Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2022-10-14T22:55:13Z",false,"COMMENTED"
"pentschev","MEMBER","Apologies for taking so long to review here again @erayaslan , I appreciate your patience!

I do not see any obvious errors, I've left a few comments/suggestions on minor things, but otherwise this looks good.","2023-01-19T20:39:27Z",false,"CHANGES_REQUESTED"
"rjzamora","MEMBER","","2023-01-20T20:28:48Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2023-01-21T12:10:17Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2023-01-21T12:10:32Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2023-01-21T12:10:42Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2023-01-21T12:35:57Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2023-01-21T12:36:19Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2023-01-21T13:09:21Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2023-01-21T14:36:34Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2023-01-21T15:07:32Z",false,"COMMENTED"
"pentschev","MEMBER","","2023-01-23T14:54:23Z",false,"COMMENTED"
"pentschev","MEMBER","Apologies, I thought I had already approved this. Looks good, I'm ok with this being merged as is. Thanks for all the hard work and patience @erayaslan !","2023-02-09T12:56:27Z",false,"APPROVED"
"rjzamora","MEMBER","","2023-02-16T19:56:50Z",false,"APPROVED"
"erayaslan","CONTRIBUTOR","","2023-02-18T15:45:52Z",false,"COMMENTED"
"QuLogic","CONTRIBUTOR","","2023-03-26T04:25:26Z",false,"COMMENTED"
"erayaslan","CONTRIBUTOR","","2023-03-27T13:28:13Z",false,"COMMENTED"
"QuLogic","CONTRIBUTOR","","2023-03-28T08:39:01Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jcrist ","2022-05-05T18:05:15Z",false,"APPROVED"
"bryanwweber","CONTRIBUTOR","Thanks @pavithraes LGTM!","2022-05-05T16:01:37Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-05-05T15:19:18Z",false,"APPROVED"
"jrbourbeau","MEMBER","Totally agree the early red ""X"" isn't great. Did we need to drop coverage on the additional builds, or would increasing `after_n_builds` higher to like 5 or 6 be sufficient? ","2022-05-05T15:43:08Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-05T14:20:30Z",false,"APPROVED"
"jcrist","MEMBER","Thanks @davidhassell! This looks good to me.","2022-05-05T15:12:42Z",false,"APPROVED"
"scharlottej13","CONTRIBUTOR","","2022-05-04T22:11:30Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","Thanks @scharlottej13! I love all the additional cross-links to existing resources this page surfaces. Just a couple of small clarifying comments.","2022-05-04T22:53:43Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-05-05T12:55:46Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-05-05T14:46:14Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-05-05T14:48:55Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-05-05T14:49:13Z",false,"COMMENTED"
"MrPowers","CONTRIBUTOR","","2022-05-07T16:19:38Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-05T16:02:40Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-05-05T16:06:01Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jcrist. I didn't give this a detailed review, but from a high level this LGTM. Like you said, there's still more work to do to fully support the `string[pyarrow]`, but this looks like a clear improvement over the current situation

You've added tests for the new `dask.dataframe._pyarrow_compat` module, which is great. Is there Dask user-code that this PR now enables? If so, can we add some corresponding tests? ","2022-05-05T16:09:17Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-05-05T16:10:23Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-05-05T16:26:39Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @jcrist","2022-05-05T16:43:24Z",false,"APPROVED"
"JacobHayes","CONTRIBUTOR","","2022-05-04T03:39:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for fixing and adding tests @JacobHayes!","2022-05-05T18:04:28Z",false,"COMMENTED"
"JacobHayes","CONTRIBUTOR","","2022-05-05T19:54:52Z",false,"COMMENTED"
"JacobHayes","CONTRIBUTOR","","2022-05-08T03:27:57Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-15T13:50:34Z",false,"COMMENTED"
"douglasdavis","MEMBER","This indeed looks like a nice convenience (and covers more area of the pandas API). I had a few comments.","2022-05-03T17:40:58Z",false,"CHANGES_REQUESTED"
"pavithraes","MEMBER","","2022-05-03T18:41:14Z",false,"COMMENTED"
"MrPowers","CONTRIBUTOR","","2022-05-04T01:02:22Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-05-04T12:22:06Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-05-04T12:33:58Z",false,"COMMENTED"
"MrPowers","CONTRIBUTOR","","2022-05-04T22:01:18Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @MrPowers! ","2022-05-05T15:31:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the updates @MrPowers! Didn't get a chance to look at them today. Will plan to review / merge tomorrow though ","2022-05-10T02:54:59Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @MrPowers -- will merge after CI passes ","2022-05-11T15:27:36Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @lucasmsp! 

@rjzamora do you have a moment to look at this? Is this issue fixed by some of the other serialization work going on? ","2022-05-05T16:51:15Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-05-09T16:05:45Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-06-22T20:58:36Z",false,"COMMENTED"
"lucasmsp","CONTRIBUTOR","","2022-06-22T21:03:20Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks for this workaround @lucasmsp!

I do think we can use a (clearly commented) shared utlity to add the same trick for all problematic IO functions (read_parquet, timeseries, read_csv, ...). However, I think its fine to do that as a followup. Let's just add a reference to the outstanding Issue and get this merged.","2022-06-23T13:56:50Z",false,"COMMENTED"
"lucasmsp","CONTRIBUTOR","","2022-06-23T18:08:09Z",false,"COMMENTED"
"rjzamora","MEMBER","Sorry for the delay, and for my flip-flopping review on this @lucasmsp !

Lets add a test like this to the end of `dask/dask/tests/test_distributed.py` (not sure if this will pass linting as is, but test should pass on your branch and fail on `main`):

```python
def test_parquet_processes_false(tmpdir):
    # Check dask#8581 Parquet work-around
    # See: https://github.com/dask/dask/pull/9015
    dd = pytest.importorskip(""dask.dataframe"")

    with distributed.LocalCluster(
        scheduler_port=0,
        dashboard_address="":0"",
        asynchronous=False,
        n_workers=1,
        nthreads=1,
        processes=False,
    ) as cluster:
        with distributed.Client(cluster, asynchronous=False):
            dd.DataFrame.from_dict(
                {""a"": range(10)}, npartitions=2
            ).to_parquet(tmpdir)
            dd.read_parquet(tmpdir).compute()
```","2022-06-29T17:30:29Z",false,"CHANGES_REQUESTED"
"rjzamora","MEMBER","","2022-06-29T17:56:33Z",false,"COMMENTED"
"lucasmsp","CONTRIBUTOR","applying linting changes","2022-06-29T17:59:58Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-06-29T18:56:31Z",false,"APPROVED"
"bryanwweber","CONTRIBUTOR","","2022-05-02T17:55:25Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-05-02T19:23:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @pavithraes, nice work. Will merge after CI passes ","2022-05-02T20:04:14Z",false,"APPROVED"
"jsignell","MEMBER","Thanks for taking this on! I think it's broadly fine to change behavior, but if possible we try to deprecate or at least raise an informative error.","2022-05-02T20:13:53Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","I think it's important to note that the way you use the docs and direct folks around it is going to be different to the way new users will use it. We are trying to structure things in line with the [Diataxis framework](https://diataxis.fr/) as we are pretty sold on that being a useful organisational structure for the majority of users.

I've commented some direct feedback on the proposed changes, I'm about 50/50 with them.

I would be keen for @jsignell to weigh in too.","2022-05-05T10:15:38Z",false,"COMMENTED"
"jsignell","MEMBER","Sorry for being delinquent here. I agree with Jacob that none of us are the typical user of the docs. 

Also I am not surprised Matt, that you don't feel like you are experiencing the benefits of the new framework. I think that's because we haven't gone far enough yet. We did an initial push and have now left the docs in this kind of partial state for longer than intended. 

Maybe Jacob and I can put some time on the calendar to do some more work here and then we can do a few user tests or something to see how the docs feel to people who haven't stared at them for so long :)","2022-05-06T20:26:26Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-05-07T18:45:41Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-05-07T18:46:47Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-05-07T18:50:43Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-05-09T13:41:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-05-09T13:44:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-05-09T13:45:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-05-17T14:13:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-05-17T14:13:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-05-17T14:14:16Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-05-17T14:15:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-05-17T14:25:20Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-05-05T15:02:21Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-05-05T15:49:07Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-05-05T15:03:18Z",false,"APPROVED"
"jcrist","MEMBER","> Do you think it makes sense to add a subsection on `calculate_divisions` here?

I think mentioning `calculate_divisions` in the read section would be very useful. Thanks for working on this!","2022-04-28T16:22:57Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-28T16:31:35Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-04-28T16:35:44Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks Rick!","2022-04-28T17:31:20Z",false,"APPROVED"
"bryanwweber","CONTRIBUTOR","Thanks @jcrist, this looks like it will fix the issue. I agree about the test, hard to check otherwise.","2022-04-28T15:45:15Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jorisvandenbossche for updating the CI environment and debugging this issue. Should we temporarily skip the hanging test and merge this PR in? ","2022-04-29T15:23:09Z",false,"COMMENTED"
"jcrist","MEMBER","LGTM!","2022-05-03T21:43:57Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jorisvandenbossche! 

> we can probably wait with merging this PR until it is fixed

So after removing the skips and rerunning CI, say tomorrow, after there is a new nightly then this should be good to go ","2022-05-03T21:51:18Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2022-05-04T10:57:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Hooray -- thanks @jorisvandenbossche! ","2022-05-10T02:28:34Z",false,"APPROVED"
"jcrist","MEMBER","Thanks Rick! Only a few comments/questions. My PR definitely led to some merge conflicts, I'm happy to fix them here for you if you're too busy, just let me know.","2022-04-28T14:18:58Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-28T14:28:06Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-28T15:03:28Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-28T15:09:04Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-28T15:09:51Z",false,"COMMENTED"
"jcrist","MEMBER","Assuming tests pass this looks good to me.","2022-04-28T15:49:14Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @jcrist ","2022-04-27T20:27:48Z",false,"APPROVED"
"jrbourbeau","MEMBER","Nice! Thanks for fixing @jcrist ","2022-04-27T20:38:55Z",false,"APPROVED"
"jcrist","MEMBER","This is unfortunate, but seems fine to me. Merging.","2022-04-28T14:23:25Z",false,"APPROVED"
"rjzamora","MEMBER","Thanks for working on this @jcrist!

I didn't look very carefully at the tests yet, but I only have some minor questions so far.","2022-04-27T20:26:32Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-04-27T20:41:55Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-04-27T20:43:41Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-28T03:22:24Z",false,"COMMENTED"
"rjzamora","MEMBER","LGTM @jcrist

I do think it is important that we update the Metadata section in the new [parquet doc page](https://github.com/dask/dask/blob/main/docs/source/dataframe-parquet.rst), but I'm okay with that happening in a separate PR if you'd prefer.","2022-04-28T04:07:32Z",false,"APPROVED"
"bryanwweber","CONTRIBUTOR","","2022-04-27T16:32:33Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-04-27T16:55:04Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-27T17:03:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jcrist! 

I merged `main` to resolve some unrelated CI failures. Since I was pushing something up, I also included a `match=` for `test_reshape_not_implemented_error` (hope you don't mind)","2022-04-27T17:54:11Z",false,"APPROVED"
"jcrist","MEMBER","","2022-04-27T16:16:36Z",false,"APPROVED"
"jrbourbeau","MEMBER","Nice -- thanks @jsignell! ","2022-04-27T16:23:02Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @jcrist.

To be honest, I'd be in favor of removing the immediate option all-together, though that would need a deprecation cycle.","2022-04-26T15:41:20Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jcrist -- nice find

> Due to slight differences between these
code paths a user could see different scheduling and performance
behavior between

Could you elaborate a bit more on these differences? It's still not clear to me why this change fixes the issue (though I'm sure you're correct and it does). Are graph optimizations not being properly applied? Does this mean `compute_as_if_collection` isn't behaving as expected? ","2022-04-26T15:47:26Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-26T14:48:41Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-26T16:39:39Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-26T17:22:21Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-26T19:41:57Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-26T21:22:33Z",false,"COMMENTED"
"isaacbrodsky","NONE","","2022-09-08T18:22:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-09-08T19:30:35Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-04-27T15:29:53Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-05-04T18:29:04Z",false,"COMMENTED"
"pavithraes","MEMBER","Thanks, @ParticularMiner!

The failing Windows test is a known flaky test: `https://github.com/dask/dask/issues/8892`","2022-04-27T11:13:23Z",false,"APPROVED"
"jsignell","MEMBER","Thanks @ParticularMiner!","2022-04-27T15:31:40Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-04-25T13:07:14Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @erayaslan 

Also, I noticed this is your first code contribution to this repository. Welcome!","2022-04-25T20:33:38Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-04-23T18:16:45Z",false,"COMMENTED"
"quasiben","MEMBER","","2022-04-25T15:10:01Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-25T15:23:56Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-25T15:25:09Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @rjzamora, this seems like a fine fix to me. Just flagging that `__dask_distributed_{pack, unpack}__` might be removed imminently (cf #8672), so this code might be very short-lived.","2022-04-25T16:26:32Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-04-25T18:12:19Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-25T18:26:59Z",false,"APPROVED"
"pavithraes","MEMBER","Thanks, Bryan!","2022-04-25T13:10:14Z",false,"APPROVED"
"jcrist","MEMBER","","2022-04-27T15:18:12Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Looks good, thanks @crusaderky ","2022-04-21T23:20:16Z",false,"APPROVED"
"mrocklin","MEMBER","","2022-04-22T12:45:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-04-22T12:47:04Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-04-22T14:04:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-04-22T14:23:13Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-04-25T04:29:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-04-25T13:57:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-04-25T17:01:00Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-04-25T17:15:47Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-04-22T16:31:33Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","Love it! Great work @pavithraes ","2022-04-25T17:11:32Z",false,"APPROVED"
"bryanwweber","CONTRIBUTOR","@jorloplaz Thanks for the contribution! I think it will definitely improve the user experience here and I like that the checks of the index are being combined into a single place for consistency. I do have a few specific concerns below and one high-level concern about `_check_index()`.

Specifically, it seems like `_check_index()` is doing both the checking and the getting of the index, which seems like a bit of mixing of concerns in the same function. I personally find it confusing that `None` is a sentinel value to mean ""the index that's been passed is already the index"", especially because the other possible return value from `_check_index()` is the index that should be used. Perhaps it's worth having separate helper functions to handle the various tasks here?","2022-04-21T15:53:30Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-21T15:59:47Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-21T16:01:35Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-21T16:05:53Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-21T16:06:47Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-21T16:08:13Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-21T16:09:43Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-21T16:10:59Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-21T16:12:15Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-21T16:13:15Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-21T16:19:32Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-22T18:41:01Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-22T18:41:57Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-22T18:42:44Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-22T18:44:36Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-22T19:36:43Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-22T19:37:14Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-22T19:37:46Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-22T19:38:46Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-22T19:45:07Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-22T19:51:37Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-22T19:52:46Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-22T19:53:09Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-22T21:18:37Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-04-24T20:54:00Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-24T22:15:48Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-25T08:48:55Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-25T09:35:24Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-25T09:36:17Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-25T09:37:08Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-25T09:39:14Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-25T09:42:20Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-25T09:45:40Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-04-27T15:47:11Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-27T15:56:54Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","Hi @jorloplaz! I have a big bunch of comments here, but I think many of them are similar, mostly related to incomplete types (I think if they're being added, they should be fully correct) and some comments that you've added. The only major changes are a simplification to the length check and the addition of a test for setting an existing index. Thank you!","2022-04-27T16:23:53Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-27T16:26:50Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-27T16:42:28Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-27T16:44:47Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-04-27T18:31:29Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-29T15:46:25Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-29T15:46:44Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-29T15:47:35Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-29T15:47:50Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-29T15:48:02Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-29T15:48:18Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-29T15:49:19Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-29T15:49:44Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-29T15:50:22Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-29T15:51:00Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-29T15:51:12Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-29T15:51:39Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-29T15:52:03Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-29T15:52:37Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-29T15:55:14Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-29T15:55:50Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-29T15:59:00Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-04-29T15:59:53Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","This looks good from my side, thanks for considering all my feedback @jorloplaz! I believe @jsignell still had some concerns to resolve.","2022-04-29T16:21:43Z",false,"APPROVED"
"jorloplaz","CONTRIBUTOR","","2022-04-29T18:35:48Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-05-02T10:16:18Z",false,"COMMENTED"
"jsignell","MEMBER","I have a couple last suggestions. Thanks so much for keeping with this @jorloplaz ","2022-05-03T20:44:52Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-05-06T09:57:56Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-05-06T10:04:56Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-05-09T20:14:44Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-05-09T20:17:13Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-05-09T20:18:52Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-05-09T20:20:44Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-05-11T10:57:00Z",false,"COMMENTED"
"jorloplaz","CONTRIBUTOR","","2022-05-11T10:57:45Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks for sticking with this @jorloplaz!","2022-05-11T16:08:17Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for handling all of this @ian-r-rose ","2022-04-26T15:52:32Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-26T15:56:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose! This should be good to go after CI finishes 

EDIT: Just merged `main` to include https://github.com/dask/dask/pull/8986 which should fix some unrelated CI failures","2022-04-27T16:39:39Z",false,"APPROVED"
"jcrist","MEMBER","This makes sense to me.","2022-04-20T20:21:27Z",false,"APPROVED"
"bryanwweber","CONTRIBUTOR","Thanks @jrbourbeau!","2022-04-20T15:58:15Z",false,"APPROVED"
"bryanwweber","CONTRIBUTOR","Thanks @tomwhite! This looks good to me. Simple enough change 😄 ","2022-04-20T14:13:16Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @tomwhite, this LGTM. I noticed there were some gpuCI failures, so I merged `main` to retrigger a CI run. I suspect that failure is totally unrelated to the changes here but want to make sure before merging","2022-04-28T15:34:48Z",false,"APPROVED"
"jcrist","MEMBER","Mmmk, why don't we leave things as is (don't call `set_io_thread_count`) for now, we can always change this later if needed. I think this should be good to merge?","2022-04-19T20:43:04Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @rjzamora !","2022-04-19T20:44:18Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @pavithraes! Will merge after CI finishes ","2022-04-28T16:00:14Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell ","2022-04-20T20:26:55Z",false,"APPROVED"
"jsignell","MEMBER","This looks good to me!","2022-04-18T19:47:17Z",false,"APPROVED"
"jcrist","MEMBER","","2022-04-14T15:28:59Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-14T15:56:05Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-04-14T16:13:56Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-14T16:32:12Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-04-14T16:37:44Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-14T16:49:20Z",false,"COMMENTED"
"martindurant","MEMBER","","2022-04-14T16:51:46Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-20T18:59:57Z",false,"COMMENTED"
"jcrist","MEMBER","LGTM, thanks @rjzamora.","2022-04-20T20:24:28Z",false,"APPROVED"
"jrbourbeau","MEMBER","Nice, thanks @bryanwweber! We're doing something similar over in `distributed` in [this file](https://github.com/dask/distributed/blob/41ecbca2f94f029ebcbcaa1bbe5ae059e4858865/.git-blame-ignore-revs). If you want to look through the comments in that file to see what other commits we might want to include here (e.g. `dask` also introduced `isort` like `distributed` did), that would be welcome. But no required, this could be merged as is ","2022-04-14T14:18:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Looks great, thanks @bryanwweber ","2022-04-18T18:59:27Z",false,"APPROVED"
"jcrist","MEMBER","","2022-04-13T15:44:40Z",false,"APPROVED"
"jsignell","MEMBER","","2022-04-13T15:55:07Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-04-18T19:45:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-04-19T14:27:11Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-04-20T14:42:02Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-04-20T18:01:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-04-20T20:33:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-04-20T20:35:42Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-04-21T18:26:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @pavithraes ","2022-04-26T15:26:33Z",false,"APPROVED"
"jcrist","MEMBER","Thanks, can you add ~tests~ and docs for these new methods?

- ~Tests should go in `dask/array/tests/test_ufunc.py`. Most of these tests are parametrized across functions, so adding the new methods to the proper lists may be sufficient.~ (*edit - sorry, I missed that you already added the tests. nevermind!*)
- New methods also need to be added to the list in `docs/source/array-api.rst`","2022-04-13T15:25:34Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks!","2022-04-13T19:48:38Z",false,"APPROVED"
"jcrist","MEMBER","Thanks! I've modified this to use the `ua_args` keyword to `derived_from`, which is how we handle documenting unsupported arguments. Merging!","2022-04-13T15:32:17Z",false,"APPROVED"
"douglasdavis","MEMBER","Added a few nit-picky comments","2022-04-21T19:58:53Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","Thanks @rjzamora! This looks like a nice generalization. I saw a small typo and had a question as well.","2022-04-21T20:02:23Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-22T13:46:08Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-22T16:22:53Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Cool, @rjzamora. I came into this a bit skeptical about whether the increased API surface area was worth it, but I came around. I like how it consolidates the creation of `DataFrameIOLayer`s. Ultimately, I think this is probably the better solution than #8852 for custom creation of dataframes (it's pretty similar to how `from_array` works!)","2022-04-22T17:50:32Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-22T17:53:31Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-22T17:56:01Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-22T19:24:50Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-22T19:37:30Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-22T20:01:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-22T20:04:32Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-22T20:10:34Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-22T20:20:45Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-22T20:34:34Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-22T21:16:41Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-22T22:38:56Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-25T15:13:53Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-25T15:16:03Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-25T15:21:19Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-25T15:40:11Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-25T16:18:54Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-25T16:33:56Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-29T15:03:07Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-29T15:28:52Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-04-29T15:49:56Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-04-29T15:51:47Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-29T15:57:15Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-29T15:58:14Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-29T16:07:14Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-29T16:07:39Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-29T16:09:42Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-29T16:12:04Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-29T16:17:49Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-29T16:31:42Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-29T16:33:56Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-04-29T17:08:11Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-04-29T17:45:18Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-04-29T17:49:18Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-29T19:29:47Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-29T19:31:12Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-05-02T18:52:12Z",false,"COMMENTED"
"jsignell","MEMBER","I'm good with this as is! ","2022-05-02T18:52:43Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-04-11T11:55:53Z",false,"COMMENTED"
"rfilmyer","CONTRIBUTOR","","2022-04-11T15:42:55Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks!","2022-04-13T15:38:15Z",false,"APPROVED"
"bryanwweber","CONTRIBUTOR","LGTM, just a small style nit, thanks @jcrist! ","2022-04-13T19:55:40Z",false,"APPROVED"
"jcrist","MEMBER","Nice, thanks Rick!","2022-04-08T19:15:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-08T19:18:58Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks @rjzamora, this looks good to me.","2022-04-13T19:23:45Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose ","2022-04-08T14:42:11Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-08T14:46:24Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-08T18:32:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-04-08T18:44:50Z",false,"APPROVED"
"bryanwweber","CONTRIBUTOR","Thanks @jcrist! This looks like an excellent set of recommendations. I have a few style nits and one typo fix 😄 ","2022-04-07T19:02:25Z",false,"COMMENTED"
"martindurant","MEMBER","","2022-04-07T19:07:06Z",false,"COMMENTED"
"martindurant","MEMBER","","2022-04-07T19:13:46Z",false,"COMMENTED"
"martindurant","MEMBER","","2022-04-07T19:16:11Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-04-07T19:52:26Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-04-07T19:56:56Z",false,"COMMENTED"
"martindurant","MEMBER","","2022-04-07T20:27:58Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-07T20:31:12Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-04-07T20:34:50Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-08T16:43:18Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-08T17:34:53Z",false,"COMMENTED"
"hayesgb","CONTRIBUTOR","","2022-04-11T14:39:54Z",false,"COMMENTED"
"martindurant","MEMBER","","2022-04-11T14:42:30Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-04-14T20:10:44Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-04-14T20:37:28Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-04-14T21:05:34Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2022-04-14T21:26:37Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-04-07T16:24:32Z",false,"APPROVED"
"jcrist","MEMBER","","2022-04-07T16:26:40Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-04-07T17:55:37Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-04-07T15:56:09Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-04-07T18:40:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell ","2022-04-08T16:34:14Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-04-11T13:17:02Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-04-11T15:29:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-04-11T15:34:25Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-04-11T15:55:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell ","2022-04-11T17:51:22Z",false,"APPROVED"
"jcrist","MEMBER","","2022-04-07T16:33:20Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-04-07T18:43:18Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks @davidhassell, this PR looks good to me.","2022-04-07T16:39:58Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! This is in","2022-04-06T19:28:52Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @pavithraes! Overall this looks great. There's a small change that needs to be made to make the doctest CI build happy ","2022-04-06T19:00:00Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-04-06T19:08:03Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-04-06T19:08:27Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-04-06T19:08:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the updates -- will merge after CI finishes 👍 ","2022-04-06T19:21:10Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-04-06T17:57:01Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-04-06T18:18:48Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-06T18:27:20Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-06T18:30:27Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-06T19:51:10Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-06T20:14:01Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-04-06T20:15:32Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-06T20:26:26Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-06T21:03:16Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks again for this Bryan - Perhaps these suggestions will help?","2022-04-11T16:47:10Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-18T19:15:39Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-18T20:18:11Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-18T20:54:02Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","This is looking really great @bryanwweber ","2022-04-18T21:21:36Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-18T22:58:16Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-19T13:58:24Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-19T16:53:06Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-19T16:54:16Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks again for working on this @bryanwweber 

I tried adding an `optimize_blockwise` test to your branch, but quickly learned that this is technically a ""reduction"" (since ""from-dask-array-*"" technically depends on two ""collections""), and blockwise fusion does not work for such a case :/

It is not immediately clear to me ""how"" we could go about achieving blockwise fusion in this case, but perhaps that doesn't gain us much anyway. Either way, this PR is a nice improvement.","2022-04-19T18:35:57Z",false,"APPROVED"
"bryanwweber","CONTRIBUTOR","","2022-04-19T18:42:21Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-19T18:43:20Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-19T18:44:38Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-19T18:45:38Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Left a few nitpicky comments, which I think are optional, but I'm happy where this stands now!","2022-04-19T18:46:24Z",false,"APPROVED"
"bryanwweber","CONTRIBUTOR","","2022-04-19T18:48:53Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-19T18:49:33Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-19T18:50:13Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-19T18:51:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jcrist. Only one request (the comment about `fuse`), the rest of my comments are just style nits -- feel free to accept / ignore as you see fit ","2022-04-06T16:14:30Z",false,"COMMENTED"
"jcrist","MEMBER","Always nice to delete code.","2022-04-06T15:24:14Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @phobson. This seems reasonable to me. I'm surprised `dask/tests/test_distributed.py::test_map_partitions_df_input` requires an internet connection as it appears to only involve local computations. I'll test this out locally in a bit (unless you have a traceback handy)","2022-04-06T15:12:10Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-04-06T15:26:08Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-04-06T15:31:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-04-06T18:25:09Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-04-06T19:43:18Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @phobson! Will merge after CI finishes 

Note the gpuCI failures are unrelated (xref https://github.com/dask/dask/issues/8825) ","2022-04-06T20:00:42Z",false,"APPROVED"
"jcrist","MEMBER","Nice catch, thanks @gforsyth!","2022-04-01T19:49:55Z",false,"APPROVED"
"cpcloud","CONTRIBUTOR","","2022-04-01T20:49:14Z",false,"COMMENTED"
"cpcloud","CONTRIBUTOR","","2022-04-01T20:57:20Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-04-01T21:14:46Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-03-31T16:47:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-03-31T16:48:22Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-31T19:34:46Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @pavithraes, this is looking great! The implementation is looking good to me, I think we could get some more coverage of the optional args, but otherwise I think this looks close.

I also notice that there are `forwardfill` and `backfill` aliases in pandas, we could think about adding those as well while we're at it.","2022-04-01T18:04:06Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-04-05T16:35:20Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-04-05T16:35:34Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-06T15:47:41Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-06T15:56:58Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-04-07T11:43:36Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-04-07T13:54:12Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-04-07T13:57:45Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-04-07T13:59:31Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-04-07T14:00:28Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-04-07T18:40:31Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @pavithraes, this is looking close.

I did some experimenting with grouping by multiple columns, and ran into some troubles with `transform` not liking empty groups very much, but `apply` did just fine. I wonder if we should just simplify things by using `apply` everywhere","2022-04-07T22:48:55Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-04-08T12:50:57Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-04-08T12:52:02Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @pavithraes, this looks great to me! I have a couple of minor docs suggestions, which I don't think are required","2022-04-08T19:12:17Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-04-11T14:15:44Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-04-11T14:16:17Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","I rebased your PR on top of #8961 to see if it still works with the `group_keys` changes, and it does :tada: !

The bad news is: with the `group_keys` changes I think there is one more thing we need to cover. I tried parameterizing your `test_fillna` over `group_keys=[True, False, None]`. Everything works on pandas `1.4.x`, but on `1.5.x`, `group_keys=True` presents a problem: in that case, the `apply` returns with extra multiindex columns for your grouped-by items.

I think the fix should be fairly straightforward, however. For the case where `self.group_keys` is `True` in the `dd.GroupBy` object, we can do a final `map_partitions` to `df.droplevel(by)`. That is to say, we can easily drop the extra index columns at the end when `group_keys` is `True`. It's annoying, but doable
","2022-04-21T21:38:39Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Sorry to be slow in reviewing @pavithraes, and thanks for your persistence. This looks great! I have one minor comment that I would consider optional. But from my perspective, this is ready to go into our next release!","2022-04-28T21:34:30Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-04-29T09:58:52Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @pavithraes!","2022-04-29T13:37:34Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @pavithraes and @ian-r-rose! There's a merge conflict that's popped up (apologies for the delayed response). @pavithraes would you mind fixing that conflict? Otherwise, this looks good to go ","2022-05-10T15:21:42Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @crusaderky ","2022-04-01T18:34:46Z",false,"APPROVED"
"jsignell","MEMBER","This looks great! Thanks so much @ParticularMiner ","2022-03-31T15:59:26Z",false,"APPROVED"
"jsignell","MEMBER","Yeah in general I'm not super excited about adding such a niche config option. Maybe we could add it as a kwarg instead and see if it ever gets used? I'm also totally fine with just always raising the error to start with and not allowing it to get silently coerced.","2022-04-07T12:26:43Z",false,"COMMENTED"
"jsignell","MEMBER","This looks great! Thanks @ParticularMiner!","2022-05-11T17:59:24Z",false,"APPROVED"
"jakirkham","MEMBER","","2022-03-30T20:01:26Z",false,"APPROVED"
"jcrist","MEMBER","","2022-03-31T06:51:14Z",false,"APPROVED"
"scharlottej13","CONTRIBUTOR","a couple small comments, thanks for these improvements!","2022-03-30T15:47:55Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-03-30T15:54:57Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-03-30T18:06:42Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-03-31T22:27:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @bryanwweber! A couple small test-related comments, but otherwise this looks like a nice addition ","2022-04-06T18:42:12Z",false,"APPROVED"
"jcrist","MEMBER","Thanks for the PR, could you also add a test in `dask/array/tests/test_creation.py`? The test should try to call `full` with a string and check that a `ValueError` is raised using `with pytest.raises(ValueError)`.","2022-03-30T15:21:10Z",false,"COMMENTED"
"davidegavio","CONTRIBUTOR","","2022-03-30T15:57:35Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks for the fix, merging!","2022-03-31T13:03:20Z",false,"APPROVED"
"jcrist","MEMBER","","2022-04-07T17:14:33Z",false,"APPROVED"
"scharlottej13","CONTRIBUTOR","Thanks for the PR @sissnad! This is a nice addition to improving the clarity for `sample`.

cc @jsignell ","2022-03-30T21:32:49Z",false,"COMMENTED"
"sissnad","CONTRIBUTOR","","2022-03-31T07:41:26Z",false,"COMMENTED"
"sissnad","CONTRIBUTOR","","2022-03-31T07:46:31Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","a couple syntax changes to make Sphinx happy :)","2022-03-31T15:41:09Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-03-31T15:42:44Z",false,"COMMENTED"
"sissnad","CONTRIBUTOR","","2022-04-07T14:41:08Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","Thanks @scharlottej13! This LGTM","2022-03-30T15:00:33Z",false,"APPROVED"
"jcrist","MEMBER",":rocket: ","2022-03-30T15:12:18Z",false,"APPROVED"
"jcrist","MEMBER","","2022-03-29T15:43:11Z",false,"APPROVED"
"crusaderky","COLLABORATOR","Partial review - more later","2022-03-29T12:00:14Z",false,"CHANGES_REQUESTED"
"crusaderky","COLLABORATOR","","2022-03-29T12:06:58Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-03-29T12:07:23Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-03-29T15:27:08Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-03-29T19:00:46Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-03-31T15:19:35Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-03-31T15:22:48Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-03-31T15:24:54Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks for your work on this @phobson !","2022-04-05T23:19:26Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-06T00:07:15Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-04-07T19:02:02Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-04-07T19:03:34Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-04-14T05:01:03Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-04-19T15:43:32Z",false,"CHANGES_REQUESTED"
"phobson","CONTRIBUTOR","","2022-04-20T21:15:21Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-04-20T21:36:41Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-04-20T22:16:22Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-04-20T22:43:53Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-04-21T14:04:43Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-04-21T14:06:43Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-04-21T14:19:10Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-04-21T14:25:16Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-04-21T14:27:32Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-04-21T14:28:09Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-04-21T14:35:41Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-04-21T22:07:36Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-03-25T21:32:13Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @rjzamora, I do like how this is getting simpler.

I think I'm coming around to your implementation, even if I don't understand everything yet.","2022-04-07T23:27:05Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-08T03:20:56Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-08T03:22:16Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-08T03:26:56Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-08T04:10:27Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-08T18:26:10Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-08T18:51:18Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-08T19:37:18Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-08T22:39:04Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @rjzamora, I'm happy with where this stands, and it wouldn't be too difficult to modify it down the line.

I don't fully see all the consequences of using `fuse_roots` like this. It's interesting: this is similar to where we were before `from_array` became blockwise.","2022-04-20T23:01:39Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-04-21T14:18:33Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-21T14:20:25Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-21T14:24:19Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-21T16:43:48Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-03-25T20:23:15Z",false,"COMMENTED"
"jcrist","MEMBER","These tests need to not error if the required dependencies (e.g. pandas) aren't installed.","2022-03-25T20:02:14Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-03-28T13:44:49Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-03-25T20:03:43Z",false,"APPROVED"
"jcrist","MEMBER","","2022-03-25T19:58:36Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Cool","2022-03-25T20:00:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-03-25T20:40:31Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-03-25T20:53:44Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-03-25T21:03:14Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-03-30T21:19:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for working on this @bryanwweber ","2022-04-12T15:51:25Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-12T17:57:58Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-12T18:14:19Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-12T18:22:32Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-12T18:24:34Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-12T19:06:24Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-04-12T19:07:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @bryanwweber! This is in","2022-04-19T14:21:13Z",false,"APPROVED"
"hayesgb","CONTRIBUTOR","","2022-03-24T22:55:55Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-03-30T18:45:47Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-03-25T14:49:51Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-03-23T19:33:12Z",false,"APPROVED"
"jcrist","MEMBER","This looks good to me, thanks @bryanwweber!","2022-03-23T15:55:26Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! ","2022-03-30T19:28:37Z",false,"APPROVED"
"jcrist","MEMBER","This is unfortunate, but if it resolves the issue then it'd be a fine hack for now.","2022-03-22T20:51:23Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-03-22T22:27:42Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-03-22T22:29:23Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-03-22T22:49:15Z",false,"COMMENTED"
"jcrist","MEMBER","Just a few comments (mostly around testing clarity).","2022-03-23T16:26:12Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks for the review @jcrist ","2022-03-23T19:04:16Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-03-23T19:23:40Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-03-23T19:26:22Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-03-23T20:38:21Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-03-23T21:19:20Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-03-24T14:06:40Z",false,"COMMENTED"
"jcrist","MEMBER","With the discussion above seemingly resolved, I think this is good to go in as is. Thanks y'all!","2022-03-24T16:00:34Z",false,"APPROVED"
"jakirkham","MEMBER","","2022-03-18T19:00:29Z",false,"APPROVED"
"jcrist","MEMBER","Nice catch, LGTM.","2022-03-18T15:48:26Z",false,"APPROVED"
"charlesbluca","MEMBER","","2022-03-24T17:45:25Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks @leogao2, this seems like a nice feature to add. I've changed it to use a property instead of overriding `__getattr__`, and added a test. Will merge once tests pass.","2022-03-17T13:51:23Z",false,"APPROVED"
"jcrist","MEMBER",":+1: ","2022-03-17T13:52:58Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @jcrist !","2022-03-15T20:58:00Z",false,"APPROVED"
"jcrist","MEMBER","","2022-03-15T19:04:15Z",false,"APPROVED"
"jsignell","MEMBER","This is a really nice enhancement. If it's going to be a top level setting though I think it should affect array and bag `assert_eq` as well.","2022-03-15T18:49:42Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-15T18:59:21Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2022-03-15T19:13:25Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-03-15T19:20:44Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2022-03-15T19:27:20Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-15T19:54:07Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2022-03-15T21:09:25Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-15T21:18:07Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-16T20:24:35Z",false,"APPROVED"
"charlesbluca","MEMBER","@ian-r-rose how does this look as a compromise between the current PR and your preference? This would make it so `assert_eq`'s behavior can be controlled by `config.set(scheduler=...)` (avoiding the need for an additional config option), while also implicitly keeping `scheduler=""sync""` as its default behavior when nothing is specified:","2022-03-17T03:48:08Z",false,"COMMENTED"
"jcrist","MEMBER","Just one small fixup.","2022-03-15T15:39:29Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-15T18:33:55Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-03-14T20:50:27Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-03-14T19:03:33Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-03-14T19:26:51Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-03-14T19:28:28Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-03-14T19:30:34Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-03-14T19:37:19Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-03-14T19:42:24Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-03-14T20:48:33Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-14T20:59:55Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-03-14T21:21:23Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-14T21:38:10Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-14T21:39:47Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-03-14T21:48:42Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-03-14T21:54:39Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-03-14T21:55:31Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-15T12:52:39Z",false,"COMMENTED"
"jsignell","MEMBER","Should have started with this, but @jcrist thanks so much for taking this on! I think this represents a nice clean up.","2022-03-15T12:54:34Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-03-15T19:43:07Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-15T21:20:04Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-15T21:29:05Z",false,"APPROVED"
"phobson","CONTRIBUTOR","This looks good and makes sense to me -- the failures related to parquet files are curious. I haven't investigated those.","2022-03-16T22:22:26Z",false,"COMMENTED"
"jsignell","MEMBER","This looks like a very reasonable and isolated change. I just have one question about how the new kwarg will fit in with existing args. Maybe the solution is just, it should go at the end.","2022-03-15T13:01:50Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2022-03-15T13:40:49Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-15T14:07:23Z",false,"COMMENTED"
"jcrist","MEMBER","Yay for automating away an opinion-based choice! I habitually use relative imports (they used to be the main recommendation), but habits can change.

Would like to make sure we have consensus-ish across dask + distributed before merging this though.","2022-03-10T17:04:29Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2022-03-14T15:43:13Z",false,"CHANGES_REQUESTED"
"jcrist","MEMBER","Ignoring the unrelated test failures, this looks good to me.","2022-03-09T16:47:43Z",false,"APPROVED"
"jacobtomlinson","MEMBER","Seems fine with me. cc @jsignell as this will need to be bumped in conda-forge as part of the release.","2022-03-09T09:39:36Z",false,"APPROVED"
"jcrist","MEMBER",":100: ","2022-03-08T17:05:52Z",false,"APPROVED"
"jcrist","MEMBER","Nice catch, LGTM.","2022-03-07T18:48:20Z",false,"APPROVED"
"jcrist","MEMBER","Thanks @davidhassell, this looks good to me! I pushed up a few small fixups - once tests pass this is good to merge.","2022-03-07T20:30:20Z",false,"APPROVED"
"jsignell","MEMBER","","2022-03-08T20:02:43Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-03-08T20:07:23Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-08T20:13:31Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-14T21:02:06Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-15T21:16:36Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-03-16T14:53:39Z",false,"APPROVED"
"davidhassell","CONTRIBUTOR","","2022-03-16T15:03:34Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks @kori73, this fix looks good to me. I pushed a small patch that cleans up the test a bit (comments on what changed below). Once tests pass I'll merge this.","2022-03-07T19:47:07Z",false,"APPROVED"
"jcrist","MEMBER",":rocket:","2022-03-07T18:51:32Z",false,"APPROVED"
"jsignell","MEMBER","Thanks Rick! This looks pretty straightforward.","2022-03-09T16:44:47Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-03-01T15:41:48Z",false,"COMMENTED"
"martindurant","MEMBER","","2022-03-01T15:43:59Z",false,"COMMENTED"
"jsignell","MEMBER","LGTM","2022-03-01T13:28:58Z",false,"APPROVED"
"jsignell","MEMBER","Thanks @jcrist! This makes sense to me.","2022-02-28T20:50:22Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell, apologies for the delayed review. I'm a bit confused on why we need both a `.github/workflows/label-prs.yml` and `.github/workflows/label-all.yml` file. ","2022-02-28T23:23:19Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-01T13:19:42Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-01T13:24:10Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","Looks good!","2022-02-25T07:27:46Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-02-25T13:42:20Z",false,"COMMENTED"
"martindurant","MEMBER","","2022-02-25T13:48:14Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-02-25T13:50:34Z",false,"COMMENTED"
"martindurant","MEMBER","","2022-02-25T13:51:33Z",false,"COMMENTED"
"keewis","CONTRIBUTOR","","2022-03-10T22:53:13Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-03-11T16:00:10Z",false,"COMMENTED"
"keewis","CONTRIBUTOR","","2022-03-11T19:47:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca ","2022-02-24T18:02:32Z",false,"APPROVED"
"jakirkham","MEMBER","Thanks Charles! 😄","2022-02-24T20:49:01Z",false,"APPROVED"
"jcrist","MEMBER","LGTM, thanks Julia!","2022-02-25T18:50:57Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @pavithraes! 

> The failing windows-3.8 test seems to be related to this PR.

Yeah, it looks like there are some `from_bcolz` calls in that test where we're not catching the deprecation `FutureWarning`","2022-02-24T17:54:04Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-02-24T19:15:14Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-02-24T19:18:55Z",false,"COMMENTED"
"jcrist","MEMBER","Since it's not much work to do a small deprecation cycle (and it's not causing a maintenance burden), I'm going to merge this for now.","2022-03-02T17:44:03Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @scharlottej13! One minor comment, but otherwise this looks great ","2022-02-23T22:42:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the updates @scharlottej13  -- will merge after CI finishes up ","2022-02-23T23:17:01Z",false,"APPROVED"
"jcrist","MEMBER","","2022-02-24T14:01:18Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @quasiben. I think we'll want to update our minimum `dask-sphinx-theme` version here too 

https://github.com/dask/dask/blob/e3b3259419c21d0d412b9d5f12531ebe5ad6967a/docs/requirements-docs.txt#L3","2022-02-23T20:43:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jacobtomlinson. This LGTM, will merge after CI finishes ","2022-02-24T17:25:11Z",false,"APPROVED"
"jakirkham","MEMBER","","2022-02-24T18:21:16Z",false,"COMMENTED"
"asmeurer","NONE","","2022-02-24T23:04:26Z",false,"COMMENTED"
"asmeurer","NONE","","2022-02-24T23:20:33Z",false,"COMMENTED"
"asmeurer","NONE","","2022-02-26T05:25:35Z",false,"COMMENTED"
"tomwhite","CONTRIBUTOR","","2022-02-28T10:26:25Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-05-24T17:18:07Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-20T16:35:38Z",false,"COMMENTED"
"tomwhite","CONTRIBUTOR","","2022-07-20T16:52:19Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-20T17:06:50Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-07-20T17:07:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @th0ger

cc @martindurant @hayesgb for visibility ","2022-02-21T21:49:16Z",false,"COMMENTED"
"jsignell","MEMBER",":tada: ","2022-02-21T21:38:57Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell. Is this the kind of change that needs to be in `main` for us to see the impact, or can we try something similar to what is described in https://github.com/dask/dask/issues/8744 to see that things are behaving as expected? ","2022-02-21T21:34:27Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-02-21T21:41:32Z",false,"APPROVED"
"jsignell","MEMBER","","2022-02-21T21:44:35Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-02-21T21:46:55Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Looks good to me, thanks @jsignell!. My earlier comment was off-base, I didn't realize that `_extra_deps` was a delayed function already.","2022-02-23T21:00:46Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell ","2022-02-23T21:16:44Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-23T21:22:34Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-23T21:26:28Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-23T21:30:28Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-23T22:00:58Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-02-23T22:28:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell  -- will merge after CI finishes up","2022-02-23T22:30:22Z",false,"APPROVED"
"GenevieveBuckley","CONTRIBUTOR","","2022-02-21T23:43:07Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-22T14:54:36Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks @jorisvandenbossche  - This seems fine to me.  I suppose `_write_partitioned` could become a classmethod instead (avoiding the need for a new explicit argument), but I don't think that detail matters much anyway.","2022-02-23T14:40:11Z",false,"APPROVED"
"KrishanBhasin","CONTRIBUTOR","Oh nice! LGTM 🚀 ","2022-02-19T13:19:03Z",false,"APPROVED"
"jsignell","MEMBER","","2022-02-18T13:46:34Z",false,"CHANGES_REQUESTED"
"Dranaxel","CONTRIBUTOR","","2022-02-18T14:00:31Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-18T14:06:51Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-21T21:42:02Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jorisvandenbossche! Would you mind pushing an empty commit with `test-upstream` in it? That will trigger a CI build which uses the nightly version of `pyarrow` here ","2022-02-17T17:52:01Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-21T21:49:05Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks @jacobtomlinson!","2022-02-16T13:42:31Z",false,"APPROVED"
"jacobtomlinson","MEMBER","Thanks for taking the effort to raise this. I'm afraid it would be preferable to update the example to work on all platforms, rather than add a note like this.

I've raised #8731 to do this so I'm going to close this one out.","2022-02-16T10:06:40Z",false,"COMMENTED"
"jakirkham","MEMBER","Thanks Charles!

Generally looks good. Had some thoughts on simplifying things below.","2022-02-16T01:36:39Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2022-02-16T03:14:16Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-02-16T18:56:54Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for fixing @ncclementi. This should be good to go after CI finishes up 

EDIT: Just confirming that `dask/dataframe/tests/test_dataframe.py::test_info` is now passing in the upstream build","2022-02-15T22:17:48Z",false,"APPROVED"
"jsignell","MEMBER","","2022-02-15T21:34:12Z",false,"APPROVED"
"jcrist","MEMBER","","2022-02-15T18:03:22Z",false,"APPROVED"
"jcrist","MEMBER","Thanks for finding this bug @ParticularMiner.","2022-02-15T17:57:32Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-02-15T17:59:39Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-02-15T18:01:38Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-02-15T19:19:44Z",false,"APPROVED"
"jcrist","MEMBER","Thanks for working on this. I've marked a few places in your changes where the effect of the test has been removed (the test was to assert no warnings were raised), we'll want to fix those before merging.

There are other places where you added a specific warning class to `with pytest.warns` (e.g. `with pytest.warns(RuntimeError)`). Unless it's a case where we're testing that a specific warning is thrown, the usage of `with pytest.warns(None)` was to silence the warning message thrown (usually from a library dependency). Switching this to e.g. `pytest.warns(RuntimeError)`  changes the meaning of the test to testing that a specific warning is thrown, which will then fail if the library dependency changes their implementation. We'll want to revert these changes and use the following pattern instead:

```python
# Replace
with pytest.warns(None) as record:
    ...
assert not record

# with this
with warnings.capture_warnings(record=True) as record:
   ...
assert not record

# Replace
with pytest.warns(None):
    ...

# with this
with warnings.capture_warnings(record=True):
    ...
```

This silences all warnings that would be shown in the block, and doesn't require an explicit filter applied. It's also nice and uniform across all places that `with pytest.warns(None)` was used before.
","2022-02-15T17:28:18Z",false,"CHANGES_REQUESTED"
"jsignell","MEMBER","Based on the failure on CI I suspect that this:
```python
with warnings.catch_warnings():
```
 doesn't actually do anything unless it is followed with a 

```python
warnings.simplefilter(""ignore"", ...)
```

To test this out I just ran this locally:

```python
import warnings
import dask.array as da

inc = lambda x: x + 1
x = da.ones(10, chunks=(5,))
with warnings.catch_warnings():
    y = da.atop(inc, ""i"", x, ""i"", dtype=x.dtype)

# /home/julia/dask/dask/array/blockwise.py:281: UserWarning: The da.atop function has moved to da.blockwise
#   warnings.warn(""The da.atop function has moved to da.blockwise"")

```


That behavior differs from `pytest.warns(None)` which just swallows up all the warnings.","2022-02-22T22:13:50Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-03-10T20:38:33Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-10T22:20:22Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-10T22:47:22Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-03-11T16:21:05Z",false,"APPROVED"
"phobson","CONTRIBUTOR","","2022-02-14T16:42:00Z",false,"APPROVED"
"jsignell","MEMBER","SMART","2022-02-11T18:35:45Z",false,"APPROVED"
"pavithraes","MEMBER","@Dranaxel Thanks for this PR!","2022-02-11T14:28:11Z",false,"CHANGES_REQUESTED"
"bryanwweber","CONTRIBUTOR","","2022-02-11T14:32:27Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-02-11T17:49:03Z",false,"COMMENTED"
"Dranaxel","CONTRIBUTOR","","2022-02-11T20:01:02Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-02-11T20:04:46Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-02-12T15:28:51Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-02-12T17:57:43Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-02-15T16:56:12Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","Thanks @crusaderky! Just a couple small comments here","2022-02-10T15:53:00Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-02-10T16:32:29Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-02-10T17:52:32Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-02-10T23:17:16Z",false,"APPROVED"
"jcrist","MEMBER","Thanks @ParticularMiner, this looks pretty good to me.

I do agree with the comment here though (https://github.com/dask/dask/issues/5661#issuecomment-1034097589) that avoiding generating 0 size chunks in the first place would be a good fix. These are still bound to come up periodically, but they only represent extra bookkeeping for the scheduler, as their outputs will always be size 0. Was the fix for that included in your other diagonal PR (https://github.com/dask/dask/pull/8689)?","2022-02-15T19:35:11Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-02-15T20:57:58Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks @ParticularMiner!","2022-02-23T18:40:33Z",false,"APPROVED"
"phobson","CONTRIBUTOR","","2022-02-14T17:02:27Z",false,"COMMENTED"
"ppsbs","CONTRIBUTOR","","2022-02-14T18:46:18Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks for working on this @ppsbs - I just have a few comments","2022-02-18T20:00:12Z",false,"COMMENTED"
"ppsbs","CONTRIBUTOR","","2022-02-23T15:27:24Z",false,"COMMENTED"
"ppsbs","CONTRIBUTOR","","2022-02-23T15:34:55Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-24T14:07:15Z",false,"COMMENTED"
"ppsbs","CONTRIBUTOR","","2022-03-01T15:52:06Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-01T21:50:51Z",false,"COMMENTED"
"ppsbs","CONTRIBUTOR","","2022-03-03T10:13:07Z",false,"COMMENTED"
"jsignell","MEMBER","This looks good to me! Thanks for sticking with this @ppsbs. With regards to the error message. I am actually pretty happy with having such an explicit filter even if it is verbose. It will help keep these tests maintainable because we know exactly what we are trying to filter. ","2022-03-03T16:24:24Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the quick fix @crusaderky! (and for all your type annotations work 🎉 )","2022-02-09T21:00:59Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for fixing @jsignell! Since this is a gpuCI-only change, and that build has passed, I'm going to merge to free CI resources for other PRs / commits

cc @charlesbluca for visibility  ","2022-02-09T20:59:26Z",false,"APPROVED"
"phobson","CONTRIBUTOR","","2022-02-09T22:39:41Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks! I'm also trying to think of ways to better communicate that you can't directly `compute()` a `DataFrameGroupby` object. It has a lot of things in common with `DataFrame`, and can produce Dask DataFrames, but it's not a true collection in the sense of

```python
import dask

ddf = dask.datasets.timeseries()
dask.is_dask_collection(ddf) # True
dask.is_dask_collection(ddf.groupby(""name"")) # False
```
","2022-02-09T22:44:09Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-02-09T22:57:45Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks y'all!","2022-02-15T18:09:03Z",false,"APPROVED"
"ParticularMiner","CONTRIBUTOR","","2022-02-09T15:55:23Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-09T16:03:31Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-02-10T01:14:44Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-10T14:14:00Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","Thanks for sticking with this.","2022-03-03T15:54:19Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-02-18T14:52:46Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-02-18T14:57:22Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks @rjzamora - this generally looks good to me.

One question though: the tests all are for parquet only (both the new tests and the existing tests), but iiuc this optimization will also apply for other IO functionality that uses the DataFrameIOLayer (like `read_csv`). Is this accurate, and if so should a test be added for that functionality as well?","2022-03-09T16:37:05Z",false,"COMMENTED"
"jcrist","MEMBER",":rocket:","2022-03-10T17:06:41Z",false,"APPROVED"
"pavithraes","MEMBER","","2022-02-09T16:44:24Z",false,"APPROVED"
"phobson","CONTRIBUTOR","Failures are unrelated to the coverage versions (scipy namespace changes, python 3.7's usual suite of failures). ","2022-02-14T17:06:03Z",false,"APPROVED"
"TAdeJong","CONTRIBUTOR","","2022-02-10T11:24:53Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-02-13T13:13:57Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks @ParticularMiner , overall this looks good to me. I left one test comment, but the rest looks good. While you're looking at this code, can I ask that you look through the tests for `da.diagonal` as well to see if they offer full coverage for the different parameters we'd care about here (dimensions of input array, chunking variation, axis arguments, etc...)? It'd be good to ensure we have full coverage here while you're still thinking about this code.","2022-02-15T19:18:55Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-02-15T19:41:59Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-02-16T14:05:15Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-02-16T14:49:36Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-02-16T15:07:17Z",false,"COMMENTED"
"jcrist","MEMBER",":rocket:","2022-02-23T18:42:25Z",false,"APPROVED"
"jakirkham","MEMBER","","2022-02-11T05:48:58Z",false,"APPROVED"
"bryanwweber","CONTRIBUTOR","Thanks @tomwhite! This change looks good to me, a fairly simple fix. The test failures appear to be unrelated to this change. Can you also update the docstring for `da.concatenate` to indicate that `None` is an option and will flatten all the arrays before concatenating, similar to the NumPy docstring? Thank you!

Also, I have to note the symmetry in the issue #8668 and the fixing PR #8686 😂 ","2022-02-08T14:59:25Z",false,"APPROVED"
"jakirkham","MEMBER","Thanks Tom! 😄","2022-02-11T05:51:47Z",false,"APPROVED"
"bryanwweber","CONTRIBUTOR","Thanks again @tomwhite! This one looks good to me as well, and again, the test failures are unrelated.","2022-02-08T15:07:06Z",false,"APPROVED"
"jakirkham","MEMBER","Thanks Tom! 😄","2022-02-11T05:53:24Z",false,"APPROVED"
"jsignell","MEMBER","Yeah sounds good!","2022-02-08T16:47:05Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks for your work on this @phobson!","2022-02-15T19:04:55Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-02-22T18:47:54Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-02-22T21:16:24Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-02-22T21:20:49Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-02-22T21:26:26Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-02-22T21:26:56Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-03-01T16:16:41Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-03-15T18:59:12Z",false,"COMMENTED"
"phobson","CONTRIBUTOR","","2022-03-15T19:00:10Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-03-15T20:17:51Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-16T16:02:54Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @bryanwweber. I left a couple of small comments, but otherwise this looks great ","2022-02-09T18:36:00Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-02-09T19:04:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-02-09T20:38:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the updates @bryanwweber. This is good to merge after https://github.com/dask/distributed/pull/5773 is merged over in `distributed`","2022-02-09T20:39:20Z",false,"APPROVED"
"tomwhite","CONTRIBUTOR","","2022-02-15T09:01:18Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-21T22:09:41Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-02-23T17:19:21Z",false,"COMMENTED"
"peterpandelidis","CONTRIBUTOR","","2022-02-23T18:11:56Z",false,"COMMENTED"
"tomwhite","CONTRIBUTOR","LGTM. Thanks for updating this @peterpandelidis.","2022-02-24T10:37:52Z",false,"APPROVED"
"pavithraes","MEMBER","@ian-r-rose and I think this looks good!","2022-02-09T17:12:26Z",false,"APPROVED"
"jsignell","MEMBER","","2022-02-09T23:02:15Z",false,"COMMENTED"
"fjetter","MEMBER","Does the `py.typed` have any effect? IIUC https://www.python.org/dev/peps/pep-0561/#id13 says we'd need to package this file","2022-02-08T14:45:45Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks for getting the ball rolling on this @douglasdavis , I'm quite excited to see this get in.

I think it's outside of the scope of this PR, but I'd love to start writing down protocols/aliases for things like ""tasks"" and ""keys"", which would help to further specify the type parameters for things like `__dask_graph__()` and `__dask_keys__()`.","2022-02-17T20:37:14Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-02-18T18:34:40Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-02-18T18:38:28Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-02-18T18:39:21Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-02-18T18:41:04Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-03-07T16:00:48Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-03-07T16:18:25Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-03-07T20:17:15Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","This is looking great @douglasdavis, thanks. With regards to testing: my instinct is to actually test this very little in unit tests. Maybe a couple of `isinstance` checks like you've done, but not much else. To me, it would be enough to assert that each of the core dask collection classes satisfy this protocol.

Since the primary use of this is for static analysis, I think the correct test is at the `mypy` stage. As in: where might we actually use this protocol in the dask API? We could try to start annotating `dask.{persist, visualize, compute}` or `collections_to_dsk` with it, for instance. We could make `is_dask_collection` a `TypeGuard` (this would require `typing_extensions`). I don't think we need to do *everything* here, but one or two proof-of-concepts that this protocol is useful would go a long way.","2022-04-22T22:21:46Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-04-25T16:49:32Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-04-25T18:23:14Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-04-25T18:25:37Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-26T14:55:27Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-04-26T15:32:37Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-04-26T17:27:31Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @douglasdavis, I think this is close. If some of the self-referential callbacks become too sticky, I'd say we can defer them to follow-ups","2022-04-26T23:11:46Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-04-27T14:18:54Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-04-27T16:00:58Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-27T16:11:33Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-04-27T18:01:48Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @douglasdavis, I'm happy where this sits right now. I have a couple of very minor nits, but I otherwise think this is ready to be taken for a spin.

What do you think @jrbourbeau and @jsignell?","2022-04-27T19:55:07Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-04-27T21:46:54Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-04-27T21:47:07Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-04-27T21:53:48Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-04-27T21:57:47Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2022-04-28T13:30:22Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks for all your work on this @douglasdavis! I'm happy with this as it stands, my only outstanding question is whether the change to `is_dask_collection` deserves a deprecation cycle.","2022-04-29T16:18:12Z",false,"APPROVED"
"jsignell","MEMBER","","2022-04-29T18:38:50Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-04-29T18:53:26Z",false,"APPROVED"
"jsignell","MEMBER","This looks really good to me. ","2022-05-03T19:39:06Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-02-07T18:51:39Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2022-02-08T15:11:41Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-02-09T17:30:37Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-02-10T16:39:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-02-11T15:36:05Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-02-16T21:01:55Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-02-16T21:35:10Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-02-18T15:05:51Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-02-22T15:39:49Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2022-02-23T14:53:30Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-02-23T19:45:23Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @rjzamora, this is heroic work. I love a PR that has more deletions than additions. I'm still digesting this, but here are some early thoughts.

My biggest concern is around the interface of the base `Layer`. It now has some fairly strong assumptions about graph and partitioning structure (see, e.g., `output_blocks`, `_keys_to_indices`) which is not always true. An immediate consequence of this is that we need to allow `output_blocks` to be `None` everywhere to handle those cases. Right now that is mostly `MaterializedLayer`, but I could imagine other, weirder things involving `Delayed` layers or something. To me, this indicates that the `Layer` class is trying to do a bit too much.  I understand that part of what you are trying to do here is consolidate logic, so that impulse makes a lot of sense! But it feels a bit too far right now.

I'm still thinking about this, and may have misunderstood something fundamental. But my instinct here is to actually have most of your `Layer` implementation be something like a `PartitionedLayer`, which handles a lot of logic around partitioned collections, output blocks, keys -> names -> indices -> keys translations, etc. And both that and `MaterializedLayer` could satisfy an abstract `Layer` interface that tries hard to be as close as possible to a pure `Mapping` interface + cull.","2022-03-24T01:08:26Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-03-24T15:25:00Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-03-24T16:41:59Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-03-24T16:43:26Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-03-24T16:44:17Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-03-24T18:25:07Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-03-25T15:00:42Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-03-25T15:33:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-03-29T21:36:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2022-03-29T21:39:00Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-04-04T14:12:02Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @djhoese ","2022-02-07T20:26:53Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2022-02-04T21:05:15Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-18T14:27:50Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2022-02-18T15:12:28Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-18T15:29:07Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2022-02-18T15:30:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for taking this on @jsignell

> Should the underlying directories be prefixed with test_?
> I prefer no prefix unless others feel strongly.

I have a similar preference. Prefixing subdirectories with `test_` seems redundant given they are all in a root `tests/` directory  ","2022-02-04T19:53:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-02-03T21:46:17Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-04T15:10:54Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-04T15:11:06Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-02-11T00:30:17Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-14T16:33:41Z",false,"COMMENTED"
"beckernick","MEMBER","","2022-02-03T19:22:32Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-04T15:59:00Z",false,"COMMENTED"
"beckernick","MEMBER","","2022-02-04T18:50:26Z",false,"COMMENTED"
"beckernick","MEMBER","","2022-02-04T20:30:36Z",false,"COMMENTED"
"beckernick","MEMBER","","2022-02-04T20:30:54Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-02-03T13:41:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-02-03T18:36:39Z",false,"COMMENTED"
"graingert","MEMBER","","2022-02-04T10:09:33Z",false,"COMMENTED"
"jcrist","MEMBER","LGTM as is. Merging.","2022-02-15T18:10:34Z",false,"APPROVED"
"galipremsagar","CONTRIBUTOR","","2022-02-03T00:30:06Z",false,"APPROVED"
"jsignell","MEMBER","","2022-02-03T13:52:25Z",false,"COMMENTED"
"jsignell","MEMBER","Beautiful!","2022-02-03T13:52:47Z",false,"APPROVED"
"jsignell","MEMBER","Love this!","2022-02-02T21:34:11Z",false,"APPROVED"
"jcrist","MEMBER","","2022-02-03T13:42:47Z",false,"APPROVED"
"jcrist","MEMBER","Thanks for the PR. Overall this looks pretty good, just a few small comments.","2022-02-03T14:11:00Z",false,"CHANGES_REQUESTED"
"nordange","CONTRIBUTOR","","2022-02-03T17:55:02Z",false,"COMMENTED"
"nordange","CONTRIBUTOR","","2022-02-03T17:58:25Z",false,"COMMENTED"
"nordange","CONTRIBUTOR","","2022-02-03T18:05:37Z",false,"COMMENTED"
"nordange","CONTRIBUTOR","","2022-02-03T18:05:58Z",false,"COMMENTED"
"nordange","CONTRIBUTOR","","2022-02-03T18:13:57Z",false,"COMMENTED"
"nordange","CONTRIBUTOR","","2022-02-08T19:11:16Z",false,"COMMENTED"
"nordange","CONTRIBUTOR","","2022-02-08T19:11:27Z",false,"COMMENTED"
"nordange","CONTRIBUTOR","","2022-02-08T19:11:41Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-02-08T19:27:36Z",false,"COMMENTED"
"nordange","CONTRIBUTOR","","2022-02-16T19:55:47Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks!","2022-02-23T18:35:05Z",false,"APPROVED"
"jacobtomlinson","MEMBER","This looks to be a great start, thanks @ncclementi!

Is this page intended to replace the [current one](https://docs.dask.org/en/stable/diagnostics-distributed.html)? If so should we consider where docs for things like the progress bars and performance reports should go?

Also do we want to mention how the Dashboard integrates with Jupyter Lab?","2022-02-02T11:56:19Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-02-02T15:10:05Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","Hi Naty! This looks really excellent, thanks for putting in so much effort towards this huge topic. I hope you don't mind that I left you some detailed comments at this fairly early stage. I tried to look at this page from my current perspective with respect to Dask/Distributed. That is, a fairly new user who's run the examples and tutorial, so I've seen the dashboard and I want some more information from it 😄 

At a high level, I think it would be worthwhile to define who the audience for this document is (and apologies if that's spelled out in the issue and I missed it). If this is intended to be a reference for experienced Dask users, then I think my comments can largely be ignored. However, if the audience is meant to be new-ish users, then I hope this feedback will be useful.

Aside from that, I think there is a _ton_ of useful information here and I can't wait to see it live!

Thanks!","2022-02-02T16:14:54Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-02-15T16:16:19Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-02-15T16:44:22Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-02-15T17:23:37Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-02-15T17:53:12Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-02-18T21:56:52Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","This looks great @ncclementi! Feel free to take or leave my alt-text suggestions. Based on the [W3C guidance](https://www.w3.org/WAI/tutorials/images/), I tried to keep them short and tried to explain the purpose of the figure, rather than describe it in detail.","2022-02-24T23:34:18Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-02-25T19:00:11Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-02-25T19:02:03Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-02-25T19:05:32Z",false,"COMMENTED"
"ncclementi","MEMBER","","2022-02-25T19:06:49Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","Thanks for working on this @ncclementi!

This looks awesome and it looks like this has been through a ton of review already. I don't want to derail things by picking through it at this stage. We can always iterate in follow up PRs. Let's get this in.","2022-03-08T17:46:11Z",false,"APPROVED"
"jsignell","MEMBER","This solution looks really clean to me. I like it!!","2022-03-15T13:11:53Z",false,"APPROVED"
"jsignell","MEMBER","","2022-02-01T16:48:29Z",false,"APPROVED"
"gjoseph92","COLLABORATOR","","2022-01-31T22:56:16Z",false,"APPROVED"
"jsignell","MEMBER","LGTM","2022-01-31T20:36:11Z",false,"APPROVED"
"jcrist","MEMBER","Thanks for the PR, this indeed looks like a bug. I confess that even though I wrote this code like 6 years ago, I don't really remember how it works. I left a few comments, but if you've been looking at this recently you probably have as good an idea as I do about what should be changed.","2022-02-03T13:27:23Z",false,"CHANGES_REQUESTED"
"ParticularMiner","CONTRIBUTOR","","2022-02-03T22:17:49Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-02-03T22:18:56Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-02-03T22:24:16Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-02-03T22:24:33Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-02-08T16:58:28Z",false,"CHANGES_REQUESTED"
"ParticularMiner","CONTRIBUTOR","","2022-02-08T17:03:25Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-02-08T17:12:45Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-02-08T17:15:39Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-02-08T17:17:27Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-02-08T17:20:12Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-02-08T17:31:35Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-02-08T17:43:32Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2022-02-08T20:08:07Z",false,"COMMENTED"
"jcrist","MEMBER","Provided tests pass, this looks good to me. Thanks for all your work here!","2022-02-08T20:16:59Z",false,"APPROVED"
"jcrist","MEMBER","I think this is fine to add. It's not terribly hard to support, and doesn't seem like a potential footgun. Makes sense to me.","2022-02-03T13:54:59Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell -- I agree going through a deprecation cycle here, instead of raising an error, makes sense 

Noting that CI failures are unrelated and have already been resolved in `main`","2022-01-28T16:36:30Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-01-25T21:24:26Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-01-25T22:07:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell. This seems like a reasonable workaround -- let's continue to watch the upstream pandas issue. Also cc @jorisvandenbossche for visibility ","2022-01-25T17:50:48Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2022-01-25T20:43:56Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2022-01-25T20:44:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell. I left one small test-related comment, but overall this looks great ","2022-01-25T17:35:20Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-01-25T18:41:13Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks for this! I just have a small suggestion for how to make this a bit clearer","2022-01-24T17:43:27Z",false,"COMMENTED"
"jsignell","MEMBER","This looks great @thomasjpfan thanks so much for taking this on!","2022-01-24T22:20:37Z",false,"APPROVED"
"jsignell","MEMBER","This looks great! I just have one small suggestion","2022-02-01T14:50:47Z",false,"COMMENTED"
"xinrong-meng","CONTRIBUTOR","","2022-02-09T02:07:10Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","Thank you @amirkdv for your work on this! It's looking good, I have a couple suggestions for the test you wrote.","2022-01-26T20:39:26Z",false,"CHANGES_REQUESTED"
"amirkdv","CONTRIBUTOR","","2022-01-26T22:05:20Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @jrbourbeau ","2022-01-21T19:09:23Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-01-24T22:49:04Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-01-24T22:52:53Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-01-25T14:05:19Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-01-25T14:06:29Z",false,"COMMENTED"
"ppsbs","CONTRIBUTOR","","2022-01-25T17:40:41Z",false,"COMMENTED"
"ppsbs","CONTRIBUTOR","","2022-01-25T17:54:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @bryanwweber! Looking forward to seeing this merged 

On Windows, some of the tests added here are failing with 

```python
 E               AssertionError: Attributes of DataFrame.iloc[:, 2] (column name=""path"") are different
E               
E               Attribute ""dtype"" are different
E               [left]:  CategoricalDtype(categories=['C:/Users/RUNNER~1/AppData/Local/Temp/tmpupda7hgh.json'], ordered=False)
E               [right]: CategoricalDtype(categories=['C:\Users\RUNNER~1\AppData\Local\Temp\tmpupda7hgh.json'], ordered=False)
```

The other failures are unrelated to the changes in this PR (xref https://github.com/dask/dask/issues/8580, https://github.com/dask/dask/issues/7406) ","2022-01-25T15:43:06Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-01-25T16:36:14Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-01-25T16:38:39Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-01-25T16:39:29Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-01-25T16:41:11Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-01-25T16:44:19Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-01-25T16:46:57Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-01-25T18:42:18Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-01-25T18:42:46Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-01-25T19:20:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-01-25T20:39:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-01-25T20:41:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-01-25T20:47:50Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-01-26T21:30:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @bryanwweber! ","2022-01-27T00:48:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @bryanwweber! This is in ","2022-01-31T21:14:40Z",false,"APPROVED"
"jsignell","MEMBER","","2022-01-21T16:26:25Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks for this @jacobtomlinson ","2022-01-21T16:35:03Z",false,"APPROVED"
"galipremsagar","CONTRIBUTOR","","2022-01-21T16:55:22Z",false,"APPROVED"
"jrbourbeau","MEMBER","> Let's wait for @charlesbluca

+1. Also just wanted to point out that gpuCI is currently failing due to `22.04` docker images not being available yet. I recall there being a similar delay with previous similar update PRs. Regardless, Charles should know when this is good to merge ","2022-01-21T17:18:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Looks like `22.04` is being used and gpuCI is passing -- thanks @charlesbluca ","2022-01-25T16:05:50Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @douglasdavis! ","2022-01-20T20:22:03Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @graingert! I'm curious what prompted this change as the zoom link should still be correct for the monthly community meeting ","2022-01-20T23:51:14Z",false,"COMMENTED"
"graingert","MEMBER","","2022-01-21T10:38:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the reminder @ncclementi. I just updated the text here to reflect the discussion during the last monthly meeting. Note the Google calendar invite has _not yet been updated_. I'll merge this PR once the calendar is up to date. ","2022-02-21T22:16:49Z",false,"APPROVED"
"gjoseph92","COLLABORATOR","Nice use of those helper functions!","2022-01-26T19:34:27Z",false,"APPROVED"
"chrisroat","CONTRIBUTOR","","2022-01-26T20:04:37Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-26T20:09:28Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-01-21T16:55:30Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @kori73! I actually think that calling `len()` on HighLevelGraph Layers is not quite as safe as we would hope.

With the current design, `__len__()` gives the length of the *materialized* graph. But a lot of the time we don't actually know that length until it is materialized, as specific culling operations can dramatically change the length. So calling `__len__()` canl force materialization before we are ready.

See, e.g., the implementation for the `BroadcastJoinLayer`, which constructs the full task graph upon calling `__len__()`: 
https://github.com/dask/dask/blob/4228dc7439f4ecd05708641bbe25adbf4d658f92/dask/layers.py#L919-L936


The thing that *should* be safe to call is `get_output_keys()`, which is explicitly meant to not force materialization:
https://github.com/dask/dask/blob/4228dc7439f4ecd05708641bbe25adbf4d658f92/dask/highlevelgraph.py#L94-L109

This has a slightly different meaning from the materialized graph length, in that it is restricted only to keys that might be of interest to other layers, rather than intermediate results or other private-ish tasks.

So I'd recommend tweaking the goal of this PR to either:

1. Only show `__len__` if the graph is materialized.
2. Show the length of `get_output_keys()` instead (and maybe change the label from `tasks (unoptimized)` to something like `number of outputs`.

I'd probably prefer the second, as it's closer to the heart of what HighLevelGraphs are meant to do, which is reason about inputs/outputs without forcing a full graph construction.","2022-01-21T20:23:12Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","So sorry for the slow review @kori73! I'm happy with this implementation as it is, I just have some musings about how best to describe these keys, which I think are probably confusing to a lot of users. I'd be curious to hear your thoughts.","2022-02-16T23:40:19Z",false,"COMMENTED"
"kori73","CONTRIBUTOR","","2022-02-17T16:25:43Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @kori73!","2022-02-17T17:05:09Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-01-21T22:07:42Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @jsignell!","2022-01-26T00:20:53Z",false,"APPROVED"
"pavithraes","MEMBER","@Kirito1397 Welcome to Dask and thanks for your PR!","2022-01-17T12:49:54Z",false,"COMMENTED"
"Kirito1397","CONTRIBUTOR","","2022-01-17T20:48:47Z",false,"COMMENTED"
"Kirito1397","CONTRIBUTOR","","2022-01-17T20:49:09Z",false,"COMMENTED"
"Kirito1397","CONTRIBUTOR","","2022-01-17T20:58:58Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-01-19T16:53:51Z",false,"COMMENTED"
"Kirito1397","CONTRIBUTOR","","2022-01-19T18:57:16Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","Looks good to me. I'm starting to think we need to re-discuss the use of a package like donfig or at least switching dask's config to a class.","2022-01-20T02:42:21Z",false,"APPROVED"
"jcrist","MEMBER"," I haven't done a full grep through to see if you've found all the 3.7 compatibility logic (worst case we delete more lines later), but the changes here look good to me.","2022-02-15T18:53:24Z",false,"APPROVED"
"jakirkham","MEMBER","Thanks James! 😄

Generally looks good. Had one question below 🙂","2022-02-16T19:18:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-02-16T21:23:11Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-02-16T21:42:11Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-02-16T21:42:20Z",false,"APPROVED"
"charlesbluca","MEMBER","","2022-01-14T18:22:51Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-01-20T18:17:40Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2022-01-25T17:52:54Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-01-28T17:58:47Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2022-01-28T18:00:23Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Sorry for the slow review @charlesbluca!","2022-02-17T00:05:30Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2022-02-17T06:45:03Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-02-17T16:25:42Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks for your patience on this @charlesbluca! I'm happy with where this stands now","2022-02-17T16:31:31Z",false,"APPROVED"
"jakirkham","MEMBER","","2022-03-17T06:09:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-03-17T06:10:26Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-03-17T06:12:29Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-03-17T06:15:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-03-17T06:17:24Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-03-24T21:08:00Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-03-25T09:57:43Z",false,"COMMENTED"
"graingert","MEMBER","","2022-03-25T10:28:44Z",false,"COMMENTED"
"graingert","MEMBER","","2022-03-25T10:41:27Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-03-25T16:25:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks all for helping finish this up! It looks like all lingering review comments have been addressed. I'll merge this tomorrow if no further comments ","2022-03-30T19:26:51Z",false,"COMMENTED"
"graingert","MEMBER","","2022-03-31T14:30:59Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-01-13T15:43:56Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell! ","2022-01-14T17:26:01Z",false,"APPROVED"
"scharlottej13","CONTRIBUTOR","Just added a couple clarification questions!","2022-01-20T19:59:51Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-01-21T16:44:02Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-01-21T22:23:27Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-01-21T22:24:39Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @crusaderky -- Could you remove the similar comment for `test_norm_any_ndim` too?","2022-01-12T17:35:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @crusaderky ","2022-01-13T15:21:51Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @gjoseph92  -- I left a couple comments about the test that was added, but am looking forward to seeing this added","2022-01-13T16:34:21Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-13T19:11:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-01-13T19:34:40Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-13T20:07:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @gjoseph92 ","2022-01-18T16:50:39Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-01-11T21:31:00Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-11T21:41:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-01-11T21:42:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-01-11T22:02:10Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-11T22:08:43Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-11T22:54:01Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-01-13T18:27:28Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-13T19:53:49Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-01-26T17:59:14Z",false,"CHANGES_REQUESTED"
"gjoseph92","COLLABORATOR","","2022-01-26T19:20:39Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-01-26T20:02:08Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-26T20:31:30Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-01-26T20:38:40Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-28T18:11:13Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-28T18:17:41Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-01-28T18:26:49Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-01-28T18:30:04Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-01-28T18:45:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell -- this looks great. Agreed a deprecation cycle isn't necessary for this change. Just to ensure this resolves some of the test failures we were seeing I pushed an empty commit which triggers an upstream CI build (hope that's okay)","2022-01-11T19:27:13Z",false,"APPROVED"
"jorisvandenbossche","MEMBER","I think this is a fine solution. As mentioned in the pandas issue, you could also use `pd.api.extensions.no_default`, but that is only available since pandas 1.0","2022-01-19T08:30:49Z",false,"APPROVED"
"gjoseph92","COLLABORATOR","The fact that this was optional before just seems incorrect, thanks for fixing","2022-01-10T21:25:44Z",false,"APPROVED"
"gsheni","CONTRIBUTOR","","2022-01-09T18:44:08Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-01-10T20:28:38Z",false,"COMMENTED"
"jsignell","MEMBER","This looks good to me! Thanks @gsheni for taking on this work :)","2022-01-10T20:29:54Z",false,"APPROVED"
"jrbourbeau","MEMBER","Yeah, thanks for adding this @gsheni ","2022-01-10T21:33:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @bryevdv! 

It looks like when visualizing a profiler

https://github.com/dask/dask/blob/54139c11c0527e1d6daaa5b3ad306155add52a5d/dask/diagnostics/profile.py#L88-L97

we end up calling the profiler's `._plot` method

https://github.com/dask/dask/blob/54139c11c0527e1d6daaa5b3ad306155add52a5d/dask/diagnostics/profile_visualize.py#L193

which in turn calls functions with `plot_width` / `plot_height` compatibility code 

https://github.com/dask/dask/blob/54139c11c0527e1d6daaa5b3ad306155add52a5d/dask/diagnostics/profile_visualize.py#L252-L256

I agree that, if using `bokeh >= 3`, a small deprecation warning would be nice to have  ","2022-01-10T21:47:59Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","I don't understand blockwise optimization at all, so these comments are very from the hip","2022-01-07T19:50:33Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-01-07T20:01:26Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-07T20:06:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-07T20:16:22Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-01-07T21:59:11Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-07T23:15:14Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-10T22:02:34Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-10T23:22:00Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-10T23:24:55Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-10T23:53:43Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-10T23:55:37Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-11T00:00:15Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","Nice, I feel like this is slightly easier to intuit. I'm still not sure my suggestion was the right approach though compared to what you originally did! I really don't know if matching dep-ind combos should be considered distinct or equivalent.","2022-01-11T20:11:46Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-13T05:10:48Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-13T05:12:12Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","Okay, I've played with this a lot and I'm confident this change doesn't introduce any new problems.

> Also, I think it is pretty clear that two instances of the same dep-ind combination should be considered equivalent within the context of the same subgraph

Having thought about this more, I agree. The dep names should already be distinct identifiers, and the indices are normalized by the time they reach this point.","2022-01-14T00:43:11Z",false,"APPROVED"
"rjzamora","MEMBER","","2022-01-14T14:49:19Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks for taking this on @davidhassell! It looks good to me - can you just update this cupy test as well:

dask.array.tests.test_cupy_core.test_setitem_errs 
failure: https://gpuci.gpuopenanalytics.com/job/dask/job/dask/job/prb/job/dask-prb/1033/CUDA_VER=11.5,LINUX_VER=ubuntu18.04,PYTHON_VER=3.8,RAPIDS_VER=22.02/testReport/junit/dask.array.tests/test_cupy_core/test_setitem_errs/

ping @Illviljan in case you get a change to review.","2022-01-07T17:29:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for working on this @aneeshnema! Looking forward to seeing this merged in

I wonder if there's a way to fix the links without prepending a `v`. This isn't a huge deal, but currently we're very consistent about always referring to releases as, for example, 2021.12.0. Prepending a `v` breaks that consistency a bit and would be nice to avoid if we can do so without too much effort. ","2022-01-05T21:50:00Z",false,"COMMENTED"
"aneeshnema","CONTRIBUTOR","","2022-01-06T18:08:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for resolving those warnings @aneeshnema. @bryanwweber if you get a chance would you mind taking a look at the changes here? Any thoughts on how we might be able to keep our existing section titles while still having a meaningful hyperlink? ","2022-01-06T20:53:45Z",false,"COMMENTED"
"bryanwweber","CONTRIBUTOR","","2022-01-06T22:04:13Z",false,"COMMENTED"
"aneeshnema","CONTRIBUTOR","","2022-01-07T12:26:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","That looks great -- thanks for the suggestion @bryanwweber and for working on this @aneeshnema 

Also, @aneeshnema I noticed this is your first code contribution to this repository. Welcome!","2022-01-07T19:51:48Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks @pavithraes, this is looking good!","2022-01-05T19:24:38Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @pavithraes, this looks good to me!","2022-01-12T23:55:25Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @abergou! It's good to see you here : ) 

In principle this seems like a fine change. That said, I'm not very familiar with `site.PREFIXES`. How does it differ from `sys.prefix`? On my system they contain the same information (though I appreciate that this probably isn't always the case):

```python
In [1]: import sys

In [2]: sys.prefix
Out[2]: '/Users/james/mambaforge/envs/dask'

In [3]: import site

In [4]: site.PREFIXES
Out[4]: ['/Users/james/mambaforge/envs/dask', '/Users/james/mambaforge/envs/dask']
```

Also, does `site.PREFIXES` always contain `sys.prefix`? If so, we can probably remove including `os.path.join(sys.prefix, ""etc"", ""dask"")` explicitly
","2022-01-12T02:05:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-01-13T00:00:14Z",false,"COMMENTED"
"abergou","CONTRIBUTOR","","2022-01-13T10:34:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the updates @abergou! Any thoughts on this comment https://github.com/dask/dask/pull/8531#discussion_r783511471 about `path` ordering and `dict.fromkeys`? ","2022-01-13T16:36:42Z",false,"COMMENTED"
"abergou","CONTRIBUTOR","","2022-01-13T16:46:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @abergou! This is in 

Also, I noticed this is your first code contribution to this repository. Welcome!","2022-01-14T23:36:19Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","This seems fairly safe to me, but we should add a test for the original issue to prevent regressions.","2022-01-19T17:19:29Z",false,"COMMENTED"
"jcrist","MEMBER","","2022-01-28T18:50:38Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-01-28T18:54:42Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-01-28T19:03:10Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-01-28T19:22:45Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-28T19:26:13Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-01-28T19:41:09Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-01-28T20:14:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @scharlottej13. One small style nit, but otherwise this looks good to go ","2022-02-22T23:30:13Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2022-02-22T23:50:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @scharlottej13 -- this is in ","2022-02-23T01:29:03Z",false,"APPROVED"
"pentschev","MEMBER","","2022-01-05T16:56:18Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-01-05T17:32:50Z",false,"COMMENTED"
"pentschev","MEMBER","","2022-01-05T19:11:09Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-01-05T19:35:13Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-01-05T19:35:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for handling this @jsignell ","2022-01-05T20:08:02Z",false,"COMMENTED"
"pentschev","MEMBER","","2022-01-05T20:48:13Z",false,"COMMENTED"
"pentschev","MEMBER","","2022-01-05T20:54:20Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-01-05T20:55:37Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-01-05T20:58:14Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-01-05T21:00:23Z",false,"COMMENTED"
"pentschev","MEMBER","","2022-01-05T21:00:41Z",false,"COMMENTED"
"pentschev","MEMBER","","2022-01-05T21:00:51Z",false,"APPROVED"
"jsignell","MEMBER","","2022-01-05T21:01:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2022-01-05T21:43:54Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-01-05T21:52:14Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks for working on this @bglossner, this is a nice piece of work!","2022-01-13T22:32:58Z",false,"COMMENTED"
"bglossner","CONTRIBUTOR","","2022-01-14T02:47:23Z",false,"COMMENTED"
"bglossner","CONTRIBUTOR","","2022-01-14T08:09:32Z",false,"COMMENTED"
"bglossner","CONTRIBUTOR","","2022-01-14T09:03:01Z",false,"COMMENTED"
"jsignell","MEMBER","I left a few small comments, but to answer your question, no you don't have to merge main or tidy up your commits, we will squash-merge when this is done so it all ends up as on commit anyways. If you want to trigger CI you can just push an empty commit, but our tests have been having some chronic issues (particularly windows 3.7) so as long as the PR doesn't introduce new failures, we can still merge it.","2022-01-28T15:22:49Z",false,"COMMENTED"
"bglossner","CONTRIBUTOR","","2022-01-28T18:55:42Z",false,"COMMENTED"
"bglossner","CONTRIBUTOR","","2022-01-28T20:16:20Z",false,"COMMENTED"
"jsignell","MEMBER","This looks good! I just have one idea about how to tidy up the pre-existing test. Let me know if you want me to just push to your branch @bglossner ","2022-02-23T14:21:37Z",false,"COMMENTED"
"bglossner","CONTRIBUTOR","","2022-02-23T18:46:21Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-24T17:17:07Z",false,"COMMENTED"
"jsignell","MEMBER","This looks really good @kori73 thanks for doing this work! I just have a few suggestions.","2022-01-10T16:45:08Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","This looks good to me, thank you @Illviljan ","2022-01-05T18:25:14Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @Illviljan, this seems like a reasonable change to me. Would you mind adding a brief comment that this function is explicitly defined outside of `normalize_seq` for performance reasons? That will decrease the likelihood of someone moving it back in the future without realizing this is intentional ","2022-01-05T18:32:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the update @Illviljan -- will merge once CI finishes  ","2022-01-05T18:54:01Z",false,"APPROVED"
"jsignell","MEMBER","","2022-01-03T17:51:08Z",false,"COMMENTED"
"kori73","CONTRIBUTOR","","2022-01-10T20:40:05Z",false,"COMMENTED"
"kori73","CONTRIBUTOR","","2022-01-10T20:41:45Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-01-10T20:46:46Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-01-10T20:47:53Z",false,"COMMENTED"
"deepyaman","CONTRIBUTOR","","2022-01-04T04:22:37Z",false,"COMMENTED"
"jsignell","MEMBER","Just a little comment, and then I think this is good to merge. ","2022-01-04T15:22:45Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-05T18:56:10Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks for looking this over Gabe! I'm going to try to add some tests this week. ","2022-01-06T15:48:50Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-07T20:43:24Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-01-11T19:52:43Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-23T17:18:25Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-23T17:20:57Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-23T17:23:21Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","Looking good to me as well!","2022-02-25T00:33:56Z",false,"APPROVED"
"jsignell","MEMBER","","2022-02-25T22:19:36Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-25T22:20:56Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-25T22:21:50Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-25T22:31:06Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-25T22:33:26Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-02-28T22:02:15Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-01T13:43:45Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-03-03T19:39:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell -- warning by default seems better than splitting by default ","2022-01-14T17:39:14Z",false,"APPROVED"
"jsignell","MEMBER","This seems good to me, your indentation is just slightly off.","2021-12-21T19:50:22Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-12-21T22:54:52Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Cool","2021-12-20T18:46:53Z",false,"APPROVED"
"jsignell","MEMBER","Thanks for opening this @aeisenbarth! I think the `FutureWarnings` that you are seeing are these ones:

```python
/home/julia/dask/dask/array/core.py:1593: FutureWarning: The `numpy.ndim` function is not implemented by Dask array. You may want to use the da.map_blocks function or something similar to silence this warning. Your code may stop working in a future release.
  warnings.warn(
/home/julia/dask/dask/array/core.py:1593: FutureWarning: The `numpy.copyto` function is not implemented by Dask array. You may want to use the da.map_blocks function or something similar to silence this warning. Your code may stop working in a future release.
  warnings.warn(
```

Those are telling you that dask will trigger immedate computation on your `fill_value`. @scharlottej13 mentioned that in her response on the original issue. To get past these warnings in the tests you can explicitly ignore them in the test.","2021-12-20T17:00:25Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-12-20T17:33:44Z",false,"COMMENTED"
"aeisenbarth","CONTRIBUTOR","","2021-12-20T17:49:28Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-20T18:17:44Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-12-20T18:23:05Z",false,"COMMENTED"
"jsignell","MEMBER","This is getting really close! Just a few last comments.","2022-01-05T21:37:30Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks for opening this PR! It looks like a nice improvement.

There is one more piece that @jrbourbeau and I talked about last week but I can't find where we wrote it up. It seems like in other places (namely slicing.py) `split-large-chunks` raises a warning if it is `None`. In your first PR, when `split-large-chunks` is `None` it allows chunk splitting. 

https://github.com/dask/dask/blob/1f30a14865683d76dfeb1f8632879b57d1d6e124/dask/array/reshape.py#L236-L237

Instead it should probably throw a warning, or be treated as Falsey like:

```python
    if limit is None and config.get(""array.slicing.split-large-chunks""):
        limit = parse_bytes(config.get(""array.chunk-size""))
```","2021-12-20T16:21:23Z",false,"COMMENTED"
"jsignell","MEMBER","I was trying to figure out what was going on with the tests and ended up coming up with a slightly different approach. See what you think of https://github.com/dask/dask/pull/8511","2021-12-22T15:49:01Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ncclementi! CI failures are unrelated ","2021-12-15T19:12:39Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! ","2021-12-16T19:29:22Z",false,"APPROVED"
"jsignell","MEMBER","@Kareem-negm in general I am all for the idea of elevating this content into the readme. In terms of maintainability I would prefer for the wording to exactly match the install section here: https://github.com/dask/dask/blob/main/docs/source/install.rst 

Then we can add a test that ensures that they exactly match so that we don't have to remember to update one when we update the other. ","2022-01-04T14:42:21Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-01-05T10:54:54Z",false,"COMMENTED"
"Kareem-negm","NONE","","2022-01-05T11:20:03Z",false,"COMMENTED"
"pavithraes","MEMBER","","2022-01-21T10:59:50Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-20T17:27:37Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-20T03:53:40Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T14:35:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T14:46:57Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T16:03:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T16:10:45Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T16:15:49Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T16:17:00Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-20T17:25:11Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-20T17:29:19Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-20T17:37:53Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T19:27:14Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-20T19:40:33Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T19:54:46Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-20T20:39:19Z",false,"COMMENTED"
"dhirschfeld","NONE","","2022-01-21T02:29:11Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-21T14:51:38Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","Tiny nits, but I think this is ready, right? Just blocked by https://github.com/dask/dask/pull/8453?","2022-01-21T17:22:34Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-25T22:05:04Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-26T17:07:38Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-26T18:49:40Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-26T19:06:30Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-26T19:10:48Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","@rjzamora nice work, this seems good to me and will be a big improvement for users.

I did just realize we should probably open issues for converting the other `to_*` methods to use blockwise similarly.","2022-01-26T19:25:03Z",false,"APPROVED"
"gjoseph92","COLLABORATOR","Thanks for the PR @MaximLippeveld!","2021-12-16T17:21:00Z",false,"COMMENTED"
"MaximLippeveld","CONTRIBUTOR","","2021-12-17T15:18:06Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-12-17T17:29:36Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","Nice changes @MaximLippeveld!","2021-12-17T18:51:16Z",false,"COMMENTED"
"MaximLippeveld","CONTRIBUTOR","","2021-12-22T21:50:53Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-05T18:23:50Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","@MaximLippeveld looks good to me!","2022-01-06T17:54:35Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","Thanks @MaximLippeveld! @jrbourbeau should we merge?","2022-01-06T18:36:13Z",false,"APPROVED"
"jsignell","MEMBER","This is a nice improvement! I just made some casing suggestions, but other than that I think we just merge this and we can always add more later.","2021-12-22T16:04:02Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-02-04T16:12:24Z",false,"APPROVED"
"madsbk","CONTRIBUTOR","LGTM but are we sure that HLGs are used in all cases?","2021-12-14T13:29:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @gjoseph92. If we can do this safely, then I'd be in favor. Right now there are compatibility issues with our `compute_as_if_collection` usage

https://github.com/dask/dask/blob/dfdde1c9e666d5830f7a8df53160aca6ff1b881f/dask/base.py#L309-L315","2021-12-14T15:36:26Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","This looks great!","2021-12-13T20:03:24Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2021-12-13T20:19:43Z",false,"COMMENTED"
"ncclementi","MEMBER","","2021-12-14T18:47:43Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2021-12-14T23:02:44Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-15T21:35:25Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2021-12-16T23:22:55Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-12-17T00:16:31Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","This looks great to me! Is there anything left to do, or is this still a draft @scharlottej13?

A thought while reading this: could the pattern used here and in `mode` also be used to implement `ddf.apply(fn, axis=0)`?","2021-12-17T00:25:10Z",false,"APPROVED"
"scharlottej13","CONTRIBUTOR","","2021-12-17T05:03:53Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-21T19:46:03Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-12-21T19:52:02Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2021-12-22T03:18:12Z",false,"COMMENTED"
"jsignell","MEMBER","This is a really nice addition!","2021-12-22T14:08:31Z",false,"APPROVED"
"rjzamora","MEMBER","I have not encountered anyone using this demo - So, I think four months is reasonable considering the pain it is causing :)","2021-12-13T18:08:56Z",false,"APPROVED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-13T10:24:04Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-13T10:29:13Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-22T16:21:47Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-14T19:08:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-12-14T19:15:32Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-14T19:21:37Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-14T19:25:36Z",false,"COMMENTED"
"TnTo","CONTRIBUTOR","","2021-12-15T10:00:58Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-15T20:38:14Z",false,"COMMENTED"
"jsignell","MEMBER","Looks good! I'll open a PR to update this in the other spot I noticed.","2021-12-15T21:37:51Z",false,"APPROVED"
"rjzamora","MEMBER","Thanks @martindurant ! Looks mostly good to me. Just a few questions","2021-12-13T17:12:30Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-12-13T17:28:36Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-12-13T17:32:51Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-12-13T17:33:26Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-12-13T17:35:32Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-12-13T17:39:50Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-12-13T17:43:34Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-13T18:22:06Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-13T18:30:25Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-12-13T18:46:01Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-13T18:52:01Z",false,"COMMENTED"
"rjzamora","MEMBER","LGTM","2021-12-13T18:53:33Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-12-09T20:28:10Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-12-09T20:29:09Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-12-09T20:37:25Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-12-09T20:46:56Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-12-09T22:40:52Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-12-09T22:42:05Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-12-09T22:44:33Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-12-09T22:46:25Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-12-09T22:46:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca. I left a few minor comments which are _not_ meant to be blocking. 

Also noting for others than this CI build takes ~3 minutes to run (without the upload step)","2021-12-17T19:52:53Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-12-17T20:33:46Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-12-17T21:16:16Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-12-17T21:18:53Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-12-17T21:33:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-12-17T22:24:18Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-12-17T22:28:14Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-14T17:54:00Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-12-16T05:58:56Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-16T23:54:19Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-16T23:58:49Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-17T00:06:12Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-17T00:07:01Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-17T00:15:12Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-17T00:17:50Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-12-17T01:12:27Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-17T01:23:06Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-12-17T01:34:54Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-17T17:55:22Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-12-17T19:11:19Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-12-17T19:19:24Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-17T21:41:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-17T21:41:29Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-17T21:44:05Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-17T22:03:04Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-17T22:12:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-17T22:13:35Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-12-17T22:26:57Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-12-17T23:02:50Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-17T23:09:40Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-17T23:22:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-17T23:22:53Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-17T23:29:09Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-17T23:34:11Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-12-18T00:14:37Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-18T00:28:57Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-12-18T01:54:18Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-12-18T01:55:55Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-20T15:01:49Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-20T15:55:45Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-20T03:14:49Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T16:23:29Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T16:25:25Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T17:41:30Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-20T17:42:40Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T18:23:30Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T19:04:14Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T19:16:32Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-20T19:37:38Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T20:08:43Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T20:12:26Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T20:13:49Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-20T20:41:25Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T21:22:04Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-20T21:57:41Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-21T17:00:22Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-21T17:01:24Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-21T17:55:39Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-21T18:37:56Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-21T18:50:27Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-21T18:51:08Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-21T18:55:44Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-21T19:00:36Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","Let's do it!","2022-01-21T20:02:34Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2022-01-21T20:33:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @djhoese! I left one small comment about the tests that were added, but overall the changes here look good","2021-12-07T17:32:57Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","LGTM. The tests are a little more than I was expecting—I thought you'd only test that `x.name` changed with the different arguments—but I'm not sure if the other related behavior (chunks, dtype, drop_axis, new_axis) is insufficiently tested, so these extra tests are worthwhile.","2021-12-07T17:33:46Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2021-12-07T20:02:34Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2021-12-07T20:18:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-12-07T20:32:54Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @djhoese! 

Note: The gpuCI failure is unrelated to the changes here and being tracked over in https://github.com/dask/dask/issues/8465","2021-12-07T21:01:18Z",false,"APPROVED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-10T07:04:09Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-10T07:06:17Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-10T07:30:09Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-10T07:32:06Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","I like this solution. It seems to work pretty well with the tiny toy examples I tried it out on.

Left a couple of minor comments about improving the clarity of the code, nothing major. ","2021-12-10T07:34:22Z",false,"APPROVED"
"martindurant","MEMBER","","2021-12-10T14:31:09Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-12-10T14:34:41Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-12-13T19:40:40Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-13T23:28:04Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-05T23:15:44Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","For what it's worth, I reviewed the contents of the alt-text PR over at https://github.com/scharlottej13/dask/pull/1, so I'm happy with it here too.","2021-12-05T23:18:04Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2021-12-06T19:09:10Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-07T00:36:18Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-07T00:36:32Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-07T00:36:49Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-07T00:37:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @scharlottej13 (and everyone else at the alt text sprint) for the PR and @GenevieveBuckley for reviewing. I left one small comment about a typo, but otherwise this looks good to merge ","2021-12-07T20:45:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @scharlottej13! Will merge once CI finishes up ","2021-12-07T21:38:51Z",false,"APPROVED"
"rjzamora","MEMBER","","2021-12-03T20:11:55Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","I don't really understand optimization well enough to comment on the overall strategy here. But this seems reasonable enough to me.","2022-01-20T03:55:11Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T14:50:56Z",false,"COMMENTED"
"rjzamora","MEMBER","","2022-01-20T14:52:27Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-20T17:18:11Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-20T17:20:30Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","Great!","2022-01-21T20:03:35Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2021-12-10T12:17:53Z",false,"CHANGES_REQUESTED"
"gjoseph92","COLLABORATOR","","2021-12-10T21:51:33Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-12-13T17:27:09Z",false,"APPROVED"
"crusaderky","COLLABORATOR","Tests are failing","2021-12-13T17:27:57Z",false,"CHANGES_REQUESTED"
"jrbourbeau","MEMBER","The `test_daily_stock_deprecated` failure is unrelated to the changes here. xref https://github.com/dask/dask/pull/8477 which will remove that test altogether. ","2021-12-13T17:56:17Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","Nice, I think this is pretty much it! We'll need to figure out how to apply this to other groupby methods too, I think the list of things calling `aca` directly are:
- [ ] `_cum_agg`
- [ ] `var`
- [ ] `cov`
- [ ] `aggregate`
- [ ] `SeriesGroupBy.nunique` (could use a totally different implementation when divisions are known I think)","2021-12-02T20:01:19Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-12-02T20:37:36Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-02T21:47:17Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-12-03T05:00:39Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-03T16:52:22Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-12-03T18:25:45Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-03T18:51:18Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-03T19:31:39Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-12-03T20:00:38Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","@jsignell I LOVE this! Thank you so much. I've found `index` confusing every time I've looked at it... because it's not an Index. Way clearer.","2021-12-02T20:29:08Z",false,"APPROVED"
"jsignell","MEMBER","","2021-12-03T13:38:26Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-03T13:39:34Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-03T16:22:43Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @charlesbluca , can you also add a test demonstrating this behavior?","2021-12-08T16:58:57Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-12-08T17:10:02Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @douglasdavis -- apologies for the delayed review ","2021-12-03T22:34:16Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-12-07T15:57:39Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-12-07T15:58:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @douglasdavis, this is a nice improvement. Will merge once CI finishes ","2021-12-07T16:06:35Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @koverholt ","2021-11-30T16:24:05Z",false,"COMMENTED"
"koverholt","MEMBER","","2021-11-30T16:33:21Z",false,"COMMENTED"
"koverholt","MEMBER","","2021-11-30T16:37:02Z",false,"COMMENTED"
"koverholt","MEMBER","","2021-11-30T18:43:42Z",false,"COMMENTED"
"koverholt","MEMBER","","2021-11-30T21:05:58Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @bryevdv! This looks great 

> Do you think pulling main and rebasing would help?

Yeah, sorry about those unrelated `test_ops_blocksize` failures. They've already been fixed in `main`, so pulling in those changes should fix those failures. FWIW we also squash and merge all PRs, so no need to rebase unless that's your preference. ","2021-12-02T17:28:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @bryevdv! ","2021-12-03T20:34:27Z",false,"APPROVED"
"gjoseph92","COLLABORATOR","","2021-12-03T22:16:45Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-14T13:35:40Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-14T13:36:15Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-14T13:38:37Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-12-14T19:35:09Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-15T22:35:28Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-10T19:33:33Z",false,"COMMENTED"
"jsignell","MEMBER","","2022-03-23T17:35:56Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-29T19:46:37Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-11-29T19:48:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @martindurant ","2021-11-30T02:46:56Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the fix @martindurant. This is in

@brendancol would you be up for opening a PR which adds an entry for makepath? 

EDIT: I should note that the CI failures here are unrelated and have been resolved elsewhere ","2021-11-30T02:54:10Z",false,"APPROVED"
"m-albert","NONE","@GenevieveBuckley I'd agree that the docs regarding this can get much clearer than they currently are.

It's true that `block_info` doesn't show info for dask arrays included as keyword arguments to `map_blocks`, although the docs suggest that it does. Actually, the docs say that `kwargs` shouldn't contain dask arrays:

https://github.com/dask/dask/blob/f91179fedd591c6a0e01175c51ac0e32881ede53/dask/array/core.py#L521-L523

For several dask arrays passed as regular arguments `block_info` works though (e.g. `def func(arr, arr2, block_info=None):` and `out = da.map_blocks(func, arr, arr)` in your example).

As a general comment, I've noticed that the current `block_info` explanation is part of the `map_blocks` function examples (and not of the API doc). This might contribute to why it's so easy to get confused about this functionality. Probably one can only find the right place in the docs with ctrl-f and already knowing about the ""block_info"" keyword.

Would it make sense to at least mention it further above in the function doc? A good and visible place could be here

https://github.com/dask/dask/blob/f91179fedd591c6a0e01175c51ac0e32881ede53/dask/array/core.py#L488-L489

Here's a suggestion:
```
    func : callable
        Function to apply to every block in the array. If `func` accepts `block_info=` or `block_id=` as keyword arguments, these will be passed dictionaries containing information about input and output chunks/arrays during computation. See examples.
```","2021-11-29T12:27:11Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-11-30T02:43:58Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-11-30T02:48:40Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-11-30T02:53:10Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-01T06:44:57Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-01T06:50:50Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-02T04:09:33Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-02T04:17:44Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-02T08:45:43Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-06T00:22:13Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-10T17:44:31Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-10T17:50:21Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ofirr! 

Note that the CI failures here are unrelated to the changes in this PR. Also, I noticed this is your first code contribution to this repository. Welcome!","2021-11-29T22:05:32Z",false,"APPROVED"
"ravwojdyla","CONTRIBUTOR","great work @ParticularMiner, see some questions/comments below.","2021-12-02T04:03:06Z",false,"CHANGES_REQUESTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-02T08:56:17Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-02T08:59:52Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-02T09:01:25Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-02T09:05:11Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-02T09:09:43Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-02T09:25:39Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-02T09:34:38Z",false,"COMMENTED"
"ravwojdyla","CONTRIBUTOR","","2021-12-02T20:15:26Z",false,"COMMENTED"
"ravwojdyla","CONTRIBUTOR","","2021-12-02T20:18:50Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-02T20:23:56Z",false,"COMMENTED"
"ravwojdyla","CONTRIBUTOR","","2021-12-02T20:25:47Z",false,"CHANGES_REQUESTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-02T20:34:51Z",false,"COMMENTED"
"ravwojdyla","CONTRIBUTOR","","2021-12-02T20:38:49Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-02T20:39:12Z",false,"COMMENTED"
"ravwojdyla","CONTRIBUTOR","","2021-12-02T20:40:53Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-02T20:42:42Z",false,"COMMENTED"
"ravwojdyla","CONTRIBUTOR","","2021-12-02T20:45:42Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-02T21:00:18Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-02T21:02:15Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-02T21:04:10Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-02T21:05:15Z",false,"COMMENTED"
"ravwojdyla","CONTRIBUTOR","","2021-12-02T21:20:50Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-02T21:21:19Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-02T21:27:34Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-02T21:32:46Z",false,"COMMENTED"
"ravwojdyla","CONTRIBUTOR","","2021-12-02T23:21:02Z",false,"COMMENTED"
"ravwojdyla","CONTRIBUTOR","Approving*, great work @ParticularMiner

\* pending resolution of the question about the need for `cupy` check ( https://github.com/dask/dask/pull/8423#discussion_r761439317). @ParticularMiner that said if you prefer to merge sooner, and open an issue to discuss that branch/question etc, that sounds good to me too.

FYI @jsignell (and thanks for the ping).","2021-12-04T04:47:02Z",false,"APPROVED"
"pentschev","MEMBER","","2021-12-13T22:50:22Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-12-13T22:50:43Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-13T23:34:15Z",false,"COMMENTED"
"ravwojdyla","CONTRIBUTOR","","2021-12-14T03:34:08Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-14T04:19:03Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-12-14T18:01:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Ah, nice catch @GenevieveBuckley. It looks like https://github.com/dask/dask/pull/6384 explicitly excluded `dask/ml.py` in the `pytest` command where our doctests are run in CI (i.e. the `--ignore-glob` option below)

https://github.com/dask/dask/blob/057210b3caf94f4141dfdca5321d74750e0db382/.github/workflows/additional.yml#L104

What you have here is definitely better as it increases consistency with how we skip other modules.

Would you mind also removing the `--ignore-glob ""dask/ml.py""` option in our doctest CI?

","2021-11-23T17:28:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","This looks great -- thanks again @GenevieveBuckley ","2021-11-29T22:21:56Z",false,"APPROVED"
"jrbourbeau","MEMBER","Those numbers add up -- thanks @GenevieveBuckley","2021-11-23T16:51:41Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell -- this looks great. While we're making these updates, would you mind removing `graphviz` from our conda environment files? It's not necessary as `python-graphviz` is a metapackage for both the system `graphviz` package as well as the Python bindings ","2021-11-22T19:38:14Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the update @scharlottej13! The actual code changes here look good. Would you mind adding a test to ensure this change enables us to read empty parquet files? For instance, we might add something similar to the reproducible example in https://github.com/dask/dask/issues/8374 ","2021-11-22T19:09:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for adding a test @scharlottej13. I left a couple of small comments, but otherwise this looks good to me

Additionally, it looks like the code linting checks in CI are failing. You can run those linting checks locally using the instructions here https://docs.dask.org/en/stable/develop.html#code-formatting ","2021-11-23T00:20:44Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2021-11-23T00:29:36Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2021-11-23T00:30:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","+1 for @ian-r-rose's suggestion to include the improvement here as is and then open up a separate ticket for the `str` round-trip issue which was uncovered. @scharlottej13 would you be comfortable opening up that issue? 

Thanks for sticking with this PR @scharlottej13! This is in 🎉 

Also, I noticed this is your first code contribution to this repository. Welcome!
","2021-12-07T00:02:12Z",false,"APPROVED"
"jrbourbeau","MEMBER","Seems reasonable -- thanks @charlesbluca ","2021-11-19T16:57:03Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks for this @scharlottej13! I had a few comments, but this is looking really nice!

Any thoughts about figure placement @jacobtomlinson or @jsignell?","2021-11-29T21:30:29Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2021-11-30T19:30:57Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-30T19:58:35Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-02T17:44:01Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2021-12-10T00:04:21Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2021-12-10T00:05:24Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2021-12-10T00:06:01Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2021-12-10T00:06:17Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2021-12-10T17:44:07Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-14T17:34:20Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-14T17:35:13Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2021-12-14T19:36:03Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2021-12-22T03:07:19Z",false,"COMMENTED"
"scharlottej13","CONTRIBUTOR","","2021-12-22T03:10:14Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-22T20:43:37Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-11-22T21:09:55Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-18T18:02:06Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-11-19T05:24:46Z",false,"COMMENTED"
"jakirkham","MEMBER","Thanks Genevieve! This looks good 😄

Had a couple comments on the warning message. Otherwise LGTM","2021-11-19T06:33:05Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-19T13:19:28Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-11-22T08:49:55Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-22T19:24:56Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-11-23T01:45:23Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-11-23T02:28:01Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-11-23T02:28:41Z",false,"COMMENTED"
"jsignell","MEMBER","This looks great! Thanks for being so thorough!","2021-11-29T16:22:14Z",false,"APPROVED"
"jsignell","MEMBER","This seems good to me. Thanks Gabe!","2021-11-18T18:12:16Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-11-23T17:29:02Z",false,"APPROVED"
"jsignell","MEMBER","","2021-11-17T19:29:56Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-11-17T21:27:19Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-11-18T16:02:16Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-11-18T16:29:18Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-11-18T16:55:45Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-11-18T17:19:24Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-11-18T17:21:28Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-11-18T17:21:55Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-11-18T17:51:28Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-18T18:06:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-11-18T18:20:24Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-11-18T18:27:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-11-18T18:35:45Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-11-18T18:36:03Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-11-18T18:37:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-11-18T19:26:03Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-11-18T19:30:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-11-18T21:54:32Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-11-19T20:46:14Z",false,"COMMENTED"
"jsignell","MEMBER","I was looking to see if there are any comments that should be adjusted and I noticed that there are a lot of other places where `divisions` are passed as kwargs. `set_index` and `repartition` come to mind. I am wondering if those should also only accept tuples. There is a `check_division` function that you could probably reuse at least.","2021-11-29T16:17:05Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-11-29T16:30:49Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-29T16:37:58Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-11-29T16:38:35Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-29T16:44:45Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-11-29T17:55:45Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-10T15:06:56Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-10T15:18:05Z",false,"COMMENTED"
"jsignell","MEMBER","This seems like it's in a good state, @charlesbluca is it good to merge from your perspective?","2021-12-20T19:44:49Z",false,"APPROVED"
"gjoseph92","COLLABORATOR","","2021-11-17T18:45:48Z",false,"COMMENTED"
"fjetter","MEMBER","","2021-12-16T11:54:00Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-12-16T22:13:52Z",false,"COMMENTED"
"fjetter","MEMBER","","2021-12-17T10:08:24Z",false,"COMMENTED"
"fjetter","MEMBER","","2021-12-20T12:02:13Z",false,"APPROVED"
"fjetter","MEMBER","I can see test failures in a few different shuffling tests

Sometimes it's a broken process pool, other times a wrong assert. I guess this is connected to removing the `sync` scheduler since some tasks may now submitted to a process pool. Other times there is a broken assert, e.g. in [`test_set_index_overlap`](https://github.com/dask/dask/runs/4564545762?check_suite_focus=true)

Before merging we should verify this is not related and/or fix the problems","2021-12-20T12:10:03Z",false,"CHANGES_REQUESTED"
"jrbourbeau","MEMBER","Thanks for surfacing this @charlesbluca -- and hooray for upstream testing 🎉

This seems like a reasonable quick fix (it's similar to what we [do](https://github.com/dask/dask/blob/f5881891505b9a2ba2da195befb11ad7b4c7bb23/dask/dataframe/core.py#L325) [elsewhere](https://github.com/dask/dask/blob/f5881891505b9a2ba2da195befb11ad7b4c7bb23/dask/dataframe/shuffle.py#L1017)), though I agree with you that converging on a standard manner for handling divisions is in order. Is there a regression test we can add here to ensure we don't revert this fix in the future? 

cc @gjoseph92 for visibility ","2021-11-16T22:43:25Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-11-17T18:13:47Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-11-17T18:24:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Good catch -- thanks for fixing @FredericOdermatt 

Also, I noticed this is your first code contribution to this repository. Welcome!","2021-11-16T15:17:55Z",false,"APPROVED"
"gjoseph92","COLLABORATOR","Thanks @jsignell! This does help clarify things quite a lot.

I have one other suggestion I couldn't comment on the lines for (noting that `npartitions` is ignored when `divisions` is given):
```python
        npartitions: int, None, or 'auto'
            The ideal number of output partitions. If None, use the same as
            the input. If 'auto' then decide by memory use.
            Only used when ``divisions`` is not given. If ``divisions`` is given,
            the number of output partitions will be ``len(divisions) - 1``.
```","2021-11-15T22:29:39Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-17T14:46:45Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-17T14:48:35Z",false,"COMMENTED"
"jsignell","MEMBER","This  looks pretty good @boazmohar! I just have a few suggestions.","2021-11-17T18:09:30Z",false,"COMMENTED"
"boazmohar","CONTRIBUTOR","","2021-11-18T11:45:16Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-22T19:39:42Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-22T21:47:24Z",false,"APPROVED"
"jsignell","MEMBER","This is definitely an improvement over what we have. ","2021-11-29T16:56:29Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-12-04T00:57:38Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the improvements @boazmohar -- this is in

Note, I've marked this PR as not _fully_ closing https://github.com/dask/dask/issues/5610 as there are still some warnings present in the RTD build logs (https://readthedocs.org/api/v2/build/15235174.txt)","2021-11-10T19:28:56Z",false,"APPROVED"
"jsignell","MEMBER","Thanks for pushing this change so quickly. It looks like this doesn't quite work with older versions of pandas. I think you can use `is_bool_dtype` like we do in https://github.com/dask/dask/blob/11f52ed453711e7f4e293208083c284fff4b13ba/dask/dataframe/core.py#L2568 ","2021-11-09T22:19:23Z",false,"COMMENTED"
"m-rossi","CONTRIBUTOR","","2021-11-10T07:30:28Z",false,"COMMENTED"
"m-rossi","CONTRIBUTOR","","2021-11-10T07:38:41Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-10T19:25:17Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks for sticking with this @m-rossi!","2021-11-10T20:06:43Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell

> It'd be nice to improve these docstrings while I'm at it

Just to clarify, is this something you'd like to include in this PR (totally welcome) or include as follow-up work (also totally welcome)?","2021-11-09T20:23:05Z",false,"COMMENTED"
"jsignell","MEMBER","This looks great @boazmohar thanks for taking this on! Regarding your questions, I think that the tiledb issue that you flagged was probably just an oversight and what you have here is what was intended to happen. Regarding deprecating the `get` kwarg. I think it would cleaner to do that in a separate PR so that this one can be super tightly constrained. ","2021-11-08T19:35:45Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-09T13:57:15Z",false,"COMMENTED"
"bluss","NONE","","2021-11-09T18:52:50Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-09T19:18:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for taking the time to do this @boazmohar ","2021-11-09T21:00:51Z",false,"COMMENTED"
"boazmohar","CONTRIBUTOR","","2021-11-09T21:06:52Z",false,"COMMENTED"
"boazmohar","CONTRIBUTOR","Accepted all suggestions, thanks @jrbourbeau ","2021-11-09T21:13:28Z",false,"COMMENTED"
"boazmohar","CONTRIBUTOR","","2021-11-09T21:51:24Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-05T19:17:22Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-11-05T19:17:52Z",false,"COMMENTED"
"jsignell","MEMBER","This looks nice! Thanks for the speedy turn around. I just have one comment about making the error a bit more informative.","2021-11-05T19:18:17Z",false,"APPROVED"
"rjzamora","MEMBER","","2021-11-05T19:19:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the quick fix @rjzamora! I'll hold off on releasing until this is merged","2021-11-05T20:02:26Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-05T15:46:07Z",false,"COMMENTED"
"jsignell","MEMBER","Can you add some tests for this change?","2021-11-05T15:46:42Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-11-05T16:03:49Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-09T14:53:56Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-29T16:34:20Z",false,"COMMENTED"
"jsignell","MEMBER","Just one last comment and this is good to go :)","2021-11-29T16:36:07Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-11-29T16:39:46Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-08T15:50:45Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-11-08T20:00:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @gjoseph92. I left a few small comments, but overall this looks good and I'm looking forward to seeing it merged in ","2021-11-10T20:44:39Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-11-10T21:53:12Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-11-10T21:56:44Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-11-10T21:59:53Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-12-09T19:35:50Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-11-03T14:50:33Z",false,"APPROVED"
"jsignell","MEMBER","Nice!","2021-11-03T14:14:24Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose ","2021-11-03T20:46:35Z",false,"APPROVED"
"jsignell","MEMBER","Thanks for opening this @JSKenyon I think it's an improvement. I'll merge this next week unless anyone has objections (ping  @dask/maintenance)","2021-11-05T13:12:14Z",false,"APPROVED"
"JSKenyon","CONTRIBUTOR","","2021-11-05T13:38:29Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @crusaderky -- this looks fine to me. I was going to ask about adding a test to cover this case, but it looks like https://github.com/dask/dask/pull/8316 prompted the change here and covers the changes in this PR ","2021-11-01T20:34:25Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @crusaderky ","2021-11-01T20:35:49Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-11-01T20:55:57Z",false,"APPROVED"
"douglasdavis","MEMBER","Thanks @ek234! I left one comment about your code fix, another thing we should include is a new test to validate the new behavior. [dask/array/tests/test_array_core.py](https://github.com/dask/dask/blob/main/dask/array/tests/test_array_core.py) would be an appropriate place to add a new test to make sure `out=` returns the same object passed in as the argument.","2021-11-01T15:21:50Z",false,"COMMENTED"
"douglasdavis","MEMBER","Added a couple more comments, looks like the PR is almost good to go!","2021-11-05T13:55:42Z",false,"COMMENTED"
"ek234","CONTRIBUTOR","","2021-11-05T20:08:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Maybe @ian-r-rose or @rjzamora have thoughts on this? I believe there was an effort related to this previously (xref https://github.com/dask/dask/pull/7417) ","2021-10-29T21:04:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose! I just merged https://github.com/dask/dask/pull/8325 and and then merged `main` here, which should result in CI passing for this PR  ","2021-11-01T20:57:46Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose! Left a few small comments, but overall this looks good ","2021-11-01T22:29:08Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-11-01T22:39:32Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-11-01T22:40:39Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-11-01T22:42:44Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-11-01T22:50:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose! ","2021-11-02T02:13:32Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-11-02T02:15:52Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-11-02T02:20:40Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-11-02T03:15:30Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-11-02T04:41:33Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-11-03T20:04:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @crusaderky","2021-10-28T15:15:20Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @GenevieveBuckley! This is a really nice improvement. When I look at the calendar in the [RTD PR preview](https://dask--8312.org.readthedocs.build/en/8312/support.html) the displayed times don't appear to be accurate. For example, the Dask Monthly Meeting is 10-11 AM my local time (US central), but is being displayed as 3-4 PM  (which is the same as what's being displayed in the [`latest` version of the docs today](https://docs.dask.org/en/latest/support.html)).

<img width=""1552"" alt=""Screen Shot 2021-10-28 at 10 22 21 AM"" src=""https://user-images.githubusercontent.com/11656932/139287385-1bb4c081-f2ee-4afc-919c-1348506bcee8.png"">

When you build the docs with the changes in this PR, are times shown in your local time zone? 

`test_interrupt` was a known flaky test, but _should_ be fixed by https://github.com/dask/dask/pull/8314 (which was just merged into `main`)","2021-10-28T15:27:58Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @GenevieveBuckley -- this looks great. Will merge after CI finishes up 👍 ","2021-10-29T02:18:17Z",false,"APPROVED"
"GenevieveBuckley","CONTRIBUTOR","Looks good to me! 

Thanks for spotting this @vyasr. (Also, before today I didn't know that cuDF used to be called PyGDF)","2021-10-28T03:30:25Z",false,"APPROVED"
"jsignell","MEMBER","","2021-11-08T16:31:47Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-11-08T20:23:42Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-08T21:07:38Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","This is cool. Offline we've talked about the various ways that HLG-things can fail to serialize/deserialize correctly. I haven't fully traced this application, but have you checked that this works as expected in a distributed context?","2021-12-03T20:11:57Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","@ian-r-rose I don't remember if I've tested this on distributed or not yet—good point, I'll verify that.","2021-12-03T21:49:01Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @gjoseph92. I left a couple of small comments, but otherwise I get the sense this is good to go ","2021-12-07T21:35:13Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-12-08T00:42:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for taking care of this @crusaderky. Generally the changes here look great","2021-10-27T17:48:33Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-10-27T18:28:13Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-10-27T18:32:30Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-10-27T18:32:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-10-27T18:39:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-10-27T19:50:59Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @crusaderky -- this is in ","2021-10-28T15:12:27Z",false,"APPROVED"
"douglasdavis","MEMBER","","2021-10-27T17:53:01Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @mesejo ","2021-10-27T18:07:10Z",false,"COMMENTED"
"mesejo","CONTRIBUTOR","","2021-10-27T20:21:57Z",false,"COMMENTED"
"mesejo","CONTRIBUTOR","","2021-10-27T20:49:45Z",false,"COMMENTED"
"mesejo","CONTRIBUTOR","","2021-10-27T20:50:03Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-10-27T22:31:17Z",false,"COMMENTED"
"mesejo","CONTRIBUTOR","","2021-10-27T22:58:16Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-15T17:11:30Z",false,"COMMENTED"
"jsignell","MEMBER","While you are at it, it would be nice if we could also support dd.Index.is_monotonic. ","2021-11-15T17:24:12Z",false,"COMMENTED"
"mesejo","CONTRIBUTOR","","2021-11-15T22:00:54Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-18T18:20:34Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-18T18:21:48Z",false,"COMMENTED"
"mesejo","CONTRIBUTOR","","2021-11-23T19:54:17Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-29T15:23:58Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-29T15:27:42Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-29T15:32:57Z",false,"COMMENTED"
"jsignell","MEMBER","Overall this is a nice addition, but I'm not quite sure where the helper functions should live. I am tempted to say they should move to `methods.py`. @jrbourbeau what do you think?","2021-11-29T15:34:18Z",false,"COMMENTED"
"mesejo","CONTRIBUTOR","","2021-12-01T22:29:45Z",false,"COMMENTED"
"jsignell","MEMBER","Sorry I let this sit. It looks like it's almost ready!","2021-12-09T20:58:05Z",false,"COMMENTED"
"mesejo","CONTRIBUTOR","","2021-12-09T22:12:29Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for putting this together @ayushdg. Merging `main` into this PR should resolve the unrelated CI failures 

Also cc @rjzamora ","2021-10-26T16:52:46Z",false,"COMMENTED"
"ayushdg","CONTRIBUTOR","","2021-10-26T17:25:18Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks @ayushdg !","2021-10-26T22:46:10Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @ayushdg -- this is in ","2021-10-27T23:17:20Z",false,"APPROVED"
"jsignell","MEMBER","","2021-10-25T17:36:13Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-10-25T18:16:34Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-10-25T21:42:39Z",false,"COMMENTED"
"jakirkham","MEMBER","Thanks James! 😄","2021-10-25T21:42:48Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","Thanks!","2021-10-25T23:00:36Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell! Interestingly I found that in [the RTD build for this PR](https://dask--8296.org.readthedocs.build/en/8296/generated/dask.dataframe.read_parquet.html#dask.dataframe.read_parquet) it looks like everything is fixed, but [the `latest` version of the docs](https://docs.dask.org/en/latest/generated/dask.dataframe.read_parquet.html#dask.dataframe.read_parquet) doesn't look the same even though there have been [successful RTD builds after this PR was merged](https://readthedocs.org/projects/dask/builds/15088002/). Any thoughts about what might be happening? ","2021-10-25T19:07:59Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-10-25T14:58:23Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-10-25T14:58:31Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-10-26T11:00:15Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-10-26T11:01:28Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-10-26T16:20:54Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-02-04T15:27:47Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @crusaderky, this is awesome. Can't wait to start using it. I have a few questions/suggestions, but nothing that I'd consider blocking.

Can you remind me what the problem was with configuring mypy to ignore problematic files? If we can, I'd love to start turning this on and just exclude some things for the time being.","2022-02-08T22:49:51Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-02-09T15:58:27Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-02-09T16:02:46Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-02-09T16:06:41Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-02-09T17:06:14Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-02-09T17:08:17Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-02-09T17:13:48Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-02-09T17:19:02Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-02-09T18:16:25Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @crusaderky!","2022-02-09T18:21:37Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2022-02-09T20:43:32Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2022-02-09T20:46:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @mgorny, apologies for the delayed reply. There are some unrelated CI failures which have been resolved in `main` already. If you merge `main` into this branch, those failures should go away. What deprecation warning is this for? I'm slightly confused about what the goal of this change is ","2021-10-29T18:37:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jorisvandenbossche","2021-10-21T20:40:53Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-10-20T21:19:04Z",false,"COMMENTED"
"jsignell","MEMBER","Woohoo!!","2021-10-21T13:11:05Z",false,"APPROVED"
"jsignell","MEMBER","Thanks @JoranDox! ","2021-10-20T13:00:21Z",false,"APPROVED"
"jsignell","MEMBER","beautiful!","2021-10-20T13:01:16Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-10-25T20:03:41Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","This seems like a great change.","2021-10-26T13:02:32Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-02T13:58:35Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-02T14:06:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for putting this together @jsignell. It looks like there's general interest in this change. I've left a couple of small final comments, but otherwise this looks good ","2021-11-02T18:27:34Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-03T13:45:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-11-03T13:49:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell. The CI failures here are unrelated and being addressed in https://github.com/dask/dask/pull/8336. After that is in, I'll merge `main` here, then merge this PR once CI finishes ","2021-11-03T14:56:08Z",false,"APPROVED"
"rjzamora","MEMBER","","2021-10-19T15:49:14Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! IIUC it looks like we'll need to be careful in the future to include a `../` for each level in the original URL (e.g. `foo/bar.html` will need a single `../`, `foo/bar/baz.html` will need `../../`. I wonder if there's a way we could have both the new and old URLs be relative to the root of the documentation (like how they currently are configured on `main`)? My guess is that's likely to be less error prone in the future ","2021-10-18T15:37:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! ","2021-10-18T20:49:00Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for putting this together @mesejo! I left a few small suggestions, but overall this looks good ","2021-10-18T21:59:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @mesejo. This looks great -- will merge after CI finishes ","2021-10-20T20:58:44Z",false,"APPROVED"
"GenevieveBuckley","CONTRIBUTOR","Can confirm, this completely fixes https://github.com/dask/dask/issues/7972 :tada: 

I've left a small suggestion to include a bit more detail in the comment belonging to the test, but otherwise it is good to go.","2021-10-14T22:49:07Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-10-14T22:59:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @sgaist! cc @martindurant in case you get a chance to look at this ","2021-10-14T22:20:49Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2023-01-27T18:54:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! ","2023-02-17T18:11:30Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @crusaderky! ","2021-10-21T20:47:17Z",false,"APPROVED"
"jrbourbeau","MEMBER","+1 for skipping doctests if an optional dependency isn't installed. In fact, we might consider running doctests during our normal test CI builds 

https://github.com/dask/dask/blob/7b1f30692975153ddbf0c856ab2c47f5ae10fbf6/continuous_integration/scripts/run_tests.sh#L14

Currently we run doctests in a separate CI build here

https://github.com/dask/dask/blob/85f0b14bd36a5135ce51aeee067b6207374b00c4/.github/workflows/additional.yml#L80-L104

Running doctests anytime we run the test suite, in particular in our `mindeps` builds, would ensure that we have `# doctest: +SKIP` in all the appropriate places 

","2021-10-19T18:57:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","> it seems like you two have conflicting suggestions on which approach to take. I'm happy to do either, if you can come to an agreement.

Good point. After re-reading my comment I clearly had a mental lapse -- I don't think it's possible to conditionally skip doctests based on if a package is installed like it is in unit tests with `pytest.importorskip` 🤦  Let's go with @jsignell's suggestion","2021-10-20T21:28:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @GenevieveBuckley! This is in ","2021-10-14T00:44:08Z",false,"APPROVED"
"ncclementi","MEMBER","","2021-10-20T22:07:53Z",false,"COMMENTED"
"ncclementi","MEMBER","","2021-11-24T17:24:13Z",false,"COMMENTED"
"jcrist","MEMBER","","2021-11-24T18:03:03Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-11-24T18:35:32Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-10-12T21:17:54Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose. This is a nice addition ","2021-10-21T22:42:34Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-10-21T23:23:11Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-10-21T23:35:04Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-10-22T22:55:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose -- this is in","2021-11-10T20:29:52Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @fjetter! ","2021-10-12T23:02:11Z",false,"APPROVED"
"jacobtomlinson","MEMBER","Thanks!","2021-10-13T14:19:52Z",false,"COMMENTED"
"jcrist","MEMBER","","2021-10-11T18:42:58Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-10-18T14:46:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! Overall this looks great -- +1 for having our array slicing error messages mirror NumPy's. Should we add a test for this to make sure they continue to match NumPy's error messages in the future? ","2021-10-18T15:57:21Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Ah, apologies I didn't mean for my question about the error message test to be blocking. Let's go ahead with this PR as is","2021-10-25T21:40:02Z",false,"APPROVED"
"jcrist","MEMBER","Overall this looks good to me. I gave it all a quick skim and nothing stood out as an issue, but being a very large PR I'm mostly relying on tests for error catching here. Thanks @crusaderky.","2021-10-11T18:18:00Z",false,"APPROVED"
"GenevieveBuckley","CONTRIBUTOR","","2021-10-11T05:13:58Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-10-11T05:18:56Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-10-11T05:21:05Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-10-11T05:22:14Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-10-11T14:45:06Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-10-11T14:46:39Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-10-11T14:55:09Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-10-11T22:55:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Just checking in, is there anything else we'd like to do here, or is this ready to try out? ","2021-10-18T21:11:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Alright, let's give this try then. I just created a `needs attention` label, so this should be good to go. Thanks @GenevieveBuckley! ","2021-10-19T21:22:25Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @raybellwaves! I believe this `import` is left over from an older way the default scheduler needed to be set (see https://github.com/dask/dask/pull/3214/files#diff-8ca4e12be5510feb28e1b618e964b2ba0c3b30f74f209a322e8b34733b663bdbR70-R71). What you have here is correct for how users should do this today. Will merge after CI finishes up  

EDIT: CI failures here are unrelated","2021-10-08T17:37:24Z",false,"APPROVED"
"jacobtomlinson","MEMBER","Looks like [the build](https://readthedocs.org/projects/dask/builds/14976281/) took ~6 minutes.

Seems like a good fix provided we can live with the issues raised by @jorisvandenbossche.","2021-10-18T11:14:38Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @vutrungduc7593! This is in

Also, I noticed this is your first code contribution to this repository. Welcome!","2021-10-07T22:41:30Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jakirkham! Since this is a subtle point, could you add a test or comment explaining why this is needed? Otherwise this might get unintentionally reverted in the future  ","2021-10-07T21:12:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jakirkham! ","2021-10-08T00:46:40Z",false,"APPROVED"
"charlesbluca","MEMBER","","2021-10-11T16:00:55Z",false,"COMMENTED"
"jsignell","MEMBER","This makes sense to me!","2021-10-13T14:41:34Z",false,"APPROVED"
"jsignell","MEMBER","","2021-10-05T18:20:31Z",false,"APPROVED"
"jsignell","MEMBER","","2021-10-13T14:58:09Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-10-04T16:22:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-10-04T16:39:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! Having this automatically handled will be nice

cc @jacobtomlinson ","2021-10-04T16:48:30Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-10-04T16:49:33Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-10-04T17:14:06Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","This looks great. Sadly the string manipulation step is necessary.

I guess we should get this merged and see how it performs.","2021-10-15T14:32:12Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jcrist! Mind adding the example from https://github.com/dask/dask/issues/8178 as a regression test? ","2021-09-29T21:19:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! Will merge once CI finishes up ","2021-09-29T19:48:38Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca, this seems fine to me. That said, I'm wondering if this was brought on by some issue with running the `pandas` version of these tests on gpuCI? I ask because I imagine there will be times in the future where we might mark a test with `@pytest.mark.gpu` instead of using `pytest.param` like you do here ","2021-09-29T19:13:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! This is in ","2021-09-29T21:16:49Z",false,"APPROVED"
"charlesbluca","MEMBER","","2021-09-29T18:30:09Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-09-30T16:32:13Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-09-30T22:06:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Just checking in here, @charlesbluca are the changes here still desirable, or are you blocked on anything at the moment? ","2021-11-01T21:25:48Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this looks good to me. Happy to merge on tests pass.","2021-09-30T16:40:38Z",false,"APPROVED"
"galipremsagar","CONTRIBUTOR","","2021-09-29T01:42:51Z",false,"APPROVED"
"charlesbluca","MEMBER","","2021-09-29T03:03:08Z",false,"COMMENTED"
"quasiben","MEMBER","","2021-09-29T13:26:59Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-09-29T13:44:33Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-09-29T13:56:39Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-09-29T13:58:50Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-09-29T14:29:44Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-09-29T14:34:59Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @grlee77! It looks like there are some code formatting issues -- see https://docs.dask.org/en/latest/develop.html#code-formatting for what formatting checks to run or how to (optionally) have these automatically run with `pre-commit`","2021-09-28T21:44:47Z",false,"COMMENTED"
"jcrist","MEMBER","","2021-09-29T17:51:27Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @rjzamora! Overall this looks good -- left a couple of small comments about the test","2021-09-28T15:09:37Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-09-28T15:18:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-09-28T16:26:21Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-09-28T16:28:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-09-28T17:58:41Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-09-28T18:02:38Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-09-28T18:07:42Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-09-28T18:26:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! Will merge after CI finishes ","2021-09-28T19:21:40Z",false,"APPROVED"
"jsignell","MEMBER","","2021-09-27T21:10:56Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! Just give this PR a ping when the new images are built 👍 ","2021-09-27T20:48:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! ","2021-09-27T22:57:41Z",false,"APPROVED"
"jcrist","MEMBER","","2021-09-27T17:00:21Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-10-05T18:56:09Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-10-05T18:59:32Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-10-05T19:11:38Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-10-05T19:28:01Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-10-05T19:46:18Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-10-05T19:48:32Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-10-05T19:56:52Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-10-05T20:19:35Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-10-05T21:10:43Z",false,"COMMENTED"
"MrPowers","CONTRIBUTOR","","2021-10-07T19:39:01Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-10-07T19:40:38Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-10-08T17:02:23Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-10-08T17:03:39Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-10-08T18:46:50Z",false,"COMMENTED"
"jcrist","MEMBER","LGTM","2021-09-23T17:13:18Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @gjoseph92! ","2021-09-24T02:45:02Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-10-25T22:11:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-10-25T22:18:04Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-10-25T22:40:51Z",false,"COMMENTED"
"chrisroat","CONTRIBUTOR","","2021-10-26T03:58:10Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-10-26T16:21:44Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks! Overall this looks good to me - just a quick fix on the docstring and this should be good to go.","2021-09-27T17:06:00Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-09-28T15:14:28Z",false,"COMMENTED"
"jcrist","MEMBER","","2021-09-28T15:35:01Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks! Just fixed a typo, looks good to me.","2021-09-28T15:35:50Z",false,"APPROVED"
"jcrist","MEMBER","","2021-09-23T16:14:59Z",false,"APPROVED"
"jcrist","MEMBER","","2021-09-23T16:06:32Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @djhoese! Will merge once CI finishes up ","2021-09-17T17:18:01Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-09-16T20:57:45Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-09-17T16:16:53Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-10-01T16:16:08Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-10-01T18:44:15Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-10-01T19:32:30Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-10-01T20:02:58Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-09-16T14:38:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Just checking in here, @jsignell is this good to go? ","2021-09-21T15:55:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Great, merging in then ","2021-09-21T16:57:35Z",false,"APPROVED"
"jcrist","MEMBER","","2021-09-23T16:18:29Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @thinhnd2104. Is there an existing issue the changes here are addressing? It's not clear to me why these changes are needed ","2021-09-15T14:14:11Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! This looks good","2021-09-15T23:10:37Z",false,"APPROVED"
"jsignell","MEMBER","","2021-09-16T13:47:58Z",false,"COMMENTED"
"jcrist","MEMBER","","2021-09-14T18:47:43Z",false,"COMMENTED"
"ncclementi","MEMBER","","2021-09-14T19:27:26Z",false,"COMMENTED"
"dhirschfeld","NONE","","2021-09-14T23:30:46Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-09-14T23:47:44Z",false,"COMMENTED"
"jcrist","MEMBER","","2021-09-15T14:26:40Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-09-15T18:14:57Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-03-23T16:45:39Z",false,"COMMENTED"
"jsignell","MEMBER","I have a minor suggestion and it would be great to include a test that raises this exception.","2021-09-14T14:24:11Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-09-14T20:32:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-09-14T20:36:36Z",false,"COMMENTED"
"ncclementi","MEMBER","","2021-09-14T20:49:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-09-14T20:52:31Z",false,"COMMENTED"
"ncclementi","MEMBER","","2021-09-14T20:57:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","It looks like this is causing legitimate GPU failures. For example

```python
15:58:52 ____________ test_merge_tasks_semi_anti_cudf[cudf-leftsemi-parts1] _____________
15:58:52 [gw0] linux -- Python 3.8.10 /opt/conda/envs/dask/bin/python
15:58:52 
15:58:52 engine = 'cudf', how = 'leftsemi', parts = (3, 1)
15:58:52 
15:58:52     @pytest.mark.gpu
15:58:52     @pytest.mark.parametrize(""parts"", [(3, 3), (3, 1), (1, 3)])
15:58:52     @pytest.mark.parametrize(""how"", [""leftsemi"", ""leftanti""])
15:58:52     @pytest.mark.parametrize(
15:58:52         ""engine"",
15:58:52         [
15:58:52             ""cudf"",
15:58:52             pytest.param(
15:58:52                 ""pandas"",
15:58:52                 marks=pytest.mark.xfail(
15:58:52                     reason=""Pandas does not support leftsemi or leftanti""
15:58:52                 ),
15:58:52             ),
15:58:52         ],
15:58:52     )
15:58:52     def test_merge_tasks_semi_anti_cudf(engine, how, parts):
15:58:52         if engine == ""cudf"":
15:58:52             # NOTE: engine == ""cudf"" requires cudf/dask_cudf,
15:58:52             # will be skipped by non-GPU CI.
15:58:52     
15:58:52             cudf = pytest.importorskip(""cudf"")
15:58:52             dask_cudf = pytest.importorskip(""dask_cudf"")
15:58:52     
15:58:52         emp = pd.DataFrame(
15:58:52             {
15:58:52                 ""emp_id"": np.arange(101, stop=106),
15:58:52                 ""name"": [""John"", ""Tom"", ""Harry"", ""Rahul"", ""Sakil""],
15:58:52                 ""city"": [""Cal"", ""Mum"", ""Del"", ""Ban"", ""Del""],
15:58:52                 ""salary"": [50000, 40000, 80000, 60000, 90000],
15:58:52             }
15:58:52         )
15:58:52         skills = pd.DataFrame(
15:58:52             {
15:58:52                 ""skill_id"": [404, 405, 406, 407, 408],
15:58:52                 ""emp_id"": [103, 101, 105, 102, 101],
15:58:52                 ""skill_name"": [""Dask"", ""Spark"", ""C"", ""Python"", ""R""],
15:58:52             }
15:58:52         )
15:58:52     
15:58:52         if engine == ""cudf"":
15:58:52             emp = cudf.from_pandas(emp)
15:58:52             skills = cudf.from_pandas(skills)
15:58:52             dd_emp = dask_cudf.from_cudf(emp, npartitions=parts[0])
15:58:52             dd_skills = dask_cudf.from_cudf(skills, npartitions=parts[1])
15:58:52         else:
15:58:52             dd_emp = dd.from_pandas(emp, npartitions=parts[0])
15:58:52             dd_skills = dd.from_pandas(skills, npartitions=parts[1])
15:58:52     
15:58:52         expect = emp.merge(skills, on=""emp_id"", how=how).sort_values([""emp_id""])
15:58:52 >       result = dd_emp.merge(dd_skills, on=""emp_id"", how=how).sort_values([""emp_id""])
15:58:52 
15:58:52 dask/dataframe/tests/test_multi.py:919: 
15:58:52 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
15:58:52 /opt/conda/envs/dask/lib/python3.8/site-packages/dask_cudf/core.py:139: in merge
15:58:52     return super().merge(other, on=on, shuffle=""tasks"", **kwargs)
15:58:52 dask/dataframe/core.py:4620: in merge
15:58:52     return merge(
15:58:52 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
15:58:52 
15:58:52 left = <dask_cudf.DataFrame | 2 tasks | 2 npartitions>
15:58:52 right = <dask_cudf.DataFrame | 1 tasks | 1 npartitions>, how = 'leftsemi'
15:58:52 on = None, left_on = 'emp_id', right_on = 'emp_id', left_index = False
15:58:52 right_index = False, suffixes = ('_x', '_y'), indicator = False
15:58:52 npartitions = None, shuffle = 'tasks', max_branch = None, broadcast = None
15:58:52 
15:58:52     @wraps(pd.merge)
15:58:52     def merge(
15:58:52         left,
15:58:52         right,
15:58:52         how=""inner"",
15:58:52         on=None,
15:58:52         left_on=None,
15:58:52         right_on=None,
15:58:52         left_index=False,
15:58:52         right_index=False,
15:58:52         suffixes=(""_x"", ""_y""),
15:58:52         indicator=False,
15:58:52         npartitions=None,
15:58:52         shuffle=None,
15:58:52         max_branch=None,
15:58:52         broadcast=None,
15:58:52     ):
15:58:52         for o in [on, left_on, right_on]:
15:58:52             if isinstance(o, _Frame):
15:58:52                 raise NotImplementedError(
15:58:52                     ""Dask collections not currently allowed in merge columns""
15:58:52                 )
15:58:52         if not on and not left_on and not right_on and not left_index and not right_index:
15:58:52             on = [c for c in left.columns if c in right.columns]
15:58:52             if not on:
15:58:52                 left_index = right_index = True
15:58:52     
15:58:52         if on and not left_on and not right_on:
15:58:52             left_on = right_on = on
15:58:52             on = None
15:58:52     
15:58:52         supported_how = (""left"", ""right"", ""outer"", ""inner"")
15:58:52         if how not in supported_how:
15:58:52 >           raise ValueError(
15:58:52                 f""dask.dataframe.merge does not support how='{how}'. Options are: {supported_how}""
15:58:52             )
15:58:52 E           ValueError: dask.dataframe.merge does not support how='leftsemi'. Options are: ('left', 'right', 'outer', 'inner')
15:58:52 
15:58:52 dask/dataframe/multi.py:498: ValueError
```

It looks like cuDF's `merge(...)` supports additional options for `how=` (e.g. `""leftsemi""`), though the [corresponding API docs](https://docs.rapids.ai/api/cudf/stable/api.html#cudf.core.dataframe.DataFrame.merge) say `{‘left’, ‘outer’, ‘inner’}` are the supported options. @rjzamora @jakirkham can you comment on what values for `how=` cuDF supports?","2021-09-15T01:06:27Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-10-14T23:01:03Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks @marcelned, this looks good to me. Merging.","2021-09-23T16:21:04Z",false,"APPROVED"
"jsignell","MEMBER","Perfect!","2021-09-13T14:56:00Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @SnkSynthesis!

It looks like the linting CI build is running into a formatting issue. See https://docs.dask.org/en/latest/develop.html#code-formatting for the code formatting checks that are automatically run (in this particular case, `black` would like to make a code formatting change)","2021-09-13T14:59:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @SnkSynthesis -- will merge once CI finishes up ","2021-09-13T18:03:34Z",false,"APPROVED"
"jsignell","MEMBER","Thanks for opening this PR! Since inplace has been supported in the past we should probably deprecate it a little more slowly. It would probably be enough in this PR to do a FutureWarning if inplace is True and leave the rest of the code as is. ","2021-09-13T13:38:11Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-09-13T15:35:52Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-09-13T15:48:31Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-09-13T15:53:24Z",false,"COMMENTED"
"jsignell","MEMBER","I just have one more comment and then I think this is good to go. ","2021-09-13T15:53:59Z",false,"APPROVED"
"charlesbluca","MEMBER","","2021-09-13T15:57:47Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this seems fine to me, just a few tiny comments.","2021-10-04T17:04:49Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-10-05T15:20:41Z",false,"COMMENTED"
"jsignell","MEMBER","This makes sense to me!","2021-09-09T13:55:49Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell -- this is in ","2021-09-15T16:32:55Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2021-09-07T11:54:10Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-09-07T23:57:07Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-11-26T09:23:34Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","Thanks @GenevieveBuckley this is exciting!","2021-11-29T22:57:38Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-11-30T00:03:23Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-11-30T00:57:37Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-01T01:29:22Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-10T17:13:28Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-10T17:34:15Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-11T02:52:19Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-12-13T13:56:16Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-14T00:02:46Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-12-14T18:49:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-12-14T18:50:05Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-12-16T06:58:18Z",false,"COMMENTED"
"martindurant","MEMBER","The PR looks OK at a first run-through. I have some comments, but not much.

Coding this up using delayed is OK as a first start, but delayed does not benefit from the optimisations possible for dataframes based on high-level-graphs. For example, in the long run we would like to be able to use selections on the index to pick files to load, or that column selection on the output dataframe should result in only those columns being loaded (pushdown).

Actually, *is* there a concept of an index here?

Probably, given we have an explicit schema, the call to `from_delayed` should specify a `meta=`, to prevent having to load the first data file eagerly.","2021-09-09T01:39:30Z",false,"COMMENTED"
"rajagurunath","CONTRIBUTOR","","2021-09-11T12:32:25Z",false,"COMMENTED"
"rajagurunath","CONTRIBUTOR","","2021-09-11T12:32:35Z",false,"COMMENTED"
"rajagurunath","CONTRIBUTOR","","2021-09-11T12:32:41Z",false,"COMMENTED"
"rajagurunath","CONTRIBUTOR","","2021-09-11T12:32:48Z",false,"COMMENTED"
"rajagurunath","CONTRIBUTOR","","2021-09-11T12:32:53Z",false,"COMMENTED"
"rajagurunath","CONTRIBUTOR","","2021-09-11T12:34:06Z",false,"COMMENTED"
"rajagurunath","CONTRIBUTOR","","2021-09-11T12:34:44Z",false,"COMMENTED"
"rajagurunath","CONTRIBUTOR","","2021-09-11T12:35:36Z",false,"COMMENTED"
"rajagurunath","CONTRIBUTOR","","2021-09-11T12:35:41Z",false,"COMMENTED"
"rajagurunath","CONTRIBUTOR","","2021-09-11T12:35:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thank you for your work here @rajagurunath and for reviewing @martindurant!

This PR is proposing we add `read_delta_table` directly to Dask. I wanted to check in to see if this is intentional, or if this PR is to just work through the `read_delta_table` implementation before moving `read_delta_table` to a separate `dask-deltatable` project? 

While delta table support is certainly interesting, it's not something I've seen commonly requested. Given this, the fact that pandas doesn't have a `read_delta_table` function, and the added maintenance burden associated with adding support for a new data format, I'd prefer to not add `read_delta_table` directly to Dask right now, but instead include this in a separate `dask-deltatable` package (which could live in https://github.com/dask-contrib) so we can get a better understanding of how much demand there is for delta table support, what additional feature delta table users will want, and what the corresponding maintenance burden might be. For reference this was discussed previously in https://github.com/dask/dask/issues/6001 / https://github.com/dask/dask/issues/8046#issuecomment-900567210

Also cc @fjetter who may have more thoughts on delta table specifically ","2021-09-11T14:55:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for fixing @martindurant! Will merge once CI finishes ","2021-09-01T16:27:47Z",false,"APPROVED"
"jsignell","MEMBER","Thanks!","2021-09-01T15:12:36Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @quasiben! CI failures are unrelated and being resolved in https://github.com/dask/dask/pull/8109","2021-09-01T16:40:04Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-09-01T16:30:23Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-09-01T16:33:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for fixing @jsignell! 

I realize it predates this PR, but should we be forwarding `like`, `dtype`, etc. keywords for the case when the input `a` is from `xarray`? ","2021-09-01T16:52:16Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-09-01T16:58:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-09-01T17:04:56Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-09-01T17:17:41Z",false,"COMMENTED"
"pentschev","MEMBER","This looks great, thanks everyone for tracking this down and @jsignell for fixing this! 😄 

I requested a small change to test `like=` with `dtype=`, otherwise we're not actually testing the fix in here.","2021-09-06T10:17:32Z",false,"CHANGES_REQUESTED"
"jsignell","MEMBER","","2021-09-07T13:18:12Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-08-26T19:55:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for adding this @crusaderky! ","2021-08-26T21:49:13Z",false,"APPROVED"
"martindurant","MEMBER","I think I've gone through most of it, and don't see much awry. There is a lot, though! Probably you can push ahead and note some for follow-ups, such as profiling whether the remaining work in the client is expensive or not.","2021-10-08T20:58:46Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-10-14T21:20:27Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-10-14T21:41:41Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-10-14T21:43:20Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-10-14T21:48:53Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-10-14T21:56:32Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-10-14T21:58:12Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-10-14T22:01:00Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-10-14T22:05:41Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-10-14T22:06:34Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-10-14T22:17:54Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks, can you add a test? I think something like `with pytest.warns(None)` will check that no warning is raised.","2021-08-26T16:17:16Z",false,"DISMISSED"
"jrbourbeau","MEMBER","Thanks @Patil2099! Could you add a test that ensures no warning is raised when `npartitions == self.npartitions or npartitions == -1` is `True`? ","2021-08-26T16:18:59Z",false,"COMMENTED"
"TomAugspurger","MEMBER","@suriya-it19 can you add a test? I'm not sure this is fixing it yet.","2021-08-26T14:28:20Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-30T17:41:08Z",false,"COMMENTED"
"asmeurer","NONE","","2021-08-30T18:49:46Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-30T18:51:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the quick fix @galipremsagar! Overall this looks good. I've left a few small comments below ","2021-08-25T15:23:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-25T15:25:12Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-25T21:09:51Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-25T21:10:06Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-25T21:11:30Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-25T21:11:38Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-25T21:12:01Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-25T21:12:21Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-25T21:12:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Sounds good to me 👍 Will merge once CI finishes. Thanks again for handling this. ","2021-08-25T21:35:21Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-08-25T21:58:54Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-26T02:25:52Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-23T23:46:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-24T19:27:32Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-24T19:57:18Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-24T20:57:01Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-25T00:43:38Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-25T14:00:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-25T15:25:50Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","Thanks @jrbourbeau !","2021-08-25T22:03:25Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @martinfleis! Will merge after CI finishes up","2021-08-23T21:12:07Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jakirkham! ","2021-08-21T15:33:08Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-08-25T15:43:08Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-25T15:51:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-25T15:56:55Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-09-08T16:17:26Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-09-08T16:31:13Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-09-08T18:59:25Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-09-08T18:59:37Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-09-08T19:06:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-09-14T03:13:55Z",false,"COMMENTED"
"martindurant","MEMBER","Here are comments from the diff alone - mostly questions.
I will go through the code on the branch in detail too, but I don't think that should be a blocker.","2021-09-28T20:54:41Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks for taking the time to slog through this @martindurant !

I left some temporary responses to your comments, and I'll try to address whatever I can tonight.","2021-09-28T22:57:21Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-09-29T02:51:49Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-09-29T04:26:46Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-09-29T15:03:32Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-08-19T20:57:18Z",false,"COMMENTED"
"dotNomad","CONTRIBUTOR","","2021-08-19T20:59:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @dotNomad ","2021-08-19T21:05:28Z",false,"COMMENTED"
"dotNomad","CONTRIBUTOR","","2021-08-19T22:25:03Z",false,"COMMENTED"
"dotNomad","CONTRIBUTOR","","2021-08-19T22:25:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @dotNomad! This is in

Also, I noticed this is your first code contribution to this repository. Welcome! ","2021-08-27T00:09:55Z",false,"APPROVED"
"jsignell","MEMBER","","2021-08-19T20:23:11Z",false,"COMMENTED"
"jopasdev","CONTRIBUTOR","","2021-08-19T20:30:43Z",false,"COMMENTED"
"jsignell","MEMBER",":tada: Yay! Thanks @wreis, I just have one suggestion regarding name.","2021-08-19T18:35:19Z",false,"COMMENTED"
"wreis","CONTRIBUTOR","","2021-08-19T18:43:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Nice, thanks @wreis! Can we configure the `report` job to (temporarily) run on this PR to test the issue-opening code and that the resulting issue looks as expected?  ","2021-08-19T18:56:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-19T19:14:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-19T20:10:15Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-08-19T20:24:16Z",false,"COMMENTED"
"wreis","CONTRIBUTOR","","2021-08-25T21:24:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-09-28T23:05:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @wreis! Let's give this a shot

Also, I noticed this is your first code contribution to this repository. Welcome!","2021-09-29T00:11:39Z",false,"APPROVED"
"wreis","CONTRIBUTOR","","2021-09-29T12:51:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-19T18:14:54Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-08-19T18:37:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! Will merge after CI finishes up ","2021-08-19T18:56:48Z",false,"APPROVED"
"jsignell","MEMBER","","2021-08-19T15:06:34Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks for opening this @spiyer99! I just have a small comment","2021-08-19T15:09:31Z",false,"COMMENTED"
"neelriyer","CONTRIBUTOR","","2021-08-21T06:04:20Z",false,"COMMENTED"
"fjetter","MEMBER","","2021-08-18T12:46:36Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-08-18T01:04:48Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-18T01:12:15Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-08-18T01:20:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-08-18T17:57:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-18T18:02:57Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-18T18:03:54Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-08-18T18:08:51Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-18T18:10:43Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-08-18T18:12:50Z",false,"APPROVED"
"quasiben","MEMBER","","2021-08-17T20:07:49Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-08-17T20:22:36Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-08-17T20:23:59Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @pentschev! We're now passing `like=` to functions like `np.asarray`, which was added in NumPy 1.20.0. Since our minimum support NumPy version is 1.18, should we have extra version logic around what NumPy version is installed? ","2021-08-17T20:26:12Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-08-17T20:35:09Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-08-17T20:36:24Z",false,"COMMENTED"
"quasiben","MEMBER","","2021-08-17T20:38:50Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-08-17T20:41:18Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-08-17T20:41:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-19T22:04:49Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-08-19T22:14:09Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-08-19T22:14:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-19T22:44:14Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-08-20T10:17:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-25T19:58:03Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-08-25T20:03:21Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-26T19:26:52Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-08-26T19:36:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-26T19:46:45Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-08-26T19:59:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-26T21:15:41Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-08-26T21:18:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @madsbk. Is this something we could add a test for? Or, if not, comments like in https://github.com/dask/dask/pull/6981? Otherwise, someone might come along and revert back to using `type`, thinking it's always equivalent ","2021-08-17T20:38:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the test","2021-08-19T03:51:26Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-08-18T03:53:11Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @lmmx! Will merge once CI finishes ","2021-08-16T16:55:26Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @dchudz! This is in ","2021-08-16T17:04:18Z",false,"APPROVED"
"mrocklin","MEMBER","","2021-08-16T13:26:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-08-16T13:27:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-08-16T13:28:19Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2021-08-16T13:32:57Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2021-08-16T13:38:28Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2021-08-16T13:41:08Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-08-16T13:46:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-08-16T13:47:27Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2021-08-16T13:52:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-08-16T13:55:27Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2021-08-16T14:01:18Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2021-08-16T14:08:36Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2021-08-16T14:20:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-08-16T14:30:55Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2021-08-16T15:26:48Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2021-08-17T15:32:47Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2021-08-17T16:01:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-08-17T16:37:00Z",false,"COMMENTED"
"eriknw","MEMBER","","2021-08-17T17:28:18Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2021-08-17T17:39:44Z",false,"COMMENTED"
"jsignell","MEMBER","Looks good to me :)","2021-08-17T13:22:49Z",false,"APPROVED"
"jsignell","MEMBER","","2021-08-13T19:33:08Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-13T19:40:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! It looks like we're running into

```
 E           AttributeError: module 'pyarrow.orc' has no attribute 'write_table'
```

in our Python 3.7 builds (xref https://github.com/dask/dask/issues/8022#issuecomment-897697985). Can we add an informative version check message and skip the orc tests accordingly? ","2021-08-13T20:44:01Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-13T22:42:00Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @rjzamora! Pardon my ignorance about our parquet engines, but I'm curious why supporting `ignore_metadata_file` is more involved for `fastparquet` (also cc @martindurant)","2021-08-17T22:51:58Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-18T00:55:58Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-18T14:36:19Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-18T14:36:38Z",false,"COMMENTED"
"martindurant","MEMBER","At a quick glance, the fp route looks OK, but first I wonder: should we explicitly disallow the combination of ignore_metadata_file with gather_statistics?","2021-08-18T14:48:49Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-18T15:10:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-18T16:09:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-18T16:11:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Woo, thanks for adding `ignore_metadata_file` support to `fastparquet`!","2021-08-18T16:14:00Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-08-18T16:21:18Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-18T16:29:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-18T17:57:51Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-08-18T20:21:22Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-08-18T20:25:16Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-08-18T20:29:37Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-18T20:43:17Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-08-18T21:03:24Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-18T21:46:12Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-13T16:18:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-13T16:54:35Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-08-13T17:01:54Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-13T17:10:47Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-08-13T17:13:59Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-08-17T15:14:19Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-17T16:06:47Z",false,"COMMENTED"
"pentschev","MEMBER","LGTM, thanks @galipremsagar !","2021-08-17T17:11:36Z",false,"APPROVED"
"jrbourbeau","MEMBER","Sorry, I'm just getting to this PR now","2021-08-17T20:16:55Z",false,"COMMENTED"
"quasiben","MEMBER","","2021-08-17T20:27:33Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-17T20:28:49Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-17T20:29:46Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-17T20:46:15Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-17T21:23:01Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-17T21:23:20Z",false,"COMMENTED"
"rjzamora","MEMBER","Oops! Thanks for fixing this!","2021-08-12T15:28:26Z",false,"APPROVED"
"quasiben","MEMBER","","2021-08-26T12:56:24Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-08-26T13:04:28Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-08-26T13:09:09Z",false,"COMMENTED"
"jsignell","MEMBER","This all looks great, but I don't think jinja2 should be a required dependency of dask (similar to how ipywidgets isn't a dependency). All of these display methods are only used in notebooks and notebooks already depend on jinja2, so I think it's just a matter of adding a skip if `ImportError` to the widgets module.","2021-08-12T13:35:21Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-13T17:03:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-13T17:04:41Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2021-08-16T08:47:41Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2021-08-16T08:50:47Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-08-09T20:37:02Z",false,"COMMENTED"
"ncclementi","MEMBER","","2021-08-09T21:18:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-08-09T22:14:17Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2021-08-09T22:24:24Z",false,"COMMENTED"
"ncclementi","MEMBER","","2021-08-09T22:49:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thank @ncclementi for your work on this. I'm starting to look though things now. FWIW, swapping out `operator.getitem` for `chunk.getitem` in `dask/array/rechunk.py`

```diff
diff --git a/dask/array/rechunk.py b/dask/array/rechunk.py
index fe3b5f9e..db8547c5 100644
--- a/dask/array/rechunk.py
+++ b/dask/array/rechunk.py
@@ -9,7 +9,7 @@ import heapq
 import math
 from functools import reduce
 from itertools import chain, count, product
-from operator import add, getitem, itemgetter, mul
+from operator import add, itemgetter, mul
 from typing import Tuple
 from warnings import warn

@@ -22,6 +22,7 @@ from ..base import tokenize
 from ..highlevelgraph import HighLevelGraph
 from ..utils import parse_bytes
 from .core import Array, concatenate3, normalize_chunks
+from .chunk import getitem
 from .utils import validate_axis
 from .wrap import empty
```

results in `test_fuse_getter_with_asarray` passing ","2021-08-10T19:08:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ncclementi! Just wanted to note that the `sparse` test failures in CI are unrelated to the changes here and are being addressed over in https://github.com/dask/dask/pull/8102","2021-08-30T17:22:30Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","I'm excited about this and I think this is a good, simple solution.

I'm slightly concerned about how this will affect iterating over an array, which in principle people _shouldn't_ do, but in reality probably do more often than we'd like.

In general this is a great solution when you're taking a handful of slices out of a much larger array. If you're taking lots of slices out of an array, you could end up worst-case making a full copy of the array when you didn't have to.

To do this correctly in generality, we'd probably need to implement it as an optimization pass, rather than something built into getitem at runtime. We'd look at a chunk, and all of its immediate dependencies that are `getitems`, and sum up how many elements total are gotten from the chunk vs the size of the chunk. If that total is less that XX%, then we rewrite the `getitems` to do a copy, otherwise we leave them alone. Ideally this could be done as a high-level graph optimization as part of the slicing layer (cc @GenevieveBuckley @ian-r-rose)!

But since that's probably a bigger undertaking and this will solve some common-case problems right now, let's just think about how we can mitigate its bad behavior on these uncommon cases.

1. Document this new behavior somewhere. Right now the current behavior is surprising and easy to shoot yourself in the foot with, but at least it matches NumPy's surprising and easy-to-shoot-yourself-in-the-foot-with behavior (which is [documented](https://numpy.org/doc/stable/reference/arrays.indexing.html#:~:text=NumPy%20slicing%20creates,copy()%20is%20recommended.), albeit obscurely). People expect us to follow NumPy, so where we're diverging we should note it.
2. Provide users _some_ way to control it, if they were relying on the previous behavior. A `dask.array.copy_slices_smaller_than: 0.2` config option or the like comes to mind, though I dislike more configs. Maybe kwargs to `da.take` or something?
3. Bit of a hack, but what if `getitem` stored a global dict of `id(obj): items_copied_from_obj`. Each time we do `result.copy()`, we increment that value by `result.size`, and if it ever goes over 50% (or whatever) of `obj.size`, we use https://github.com/dask/distributed/pull/5217 to send a warning to users linking them to the documentation and recommending that they change the `dask.array.copy_slices_smaller_than` config or something?","2021-08-30T18:30:59Z",false,"COMMENTED"
"ncclementi","MEMBER","","2021-08-30T18:49:29Z",false,"COMMENTED"
"ncclementi","MEMBER","","2021-08-30T18:57:37Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-08-30T20:25:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-31T19:27:28Z",false,"COMMENTED"
"ncclementi","MEMBER","","2021-08-31T19:50:55Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-08-12T14:05:16Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-08-12T14:14:18Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-08-12T15:36:39Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-08-23T14:58:29Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-08-23T15:00:14Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-23T15:15:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @pentschev! ","2021-08-05T15:56:26Z",false,"APPROVED"
"rjzamora","MEMBER","Ah, oops. Thanks @jorisvandenbossche - This change makes sense","2021-08-04T17:52:09Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jorisvandenbossche! Will merge once CI finishes ","2021-08-04T19:02:05Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! ","2021-08-04T16:13:53Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @sarahyurick! Could you add a test which illustrates the issue this solving? ","2021-08-03T21:49:43Z",false,"COMMENTED"
"sarahyurick","NONE","","2021-08-05T16:33:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-05T16:45:45Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-08-12T03:04:22Z",false,"COMMENTED"
"sarahyurick","NONE","","2021-08-12T16:40:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-12T17:11:15Z",false,"COMMENTED"
"sarahyurick","NONE","","2021-08-12T17:42:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-12T18:06:37Z",false,"COMMENTED"
"sarahyurick","NONE","","2021-08-12T19:52:50Z",false,"COMMENTED"
"nils-braun","CONTRIBUTOR","","2021-08-13T05:42:21Z",false,"COMMENTED"
"sarahyurick","NONE","","2021-08-13T15:45:14Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-13T18:45:15Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-08-03T20:40:57Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-08-03T20:44:08Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-08-03T20:53:00Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-08-03T20:57:59Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-08-04T19:18:52Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-08-04T22:02:14Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-08-05T14:37:14Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! Do we have a test which makes sure datasets which were written with the `pyarrow-legacy` engine can be read using the `pyarrow-dataset` engine? If not, could we add a small test for this (I think something along the lines of https://github.com/dask/dask/pull/7967#pullrequestreview-721412054 would do)  ","2021-08-03T21:54:25Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-08-04T08:34:22Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","Looks good, thanks!","2021-08-04T08:34:36Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-04T13:02:49Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-08-04T13:07:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! ","2021-08-04T15:54:01Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for adding this @quasiben! ","2021-08-03T21:33:17Z",false,"COMMENTED"
"quasiben","MEMBER","","2021-08-04T14:30:02Z",false,"COMMENTED"
"quasiben","MEMBER","","2021-08-04T15:21:50Z",false,"COMMENTED"
"fjetter","MEMBER","","2021-08-05T11:46:32Z",false,"COMMENTED"
"quasiben","MEMBER","","2021-08-05T14:27:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the ping @jakirkham. I agree with @charlesbluca, let's merge this in, but keep https://github.com/dask/distributed/issues/5154 open to track updating the bot messages. When that happens we can update the corresponding parts here. 

Thanks @quasiben for writing this up! ","2021-08-19T17:30:06Z",false,"APPROVED"
"ncclementi","MEMBER","","2021-09-28T10:16:59Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-09-28T13:10:32Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-09-28T13:55:26Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","Wooo!","2021-10-07T14:32:14Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @pentschev! Keeping an eye out for `test_setitem_extended_API_2d[index13-value13]` sounds good 👍 ","2021-08-03T15:49:51Z",false,"APPROVED"
"zklaus","NONE","","2021-09-08T09:41:39Z",false,"COMMENTED"
"charlesbluca","MEMBER","LGTM! We also just created images using cudf's nightly builds instead of `21.08`, that can be enabled by changing this

https://github.com/dask/dask/blob/264c628db632d6f40a5bbad7c75ed65f03664faa/continuous_integration/gpuci/axis.yaml#L10-L11

to `21.10`, though we can do that in a separate PR if you'd prefer","2021-08-02T20:29:25Z",false,"COMMENTED"
"martindurant","MEMBER","Sorry, I went through this again and I have some thoughts.","2021-08-17T13:08:00Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-17T13:25:13Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-17T13:31:10Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-17T13:59:24Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-17T14:01:10Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-17T14:01:20Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-08-17T14:02:03Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-17T14:02:34Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-17T14:04:11Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-08-17T14:05:37Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-17T14:11:03Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-08-18T00:50:19Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-18T06:15:42Z",false,"COMMENTED"
"martindurant","MEMBER","Some more comments (sorry) on the docs","2021-08-18T16:57:46Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-18T17:48:09Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-18T18:08:28Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-18T18:09:24Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-18T18:21:14Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-08-18T18:23:23Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-18T18:36:57Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-18T18:40:58Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-18T18:50:43Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-18T18:55:34Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-08-18T18:57:34Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-18T19:08:57Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-18T19:15:12Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-08-09T00:27:40Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-08-09T00:29:41Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-08-09T00:30:40Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-09T07:09:29Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-08-09T07:11:47Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-08-10T01:08:24Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-08-10T01:18:32Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-08-10T13:18:30Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @afofa! Overall this looks good, I'm looking forward to seeing it merged in ","2021-07-31T22:41:43Z",false,"COMMENTED"
"afofa","NONE","","2021-08-01T07:29:48Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-08-12T13:15:15Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-07-30T21:52:43Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-07-30T21:54:46Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-07-30T21:55:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-07-30T21:55:29Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-07-30T21:57:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-04T21:07:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-08-04T21:30:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-04T22:45:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-04T23:39:30Z",false,"APPROVED"
"galipremsagar","CONTRIBUTOR","","2021-07-30T22:48:36Z",false,"APPROVED"
"jorisvandenbossche","MEMBER","","2021-08-02T07:09:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for handling this @rjzamora! ","2021-08-02T15:20:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the updates @rjzamora! FWIW I think merging `main` will fix the gpuCI build ","2021-08-02T21:43:43Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-03T02:17:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks as always @rjzamora! This is in 

For reference, the last question I had was if datasets which were previously written using the `pyarrow-legacy` engine could be read in with the new default `pyarrow-dataset` engine, and it appears the answer is ""yes""

```python
In [1]: import dask.dataframe as dd

In [2]: from dask.datasets import timeseries

In [3]: df = timeseries()

In [4]: df.to_parquet(""test.parquet"", engine=""pyarrow-legacy"")
/Users/james/projects/dask/dask/dask/dataframe/io/parquet/core.py:919: FutureWarning: `ArrowLegacyEngine` ('pyarrow-legacy') is deprecated for pyarrow>=5. Please use `engine='pyarrow'`.
  warnings.warn(

In [5]: df2 = dd.read_parquet(""test.parquet"", engine=""pyarrow-dataset"")

In [6]: dd.utils.assert_eq(df, df2)
Out[6]: True
```","2021-08-03T16:29:06Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca and @raydouglass for all your work on this! Overall this looks good and I'm looking forward to seeing this merged : )

Some initial comments I have are:

- We may want to include `dask-cudf` as some tests are currently being skipped with `could not import 'dask_cudf': No module named 'dask_cudf'`
- In the `conda list` step, I see `dask` is installed with `pip` (from the `python setup.py install` step in `build.sh`), but I also see `dask-core` installed from `conda-forge`. It'd be good to confirm that the `dask` package which is actually used in tests corresponds to the PR being built (cc @jakirkham)
- Again from the `conda list` step, our environment has the latest released version of `distributed` installed. In general, the dev version of `dask` depends on the dev version of `distributed`. I'm not sure what the best way is to ensure we always have the latest dev version of `distributed` installed. Perhaps add a `pip install git+https://github.com/dask/distributed` line to `build.sh`? ","2021-07-30T20:14:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","I'm going to merge this PR in order to get the gpuCI build passing in other PRs. I'll open up a separate issue to track additional changes we may want to make. Thanks @charlesbluca! ","2021-08-02T14:51:35Z",false,"APPROVED"
"rjzamora","MEMBER"," Makes sense to me!","2021-07-29T21:26:27Z",false,"APPROVED"
"rjzamora","MEMBER","","2021-07-29T21:34:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the improvement @mrocklin and reviewing @rjzamora. The test failures we're seeing here are due to deprecations in the recent `pyarrow=5.0.0` release. I've opened https://github.com/dask/dask/pull/7960 to temporarily pin `pyarrow<5` in CI. Once that's in, I'll merge `main` here to unblock CI","2021-07-30T00:36:06Z",false,"COMMENTED"
"pentschev","MEMBER","This is really nice, thanks @jrbourbeau !","2021-07-29T18:42:31Z",false,"APPROVED"
"jsignell","MEMBER","This looks great! Thanks for working on it @rajagurunath ","2021-07-28T20:20:15Z",false,"DISMISSED"
"mrocklin","MEMBER","Cool.  I'm glad to see this.  When you're ready we should probably ping Tom White (intentionally not using his github handle now) to try it out.  

Also, any thoughts on testing?  I'm thinking that maybe the number of dependencies has shurnk considerably?  If so we could maybe do something like ...

```python
def test_tensordot_rechunk():
    x = da.ones((10000, 10000), chunks=(1000, 1000))
    y = x.dot(x.T)
    dependencies, dependents = dask.core.get_deps(y.__dask_graph__())
    assert sum(v for v in dependencies.values()) < some magic number
```","2021-07-28T13:09:11Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-30T09:06:26Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-30T09:12:26Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-30T09:19:24Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-09-01T06:06:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-28T14:55:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-07-28T16:43:49Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-26T23:26:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-07-27T00:30:14Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-27T00:33:02Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-07-26T22:53:51Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-27T12:45:38Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-26T22:24:14Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jakirkham! ","2021-07-26T18:58:36Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-26T19:07:32Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-26T19:11:31Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-26T19:12:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-26T20:21:06Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Similar to the other conda environment files you already updated, we'll need to update our array/dataframe minimum dependencies environment here:

https://github.com/dask/dask/blob/8d49c3f1491b4aaccb6560814718f498abf63335/continuous_integration/environment-mindeps-array-dataframe.yaml#L13-L15

","2021-07-26T20:24:25Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-26T20:48:25Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-26T22:30:55Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-26T23:53:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-27T00:54:45Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-27T02:04:52Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-07-27T10:10:50Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-07-27T10:21:46Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-07-27T10:22:40Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-07-27T10:27:39Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-07-27T10:28:40Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-07-27T10:34:01Z",false,"COMMENTED"
"pentschev","MEMBER","I'm astonished by how much compatibility code you were able to drop here @jakirkham , really nice work!

I've left a few suggestions and comments, but otherwise LGTM.","2021-07-27T11:37:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-27T17:26:02Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-27T17:30:17Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-27T17:30:25Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-07-27T17:44:29Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-07-27T17:44:53Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-07-27T17:46:37Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-27T18:21:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-07-27T18:28:10Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-27T18:36:38Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-27T18:46:02Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-27T19:00:01Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-07-27T19:21:50Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-27T19:52:37Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-27T20:24:05Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-27T20:47:06Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-27T20:48:08Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-27T20:54:58Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-28T18:16:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for handling all this @jakirkham! Overall these changes look good. I do have a question about whether we should keep the existing `IS_NEP18_ACTIVE` logic or not ","2021-07-28T19:21:26Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-28T21:10:50Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-28T21:16:54Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-28T21:17:02Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-28T21:19:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-07-29T00:47:01Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-07-29T11:45:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","The only lingering topic here is whether or not we're okay bumping our minimum pyarrow version to 1.0. Generally folks seem on board with this, so I'll suggest we move forward with the minimum version bump. I think the only things left to do are:

1. Updating our minimum listed `pyarrow` version to 1.0 in `docs/source/install.rst`
2. Remove the corresponding `pyarrow` compatibility code. Grepping for `_pa_version`, `pa.__version__`, `pyarrow <`, and `pyarrow >` revealed a few lines we can remove","2021-07-29T16:30:41Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-29T18:07:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for all your work on this @jakirkham! This looks good to merge

There were some surprising test failures that looked totally unrelated to the changes here, so I pushed an empty commit to rerun CI. Will merge if CI passes ","2021-07-29T18:16:02Z",false,"APPROVED"
"mrocklin","MEMBER","","2021-07-26T20:06:50Z",false,"COMMENTED"
"mesejo","CONTRIBUTOR","","2021-07-26T21:37:25Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-08-02T14:08:10Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-08-02T14:15:10Z",false,"COMMENTED"
"mesejo","CONTRIBUTOR","","2021-08-03T06:32:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-07-25T15:22:43Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-07-25T15:23:43Z",false,"COMMENTED"
"rajagurunath","CONTRIBUTOR","","2021-07-25T19:17:23Z",false,"COMMENTED"
"rajagurunath","CONTRIBUTOR","","2021-07-25T19:25:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rajagurunath! ","2021-07-26T18:50:39Z",false,"COMMENTED"
"rajagurunath","CONTRIBUTOR","","2021-07-28T05:35:49Z",false,"COMMENTED"
"rajagurunath","CONTRIBUTOR","","2021-07-28T05:36:11Z",false,"COMMENTED"
"rajagurunath","CONTRIBUTOR","","2021-07-28T05:59:03Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @freyam! ","2021-07-26T17:26:45Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-07-26T17:31:04Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-07-26T17:42:06Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-07-26T17:56:58Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-07-26T18:07:27Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-07-27T17:02:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-07-27T21:57:57Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-07-27T21:59:04Z",false,"COMMENTED"
"eriknw","MEMBER","","2021-07-24T03:29:53Z",false,"COMMENTED"
"eriknw","MEMBER","","2021-07-24T03:31:37Z",false,"COMMENTED"
"eriknw","MEMBER","","2021-08-02T04:31:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-08-02T12:33:34Z",false,"COMMENTED"
"eriknw","MEMBER","","2021-08-03T21:47:47Z",false,"COMMENTED"
"eriknw","MEMBER","","2021-08-03T23:01:27Z",false,"COMMENTED"
"eriknw","MEMBER","","2021-08-03T23:02:01Z",false,"COMMENTED"
"eriknw","MEMBER","","2021-08-04T22:42:07Z",false,"COMMENTED"
"quasiben","MEMBER","","2021-07-23T14:02:54Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-07-23T14:22:17Z",false,"COMMENTED"
"charlesbluca","MEMBER","","2021-07-23T14:24:12Z",false,"COMMENTED"
"quasiben","MEMBER","","2021-07-23T14:29:46Z",false,"COMMENTED"
"jrbourbeau","MEMBER","This seems reasonable, thanks @mrocklin ","2021-07-23T00:42:29Z",false,"APPROVED"
"jsignell","MEMBER","This approach seems good, but I think you will want to explicitly reset the cache when `name` or the `chunks` changes. There is a method called `_reset_cache` for that.","2021-07-21T20:40:13Z",false,"COMMENTED"
"d-v-b","MEMBER","","2021-07-21T20:49:26Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-22T14:23:00Z",false,"COMMENTED"
"jsignell","MEMBER","This is looking really nice! My last comments are: 

- maybe we should prefix the property with an underscore to denote that it's private
- I still think that when the name is set the key_array needs to be reset. Here: https://github.com/dask/dask/blob/56d1891c15320872b815f1ab2f8e41867b231e5e/dask/array/core.py#L1486-L1490 ","2021-07-22T14:27:01Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks @d-v-b this looks great!","2021-10-11T13:37:14Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @bryevdv! ","2021-07-19T23:45:48Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-07-19T21:49:29Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-19T21:50:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-07-19T21:51:20Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-21T15:27:00Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-21T16:26:17Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-21T16:26:42Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-21T17:15:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-07-27T21:44:34Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-28T20:27:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! I merged `main` the resolve the unrelated CI failures. I've got one last question, otherwise this LGTM ","2021-09-02T16:26:45Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-09-07T13:27:49Z",false,"COMMENTED"
"jsignell","MEMBER","I like the idea of putting it in `collection_annotations`","2021-07-19T20:58:01Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-22T13:55:00Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-22T14:20:32Z",false,"COMMENTED"
"mrocklin","MEMBER","Thank you for experimenting with this @rjzamora .  I'm currently -1 on this approach.  I think that it elevates a relatively small optimization too much too high a level in the abstraction.  For example, someone could easy ""well, I want to compute max"" and then we have to add maxes everywhere.  Same with uniqueness, emptiness, min-ness, etc..  I think that we can still solve what you want to solve, but that we should find another way.","2021-07-22T15:10:02Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @fgebhart! Apologies for the unrelated CI failures, those are being resolved elsewhere

Also, I noticed this was your first code contribution to this repository. Welcome! ","2021-07-19T17:46:59Z",false,"APPROVED"
"aa1371","CONTRIBUTOR","","2021-07-17T09:30:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Yeah, I agree with @jsignell. This strikes me as a valid, though non-common use case. Instead of exposing `bind=` through the delayed interface, I'd rather guide users towards the API documented here https://docs.dask.org/en/latest/graph_manipulation.html which will work with all Dask collections (including delayed)","2021-07-22T17:54:00Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-20T18:09:27Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-07-20T18:12:50Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-20T18:20:21Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-07-20T20:52:45Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-21T08:38:27Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-22T00:51:45Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-22T00:53:45Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-22T13:56:36Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-22T13:59:33Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-07-22T14:08:15Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-07-22T14:08:27Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-22T19:54:42Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-23T00:18:23Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-23T00:20:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! ","2021-07-16T17:12:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-16T17:33:21Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-16T17:34:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-07-16T17:38:02Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora, this is in ","2021-07-16T17:38:31Z",false,"APPROVED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-15T01:24:25Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-15T01:32:06Z",false,"COMMENTED"
"grlee77","CONTRIBUTOR","","2021-07-15T02:41:45Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-14T07:55:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-07-14T15:28:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-07-14T15:29:33Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2021-07-14T16:28:11Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-14T16:55:34Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-07-14T21:45:36Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-15T22:43:07Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-07-15T22:53:10Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell, this looks great! A couple of questions that come to mind:

- Should we also update the [`clean` command in `docs/Makefile`](https://github.com/dask/dask/blob/7e231a17c04345f6f6cd66660db4a0df0f11b2ec/docs/Makefile#L42-L43) to also the `generated` directory? I'm not sure what sort of caching sphinx does here
- Does this change impact other projects which are using `intersphinx` to link to Dask API docs? I'm wondering if we need to add redirects for this, or if things will continue to work as is","2021-07-13T20:21:22Z",false,"COMMENTED"
"mrocklin","MEMBER","Shouldn't there be some other protocol than iter that gets triggered first?  What about one of the array protocols?","2021-07-13T15:19:27Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-13T15:28:29Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","A good start!

I'd like to see you:
1. Investigate why you think `dot` is behaving differently, and write that up in a comment (or gist with a notebook, whatever works best)
2. Tidy up the info we see in the HTML table. Earlier we talked about how it starts to look silly if there are lots and lots of chunks shown in there. I gave you some tips earlier for that part (you might even be working on this bit right now :smile: )
3. Start work on 2b whenever you want - it doesn't need to wait until this PR is merged or anything like that.
","2021-07-13T08:33:15Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-07-13T20:52:36Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-07-13T20:55:31Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-07-13T22:32:08Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-14T02:00:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-07-14T02:40:55Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-07-14T04:41:48Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-19T01:58:57Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-19T02:14:46Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-19T02:17:25Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","I like this.
1. We'll need to resolve what's happening with the svg import before this is merged (see discussion thread)
2. I don't think the CI test failures are because of this PR. Can you re-trigger them?
3. The examples look beautiful. Could you replace the ""after"" screenshots in your top level PR description with some new ones (now that there's been a couple of changes, eg: chunks in the table)","2021-07-19T02:21:39Z",false,"CHANGES_REQUESTED"
"freyam","CONTRIBUTOR","","2021-07-19T20:09:54Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-07-19T20:39:59Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-20T00:52:53Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-20T00:55:09Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-20T00:58:05Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-07-20T04:36:55Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-07-20T04:39:31Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-07-20T07:23:11Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-30T07:07:06Z",false,"APPROVED"
"freyam","CONTRIBUTOR","","2021-07-30T07:20:12Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-30T07:20:18Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-07-30T07:21:43Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-07-07T20:45:16Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-08T03:38:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @martindurant! Since PR titles end up the in release changelog, would you mind updating the title of this PR to be more informative?","2021-07-07T15:47:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @martindurant! I just merged `main` which should resolve the unrelated `test_shuffle_priority` error. cc @rjzamora in case you have any thought here. Otherwise, I'll plan to merge this later today ","2021-07-08T16:12:54Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-08T20:34:24Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-07-08T20:58:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-07-08T21:29:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Just merged `main` to resolve the unrelated macOS Python 3.7 CI failure ","2021-07-07T15:50:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora","2021-07-07T22:47:36Z",false,"APPROVED"
"jsignell","MEMBER","This looks good. I'm a little surprised how few there are. It seems like it'd be interesting to replace all the pandas imports with cudf or something for the gpu CI but maybe that is too crazy.","2021-07-15T20:49:57Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charlesbluca! Merging this in now and we can always mark more tests in the future","2021-07-20T14:25:45Z",false,"APPROVED"
"rjzamora","MEMBER","","2021-07-06T14:10:22Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-07-06T14:11:32Z",false,"COMMENTED"
"rjzamora","MEMBER","LGTM - Thanks for this Martin!","2021-07-06T15:13:10Z",false,"APPROVED"
"jsignell","MEMBER","Thank you for opening this  -and sorry it took a while for me to look at. I have a few comments that probably apply to the other PRs as well. I'll just review this one for now so that we can keep the conversation in one spot. ","2021-07-12T14:49:03Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2021-07-14T02:15:31Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","@jsignell Thanks for the review and great suggestions! I agree it's best to limit the conversation in one spot as opposed to spread out across all 6 PRs.

As you'll see from my follow-up comments, I have a few more clarifying questions. Once we get those figured out and this PR merged, I can proceed to making the same set of changes in the remaining PRs.","2021-07-14T02:25:24Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2021-07-15T02:11:35Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2021-07-15T02:13:30Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-15T14:42:53Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2021-07-15T17:58:45Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-15T18:09:34Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2021-07-19T03:34:39Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-19T14:42:08Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-19T14:48:42Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2021-07-19T23:38:18Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","@jsignell Ready for review. Most of the skips in `dask.dataframe.*` are for loading fictitious files and therefore cannot be removed.","2021-07-21T02:34:19Z",false,"COMMENTED"
"jsignell","MEMBER","This looks great! Just some minor comments","2021-07-21T13:03:06Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2021-07-22T02:37:57Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2021-07-22T02:56:40Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2021-07-22T03:04:39Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-22T14:36:04Z",false,"APPROVED"
"zzhengnan","CONTRIBUTOR","@jsignell This one is ready for review as well.","2021-07-21T03:02:14Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-22T14:52:42Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2021-07-22T23:45:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-07-26T17:11:53Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2021-07-26T20:30:20Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-06T01:22:55Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-07-06T01:31:59Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-09T01:54:43Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-07-09T03:41:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @mrocklin!

(Note the Python 3.7 failure is unrelated to the changes here -- xref https://github.com/dask/dask/pull/7878#issuecomment-875158573)","2021-07-06T23:55:52Z",false,"APPROVED"
"zzhengnan","CONTRIBUTOR","","2021-07-03T16:53:30Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-26T14:37:57Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2021-07-26T20:56:58Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-28T20:49:29Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-28T20:50:49Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-28T20:52:48Z",false,"COMMENTED"
"jsignell","MEMBER","Hmm. I am not quite sure if these changes make the docs clearer. Particularly the times as floats is kind of hard to interpret. What do you think?","2021-07-26T14:40:01Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2021-07-03T14:48:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @zzhengnan! ","2021-07-23T01:11:24Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-07-02T17:05:55Z",false,"COMMENTED"
"jsignell","MEMBER","I love this change. Explicitly failing is so much better than kind of working sometimes :)","2021-07-15T21:03:12Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @GenevieveBuckley ","2021-07-02T21:35:01Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-07-05T02:19:58Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @GenevieveBuckley!

(Note the test failure showing up here is unrelated https://github.com/dask/dask/issues/2192)","2021-07-06T21:56:46Z",false,"APPROVED"
"jsignell","MEMBER","","2021-07-22T19:51:57Z",false,"COMMENTED"
"ncclementi","MEMBER","","2021-08-06T23:12:07Z",false,"COMMENTED"
"rhjmoore","CONTRIBUTOR","","2021-08-10T10:10:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ncclementi! Overall this looks great. Passing user-provided `chunks` through `normalize_chunks` is definitely the way to go.

Fortunately `normalize_chunks` has some of the same chunksize calculation logic that we've implemented here in `da.eye`. So since we're now always calling `normalize_chunks`, we can remove some code from `da.eye` which is now unnecessary:

```diff
diff --git a/dask/array/creation.py b/dask/array/creation.py
index 2e8b0eab..87cc715b 100644
--- a/dask/array/creation.py
+++ b/dask/array/creation.py
@@ -544,18 +544,12 @@ def eye(N, chunks=""auto"", M=None, k=0, dtype=float):
     if not isinstance(chunks, (int, str)):
         raise ValueError(""chunks must be an int or string"")

-    chunks = normalize_chunks(chunks, shape=(N, M), dtype=dtype)
-    chunks = chunks[0][0]
+    vchunks, hchunks = normalize_chunks(chunks, shape=(N, M), dtype=dtype)
+    chunks = vchunks[0]
+
     token = tokenize(N, chunks, M, k, dtype)
     name_eye = ""eye-"" + token

-    vchunks = [chunks] * (N // chunks)
-    if N % chunks != 0:
-        vchunks.append(N % chunks)
-    hchunks = [chunks] * (M // chunks)
-    if M % chunks != 0:
-        hchunks.append(M % chunks)
-
     for i, vchunk in enumerate(vchunks):
         for j, hchunk in enumerate(hchunks):
             if (j - i - 1) * chunks <= k <= (j - i + 1) * chunks:
```","2021-07-01T21:48:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ncclementi! Will merge after CI finishes up ","2021-07-02T00:24:23Z",false,"APPROVED"
"rjzamora","MEMBER","","2021-06-30T15:04:49Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2021-06-30T17:07:54Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2021-06-30T17:13:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @madsbk -- apologies for the delay ","2021-07-08T23:08:10Z",false,"APPROVED"
"mrocklin","MEMBER","","2021-06-29T16:55:15Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","Looks good @rjzamora nice work. I agree with @mrocklin, it would be good with a more general test but I don't think you should put too much work into it.","2021-06-30T12:19:20Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-30T14:20:05Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-30T14:39:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-30T16:06:20Z",false,"COMMENTED"
"jsignell","MEMBER","This looks nice! I just have a minor comment","2021-07-02T16:03:01Z",false,"COMMENTED"
"gerrymanoim","CONTRIBUTOR","","2021-07-02T16:43:40Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-28T19:08:53Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-28T21:36:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the fix @madsbk! ","2021-06-29T21:06:54Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2021-06-30T07:33:00Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2021-06-30T07:34:03Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2021-06-30T07:41:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @madsbk! ","2021-06-30T13:01:00Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @ncclementi! ","2021-06-25T20:09:29Z",false,"COMMENTED"
"ncclementi","MEMBER","","2021-06-25T20:19:31Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-28T18:47:04Z",false,"COMMENTED"
"ncclementi","MEMBER","","2021-06-29T15:29:36Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-07-12T13:27:17Z",false,"COMMENTED"
"ncclementi","MEMBER","","2021-07-12T15:04:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ncclementi, sorry for the delayed response ","2021-07-12T16:27:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ncclementi! ","2021-07-14T03:31:27Z",false,"APPROVED"
"jsignell","MEMBER","Nice!","2021-06-25T18:47:09Z",false,"APPROVED"
"martindurant","MEMBER","","2021-06-28T16:00:24Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-28T16:16:45Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-06-28T16:22:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @glentner! This is in

Also, I noticed this was your first code contribution to this repository. Welcome! ","2021-06-24T04:04:44Z",false,"APPROVED"
"mrocklin","MEMBER","","2021-06-24T14:38:57Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-06-24T14:45:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-23T18:20:19Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-06-23T18:26:31Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-06-23T18:27:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the updates @douglasdavis! I'm almost positive the failing CI build is totally unrelated to the changes here (confirming over in https://github.com/dask/dask/pull/7878) ","2021-07-06T20:22:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Just merged `main` into this branch to resolve the unrelated macOS Python 3.7 CI failure","2021-07-07T15:54:04Z",false,"COMMENTED"
"jsignell","MEMBER","I don't love the idea of adding another kwarg to read_csv, but I guess if we think the default is sane, then it's not too bad. 

It would definitely be good to document this in the docstring https://github.com/dask/dask/blob/main/dask/dataframe/io/csv.py#L648:L649 ","2021-06-23T16:06:55Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-06-23T16:10:21Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-06-23T16:15:26Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-06-23T16:40:11Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-06-23T16:40:19Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-23T21:08:33Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-23T21:08:53Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-06-24T14:40:39Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-22T16:04:06Z",false,"APPROVED"
"jsignell","MEMBER","","2021-06-22T16:04:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-22T18:50:48Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-22T19:06:38Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-21T15:08:59Z",false,"COMMENTED"
"jsignell","MEMBER","This looks good to me - thanks so much for opening it! ","2021-06-21T15:15:42Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @QuLogic! Is `packaging.version` the recommended way to parse packages today? I know there's a `pkg_resources.parse_version` utility in `setuptools`, but it looks like [internally that just uses `packaging.version.parse`](https://github.com/pypa/setuptools/blob/a4dbe3457d89cf67ee3aa571fdb149e6eb544e88/pkg_resources/__init__.py#L112-L116). 

cc @jakirkham who might find this interesting","2021-06-21T16:50:52Z",false,"COMMENTED"
"QuLogic","CONTRIBUTOR","","2021-06-21T21:20:06Z",false,"COMMENTED"
"QuLogic","CONTRIBUTOR","","2021-06-21T22:02:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @QuLogic. I pushed a few small commits which primarily just explicitly add `packaging` to CI builds. I also set version `20.0` of `packaging` as the minimum support version (which is just over 18 months old). Will merge once CI finishes ","2021-07-12T16:01:19Z",false,"APPROVED"
"jsignell","MEMBER","","2021-06-18T13:30:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-18T15:13:54Z",false,"COMMENTED"
"rjzamora","MEMBER","This and [dask/distributed#4923](https://github.com/dask/distributed/pull/4923) are looking really nice to me - Thanks for the work here Mads!","2021-07-02T19:50:00Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2021-08-02T07:58:59Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-09-24T15:32:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @GenevieveBuckley! This looks great 

<img width=""1096"" alt=""Screen Shot 2021-06-15 at 8 27 33 PM"" src=""https://user-images.githubusercontent.com/11656932/122144058-49586980-ce18-11eb-8ed4-1919424cba31.png"">
","2021-06-16T01:28:51Z",false,"APPROVED"
"jrbourbeau","MEMBER","This seems okay to me, but since I work for Coiled I'll leave it to another maintainer employed by someone else (like @jsignell or @martindurant) to handle this PR. 

Also, +1 for making this list alphabetically ordered as to not indirectly communicate a relative priority between the listed organizations ","2021-06-15T22:03:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-15T21:53:15Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-16T13:36:18Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-16T13:38:09Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-16T13:40:36Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-16T13:44:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-16T14:18:09Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-06-16T15:06:38Z",false,"CHANGES_REQUESTED"
"jrbourbeau","MEMBER","","2021-06-16T15:07:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-16T15:12:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-16T15:13:35Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2021-06-16T15:14:12Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-06-16T15:14:30Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-06-16T15:16:19Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-06-16T15:17:10Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-06-16T15:17:29Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-16T15:20:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-16T15:25:02Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-06-16T17:18:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-16T17:46:46Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-16T17:57:25Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-06-16T19:20:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-16T20:40:48Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","LGTM!","2021-06-16T20:47:51Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2021-06-16T20:50:46Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-16T13:58:18Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-06-16T14:16:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-14T17:35:58Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-14T17:38:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-14T17:50:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! ","2021-06-14T17:52:43Z",false,"APPROVED"
"jsignell","MEMBER","Thank you for opening this!","2021-06-14T14:51:43Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @mesejo! 

Thank you for the detailed explanation over in https://github.com/dask/dask/issues/7800#issuecomment-863472971, I hadn't considered the case where temporary files need to be opened multiple times. I wonder if [`pytest`'s built-in fixtures for handling temporary files](https://docs.pytest.org/en/6.2.x/tmpdir.html) support opening temp files multiple times on Windows?

We could test this by making the following changes to `dask/dataframe/io/tests/test_json.py::test_read_json_basic`:

```diff
diff --git a/dask/dataframe/io/tests/test_json.py b/dask/dataframe/io/tests/test_json.py
index 55723fec..05060a75 100644
--- a/dask/dataframe/io/tests/test_json.py
+++ b/dask/dataframe/io/tests/test_json.py
@@ -13,17 +13,17 @@ ddf = dd.from_pandas(df, npartitions=2)


 @pytest.mark.parametrize(""orient"", [""split"", ""records"", ""index"", ""columns"", ""values""])
-def test_read_json_basic(orient):
-    with NamedTemporaryFile(suffix="".json"") as f:
-        df.to_json(f.name, orient=orient, lines=False)
-        actual = dd.read_json(f.name, orient=orient, lines=False)
-        actual_pd = pd.read_json(f.name, orient=orient, lines=False)
-
-        out = actual.compute()
-        assert_eq(out, actual_pd)
-        if orient == ""values"":
-            out.columns = list(df.columns)
-        assert_eq(out, df)
+def test_read_json_basic(orient, tmpdir):
+    tmpfile = os.path.join(tmpdir, ""out.json"")
+    df.to_json(tmpfile, orient=orient, lines=False)
+    actual = dd.read_json(tmpfile, orient=orient, lines=False)
+    actual_pd = pd.read_json(tmpfile, orient=orient, lines=False)
+
+    out = actual.compute()
+    assert_eq(out, actual_pd)
+    if orient == ""values"":
+        out.columns = list(df.columns)
+    assert_eq(out, df)


 @pytest.mark.parametrize(""fkeyword"", [""pandas"", ""json""])
```

to see if this test begins passing on Windows. If that doesn't work then we should keep `tmpfile` around for cases where we need to open a temporary file multiple times.

Also, it would be good to deprecate our `tmpdir` context manager using the `dask.utils._deprecated` decorator. For a similar example of another place we're we do this, see `dask.utils.ignoring`:

https://github.com/dask/dask/blob/80f860bce022d015b53b67adc60f376ec1559929/dask/utils.py#L145-L151","2021-06-18T00:01:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the updates @mesejo! Generally the changes here look good!

I did notice that we're using `tmp_path_factory` a lot. This fixture is session scoped and will only clean up temporary files after the full pytest session has completed. This may eventually become problematic on systems that have similar disk resources. Is it possible to use the `tmp_path` fixture, which will clean up files after each test, instead? ","2021-06-24T22:44:22Z",false,"COMMENTED"
"mesejo","CONTRIBUTOR","","2021-06-25T15:45:50Z",false,"COMMENTED"
"mesejo","CONTRIBUTOR","","2021-06-25T15:47:00Z",false,"COMMENTED"
"mesejo","CONTRIBUTOR","","2021-06-25T15:47:30Z",false,"COMMENTED"
"mesejo","CONTRIBUTOR","","2021-06-25T15:48:12Z",false,"COMMENTED"
"jsignell","MEMBER","This looks good to me. Thanks for the cleanup!","2021-06-14T15:09:34Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @QuLogic. I just pushed a commit which should resolve the test import errors ","2021-06-14T21:27:14Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for cleaning this up @QuLogic! This is in","2021-06-15T03:05:54Z",false,"APPROVED"
"jsignell","MEMBER","This looks good to me!","2021-06-14T14:29:40Z",false,"APPROVED"
"quasiben","MEMBER","","2021-06-14T15:13:15Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-06-11T19:03:28Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-11T19:39:58Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-11T20:30:18Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-11T21:15:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-11T21:18:48Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks @GenevieveBuckley!

@jsignell this should fix CI","2021-06-11T14:13:45Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for fixing @GenevieveBuckley! ","2021-06-11T14:47:08Z",false,"APPROVED"
"rjzamora","MEMBER","Good catch @GenevieveBuckley !  It looks like you are correct.

I'm curious what is causing all the CI failures here :/","2021-06-11T12:45:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Just merged `main` to resolve some unrelated CI failures ","2021-06-11T14:50:25Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-06-11T11:51:12Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell! I'll wait for CI to finish up, but then will merge this in ","2021-06-10T19:08:00Z",false,"APPROVED"
"mrocklin","MEMBER","","2021-06-10T15:30:31Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-06-10T15:32:12Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-10T15:34:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-06-10T15:37:00Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-10T15:38:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @BrianArbuckle! 

cc @crusaderky (our resident type annotation expert) for any thoughts you might have ","2021-06-10T01:15:08Z",false,"COMMENTED"
"BrianArbuckle","NONE","","2021-06-10T01:23:19Z",false,"COMMENTED"
"twoertwein","NONE","","2021-06-10T02:53:37Z",false,"COMMENTED"
"twoertwein","NONE","","2021-06-10T03:02:35Z",false,"COMMENTED"
"BrianArbuckle","NONE","","2021-06-10T03:19:50Z",false,"COMMENTED"
"BrianArbuckle","NONE","","2021-06-10T03:21:02Z",false,"COMMENTED"
"twoertwein","NONE","","2021-06-10T03:23:31Z",false,"COMMENTED"
"BrianArbuckle","NONE","","2021-06-10T03:38:11Z",false,"COMMENTED"
"twoertwein","NONE","","2021-06-10T03:45:48Z",false,"COMMENTED"
"BrianArbuckle","NONE","","2021-06-10T03:51:10Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-06-10T09:57:04Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-06-10T09:57:49Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-06-10T09:59:32Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-06-10T10:02:24Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-06-10T10:04:06Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-06-10T10:04:58Z",false,"COMMENTED"
"BrianArbuckle","NONE","","2021-06-10T13:20:51Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-06-10T18:37:36Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-06-11T09:14:11Z",false,"COMMENTED"
"asford","NONE","","2021-06-20T17:47:04Z",false,"COMMENTED"
"BrianArbuckle","NONE","","2021-06-21T23:28:49Z",false,"COMMENTED"
"chrisroat","CONTRIBUTOR","Thanks for continuing to work on this.  (Also, a big thanks for the HLG work in this area)","2021-06-11T04:26:51Z",false,"CHANGES_REQUESTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-06-11T06:45:21Z",false,"COMMENTED"
"chrisroat","CONTRIBUTOR","","2021-06-11T09:35:17Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-06-09T04:11:01Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-09T20:40:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @GenevieveBuckley! 

> Has this problem been affecting other people?

In general, I don't think most folks are impacted by this. This is the first time I can recall seeing GitHub actions truncating logs in `dask/dask`. The example you linked to (thanks for including a link, that output was useful to see) is a particularly uncommon occurrence where _many_ test fail or have an error. If output truncation becomes more of an issue, then we should remove the `-v` option, but for now there's probably more utility overall in keeping the verbose output. ","2021-06-08T01:52:33Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-07T15:19:56Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-07T15:20:25Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","The fix LGTM 👍 ","2021-06-07T15:24:59Z",false,"APPROVED"
"fjetter","MEMBER","","2021-06-07T15:52:31Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-07T16:04:17Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","This is great, really exciting to see this.

I'm pleased to see the design resources being used, but I think we should try and make the HLG repr visually different from the cluster/client/scheduler/worker repr. If a user is scrolling through a long notebook looking for one or the other they should be able to identify them at a glance.

We also have some information about the width of each layer right? Perhaps we could show something visually to represent that. I'm thinking along the lines of the minimaps you see in many text editors these days.","2021-06-04T10:15:39Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2021-06-07T08:56:12Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-06-07T08:58:57Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-06-07T15:49:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-06-07T15:50:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-06-07T15:51:08Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-06-08T05:45:34Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-06-08T05:55:46Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-06-08T13:02:24Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-10T14:27:12Z",false,"COMMENTED"
"jsignell","MEMBER","In the places where you have used this so far it is always in the negative. It seems to me that the ""not all"" formulation is potentially confusing. Perhaps the convenience methods should be called `all_materialized` to make this more explicit. 

It's also worth considering if replacing a one-liner with a method is worth the layer of indirection.","2021-06-04T20:20:42Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-06-04T02:46:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-04T02:52:00Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-06-04T03:04:30Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-04T03:12:04Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-04T03:34:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for reporting @ian-r-rose and fixing so quickly @rjzamora! It'll be good to include this in the release today ","2021-06-04T16:43:23Z",false,"APPROVED"
"jsignell","MEMBER","Nice work on your first dask contribution!! This is looking pretty good, but I think it might not work properly for arrays that have more than one dimension. Also it would be a good idea to include a test in https://github.com/dask/dask/blob/6632607c9a65fda46cb2b32763ae55501825bd87/dask/array/tests/test_array_function.py#L36  maybe something like:

```python
        lambda x: np.select([x<0, x>2, x>1], [x, x*2, x*3], default=1)
```","2021-06-04T19:50:50Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-04T19:52:35Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-04T19:54:09Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-04T19:54:54Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-06-07T19:18:36Z",false,"COMMENTED"
"gmiretti","CONTRIBUTOR","","2021-06-07T20:01:19Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-06-07T21:23:38Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-09T19:49:18Z",false,"COMMENTED"
"gmiretti","CONTRIBUTOR","","2021-06-09T22:35:36Z",false,"COMMENTED"
"gmiretti","CONTRIBUTOR","","2021-06-09T22:38:56Z",false,"COMMENTED"
"gmiretti","CONTRIBUTOR","","2021-06-09T22:43:22Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-10T13:38:34Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-10T13:41:09Z",false,"COMMENTED"
"gmiretti","CONTRIBUTOR","","2021-06-10T14:04:38Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-10T14:28:27Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-10T16:21:06Z",false,"COMMENTED"
"gmiretti","CONTRIBUTOR","","2021-06-10T16:49:51Z",false,"COMMENTED"
"gmiretti","CONTRIBUTOR","","2021-06-10T17:36:04Z",false,"COMMENTED"
"gmiretti","CONTRIBUTOR","","2021-06-11T12:35:02Z",false,"COMMENTED"
"jsignell","MEMBER","This looks good to me! Thanks, @gmiretti for the contribution!!! ","2021-06-11T15:14:51Z",false,"APPROVED"
"rjzamora","MEMBER","","2021-07-27T19:05:49Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-28T15:08:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-07-28T15:43:22Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-28T16:08:45Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-28T16:08:59Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-28T16:10:33Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-29T18:25:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-29T18:26:10Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-29T18:26:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-04T17:15:18Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-04T17:33:26Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-04T19:34:29Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-08-04T19:44:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-08-04T22:56:46Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-05T13:31:58Z",false,"COMMENTED"
"martindurant","MEMBER","All looks very good to me. I left some very minor comments.","2021-08-05T19:33:01Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-05T19:41:53Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-08-05T19:42:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! It looks like folks are general in favor of the changes here. I'll plan to merge this after CI finishes up","2021-08-05T22:06:30Z",false,"APPROVED"
"jsignell","MEMBER",":clap: nice!","2021-06-02T14:04:52Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @galipremsagar! Reading through some of the recent issues around the changes in https://github.com/dask/dask/pull/7586, I now realize there are two types issues users are running into:

1. The `make_meta` -> `make_meta_util` name change
2. The current `make_meta_util` (which used to be called `make_meta`) now no longer accepts inputs of type `list`, `dict`, `tuple`, ... (xref https://github.com/dask/dask/pull/7732)

This PR definitely fixes the first problem, but we still are running into the second class of errors which https://github.com/dask/dask/pull/7732 is attempting to resolve. 

Is there a way we can fix the second class of problems while not re-introducing https://github.com/rapidsai/cudf/issues/7946? If not, I'm inclined to temporarily revert https://github.com/dask/dask/pull/7586 and release to get existing user code working again. This will give us more time to figure out how to approach fixing https://github.com/rapidsai/cudf/issues/7946 in a more backwards-compatible way. What do others think? ","2021-06-02T01:14:51Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-06-02T01:51:46Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the updates @galipremsagar! Overall I think this changes here look good, I've left a couple of small comments below ","2021-06-02T18:48:41Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-06-02T18:54:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-02T20:14:59Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @galipremsagar! Unless there are further comments I'm planning to merge this in the morning tomorrow US central time. This will give us some time to seek feedback from others before releasing ","2021-06-02T22:55:53Z",false,"APPROVED"
"trivialfis","CONTRIBUTOR","Just tested the PR on XGBoost and it works great.  Thanks for the fix!","2021-06-03T08:21:32Z",false,"APPROVED"
"jsignell","MEMBER","Thanks for these! I think it's a nice improvement","2021-06-03T20:33:22Z",false,"APPROVED"
"martindurant","MEMBER","> What kind of tests can I add for this

At least, call the function with the arguments that previously caused an exception, and you should see that there is no exception. I agree that, since this is not run within jupyter, you cannot know if it succeeds.","2021-06-01T15:38:01Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-06-01T16:04:20Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-06-01T16:05:50Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-06-01T16:12:26Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-06-01T16:20:33Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-06-02T02:14:08Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-06-02T02:26:54Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-06-02T03:13:58Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-06-02T03:15:03Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-06-02T08:11:59Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-06-02T09:19:33Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-06-04T01:23:48Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-06-04T01:25:01Z",false,"COMMENTED"
"martindurant","MEMBER","I am happy with it, but I still have a couple of comments.
@GenevieveBuckley , you can decide on final style here, I don't really mind.","2021-06-05T15:24:51Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-06-05T16:40:13Z",false,"COMMENTED"
"freyam","CONTRIBUTOR","","2021-06-05T16:43:48Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-06-07T02:25:12Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR",":tada: Good work @freyam!

I'm pleased to see alll the tests are passing now too. Thanks @jrbourbeau for tracking down what was going on.","2021-06-08T06:57:33Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @madsbk! Generally this seems sensible to me","2021-06-01T22:46:48Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2021-06-02T07:44:24Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-02T15:07:52Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2021-06-02T15:38:01Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2021-06-02T15:43:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-02T18:26:33Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-02T19:19:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @madsbk, this is in ","2021-06-02T19:52:42Z",false,"APPROVED"
"jsignell","MEMBER","Can you describe why this behavior is preferable to returning a delayed object? Is there an issue that this adresses?","2021-06-01T15:52:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR @chrisroat! Similar to @jsignell, I'm also wondering what motivated this change. It looks like this is reverting an earlier PR you authored https://github.com/dask/dask/pull/5797","2021-06-01T20:32:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @GenevieveBuckley! This is a nice addition. Instead of updating in `run_tests.sh` could you update the default `pytest` options in `setup.cfg`:

https://github.com/dask/dask/blob/1a6a85258bccb14fe37bb54c211beeeffd46cd55/setup.cfg#L44

This way, the `-rfE` option will be used both in CI and when developing locally. Since we currently use `-rsx` by default, I think we just need to update that option to `-rsxfE`. ","2021-06-01T16:33:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks again @GenevieveBuckley! ","2021-06-02T19:53:46Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @madsbk! I temporarily added `[WIP]` to the title of this PR as a reminder to merge https://github.com/dask/dask/pull/7739 first -- hope that's okay ","2021-06-01T22:48:11Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","Thanks for tracking this down @madsbk! All of this looks great to me.","2021-06-02T20:57:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @madsbk! This is in ","2021-06-02T22:29:52Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @GenevieveBuckley! ","2021-06-01T21:52:37Z",false,"APPROVED"
"galipremsagar","CONTRIBUTOR","","2021-06-01T12:37:55Z",false,"CHANGES_REQUESTED"
"mlondschien","CONTRIBUTOR","","2021-06-01T13:56:07Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-06-01T14:54:18Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! ","2021-06-04T18:41:53Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell -- just a couple of minor comments ","2021-09-15T16:47:04Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-09-15T17:32:31Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-09-15T17:32:59Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-09-15T17:38:56Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-09-15T20:51:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-09-15T22:46:12Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-09-16T14:01:32Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks @VibhuJawa! This seems like a great idea to me :)","2021-05-27T16:51:11Z",false,"APPROVED"
"VibhuJawa","CONTRIBUTOR","","2021-05-27T17:05:45Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-05-27T17:13:23Z",false,"COMMENTED"
"VibhuJawa","CONTRIBUTOR","","2021-05-27T17:28:21Z",false,"COMMENTED"
"VibhuJawa","CONTRIBUTOR","","2021-05-27T17:28:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Just to be clear, I think this might have been incorrect before https://github.com/dask/dask/pull/7586. For example, I get an `ImportError` with `from dask.dataframe import make_meta` on an older version of `dask` (2021.04.0), but `from dask.dataframe.utils import make_meta` works fine on 2021.04.0 and the current `main` branch","2021-05-26T20:02:07Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-05-27T15:13:39Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-05-27T15:28:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks as always for handling this @jsignell! Overall this looks good, just left a couple of small comments ","2021-05-27T15:35:31Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-05-27T15:37:14Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-05-27T15:37:26Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-05-27T15:41:59Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Yep, thanks again ","2021-05-27T17:08:05Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jakirkham! ","2021-06-03T17:41:11Z",false,"APPROVED"
"quasiben","MEMBER","","2021-05-25T16:40:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-03T18:59:32Z",false,"COMMENTED"
"jsignell","MEMBER","I should have thought of this earlier but the labeler.yml probably needs to be on main in order to work. ","2021-06-03T19:24:38Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-05-25T18:03:32Z",false,"APPROVED"
"kkraus14","MEMBER","","2021-05-24T18:20:21Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-05-24T18:43:36Z",false,"COMMENTED"
"kkraus14","MEMBER","","2021-05-24T18:45:59Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-05-24T20:36:31Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-05-24T20:36:54Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-05-24T23:06:26Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-05-25T13:44:06Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-05-25T16:15:57Z",false,"APPROVED"
"kkraus14","MEMBER","","2021-05-25T16:26:21Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for fixing so quickly @rjzamora! ","2021-05-24T18:30:39Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-05-24T19:12:47Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-05-24T19:21:05Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-05-24T20:03:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-05-27T00:03:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-05-27T00:03:54Z",false,"APPROVED"
"douglasdavis","MEMBER","Looks pretty good, a couple of minor comments in the code. Last thing to add is a [reference in the docs](https://github.com/dask/dask/blob/main/docs/source/array-api.rst)","2021-05-24T15:30:59Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-05-24T19:31:10Z",false,"COMMENTED"
"tomwhite","CONTRIBUTOR","","2021-05-25T08:51:45Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-05-25T22:30:35Z",false,"APPROVED"
"jakirkham","MEMBER","Thanks Tom! 😄

Added a couple suggestions below to use `meta`. Basically this makes it easier for Dask to dispatch between different kinds of arrays (like NumPy, CuPy, or Sparse)","2021-05-25T22:36:43Z",false,"COMMENTED"
"pentschev","MEMBER","@jakirkham the changes you suggested here look good, thanks for noticing those.

@tomwhite thank you for the nice work here!","2021-05-26T12:00:42Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-05-26T13:57:11Z",false,"APPROVED"
"jsignell","MEMBER","This seems like a nice enhancement and sorry I hadn't gotten a chance to look at it yet. It'd be helpful if you could write some documentation and maybe open a WIP PR on a downstream library that implements sizeof entrypoints. That would help with discussion.","2021-06-03T17:38:31Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2021-06-03T17:45:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-03T18:00:35Z",false,"COMMENTED"
"agoose77","CONTRIBUTOR","","2021-06-03T19:56:04Z",false,"COMMENTED"
"jsignell","MEMBER","This documentation is fantastic - thank you so much for writing it up! 

I am wondering what would happen if two packages both implement sizeof for the same type. I guess that was already a risk with the old approach, but at least in the old approach, the sizeof only gets registered when the external library is imported. Do you have a sense of what should happen for this kind of case in the entry points approach?","2021-06-16T14:21:54Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2021-06-16T14:49:05Z",false,"COMMENTED"
"agoose77","CONTRIBUTOR","","2021-06-16T14:51:19Z",false,"COMMENTED"
"agoose77","CONTRIBUTOR","","2021-06-16T14:51:48Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2021-06-16T14:58:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-16T15:01:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-06-16T15:03:44Z",false,"COMMENTED"
"agoose77","CONTRIBUTOR","","2021-06-16T15:17:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @agoose77! Can we add a test to ensure that `sizeof` entrypoints are properly registered? ","2021-06-24T22:03:43Z",false,"COMMENTED"
"agoose77","CONTRIBUTOR","","2021-06-24T22:05:00Z",false,"COMMENTED"
"graingert","MEMBER","","2022-03-24T11:03:47Z",false,"COMMENTED"
"graingert","MEMBER","","2022-03-24T11:08:11Z",false,"COMMENTED"
"graingert","MEMBER","","2022-03-24T11:08:53Z",false,"COMMENTED"
"graingert","MEMBER","","2022-03-24T11:11:45Z",false,"COMMENTED"
"jsignell","MEMBER","Sorry for dropping the ball on this (again). This looks good to me! I will merge it at the end of the day unless there is any feedback from others.","2022-06-06T14:56:01Z",false,"APPROVED"
"jakirkham","MEMBER","Generally this looks good. Thanks for working on it 🙏

Had a few questions below","2022-06-06T17:44:42Z",false,"COMMENTED"
"graingert","MEMBER","","2022-06-06T18:05:32Z",false,"COMMENTED"
"jakirkham","MEMBER","","2022-06-06T18:10:39Z",false,"COMMENTED"
"agoose77","CONTRIBUTOR","","2022-06-06T18:10:56Z",false,"COMMENTED"
"agoose77","CONTRIBUTOR","","2022-06-06T18:16:27Z",false,"COMMENTED"
"agoose77","CONTRIBUTOR","","2022-06-06T18:17:39Z",false,"COMMENTED"
"agoose77","CONTRIBUTOR","","2022-06-06T18:33:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @djhoese! 

> Do you want references to have the text da.some_func?

I think using the full `dask.array.some_func` is preferred as it's most likely to help avoid confusion

> Dask delayed references are odd.

Agreed. I don't have a strong preference here, but linking to `dask.delayed.Delayed` seems okay. 

> there are a lot of functions listed in the autosummary section that don't have the related docstring-level documentation

I thought there was an open issue for this, but after a quick search I couldn't find it. If you know of a way to keep the autosummary and autofunction, autoclass, ... sections automatically synced, that would be very welcome : ) ","2021-05-21T15:52:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @djhoese! And thanks for the `sphinxcontrib-apidoc` tip ","2021-05-21T20:07:34Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @djhoese! Spreading these out to separate lines seems more readable to me. 

> How does the dask project feel about API references (and intersphinx) in the docstrings?

This is definitely something we utilize. You can do `git grep "":func:""` in the `dask` repo to see all the places we link out to other API docs directly.","2021-05-20T16:40:54Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the updates @djhoese! I left one small question about the ""See Also"" section, but otherwise this looks great","2021-05-20T17:28:27Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2021-05-20T17:42:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-05-20T17:46:09Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2021-05-20T18:29:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @djhoese! This is in","2021-05-20T19:33:17Z",false,"APPROVED"
"rjzamora","MEMBER","","2021-05-20T17:04:25Z",false,"COMMENTED"
"MrPowers","CONTRIBUTOR","","2021-05-20T23:38:21Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-05-20T23:40:47Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-05-21T13:05:55Z",false,"COMMENTED"
"MrPowers","CONTRIBUTOR","","2021-05-22T22:18:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-05-24T15:34:38Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-05-24T15:44:47Z",false,"COMMENTED"
"MrPowers","CONTRIBUTOR","","2021-05-25T02:02:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Apologies for the delayed response and thanks @jsignell for getting this over the finish line. I pushed a small commit to update the docstring / example added here, but otherwise, as @martindurant said, this looks good to go ","2021-11-03T17:45:23Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @keewis! This is in

Also, I noticed this was your first code contribution to this repository. Welcome! ","2021-05-20T00:17:26Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @aschampion! 

> black dask caused a large delta of unrelated changes, so was not applied

What version of `black` are you using locally? In CI we're using `20.8b1`. Could you either try again with `black==20.8b1` or try using the `pre-commit` hook method outlined in https://docs.dask.org/en/latest/develop.html#code-formatting? ","2021-05-19T14:33:58Z",false,"COMMENTED"
"douglasdavis","MEMBER","Just had one comment to ""complete"" the docstring while touching this code.","2021-05-20T15:53:01Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-05-20T16:03:20Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-05-21T13:02:00Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @aschampion for the improvement and @douglasdavis for reviewing! 

Also, @aschampion I noticed this was your first code contribution to this repository. Welcome! ","2021-05-21T17:18:40Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-05-19T00:38:33Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-05-19T02:02:19Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-05-18T21:05:57Z",false,"COMMENTED"
"pentschev","MEMBER","Thanks for pinging me here @gjoseph92 . Overall this looks good to me, it seems like a more feature-complete manner of handling `apply_gufunc`. I've left a few comments, and assuming I haven't missed anything about that, I think `test_apply_gufunc_pass_additional_kwargs ` is a potentially concerning test, so it may be worth checking whether some sneaky dtype casting is happening silently, such cases can happen and can be difficult to find, but perhaps it's just me being overly cautious.

I've also verified that this PR doesn't break the CuPy tests we have (which aren't covered by CI yet), so this feels like a good solution. Thanks for working on it!","2021-05-18T22:16:35Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-05-18T23:20:38Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-05-19T09:20:45Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-05-25T18:52:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @mesejo! cc'ing @pentschev ","2021-05-19T00:49:42Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-05-19T09:09:17Z",false,"COMMENTED"
"mesejo","CONTRIBUTOR","","2021-05-24T08:09:45Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-05-25T13:57:58Z",false,"COMMENTED"
"mesejo","CONTRIBUTOR","","2021-05-25T19:38:15Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-05-25T22:14:08Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-05-25T22:14:59Z",false,"COMMENTED"
"mesejo","CONTRIBUTOR","","2021-05-25T23:30:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Apologies for the delayed response. Alternatively, we could just raise an informative error if `start` or `stop` are Dask collections. Implicit computes tend to lead to both developer confusion and user frustration ","2021-06-11T18:39:57Z",false,"COMMENTED"
"leofang","NONE","Thanks, John! LGTM except for one nitpick.","2021-05-18T22:54:33Z",false,"CHANGES_REQUESTED"
"jakirkham","MEMBER","","2021-05-18T22:57:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jakirkham! This is in ","2021-05-19T02:39:58Z",false,"APPROVED"
"mrocklin","MEMBER","","2021-05-24T15:19:12Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-05-24T15:52:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @madsbk! ","2021-05-17T16:07:49Z",false,"APPROVED"
"jrbourbeau","MEMBER","@McToel could you merge the current `main` branch into your branch to re-trigger CI","2021-06-10T23:02:02Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @maisiemarshall! This is in 

Also, I noticed this was your first code contribution to this repository. Welcome! ","2021-05-15T15:29:30Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell! 

It looks like `to_task_dask` in `delayed.py` also has similar logic where we iterate over `fields`. We should probably update that too. ","2021-05-17T17:51:20Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","This is looking very good.","2021-06-21T22:38:47Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-06-21T23:04:11Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-06-22T01:21:45Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-06-22T02:21:42Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-06-22T02:27:34Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-06-22T04:19:23Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-06-22T04:23:41Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-06-22T04:38:32Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-06-22T04:39:10Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-06-22T06:08:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-05-13T19:02:10Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-05-13T19:18:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for fixing this @rjzamora! ","2021-05-13T22:23:33Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2021-05-10T08:39:16Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-05-10T08:40:33Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-05-10T08:41:06Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-05-10T10:39:22Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2021-05-10T11:19:17Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-05-11T15:29:53Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2021-05-11T15:38:52Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-05-11T15:49:56Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-05-11T15:56:23Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2021-05-11T15:57:35Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-05-11T15:57:37Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-05-11T15:58:50Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2021-05-11T15:59:52Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-05-11T16:02:36Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","lint currently fails. Happy to merge once that is fixed and the tests pass","2021-05-11T16:04:52Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2021-05-11T16:05:41Z",false,"COMMENTED"
"jsignell","MEMBER","This looks great @mesejo! Thanks for taking this work on and sorry it sat in review for so long. I am planning on merging it today.","2022-03-16T15:51:53Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @GenevieveBuckley. The `tmp_path` fixture should automatically clean up after itself. We recently switched to using `tmp_path`, instead of a non-temporary `data.txt` file, in https://github.com/dask/dask/pull/7592 to avoid having persistent files from running the tests. Did you find a `data.txt` file was still around when using the current `main` branch? ","2021-05-07T14:13:31Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2021-05-11T03:11:56Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-05-11T13:54:24Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-18T12:54:38Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-06-21T13:50:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ndanielsen! I merged `main` and ran our `pre-commit` hooks (hope that's okay). This looks great, will merge once CI finishes up 

Also, I noticed this is your first code contribution to this repository. Welcome!","2021-09-30T20:25:47Z",false,"APPROVED"
"jsignell","MEMBER","Sorry that this has sat for so long. We have been thinking about how to handle ExtensionDtypes generally. It should be enough to add handling of `pd.DatetimeTZDtype` to the [_dtypes file](https://github.com/dask/dask/blob/main/dask/dataframe/_dtypes.py). Something like:

```python
    @make_array_nonempty.register(pd.DatetimeTZDtype)
    def _dtype(dtype):
        return pd.array([pd.Timestamp(1), pd.NaT], dtype=dtype)

    @make_scalar.register(pd.DatetimeTZDtype)
    def _(x):
        return pd.Timestamp(1, tz=x.tz, unit=x.unit)
```

With that I think you should be good and don't need to alter utils.py at all. Let me know if that doesn't make sense.","2021-05-26T14:33:03Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-05-14T00:52:04Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-05-14T14:02:07Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-05-14T14:04:20Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-05-14T14:10:11Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-05-14T14:37:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Apologies for the delayed response here @rjzamora. Would you mind taking care of the merge conflict here and then we can merge this in","2021-06-09T18:33:48Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-05-03T19:43:59Z",false,"COMMENTED"
"mesejo","CONTRIBUTOR","","2021-05-03T20:21:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! FWIW I'm running the `distributed` test suite against this PR over in https://github.com/jrbourbeau/distributed/tree/test-dask-7620. Are there any other tests we should run before merging this? ","2021-05-03T18:10:11Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-05-04T15:28:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-05-07T14:34:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-05-07T14:36:41Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-05-07T14:37:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora!","2021-05-11T15:38:11Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-04-27T16:58:02Z",false,"COMMENTED"
"raybellwaves","MEMBER","","2021-04-27T18:03:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @raybellwaves!","2021-04-28T00:41:10Z",false,"APPROVED"
"jrbourbeau","MEMBER","Hooray! From reading https://github.com/dask/dask/issues/7444, it appears this started failing due to an upstream change in pandas but is now working again. Is that correct? ","2021-04-26T19:57:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for staying on top of this @jsignell! ","2021-04-26T20:26:41Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @nbren12 ","2021-04-23T19:47:50Z",false,"COMMENTED"
"nbren12","CONTRIBUTOR","","2021-04-23T20:12:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the updates @nbren12! I have one last comment, but otherwise this looks good to go","2021-04-23T21:54:02Z",false,"COMMENTED"
"nbren12","CONTRIBUTOR","","2021-04-23T22:28:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell, I agree silently ignoring invalid `kwargs` seems like something we would want to avoid. Could you add a small test which checks that things fail loudly when an invalid keyword is used? ","2021-04-23T22:02:10Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-04-26T21:28:27Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks for getting started on this @GenevieveBuckley, I think if we go down the path of doing a full implementation of `map_overlap` (which involves both rechunking and slicing) it would be too much to bite off. But if we can identify a useful subset with, e.g., no rechunking and constant boundary conditions, we'd have a good start.

Do you know if those conditions are met by some of the imaging applications you are interested in?","2021-04-26T22:59:56Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-04-27T01:03:00Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-04-27T01:10:35Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-04-30T19:59:05Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-05-03T02:32:31Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-05-03T20:43:20Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-05-03T23:32:17Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-05-06T07:52:35Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-05-06T08:30:19Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-05-06T08:40:51Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-05-07T05:17:02Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-05-07T05:24:09Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-05-10T06:11:31Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-05-10T19:16:15Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2021-05-10T19:23:26Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-05-10T22:03:57Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-05-10T23:59:16Z",false,"COMMENTED"
"jsignell","MEMBER","Is this ready to be merged in then? 

As a small note, it seems a little strange to me to move all layer definitions up out of the array directory. Is there an established logic behind where the `Layer` classes should be defined? I see that the `Blockwise` class is in blockwise.py for instance. ","2021-05-26T17:08:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","@ian-r-rose @gjoseph92 if either of you get a chance, it would be great to give this a final review 

> As a small note, it seems a little strange to me to move all layer definitions up out of the array directory

IIRC we decided to keep most layer classes in a separate `layer.py` module to more easily check that extra libraries aren't imported within the module (there's more context around this over in https://github.com/dask/dask/pull/7381). This is because we want to avoid importing libraries like NumPy, pandas, etc. on the scheduler which may not be installed. ","2021-05-27T03:16:25Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","A couple of very minor comments, but I think this is a good checkpoint. Follow-up work could include:
1. computing layer length without materialization
2. implementing `cull` (right now culling forces materialization as well)","2021-05-27T22:51:54Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-05-28T07:51:42Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-05-28T08:01:29Z",false,"COMMENTED"
"chrisroat","CONTRIBUTOR","","2021-06-01T22:26:11Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @GenevieveBuckley! ","2021-06-10T22:35:13Z",false,"APPROVED"
"Illviljan","CONTRIBUTOR","This seems more thought out than my version so I think we'll go with this one.","2021-04-23T04:58:54Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @gjoseph92! One small comment, otherwise this looks great","2021-05-03T22:09:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Yep, agreed that looks unrelated. Just restarted CI to see if the failure is transient ","2021-05-04T20:36:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Just merged `main` into this PR and `test_pivot_table` is now passing ✨. I'm going to merge this and keep an eye out for any `test_pivot_table` failures. Thanks @gjoseph92! ","2021-06-09T02:31:54Z",false,"APPROVED"
"jsignell","MEMBER","This makes sense to me!","2021-04-26T15:48:52Z",false,"APPROVED"
"jrbourbeau","MEMBER","Good catch, thanks @ncclementi! I left a small comment but otherwise this looks good to me","2021-04-22T19:12:02Z",false,"COMMENTED"
"ncclementi","MEMBER","","2021-04-22T20:42:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for cleaning these tests up @ncclementi! Will merge after CI finishes","2021-04-22T21:02:28Z",false,"APPROVED"
"jsignell","MEMBER","Hey, thanks! This looks good to me!","2021-04-22T14:39:15Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @ncclementi! This is in ","2021-04-22T15:05:52Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @ncclementi! This is a nice example to have. I left one small comment below, but overall the changes here look great ","2021-04-23T19:30:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ncclementi! This is in","2021-04-26T17:10:08Z",false,"APPROVED"
"pentschev","MEMBER","Overall looks good, I've added a minor suggestion. However, DataFrame meta is a bit different from Array meta, which I'm not totally familiar with, so maybe would be good to get a review from someone more knowledgeable as well, perhaps @rjzamora ?","2021-05-18T17:32:28Z",false,"COMMENTED"
"rjzamora","MEMBER","Thank you for working on this @galipremsagar !

I am sorry for being late to the party here, but I'd like to clarify the solution a bit before signing off...

My understanding is that the general `@make_meta.register(object)` definition in  dask-cudf (which is registered upon import) is incorrectly taking over when cudf is not even in use.  If the `make_meta` dispatching was being performed in the way that [`concat` is used throughout Dask-Dataframe](https://github.com/dask/dask/blob/ac1bd05cfd40207d68f6eb8603178d7ac0ded922/dask/dataframe/methods.py#L428), then there would be a ""middle-man"" function where we could add a kwarg like `parent_meta=`.  However, Dask-Dataframe is using the dispatch name directly (`make_meta`), and so you are effectively adding this ""middle-man"" function under the name `make_meta_util` (and using it throughout the code base).  Is this correct?

If so, then I think this solution makes sense -- At least, I cannot think of a better way to do it :)","2021-05-18T18:41:02Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-05-18T19:01:04Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-05-19T16:13:14Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-05-19T16:14:08Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks Prem! This is looking good.

I am wondering if we can make the changes a bit lighter if we: (1) Avoid changing to the `new_dd_object` function signature, (2) Avoid making `scipy` a requirement, (3) avoid passing `parent_meta` to `map_partitions`, and (4) avoid passing `parent_meta` in places where an already-provided `meta` object is sufficient.

There is a perfectly good chance that I am misunderstanding the changes.  So, feel free to push back on any of my comments/suggestions :)","2021-05-20T23:28:26Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-05-23T17:19:25Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-05-23T17:34:59Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-05-23T17:39:58Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-05-23T17:46:33Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-05-23T17:47:59Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-05-23T17:48:25Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-05-23T18:00:36Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-05-23T18:06:48Z",false,"COMMENTED"
"rjzamora","MEMBER","Thank you for answering my questions @galipremsagar - The changes here seem reasonable to me.  Thanks again for attacking this","2021-05-24T17:34:06Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-05-25T00:35:35Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-05-25T00:37:27Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-05-25T00:38:49Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-05-25T16:31:40Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-05-25T16:39:17Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-05-25T16:42:59Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the quick PR @Illviljan! cc @dougiesquire for visibility 

I left a couple of small comments below. Additionally, I know it pre-dates this PR, but could you also remove the extra `compute()` call in `test_ravel_multi_index`? ","2021-04-21T20:22:44Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2021-04-22T05:50:52Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2021-04-23T05:00:40Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2021-04-23T05:00:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @charlesbluca. From a config namespace perspective this seems reasonable. Though I'm surprised the `ucx` and `rmm` config values aren't prefixed with `distributed.`. Do you know if these config values are used anywhere outside of `distributed`? cc @quasiben ","2021-04-20T19:29:30Z",false,"COMMENTED"
"jsignell","MEMBER","This is looking pretty good! It would be good to add some tests with dataframes that have different npartitions and ones with `lsuffix` and `rsuffix` - I'm not sure how those are supposed to work.","2021-06-03T19:06:04Z",false,"COMMENTED"
"jsignell","MEMBER","This looks great to me! Thanks for working on it @KrishanBhasin!","2021-06-11T18:37:35Z",false,"APPROVED"
"jsignell","MEMBER","Thanks! ","2021-04-19T16:05:59Z",false,"APPROVED"
"jsignell","MEMBER","","2021-04-22T14:04:13Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-22T14:19:45Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-22T14:21:53Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-22T14:54:01Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-22T14:57:35Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-22T14:59:21Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-22T15:10:33Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-22T15:12:50Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-22T15:30:51Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-22T15:45:24Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-22T15:47:17Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-22T15:47:25Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-22T15:48:47Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-22T16:02:52Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-22T16:06:10Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-22T16:08:54Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-22T16:12:27Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-22T16:18:13Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-26T17:50:29Z",false,"APPROVED"
"c-thiel","CONTRIBUTOR","","2021-04-17T16:49:54Z",false,"COMMENTED"
"c-thiel","CONTRIBUTOR","","2021-04-18T09:03:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @c-thiel! 

Perhaps someone from @dask/io can take a look at this? ","2021-04-21T23:53:02Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-04-22T13:03:17Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-04-22T13:05:03Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks as always @Carreau ","2021-04-19T22:42:08Z",false,"APPROVED"
"jsignell","MEMBER","","2021-04-26T18:16:35Z",false,"COMMENTED"
"raybellwaves","MEMBER","","2021-04-26T19:39:55Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-26T20:01:18Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @madsbk! Apologies for the delay in getting this merged

Note that merging in https://github.com/dask/distributed/pull/4691 along with this PR will cause tests to pass","2021-05-13T21:59:25Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @raybellwaves! Could you remove the `optional, ` part in order to match the [numpydoc style guide](https://numpydoc.readthedocs.io/en/latest/format.html)","2021-04-16T16:14:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-04-16T17:21:10Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-04-15T23:39:22Z",false,"COMMENTED"
"quasiben","MEMBER","","2021-04-16T00:11:08Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-04-16T08:44:12Z",false,"COMMENTED"
"quasiben","MEMBER","","2021-04-16T22:32:17Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-04-19T10:28:17Z",false,"CHANGES_REQUESTED"
"quasiben","MEMBER","","2021-04-19T13:36:30Z",false,"COMMENTED"
"quasiben","MEMBER","","2021-04-19T13:38:53Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-04-19T14:16:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Just wanted to check in here. Is this something we'd like to get into the release tomorrow, or are we okay waiting until the one after that? ","2021-04-22T19:46:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-04-26T19:36:49Z",false,"COMMENTED"
"quasiben","MEMBER","","2021-04-26T20:22:11Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-04-26T20:57:10Z",false,"COMMENTED"
"quasiben","MEMBER","","2021-04-26T21:32:59Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-04-26T21:37:32Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-04-26T21:54:33Z",false,"COMMENTED"
"quasiben","MEMBER","","2021-04-27T14:43:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-04-27T16:02:33Z",false,"COMMENTED"
"pentschev","MEMBER","Overall LGTM, thanks @quasiben .","2021-04-27T20:37:25Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-04-27T20:56:40Z",false,"COMMENTED"
"quasiben","MEMBER","","2021-05-03T14:31:29Z",false,"COMMENTED"
"jsignell","MEMBER","This looks good, I just have one small comment. And sorry this sat for so long :(","2021-05-03T20:14:14Z",false,"COMMENTED"
"chrisroat","CONTRIBUTOR","","2021-05-14T08:47:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! ","2021-04-15T19:41:53Z",false,"APPROVED"
"jsignell","MEMBER","I think it's great!","2021-04-14T17:58:46Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @douglasdavis! ","2021-04-14T17:38:00Z",false,"APPROVED"
"rjzamora","MEMBER","","2021-05-27T14:38:36Z",false,"COMMENTED"
"randerzander","NONE","","2021-05-27T14:51:22Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-05-27T14:53:14Z",false,"COMMENTED"
"martindurant","MEMBER","Firstly, I think we should work fastparquet out.","2021-06-01T15:47:49Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-01T15:59:38Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-06-01T16:02:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-01T16:11:24Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-06-01T16:12:29Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-01T16:13:00Z",false,"COMMENTED"
"fjetter","MEMBER","Only looked very briefly over the code itself but left a few comments regarding API. No strong opinions","2021-06-01T16:55:43Z",false,"COMMENTED"
"fjetter","MEMBER","","2021-06-01T16:57:13Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-01T19:10:11Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-01T20:31:57Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-02T02:20:53Z",false,"COMMENTED"
"fjetter","MEMBER","","2021-06-02T10:42:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-02T14:07:43Z",false,"COMMENTED"
"MrPowers","CONTRIBUTOR","","2021-06-09T16:39:26Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-09T22:26:55Z",false,"COMMENTED"
"fjetter","MEMBER","","2021-06-21T10:03:40Z",false,"COMMENTED"
"fjetter","MEMBER","Regarding the API, this feels like the right direction. I left one or two questions which probably result in a no-op but otherwise this looks good to me. I think everything else can be iterated on later.

---

A very subjective comment I cannot actually back up but the introduced complexity seems to be a lot while there are only a few added unit tests. However, they are parameterised so we might actually cover everything? idk. this might be a time for a coverage report :) 
Nothing I've seen seemed very controversial but it is practically impossible to review all for/if conditions without actually diving into the code myself with a debugger, therefore I trust the tests. This is mostly a question of ""can you come up with any more weird edge cases we might want to include in the tests?"" if the answer is no, that's fine with me until the first bugs come in :)

> However, I would also like to expand this PR to enable file aggregation when split_row_groups is set to an integer >1.

May I suggest to hold on with this? The PR is already uncomfortably large. That sounds like something you can put into a follow up PR.

","2021-06-21T10:37:28Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-28T15:49:03Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-28T15:50:04Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-28T15:50:18Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-28T15:54:20Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-28T15:56:35Z",false,"COMMENTED"
"fjetter","MEMBER","","2021-06-30T08:53:58Z",false,"COMMENTED"
"fjetter","MEMBER","","2021-06-30T09:03:01Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-30T15:40:14Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-07-06T07:32:27Z",false,"COMMENTED"
"fjetter","MEMBER","","2021-07-06T09:15:12Z",false,"COMMENTED"
"fjetter","MEMBER","I left a final note about the regex but that isn't a blocker. I think the edge case I'm mentioning there is rare enough to justify moving forward, especially since arrow might include a better functionality in the future.

I would suggest that if any bigger things pop up, we should move these changes to a dedicated PR and lock this PR in terms of scope.

If nobody, else has more to say, I'm good.

Thanks @rjzamora for your hard work, I just realised this PR has been open since April! Good job and thanks for completing it!","2021-07-06T09:20:16Z",false,"APPROVED"
"rjzamora","MEMBER","","2021-07-06T13:57:06Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-07-06T17:28:57Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-07-06T17:43:00Z",false,"COMMENTED"
"fjetter","MEMBER","","2021-07-07T08:57:12Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-13T14:35:08Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-07-13T14:39:40Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-13T15:06:25Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-07-13T15:08:20Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-13T15:30:24Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-07-13T15:32:28Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-13T15:53:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @raybellwaves! ","2021-04-15T00:55:11Z",false,"APPROVED"
"rjzamora","MEMBER","","2021-07-02T15:00:22Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-02T15:00:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-07-02T21:10:55Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-02T21:30:40Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-07-07T14:24:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! cc @martindurant @jorisvandenbossche in case they have any thoughts on this. Otherwise I'll plan to merge later today ","2021-07-08T15:21:51Z",false,"COMMENTED"
"jsignell","MEMBER","This makes sense to me. Good to merge @rjzamora?","2021-04-22T13:46:49Z",false,"DISMISSED"
"jrbourbeau","MEMBER","","2021-04-12T14:49:49Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-12T18:33:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @quasiben. There's one small formatting issue, otherwise this looks good to me! 

(Also the documentation preview was useful for reviewing here 🙂)","2021-04-07T15:13:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @quasiben! ","2021-04-07T16:56:46Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for your efforts here @jorisvandenbossche. Just checking in, is there anything I can help with? It looks like the Windows builds are now installing the nightly version of `pyarrow` https://github.com/dask/dask/pull/7531/checks?check_run_id=2380736480#step:6:216. 

Also the `FutureWarning` from pandas being raised in the `upstream` build should be resolved in the `main` branch if you want to merge that into this PR","2021-04-20T20:41:00Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-04-07T09:47:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jorisvandenbossche! ","2021-04-07T17:17:53Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @hristog! We should definitely encourage users to use `safe_load`

There are lots of CI failures here, but they look unrelated the changes in this PR. I'm going to restart CI to see if that helps ","2021-04-06T16:35:54Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @raybellwaves ","2021-04-06T23:28:14Z",false,"APPROVED"
"jorisvandenbossche","MEMBER","","2021-04-07T11:20:03Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-07T13:41:39Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-04-07T19:25:29Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-08T16:16:49Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-09T16:57:21Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-09T18:18:35Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks for the ping Rick! This looks good to me.","2021-04-14T18:35:40Z",false,"APPROVED"
"gjoseph92","COLLABORATOR","LGTM, also this seems like a key first step for https://github.com/dask/distributed/issues/4673","2021-04-06T21:41:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-04-06T22:12:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @madsbk! I agree utilizing `distributed`s built-in serialization is a better way to go ","2021-04-06T22:12:37Z",false,"APPROVED"
"madsbk","CONTRIBUTOR","","2021-04-07T07:34:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @madsbk! Could you add a small test which uses the distributed scheduler, like https://github.com/dask/dask/issues/7488 mentioned","2021-04-06T13:52:28Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-08T14:36:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @madsbk! This is in ","2021-04-23T16:50:13Z",false,"APPROVED"
"jsignell","MEMBER","This looks good! Thanks for opening this PR. ","2021-04-06T13:31:47Z",false,"APPROVED"
"jsignell","MEMBER","Thanks Doug!","2021-04-07T18:07:22Z",false,"APPROVED"
"martindurant","MEMBER","","2022-03-28T18:33:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-04-05T15:49:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-04-05T17:44:56Z",false,"APPROVED"
"gjoseph92","COLLABORATOR","","2021-04-02T01:56:57Z",false,"COMMENTED"
"jsignell","MEMBER","This looks good to me. Thanks!","2021-04-21T20:56:30Z",false,"APPROVED"
"jrbourbeau","MEMBER","OoOo nice! I'm up for giving this a try ","2021-04-01T21:18:21Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-01T21:31:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! Let's give this is a try","2021-04-01T23:37:37Z",false,"APPROVED"
"jsignell","MEMBER","I think I prefer to have the dispatch objects all in one file separate form any of the registrations and with no imports. That way the registrations can import them all from dispatch and then the registrations don't get imported anywhere, so it makes for clean dependencies. And we can safely import from dispatch in all the places where we explicitly use the dispatch objects.","2021-04-01T20:45:00Z",false,"COMMENTED"
"jsignell","MEMBER","Looks good!","2021-05-24T19:28:54Z",false,"APPROVED"
"jsignell","MEMBER","This looks good to me and I think the behavior will be much less surprising. Thanks for opening this @rubenvdg! 

@TomAugspurger I am planning on merging this on Wednesday unless you have qualms :)","2021-04-05T14:46:47Z",false,"APPROVED"
"kkraus14","MEMBER","","2021-04-01T17:21:05Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-01T17:31:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-04-01T17:34:21Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-01T17:38:03Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-04-01T17:38:30Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-01T17:46:06Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-01T17:47:01Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-04-01T17:48:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-04-01T18:01:47Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-01T18:29:35Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-04-01T18:43:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-04-01T19:17:31Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-01T20:19:13Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-01T21:15:57Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-02T15:10:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-05-20T19:06:56Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-05-24T17:02:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-05-24T22:03:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! ","2021-05-24T22:04:19Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-04-01T16:32:59Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jcrist! FWIW `test_worker_shutdown_follows_normal_shutdown_process` passes on `main` for me locally. Should I expect it to only fail on certain platforms/Python versions/etc? ","2021-04-01T16:43:00Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-04-01T15:25:17Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-04-01T15:26:35Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-04-01T16:21:01Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-04-01T16:28:09Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2021-04-01T16:28:59Z",false,"COMMENTED"
"kkraus14","MEMBER","","2021-04-01T20:12:36Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-04-01T20:27:36Z",false,"APPROVED"
"jsignell","MEMBER","This looks reasonable to me. Thanks for writing it up!","2021-04-01T21:18:35Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @mrocklin, this is a nice addition

For anyone looking for a concrete example of this, see [this section of `distributed.__init__.py`](https://github.com/dask/distributed/blob/aac50f63fdacfb43be64279ab540f68cabe7351b/distributed/__init__.py#L45-L55)","2021-04-01T17:01:10Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @cameron16!","2021-04-01T23:43:36Z",false,"APPROVED"
"jsignell","MEMBER","","2021-03-31T20:43:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! It looks like we only want to use `*_computed` when the corresponding input is a Dask collection, otherwise we'll be comparing things like `numpy.ndarray` to `None`. In this case it probably makes sense to fallback to using `a` when `a_computed is None`","2021-03-31T15:44:18Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-31T19:03:42Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-31T19:28:32Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","@jsignell I think having the option to turn off `check_type` in `assert_eq` is useful in general.  For @jakirkham's [failing test](https://github.com/dask/dask/pull/7486#issuecomment-810516118) though, what do you think about the approach in https://github.com/dask/dask/pull/7399/commits/757927a3278bcba35e2969f2c79d28a67bd422c3 of having the final `concatenate` preserve ndarray subtypes? That basically solves the `recarray` and `memap` tests (memap with this small hack in https://github.com/dask/dask/pull/7399/commits/df24a87a8a3958d1e5b35729947aca7c7a11a4cf; debatable if that's a good idea).

For non-ndarray subclasses, we should already get similar type-preserving behavior from `__array_function__`, if the type implements it. (You could argue that `np.recarray` and `np.memap` are just poorly-behaved ndarray subclasses, since they don't implement `__array_function__`. But alas, we still have to deal with it.)

I think in some cases, you might actually care that `ddf.to_records().compute()` doesn't return a `np.recarray` as you were expecting—for example, attribute access to fields would fail. For that one in particular, maybe we want to change the behavior, not the testing?","2021-04-01T19:34:00Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-01T19:56:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell. I've got one small question, otherwise this is good to go ","2021-04-01T20:49:15Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-01T20:51:34Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-01T20:55:22Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-04-01T21:00:06Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-01T21:36:06Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-04-01T22:26:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! ","2021-04-02T18:30:29Z",false,"APPROVED"
"gjoseph92","COLLABORATOR","","2021-03-30T18:40:19Z",false,"COMMENTED"
"kkraus14","MEMBER","","2021-03-30T17:50:36Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-30T17:52:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-30T18:01:17Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-30T18:11:34Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-30T18:12:14Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-30T18:13:12Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-30T18:23:44Z",false,"COMMENTED"
"kkraus14","MEMBER","","2021-03-30T18:58:42Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @TomAugspurger! ","2021-03-30T16:36:50Z",false,"APPROVED"
"jsignell","MEMBER","This looks good to me. Do you want it to merge at the same time as the distributed one?","2021-03-30T17:34:41Z",false,"APPROVED"
"jrbourbeau","MEMBER","For testing, we can probably add a couple of checks for the layers in the output of `map_overlap` with `depth=0`. For example

```python
In [1]: import dask.array as da

In [2]: x = da.arange(10)

In [3]: y = x.map_overlap(lambda x: x, depth=0)

In [4]: y.dask.layers
Out[4]:
{'arange-2300c890afba0995f2c99810b5790497': <dask.highlevelgraph.MaterializedLayer at 0x7fcd72eb22b0>,
 'lambda-21f79b02d59c5c955b818ffc7528a3ce': Blockwise<(('arange-2300c890afba0995f2c99810b5790497', ('.0',)),) -> lambda-21f79b02d59c5c955b818ffc7528a3ce>}
```

We might `assert` that there are only two layers and that one of them is `Blockwise`. Just a thought -- open to other suggestions ","2021-03-30T15:12:42Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-31T20:51:09Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-31T20:53:08Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-31T20:55:41Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-03-31T22:21:06Z",false,"COMMENTED"
"jsignell","MEMBER","Looks good!","2021-03-31T22:36:49Z",false,"APPROVED"
"jrbourbeau","MEMBER","You're totally correct -- thanks for fixing this @jameslamb! ","2021-03-29T15:29:27Z",false,"APPROVED"
"jsignell","MEMBER","This looks like a nice implementation. It'd be good to have a test where the categories are un-ordered and `ignore_ordered=True`.","2021-03-29T15:50:33Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-30T21:15:31Z",false,"COMMENTED"
"mesejo","CONTRIBUTOR","","2021-03-31T08:34:24Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-04-01T05:30:05Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-04-01T14:40:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR @brandon-b-miller! Just a heads up that there are a couple of code linting errors in CI. Running `black` and `flake8` locally should take care of any formatting issues (see https://docs.dask.org/en/latest/develop.html#code-formatting for more information). 

Also cc @jsignell @TomAugspurger in case either of you have thoughts on this","2021-03-26T16:47:45Z",false,"COMMENTED"
"brandon-b-miller","CONTRIBUTOR","","2021-03-26T16:49:17Z",false,"COMMENTED"
"brandon-b-miller","CONTRIBUTOR","","2021-03-26T16:49:57Z",false,"COMMENTED"
"kkraus14","MEMBER","","2021-03-26T17:20:25Z",false,"APPROVED"
"galipremsagar","CONTRIBUTOR","","2021-03-26T18:57:00Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @brandon-b-miller! This is in

Also, I agree with @kkraus14 that we should do some follow-up work to replace `is_categorical_dtype` more broadly throughout the codebase. ","2021-03-26T19:45:32Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @hristog. Could I ask you to use `pytest`'s `monkeypatch.setenv` instead as it's more commonly used throughout the codebase. For example, see `test_env_var_canonical_name` in the same `dask/tests/test_config.py` module being modified in this PR

https://github.com/dask/dask/blob/f41325512a4251dbaa7f7c781414d913066a6c34/dask/tests/test_config.py#L378-L384","2021-03-25T16:08:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @hristog! ","2021-03-25T19:09:30Z",false,"APPROVED"
"jsignell","MEMBER","","2021-03-25T18:18:01Z",false,"COMMENTED"
"jsignell","MEMBER","This looks good, but while you are improving this I am wondering if we should do `@derived_from(pd.DataFrame)` instead.","2021-03-25T18:18:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Nice catch, thanks @gjoseph92! ","2021-03-24T00:47:18Z",false,"APPROVED"
"quasiben","MEMBER","","2021-05-28T13:47:10Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-05-28T15:58:11Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-03T17:40:28Z",false,"COMMENTED"
"quasiben","MEMBER","","2021-06-03T21:01:32Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-03-23T22:42:59Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","Hello, I added some comments. 

Although it might be necessary I think it's a little unfortunate that you had to reimagine the implementation a bit. When I added it was pretty much a straight copy/paste from numpy. It made it very easy to review and see through possible errors (although not the cupy errors apparently...). But the numpy implementation has already changed since I copy/pasted it so keeping up with upstream is not easy.
","2021-03-24T06:12:56Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2021-03-24T06:20:08Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-03-24T08:08:27Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-03-24T08:08:35Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-03-24T08:08:48Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-03-24T08:09:24Z",false,"COMMENTED"
"jakirkham","MEMBER","Thanks Peter! 😄","2021-03-25T22:51:37Z",false,"APPROVED"
"rjzamora","MEMBER","","2021-03-27T01:08:44Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-27T01:22:01Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-30T17:13:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-30T20:30:12Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-30T20:32:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-30T20:44:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-30T21:39:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-04-23T18:38:24Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for this addition @nickvazz! ","2021-03-23T17:44:19Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @gjoseph92! ","2021-03-23T17:38:40Z",false,"APPROVED"
"shoyer","MEMBER","Looks good to me, thanks!","2021-03-22T20:05:24Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @douglasdavis! I left a couple of small, non-blocking comments ","2021-03-22T20:16:40Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-03-22T20:22:43Z",false,"COMMENTED"
"pentschev","MEMBER","Looks good, suggested a minor typo fix, thanks @douglasdavis !","2021-03-22T21:02:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-22T21:43:03Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @douglasdavis! This is in","2021-03-22T22:32:33Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-03-22T18:50:01Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-22T18:50:18Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-22T18:59:41Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-22T19:01:17Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-22T19:08:25Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-22T19:55:19Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-22T19:58:12Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-03-22T23:18:27Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-23T19:42:31Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-23T19:44:29Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-26T07:03:59Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-03-26T15:43:32Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-26T16:00:38Z",false,"COMMENTED"
"jakirkham","MEMBER","Thanks Trevor! 😄 Had one question below 🙂","2021-03-22T19:05:50Z",false,"COMMENTED"
"manzt","CONTRIBUTOR","","2021-03-22T19:19:41Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-22T19:39:49Z",false,"COMMENTED"
"manzt","CONTRIBUTOR","","2021-03-22T19:45:57Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-22T20:21:12Z",false,"COMMENTED"
"manzt","CONTRIBUTOR","","2021-03-23T13:11:31Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-23T18:24:49Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @GenevieveBuckley! We're using the [`pytest-rerunfailures`](https://github.com/pytest-dev/pytest-rerunfailures) plugin for a few tests which currently fail intermittently. `pytest-rerunfailures` should automatically register the `flaky` marker. Do you have `pytest-rerunfailures` installed locally? ","2021-03-22T14:58:25Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-21T00:09:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jakirkham! ","2021-03-22T14:46:07Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-03-20T21:19:57Z",false,"APPROVED"
"madsbk","CONTRIBUTOR","> In an earlier PR we decided to use the full `annotations` instead of `anno` and I guess we forgot to update the name in the packing method.

Strange, I could have sworn that I did a search-and-replace. ","2021-03-22T08:42:11Z",false,"APPROVED"
"jrbourbeau","MEMBER","Could you clarify why we're removing a few `with ignoring(AttributeError):`? Otherwise this looks good to merge ","2021-04-05T15:56:25Z",false,"APPROVED"
"jsignell","MEMBER","","2021-04-05T16:09:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-04-05T16:14:46Z",false,"COMMENTED"
"jsignell","MEMBER","Thank you for writing this up @pentschev and sorry I didn't review it sooner. It seems to me that this is a clear improvement and if we want to finesse how other kwargs are handled in the future we can reasonably do that as well. Having the `meta` as a kwarg is a good escape hatch.
","2021-03-26T18:09:58Z",false,"APPROVED"
"TAdeJong","CONTRIBUTOR","","2021-03-26T18:17:12Z",false,"COMMENTED"
"TAdeJong","CONTRIBUTOR","","2021-03-26T18:18:26Z",false,"COMMENTED"
"jsignell","MEMBER","I like it.","2021-03-19T19:53:13Z",false,"APPROVED"
"jsignell","MEMBER","","2021-03-19T19:59:41Z",false,"APPROVED"
"jakirkham","MEMBER","Thanks for the quick fix James! 😄","2021-03-19T20:01:23Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @rjzamora! ","2021-03-22T22:29:55Z",false,"APPROVED"
"jrbourbeau","MEMBER","Hmm this used to work -- maybe there was a sphinx update or something that caused this issue? Regardless, thanks for fixing! ","2021-03-19T16:17:00Z",false,"APPROVED"
"martindurant","MEMBER","","2021-03-19T15:12:09Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-19T15:13:45Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-03-19T15:34:33Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-19T15:42:22Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-19T15:42:48Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-03-19T15:45:18Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks for working on this @ian-r-rose !  I know this is still WIP, but I left some initial thoughts since I was excited to take a look.","2021-03-19T17:43:39Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-03-23T22:35:07Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-03-23T22:48:29Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-03-23T22:49:36Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-03-23T22:58:44Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-24T02:58:45Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-24T03:09:16Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-24T03:59:59Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-03-24T05:18:06Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-24T15:49:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-24T18:50:41Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-03-24T21:14:36Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-24T21:45:14Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-03-24T21:51:19Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Okay, I've updated this with two things:
1. I've backed out changes to `dask.array.random` for the time being, pending conversations around #7513.
2. Previously this had removed the ability to *not* inline arrays in `from_array`. Non-inlined arrays didn't work well with the embarrassingly parallel nature of `Blockwise` (at least, so far as I could tell). Having a fallback to non-inlined arrays isn't particularly pretty. It may be that some of the ideas around eagerly-sliced views in #7513 could help there as well.

For the time being, however, you can get some pretty nice reductions in the initial client-scheduler communication for large array-based workflows using this (since the unmaterialized HLG takes up orders of magnitude less space than a materialized graph with tens of thousands of tasks).","2021-04-14T02:49:18Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-11-15T19:47:26Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-11-15T19:52:44Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-11-15T19:56:20Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-11-15T20:13:38Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-11-16T02:40:59Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-12-16T02:58:04Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-12-16T03:30:14Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-12-16T23:20:21Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-12-16T23:30:33Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-01-05T23:41:38Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-01-05T23:49:41Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-01-06T15:43:16Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-06T19:22:59Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-01-06T19:26:10Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-01-06T19:28:47Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-06T19:41:54Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-01-06T23:21:23Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-06T23:25:22Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-01-07T00:50:09Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-01-07T01:18:11Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-07T02:56:13Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","I'm happy with this, nice work @ian-r-rose! Some small readability tweaks, but otherwise I think we should move ahead with this.

I'm _slightly_ inclined to say we should change the `inline_array` default from False to True in a standalone, follow-up PR. It doesn't really matter at all, just feels cleaner to isolate a (possibly-breaking) API change from a relatively big changeset of internal implementation. The changelog is not very useful to read anyway, but it would be easy for that change to get lost if mixed in with this one.","2022-01-10T22:39:10Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-01-10T23:07:46Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-01-10T23:52:48Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-01-11T00:01:57Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-01-11T00:10:05Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-01-11T00:11:35Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2022-01-11T02:42:56Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2022-01-11T18:27:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose @gjoseph92 @rjzamora ","2022-01-21T16:03:30Z",false,"APPROVED"
"maartenbreddels","CONTRIBUTOR","","2022-01-31T18:38:21Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-18T21:58:48Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-24T19:33:24Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-24T21:30:31Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-03-24T21:33:54Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-24T21:53:48Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-19T22:05:05Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","Overall, I think enforcing a consistent interface via `BlockwiseDep`, and allowing it to be in the arguments but immediately pulling it into `io_deps` internally is a great way to get the benefits of #7513 with less of a refactor!

One thing I think we could take from #7513 right now is separating concerns more with the `__dask_distributed_*pack__` methods. For example, I think we could easily get unpack-related logic out of `make_blockwise_graph`.","2021-04-20T01:57:51Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-20T02:23:14Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-20T02:29:07Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-20T02:29:40Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks for the review @gjoseph92 !  Your comments were very useful.  There is still more cleanup to do, but I think I had a chance to address much of what you suggested.","2021-04-20T14:21:18Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-20T14:48:50Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","This is looking really good to me. Consolidating the serialization in `__dask_distributed_*pack__` is really nice! Mostly just seems like cleanup stuff now.","2021-04-20T23:30:13Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-21T13:43:24Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-21T13:47:41Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-21T13:57:06Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-21T14:58:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-21T15:55:59Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-21T16:02:52Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-21T16:15:48Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-04-21T21:41:40Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-21T22:06:00Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-21T23:26:40Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","`produces_task` seems cleaner to me, nice! As a reader of the code, it's also a kind of nice form of documentation.","2021-04-22T21:58:34Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-22T22:26:08Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-22T22:32:26Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-22T22:36:19Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","This looks really good to me. I'd be comfortable with seeing it merged right now; at this point, I just have a couple little nits.

The answer to this could definitely be ""let's do it later"", but what do you think about adding a little more documentation about the expectations and invariants in this `BlockwiseDep` system?
* Docstrings for base `BlockwiseDep` methods saying what they will be called with and are expected to return
* Example of `io_deps` behavior in `make_blockwise_graph` docstring

Could be nice to get it out of the way now, so it's easy to reference for all of us as we add to the Blockwise system and start forgetting about the implementation details.","2021-04-26T23:19:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-27T14:32:27Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-27T14:33:13Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-27T14:36:11Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-27T14:38:55Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","This is looking good @rjzamora. I have a few comments, mostly around documentation/clarification","2021-04-27T15:32:19Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-04-27T16:52:42Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-27T18:50:28Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-04-27T18:52:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for all your work on this @rjzamora and @gjoseph92 @ian-r-rose for the detailed review ","2021-04-29T16:11:01Z",false,"APPROVED"
"jrbourbeau","MEMBER","Whoops, good catch. Thanks @hristog! ","2021-03-17T21:49:53Z",false,"APPROVED"
"hristog","CONTRIBUTOR","","2021-03-17T14:07:30Z",false,"COMMENTED"
"hristog","CONTRIBUTOR","","2021-03-17T14:08:43Z",false,"COMMENTED"
"hristog","CONTRIBUTOR","","2021-03-17T14:10:49Z",false,"COMMENTED"
"hristog","CONTRIBUTOR","","2021-03-17T14:21:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR @hristog!

We can probably scale the changes back here a bit to just support a boolean flag for whether or not we should raise an error. I suspect a relatively small group of users will utilize this setting and when things are non-deterministic they'll want an error to be raised. We can always expand thing in the future if needed. 

Something like (I've not tested the snippet below)

```python
if callable(o):
    return normalize_function(o)
elif dask.config.get(""tokenize.allow-random"", True):
    return uuid.uuid4().hex
else:
    raise RuntimeError(""..."")
```

should work for that case","2021-03-18T02:00:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @hristog -- apologies for the delayed response. 

> One tiny concern I've got about the naming (allow-random) is that - as mentioned in this comment of mine - there are other sources of non-determinism that aren't going to be impacted by the proposed logic.

This is a great point -- if you want to add a check for `tokenize.allow-random` in those locations too, that would be welcome ","2021-04-08T17:19:58Z",false,"COMMENTED"
"hristog","CONTRIBUTOR","","2021-04-09T11:23:53Z",false,"COMMENTED"
"hristog","CONTRIBUTOR","","2021-04-09T11:26:29Z",false,"COMMENTED"
"hristog","CONTRIBUTOR","","2021-04-09T17:30:32Z",false,"COMMENTED"
"hristog","CONTRIBUTOR","","2021-04-09T17:36:40Z",false,"COMMENTED"
"jsignell","MEMBER","This is looking good, you just need a change to the config file to support this change.","2021-09-27T15:44:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @hristog","2021-03-22T22:42:27Z",false,"COMMENTED"
"hristog","CONTRIBUTOR","","2021-03-22T23:44:06Z",false,"COMMENTED"
"hristog","CONTRIBUTOR","","2021-03-23T16:06:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-23T16:58:26Z",false,"COMMENTED"
"hristog","CONTRIBUTOR","","2021-03-23T17:26:25Z",false,"COMMENTED"
"hristog","CONTRIBUTOR","","2021-03-23T17:43:22Z",false,"COMMENTED"
"ncclementi","MEMBER","","2021-09-23T17:33:40Z",false,"COMMENTED"
"hristog","CONTRIBUTOR","","2021-09-23T20:31:42Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-09-27T15:23:05Z",false,"COMMENTED"
"hristog","CONTRIBUTOR","","2021-09-27T19:50:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Just a heads up, unless there are any objections I'm planning to merge this once CI passes","2021-03-16T17:57:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @bmerry! Could you post benchmark times for a relevant code snippet (e.g. the snippet in https://github.com/dask/dask/issues/7402) before and after these changes? 

also cc @madsbk @crusaderky ","2021-03-16T14:33:07Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-16T15:14:40Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2021-03-16T16:01:44Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-16T17:06:39Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-16T17:07:56Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2021-03-16T17:38:56Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2021-03-16T19:02:26Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-19T20:29:27Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @bmerry for the improvements and @crusaderky @rjzamora for reviewing ","2021-03-19T20:40:59Z",false,"APPROVED"
"jakirkham","MEMBER","Thanks James! 😄","2021-03-16T17:15:14Z",false,"APPROVED"
"jrbourbeau","MEMBER","Just added a note to the contributing guide -- let me know what you think ","2021-03-16T18:07:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @raybellwaves! ","2021-03-15T15:14:56Z",false,"APPROVED"
"Illviljan","CONTRIBUTOR","A first pass, can't say I understand all of this. Added some comments.","2021-03-18T06:04:44Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-03-18T09:02:05Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-03-18T09:11:51Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-03-18T09:14:05Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-03-18T09:18:06Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-03-18T09:23:57Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-03-18T09:33:22Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2021-03-19T20:01:04Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-03-22T09:55:32Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","Added a few more comments.","2021-03-27T08:26:36Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-03-29T15:18:45Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-03-29T15:21:22Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2021-03-29T18:19:15Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-29T18:43:27Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-03-30T16:04:49Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-03-30T16:11:23Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2021-03-30T16:54:32Z",false,"COMMENTED"
"shoyer","MEMBER","","2021-03-30T17:36:50Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-03-30T18:28:19Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-03-30T18:39:21Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-04-05T18:10:27Z",false,"COMMENTED"
"pentschev","MEMBER","Thanks @GenevieveBuckley , I can confirm the test passes on my end as well. The fact that we now need NumPy>=1.20 is technically a regression, but probably a small one, I'm fine with telling users they need to upgrade. But could you add the line below to [`test_bincount`](https://github.com/dask/dask/blob/a1187b13321d69565b9c21359d739c239bd04c65/dask/array/tests/test_cupy.py#L925-L938) to ensure it doesn't fail on older NumPy versions?

```python
@pytest.mark.skipif(not _numpy_120, reason=""NEP-35 is not available"")
```","2021-03-16T09:17:51Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-03-17T01:16:21Z",false,"COMMENTED"
"pentschev","MEMBER","@GenevieveBuckley thanks for the latest changes, I added another suggestion on making this a bit safer, not sure if that's really possible to happen in Dask but I guess there's no harm in doing so.","2021-03-17T10:52:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for your work on this @GenevieveBuckley! 

Since `axis` is always `(0,)` we can streamline some of the logic around constructing  `chunks` tuples (see the diff below). My hope is that will make reasoning about the logic here easier in the future. 

<details>
<summary>Diff:</summary>

```diff
diff --git a/dask/array/routines.py b/dask/array/routines.py
index 8d53541e..69f56b63 100644
--- a/dask/array/routines.py
+++ b/dask/array/routines.py
@@ -645,7 +645,6 @@ def bincount(x, weights=None, minlength=0, split_every=None):
         if weights.chunks != x.chunks:
             raise ValueError(""Chunks of input array x and weights must match."")

-    axis = (0,)
     token = tokenize(x, weights, minlength)
     args = [x, ""i""]
     if weights is not None:
@@ -655,32 +654,27 @@ def bincount(x, weights=None, minlength=0, split_every=None):
         meta = array_safe(np.bincount([]), x._meta)

     if minlength == 0:
-        output_size = np.nan
+        output_size = (np.nan,)
     else:
-        output_size = minlength
+        output_size = (minlength,)

     chunked_counts = blockwise(
         partial(np.bincount, minlength=minlength), ""i"", *args, token=token, meta=meta
     )
-    chunked_counts._chunks = tuple(
-        (output_size,) * len(c) if i in axis else c
-        for i, c in enumerate(chunked_counts.chunks)
-    )
+    chunked_counts._chunks = (output_size * len(chunked_counts.chunks[0]), *chunked_counts.chunks[1:])

     from .reductions import _tree_reduce

     output = _tree_reduce(
         chunked_counts,
         aggregate=partial(_bincount_agg, dtype=meta.dtype),
-        axis=axis,
+        axis=(0,),
         keepdims=True,
         dtype=meta.dtype,
         split_every=split_every,
         concatenate=False,
     )
-    output._chunks = tuple(
-        (output_size,) if i in axis else c for i, c in enumerate(chunked_counts.chunks)
-    )
+    output._chunks = (output_size, *chunked_counts.chunks[1:])
     output._meta = meta
     return output
```

</details>","2021-03-17T17:01:50Z",false,"COMMENTED"
"pentschev","MEMBER","LGTM, thanks @GenevieveBuckley ! 🙂 ","2021-03-18T09:52:00Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for all your work on this @GenevieveBuckley and for reviewing @pentschev! This is in","2021-03-18T17:28:12Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jameslamb! ","2021-03-15T15:18:04Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-03-15T17:22:32Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-03-15T19:42:04Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-03-15T20:48:01Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-03-16T20:37:59Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-16T21:31:12Z",false,"COMMENTED"
"ax3l","NONE","","2021-03-17T06:36:31Z",false,"COMMENTED"
"ax3l","NONE","","2021-03-17T06:39:52Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-03-18T02:28:01Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-30T16:29:56Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-30T16:32:19Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-30T16:38:08Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-30T16:39:18Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-30T16:40:47Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-30T16:43:17Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-30T16:43:45Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-30T16:45:17Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-03-30T18:31:23Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-03-30T19:03:59Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-03-30T19:05:09Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-03-30T19:05:54Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-03-30T19:20:18Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-31T02:54:52Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-03-31T05:15:49Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-03-31T05:38:34Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-04-01T22:33:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-04-01T23:19:14Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-04-01T23:21:27Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-04-02T00:12:18Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-04-02T00:14:48Z",false,"APPROVED"
"jsignell","MEMBER","","2021-03-15T16:25:37Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-15T16:43:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @crusaderky! Generally bumping to 1.16 seems okay to me

However I get the sense that this isn't super time sensitive (feel free to correct me if that's not the case). So given the discussion in https://github.com/dask/dask/issues/7378 and the appetite to bump to 1.17+, what do we think about waiting a few days to get input from the rest of the community on the broader minimum version policy and, if there's no significant pushback, we adopt the policy and update this PR to `numpy >= 1.17`?","2021-03-16T03:18:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for your work here @crusaderky! I'm going to merge this now as we're still coming to consensus over in https://github.com/dask/dask/issues/7378","2021-03-25T21:32:17Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2021-03-15T20:09:52Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-15T20:19:19Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-03-15T20:23:09Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-15T20:26:10Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-15T23:01:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-15T23:14:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Could you add `dask.layers` to the set of modules on this line

https://github.com/dask/dask/blob/a1187b13321d69565b9c21359d739c239bd04c65/continuous_integration/scripts/test_imports.sh#L17

That will ensure we can import `dask.layers` with only Dask's required dependencies. This won't cover non top-level imports (e.g. importing something inside a `__dask_distributed_pack__` method) but it does provide us some good automated `import` coverage ","2021-03-15T23:17:10Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-16T18:03:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for taking this on @rjzamora! Generally I like the approach of moving layers to a separate module where we can test top-level imports.

Because of the large `diff` would you mind giving a brief high-level summary of the changes? It looks like the `Layer` classes were moved around and we introduced `CallableLazyImport` -- was there anything else that changed? ","2021-03-16T19:07:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-16T19:07:50Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-16T19:47:12Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-16T20:01:58Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-16T20:06:16Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-16T20:07:04Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-16T20:11:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-16T22:08:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-16T22:08:59Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-03-16T23:01:05Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-17T00:04:45Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-17T03:36:14Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-17T03:37:05Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-17T03:38:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-17T14:45:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for all your work on this @rjzamora! ","2021-03-18T20:24:55Z",false,"APPROVED"
"jakirkham","MEMBER","Thanks Dieter! 😄

Had a small suggestion below","2021-03-26T07:00:13Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-26T08:04:50Z",false,"APPROVED"
"gjoseph92","COLLABORATOR","","2021-03-12T04:46:52Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks for looking into this. Seems good based on a quick skim.

If you're interested in this general area, https://github.com/dask/dask/issues/5001 might be fun to think about in the background.","2021-03-12T12:04:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for working on this @gjoseph92! Just as a heads up we use `flake8` and `black` for code formatting (xref https://docs.dask.org/en/latest/develop.html#code-formatting). I recommend installing our `pre-commit` hooks too (though they're not required)","2021-03-12T16:30:11Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-12T17:06:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-12T17:15:08Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-03-13T03:51:05Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-03-13T04:59:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @gjoseph92!","2021-03-15T20:25:33Z",false,"COMMENTED"
"kkraus14","MEMBER","","2021-03-15T20:46:55Z",false,"COMMENTED"
"kkraus14","MEMBER","","2021-03-15T20:47:20Z",false,"COMMENTED"
"kkraus14","MEMBER","","2021-03-15T20:48:36Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-03-15T20:55:48Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-03-15T21:01:30Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2021-03-15T21:21:54Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-04-02T18:01:13Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-04-02T18:04:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Nice! Thanks for taking this on. I see this is marked as a draft PR -- just let me know when you'd like a review ","2021-03-11T19:00:39Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-29T17:25:59Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! I've left a couple of small comments, otherwise this looks great -- thanks for taking this on

What do you think about treating `distributed` as a special third-party package that appear right above the `dask` imports instead of being grouped with things like `numpy`, `cloudpickle`, etc.? 


```diff
diff --git a/setup.cfg b/setup.cfg
index c44894ae..5ccd68c4 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -18,11 +18,13 @@ ignore =
 max-line-length = 120

 [isort]
+sections=FUTURE,STDLIB,THIRDPARTY,DISTRIBUTED,FIRSTPARTY,LOCALFOLDER
 profile = black
 skip_gitignore = true
 force_to_top = true
 default_section = THIRDPARTY
 known_first_party = dask
+known_distributed=distributed

 [versioneer]
 VCS = git
```","2021-03-29T19:33:14Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Yeah, thanks for working on this @jsignell ","2021-03-30T21:13:39Z",false,"APPROVED"
"jrbourbeau","MEMBER","Good catch, thanks @hristog! I pushed an empty commit to rerun CI to see if the test failure is related to the changes here (it looks totally unrelated). ","2021-03-11T03:44:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @hristog! ","2021-03-11T15:48:30Z",false,"APPROVED"
"jakirkham","MEMBER","Thanks Peter! 😄","2021-03-10T20:34:38Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for improving things here @jsignell. I have a slight preference for either the `requirements-test.txt` or `[test]` extras option as those are less likely to go out of date than documentation.

Since we already handle all our optional deps through `setup.py` extras instead of a `requirements.txt` file, adding a new `[test]` extra seems like the smoothest option. I think multiple extras can also be specified so something like

```python
python -m pip install -e "".[complete,test]""
```

should work
","2021-03-10T16:52:42Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2021-03-11T11:01:46Z",false,"APPROVED"
"rjzamora","MEMBER","","2021-03-10T15:49:54Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-03-16T13:14:05Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-03-16T13:17:49Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-03-16T13:18:53Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-16T13:24:40Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-15T14:44:34Z",false,"COMMENTED"
"rubenvdg","CONTRIBUTOR","","2021-03-15T15:24:11Z",false,"COMMENTED"
"rubenvdg","CONTRIBUTOR","","2021-03-15T15:25:52Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2021-03-22T11:13:39Z",false,"COMMENTED"
"rubenvdg","CONTRIBUTOR","","2021-03-22T11:19:57Z",false,"COMMENTED"
"rubenvdg","CONTRIBUTOR","","2021-03-22T11:24:06Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-26T15:56:01Z",false,"COMMENTED"
"jsignell","MEMBER","I really like the idea of formalizing this process. Thanks for getting this started @jacobtomlinson!","2021-03-10T14:48:57Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2021-03-10T14:54:58Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2021-03-10T14:56:09Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2021-03-10T14:56:21Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-10T16:40:13Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-10T16:40:54Z",false,"COMMENTED"
"stsievert","MEMBER","","2021-03-10T17:28:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-10T17:44:24Z",false,"COMMENTED"
"stsievert","MEMBER","","2021-03-11T00:21:19Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-11T13:59:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for working on this @jacobtomlinson! Overall this looks good -- apologies for the delayed review","2021-03-16T16:23:36Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2021-03-16T17:29:33Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-16T17:47:29Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-16T17:51:10Z",false,"COMMENTED"
"stsievert","MEMBER","","2021-03-16T19:25:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-16T19:50:12Z",false,"COMMENTED"
"stsievert","MEMBER","","2021-03-16T20:12:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-16T23:55:40Z",false,"COMMENTED"
"jcrist","MEMBER","","2021-10-04T18:06:36Z",false,"COMMENTED"
"jcrist","MEMBER","","2021-10-04T18:07:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for fixing this @madsbk! ","2021-03-12T17:37:29Z",false,"APPROVED"
"jsignell","MEMBER","This looks good to me!","2021-03-15T14:48:28Z",false,"APPROVED"
"jsignell","MEMBER","Looks good! I've used this action before and it's pretty great.","2021-03-10T16:39:36Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-03-15T17:12:17Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @douglasdavis! Could you add a test to `dask/array/tests/test_routines.py` to help guide development (there are several existing `test_histogram*` tests you can use as a template)?

Cross-referencing https://github.com/dask/dask/issues/7307 and https://github.com/dask/dask/issues/2911","2021-03-09T17:19:17Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-03-11T23:08:35Z",false,"COMMENTED"
"douglasdavis","MEMBER","","2021-03-12T01:51:11Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Nice! Thanks @jsignell -- let me know when you'd like someone to review ","2021-03-09T16:26:46Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-10T16:26:26Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-10T16:32:35Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-10T16:33:27Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-10T16:34:06Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Overall the changes here look good, thanks for working on this @jsignell. Some comments in addition to the ones below:

- There are a couple of `pytest.importorskip(""tlz"")` occurances we can remove 
- Same with `pytest.importorskip(""dask.bag"")` and `import_or_none(""dask.bag"")`","2021-03-10T17:35:31Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-03-10T17:57:38Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-10T18:05:55Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-10T18:06:14Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-10T18:08:47Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-10T18:48:25Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-11T10:45:04Z",false,"CHANGES_REQUESTED"
"jsignell","MEMBER","","2021-03-11T15:49:19Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-11T17:15:07Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-11T17:17:17Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-11T17:23:06Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-11T17:39:41Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-11T17:41:35Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-11T17:42:45Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-11T17:51:24Z",false,"CHANGES_REQUESTED"
"jsignell","MEMBER","","2021-03-11T17:54:48Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-11T17:55:08Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-11T18:21:17Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-11T18:23:39Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-11T18:54:24Z",false,"APPROVED"
"pentschev","MEMBER","","2021-03-11T19:34:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! ","2021-03-12T03:09:58Z",false,"APPROVED"
"jsignell","MEMBER","","2021-03-12T14:26:49Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-09T15:25:01Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks for this @jsignell !  My only real concern is that `split_out`>1 may not be supported.  Related test coverage would clarify if this is an issue.","2021-03-09T15:46:36Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-09T15:53:36Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-09T19:37:48Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-15T14:30:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-15T15:53:47Z",false,"APPROVED"
"jsignell","MEMBER","","2021-03-15T17:48:52Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-08T19:35:53Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-03-08T19:36:51Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @eoinsha! This is in","2021-03-08T19:21:48Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @tomwhite! What does `type(a).__module__` look like in one of these problematic cases? Is this something we could easily test in `dask/array/tests/test_xarray.py`?","2021-03-08T17:27:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Ah I see, so this issue is specifically related to using that intersphinx workaround, thanks for clarifying @tomwhite. This LGTM, I left a few small comments below mostly about adding some additional context around the added test ","2021-03-09T16:14:24Z",false,"COMMENTED"
"tomwhite","CONTRIBUTOR","","2021-03-09T17:50:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @tomwhite! ","2021-03-09T23:08:56Z",false,"APPROVED"
"jsignell","MEMBER","Thanks for opening this @jameslamb! I think the docstring change is definitely an improvement, but the test case is already covered, most of the tests for arrays are nested within the `array` dir. You can persuade yourself that the error case is being tested (this is what I just did) by changing `ValueError` to `KeyError` here https://github.com/dask/dask/blob/fb544144611b25a6f23d90637038a93f93153f8f/dask/array/core.py#L2761 and running `pytest -k array -n auto` to see the failures.","2021-03-08T15:28:56Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-05T22:58:25Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-03-05T17:22:51Z",false,"APPROVED"
"quasiben","MEMBER","","2021-03-05T14:07:38Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-03-05T14:13:52Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-05T14:26:58Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-03-05T14:37:09Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-05T15:17:44Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-05T15:53:41Z",false,"APPROVED"
"rjzamora","MEMBER","","2021-03-05T15:55:02Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-03-05T16:29:00Z",false,"COMMENTED"
"kylebarron","CONTRIBUTOR","","2021-03-05T16:48:52Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-03-05T17:01:19Z",false,"APPROVED"
"rjzamora","MEMBER","","2021-03-05T17:05:03Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks all! Let's merge after CI passes ","2021-03-05T17:17:30Z",false,"APPROVED"
"kylebarron","CONTRIBUTOR","","2021-03-05T18:17:34Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-03-05T18:37:25Z",false,"COMMENTED"
"pentschev","MEMBER","Thanks @jakirkham ! 😄 ","2021-03-04T19:24:45Z",false,"APPROVED"
"jrbourbeau","MEMBER","Just to confirm, does this test pass? (I don't have a GPU locally)","2021-03-04T19:26:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Great, thanks @jakirkham! ","2021-03-04T20:15:36Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-03-04T21:41:25Z",false,"COMMENTED"
"jakirkham","MEMBER","Some suggestions for CuPy sparse matrices","2021-03-04T21:44:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-04T21:52:12Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-04T23:03:30Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-03-04T23:17:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-04T23:18:01Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-04T23:21:18Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-04T23:47:40Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-04T23:48:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-04T23:52:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-05T00:02:50Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-03-05T07:08:26Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-03-05T15:29:19Z",false,"APPROVED"
"jsignell","MEMBER","Thanks for doing this!","2021-03-04T14:50:56Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2021-03-04T19:54:16Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-03-05T15:11:55Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-03-22T14:07:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Just checking in here, is there anything else we'd like to do in this PR?","2021-04-02T00:36:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @crusaderky! Could you add a test to ensure `clone`ing doesn't materialize the `Blockwise` layer (e.g. using the `is_materialized` method)","2021-03-05T04:00:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Great, thanks @crusaderky! ","2021-03-05T16:51:50Z",false,"APPROVED"
"GenevieveBuckley","CONTRIBUTOR","","2021-03-05T03:08:05Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-03-05T03:10:20Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-10T10:23:49Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","Missing unit tests. Also, have there been measures on real-life use cases for storing the chunks information for each intermediate step this way? It can get pretty large pretty fast.

I'd like to hear from others what they think about the design - particularly since this new ``info`` dict is heavily overlapping with the ``annotations`` dict (but, unlike annotations, it will get lost in transit when moving to the distributed scheduler).","2021-03-12T14:37:50Z",false,"CHANGES_REQUESTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-04-16T07:54:03Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-04-16T08:03:38Z",false,"COMMENTED"
"sjperkins","MEMBER","My understand of this PR is that it exists to provide information to dask visualization routines (`dask.visualize`?). I think the approach for the Array and Dataframe collections is fine.

What about Delayed and Bag? I believe Delayed objects have a HLG with layers but Bags do not. I'd be happy with attaching annotations to Delayed objects only, perhaps just with a `type` attribute. Are there any other attributes appropriate for Delayed?","2021-04-26T18:49:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-04-26T18:59:01Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-04-27T00:51:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for all your work on this @GenevieveBuckley! I've left a few small final comments, but overall this looks ready to merge ","2021-04-28T21:35:47Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2021-04-29T04:44:14Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-04-29T15:20:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @GenevieveBuckley for your work on this (and @sjperkins @crusaderky for reviewing)! I'm looking forward to seeing how we can use this new information ","2021-04-29T15:22:08Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @GenevieveBuckley! Just a couple of minor comments, but overall this LGTM","2021-03-03T20:49:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @GenevieveBuckley! ","2021-03-04T03:17:22Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jbusecke! 

Also I noticed this was your first code contribution to this repository. Welcome! ","2021-03-02T23:39:57Z",false,"APPROVED"
"kylebarron","CONTRIBUTOR","","2021-03-03T21:37:52Z",false,"COMMENTED"
"eriknw","MEMBER","","2021-03-03T23:03:06Z",false,"COMMENTED"
"eriknw","MEMBER","","2021-03-03T23:04:10Z",false,"APPROVED"
"jsignell","MEMBER","","2021-03-04T21:52:41Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-04T21:53:09Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-03-05T14:17:19Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-05T14:41:27Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-05T15:22:10Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-05T17:25:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! ","2021-09-01T19:28:57Z",false,"APPROVED"
"martindurant","MEMBER","Looks totally fine","2021-03-08T21:36:02Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2021-03-01T14:58:21Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-02T03:41:58Z",false,"COMMENTED"
"jrbourbeau","MEMBER","This is great to see, thanks for your work on this (and the corresponding PR in `distributed`). 

","2021-03-02T03:53:29Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-02T10:27:38Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-02T10:30:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @crusaderky! This looks great ","2021-03-03T23:11:55Z",false,"APPROVED"
"jsignell","MEMBER","There are some lingering issues to be resolved, but this PR is coming along nicely!","2021-03-08T15:14:35Z",false,"COMMENTED"
"gerrymanoim","CONTRIBUTOR","","2021-03-09T06:03:51Z",false,"COMMENTED"
"gerrymanoim","CONTRIBUTOR","","2021-03-09T06:17:06Z",false,"COMMENTED"
"gerrymanoim","CONTRIBUTOR","","2021-03-09T06:22:31Z",false,"COMMENTED"
"ryan-williams","CONTRIBUTOR","","2021-03-24T02:44:05Z",false,"COMMENTED"
"ryan-williams","CONTRIBUTOR","","2021-03-24T02:47:00Z",false,"COMMENTED"
"ryan-williams","CONTRIBUTOR","","2021-03-24T12:58:37Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-02T21:43:35Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-02T21:45:47Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-02T21:50:52Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-02T21:51:46Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-03T02:30:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for your work on this @crusaderky! 

Also, I appreciate you raising https://github.com/dask/dask/issues/7283 to improve `split_every` consistency across the project ","2021-03-03T02:32:00Z",false,"APPROVED"
"rjzamora","MEMBER","","2021-03-02T15:19:22Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-02T17:56:54Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-02T19:18:28Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-02T19:38:47Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-02T19:40:22Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-02T19:41:23Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-02T21:27:37Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-03-04T01:34:24Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-04T03:16:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-04T21:29:45Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-04T21:41:15Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-03-09T22:30:23Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-10T02:29:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for your patience on this PR @rjzamora, this is in","2021-03-12T02:54:17Z",false,"APPROVED"
"jakirkham","MEMBER","Looks good! Thanks James 😄","2021-02-26T17:26:39Z",false,"APPROVED"
"jakirkham","MEMBER","Sorry missed one thing that we had in `distributed` that we may need here to ensure things get installed correctly","2021-02-26T17:30:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-02-26T17:40:53Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-26T18:02:08Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-02-26T14:20:26Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2021-02-26T14:48:24Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2021-02-26T14:52:52Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2021-02-26T15:13:55Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks for doing this. I think the history is fine, we'll squash-merge anyways. ","2021-03-01T21:01:35Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2021-03-02T06:03:42Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-02T14:31:56Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-26T11:20:17Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-26T11:20:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @crusaderky! This is a nice generalization to support custom Dask collections which themselves wrap multiple Dask collections (like Xarray does) ","2021-03-02T19:35:49Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-03-02T19:36:37Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-26T13:43:43Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-26T14:11:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-02-26T14:12:12Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-26T14:14:52Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-26T18:33:43Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the fix @gjoseph92 and reviewing @crusaderky! ","2021-03-09T21:41:51Z",false,"APPROVED"
"jsignell","MEMBER","This looks reasonable to me, but I'll ping @dask/dataframe in case someone else wants to take a look.","2021-03-04T18:13:47Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-04T18:14:47Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-04T18:15:16Z",false,"COMMENTED"
"kkraus14","MEMBER","","2021-03-04T22:29:11Z",false,"COMMENTED"
"kkraus14","MEMBER","","2021-03-04T22:30:47Z",false,"COMMENTED"
"quasiben","MEMBER","","2021-03-05T14:56:06Z",false,"COMMENTED"
"kkraus14","MEMBER","","2021-03-05T15:25:35Z",false,"COMMENTED"
"jborchma","CONTRIBUTOR","","2021-03-06T16:38:50Z",false,"COMMENTED"
"jborchma","CONTRIBUTOR","","2021-03-06T16:41:44Z",false,"COMMENTED"
"jborchma","CONTRIBUTOR","","2021-03-06T16:53:41Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-08T15:49:14Z",false,"COMMENTED"
"jborchma","CONTRIBUTOR","","2021-03-13T14:49:06Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-15T17:38:37Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-03-15T22:36:57Z",false,"COMMENTED"
"kkraus14","MEMBER","","2021-03-19T19:58:16Z",false,"APPROVED"
"jsignell","MEMBER","Thank you for this @bmerry! I think it's a really nice improvement","2021-02-24T15:00:42Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the improvement @crusaderky! ","2021-02-23T01:21:22Z",false,"APPROVED"
"jsignell","MEMBER","","2021-02-22T17:41:49Z",false,"COMMENTED"
"patquem","CONTRIBUTOR","","2021-02-23T08:16:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! ","2021-02-22T19:43:09Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @magnunor! ","2021-02-22T15:34:33Z",false,"APPROVED"
"jsignell","MEMBER","Thanks for opening this. Ping @rjzamora for visibility.","2021-02-19T20:49:39Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-02-19T22:03:24Z",false,"COMMENTED"
"ryan-williams","CONTRIBUTOR","","2021-03-15T00:33:50Z",false,"COMMENTED"
"ryan-williams","CONTRIBUTOR","","2021-03-15T00:37:03Z",false,"COMMENTED"
"ryan-williams","CONTRIBUTOR","","2021-03-15T00:47:46Z",false,"COMMENTED"
"rjzamora","MEMBER","I think I am good with the addition of `_sort_and_analyze_paths` here.  I like that the solution is simple.  With that said, it may still be useful to have a `sort=` argument to `_analyze_paths` instead, in case we decide later to allow path sorting to be dissabled.  For example, I can imagine a use case where the disired order of partitions does not correspond to the sorted order (but to the explicit order of the input).","2021-03-17T18:16:35Z",false,"COMMENTED"
"ryan-williams","CONTRIBUTOR","","2021-03-24T03:34:57Z",false,"COMMENTED"
"ryan-williams","CONTRIBUTOR","","2021-03-24T03:35:13Z",false,"COMMENTED"
"ryan-williams","CONTRIBUTOR","","2021-03-24T03:36:16Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks for the work here @ryan-williams !","2021-03-24T22:47:03Z",false,"APPROVED"
"bnavigator","CONTRIBUTOR","","2021-02-18T20:41:02Z",false,"COMMENTED"
"bnavigator","CONTRIBUTOR","","2021-02-18T20:44:11Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-02-18T20:44:38Z",false,"COMMENTED"
"bnavigator","CONTRIBUTOR","","2021-02-18T20:48:14Z",false,"COMMENTED"
"bnavigator","CONTRIBUTOR","","2021-02-18T21:10:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-05T16:57:06Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-05T17:04:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-05T17:21:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! ","2021-03-08T15:51:46Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the ping @crusaderky, I'll look into setting up codecov

Also cc @jacobtomlinson who may find this interesting ","2021-02-18T16:52:07Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-18T17:51:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Overall this looks great, thanks for your work on this @crusaderky. I noticed there [are some coverage-related warnings in CI](https://github.com/dask/dask/pull/7246/checks?check_run_id=1951919278#step:6:1071) along the lines of

```
Coverage.py warning: Data file '/home/runner/work/dask/dask/.coverage.fv-az148-411.11930.085848' doesn't seem to be a coverage data file: cannot unpack non-iterable NoneType object
Coverage.py warning: Data file '/home/runner/work/dask/dask/.coverage.fv-az148-411.10659.561995' doesn't seem to be a coverage data file: Couldn't use data file '/home/runner/work/dask/dask/.coverage.fv-az148-411.10659.561995': no such table: coverage_schema
```

Do you have any thoughts on what might be causing our coverage reports to trigger these warnings? ","2021-02-22T21:50:29Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR @crusaderky! ","2021-02-18T16:39:34Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-18T17:01:01Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-18T17:06:21Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-18T17:07:18Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-18T17:09:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-02-18T17:09:55Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-18T18:17:59Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-18T21:05:58Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-02-18T21:58:31Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-18T22:16:34Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-18T23:22:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-02-19T00:01:00Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-19T01:01:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-02-17T21:02:49Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-02-18T19:15:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-02-17T16:28:47Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-02-17T16:45:12Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-02-17T16:46:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-02-17T16:47:15Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-02-17T16:59:40Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-02-17T18:03:48Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-02-26T16:10:11Z",false,"COMMENTED"
"jsignell","MEMBER","Sorry I let this sit for a bit. I think it looks really nice now. I just have a few suggestions of how to improve the tests.","2021-03-18T14:59:41Z",false,"COMMENTED"
"Madhu94","CONTRIBUTOR","","2021-03-19T05:30:13Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-19T13:20:12Z",false,"COMMENTED"
"Madhu94","CONTRIBUTOR","","2021-03-19T18:10:15Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-19T21:35:42Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-03-19T21:36:26Z",false,"APPROVED"
"jrbourbeau","MEMBER","That was quick! Looking at the full environment files, I think we can actually drop `graphviz` as `python-graphviz` is a metapackage which includes both the system `graphviz` package as well as the the Python bindings (though I realize having both `graphviz` and `python-graphviz` predates the changes in https://github.com/dask/dask/pull/7232)","2021-02-16T20:12:32Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2021-02-16T20:06:35Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2021-02-16T20:09:33Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-22T20:38:19Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2021-02-22T20:46:59Z",false,"COMMENTED"
"FirefoxMetzger","CONTRIBUTOR","Just adding two small points that I noticed while testing the PR. Not sure if they are relevant or not, so feel free to ignore them if not applicable :) ","2021-02-23T11:13:49Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-02-23T11:55:50Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2021-02-23T13:25:16Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-02-24T15:20:07Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","I've added comments. I'm not a core dev, so it's up to them what needs to be addressed.","2021-02-25T10:41:45Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2021-02-25T10:52:30Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2021-02-26T14:57:11Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2021-03-01T15:03:10Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2021-03-01T15:03:20Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2021-02-16T19:03:12Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2021-02-16T19:03:48Z",false,"COMMENTED"
"jsignell","MEMBER","This looks good to me. Is there an issue that should be linked. Not a problem if not, but just checking.","2021-02-16T19:09:54Z",false,"APPROVED"
"jrbourbeau","MEMBER","Yeah if this fixes CI on windows let's merge it (thank you for working on this!). We might want to keep https://github.com/dask/dask/issues/7231 open as a reminder to undo this pinning once the issue is resolved upstream in conda-forge ","2021-02-16T18:52:39Z",false,"COMMENTED"
"jsignell","MEMBER","I think this is uncontroversial, but would appreciate a :+1: from someone :)","2021-02-16T19:12:09Z",false,"COMMENTED"
"xhochy","CONTRIBUTOR","","2021-02-16T19:41:21Z",false,"COMMENTED"
"xhochy","CONTRIBUTOR","","2021-02-17T10:44:45Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-17T10:45:42Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-17T11:44:07Z",false,"COMMENTED"
"thomasjpfan","CONTRIBUTOR","","2021-02-19T19:25:42Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-29T17:21:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-03-29T21:52:09Z",false,"APPROVED"
"jrbourbeau","MEMBER","So it looks like we're still letting users set the underlying name for an array (i.e. the thing that corresponds to chunk keys) but we're adding an extra hurdle where they have to set a private attribute (`_name`) so it's more clear they're opting into mucking with the internal array state. Does that summarize things accurately or am I missing something?  ","2021-03-04T18:45:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Gotcha, thanks for the clarification. FWIW there's precedence for this as it's similar to what we do with `.chunks`","2021-03-05T04:06:29Z",false,"APPROVED"
"dcherian","CONTRIBUTOR","","2021-02-16T19:07:53Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-02-16T20:53:07Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-02-16T21:00:14Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2021-02-16T21:12:49Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-02-17T14:25:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR and reporting the original issue @ryan-williams! Based on this comment https://github.com/sphinx-doc/sphinx/issues/8885#issuecomment-779272887 in the upstream issue you opened, it looks like we can switch to using `html_css_files` instead of setting an upper bound on the sphinx version. I've proposed this over in https://github.com/dask/dask/pull/7220","2021-02-15T16:28:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the cleanup @ryan-williams! ","2021-02-15T16:52:41Z",false,"COMMENTED"
"ryan-williams","CONTRIBUTOR","thanks, think I responded to everything, will force-push a new rebased version now","2021-02-16T14:40:44Z",false,"COMMENTED"
"jsignell","MEMBER","This PR would be easier to review if it did one thing. Comment improvements would be merged very quickly while discussion of changes to tests could happen separately.","2021-02-24T16:30:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ryan-williams! ","2021-03-15T18:23:18Z",false,"APPROVED"
"jsignell","MEMBER","Sorry this sat for so long @ryan-williams I think between on #8517 and #8806 the issue that this was trying to solve has likely been addressed. Thank you for working on this though!","2022-03-16T15:34:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the fixes @rjzamora! Apologies for the delayed review ","2021-02-16T22:34:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-02-16T22:36:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for tracking this down @crusaderky. This is in ","2021-02-16T22:12:39Z",false,"APPROVED"
"jrbourbeau","MEMBER","Yep, this LGTM. Thanks for your work on this @jsignell! ","2021-03-08T20:18:43Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thank for the updates @crusaderky! ","2021-02-10T01:27:41Z",false,"APPROVED"
"jrbourbeau","MEMBER","FWIW I ran the `distributed` test suite with the changes here and everything passed (xref https://github.com/jrbourbeau/distributed/runs/1863749698) ","2021-02-09T19:35:21Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-09T20:45:39Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-09T20:47:09Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-09T20:48:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jcrist! ","2021-02-09T00:59:40Z",false,"APPROVED"
"jsignell","MEMBER","","2021-02-23T16:12:15Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-02-23T17:08:48Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","Thanks for taking this on @madsbk, this looks good to me","2021-02-12T01:40:12Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2021-02-12T08:47:23Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-12T10:11:35Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2021-02-12T11:23:45Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2021-02-12T11:35:38Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-12T11:43:44Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2021-02-12T11:49:59Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-12T11:52:33Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-12T11:53:12Z",false,"COMMENTED"
"sjperkins","MEMBER","","2021-02-12T13:54:53Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2021-02-16T09:47:19Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2021-02-16T09:53:38Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2021-02-16T09:55:24Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-16T11:10:39Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2021-02-16T11:19:30Z",false,"COMMENTED"
"sjperkins","MEMBER","Thanks for working on this @madsbk. I think this is moving in the right direciton. I have two comments

1. In my mind, annotations are part of the layer state. Is it not possible to :


     * pack annotations into the layer state as suggested in https://github.com/dask/distributed/pull/4406#discussion_r562561455?
   
     *  perform the packing with `__dask_distributed_pack__` and `__dask_distributed_unpack__` rather than separate `__dask_distributed_anno_pack__`?

2. `__dask_distributed_unpack__` returns a tuple which makes future-proofing this function against any custom unpacking difficult. Would it not be possible for it to return a {""dsk"": dsk, ""deps"": deps} dict instead as suggested in https://github.com/dask/distributed/pull/4406#discussion_r562561455?","2021-02-16T13:07:04Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-02-18T00:30:40Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-02-18T00:35:31Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-02-18T00:44:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Apologies for the delayed review, thank you for the ping @madsbk. Overall this PR and https://github.com/dask/distributed/pull/4489 look good to me. My primary comment is that there are a few places where I think using the full `annotations` term instead of `anno` for shorthand will improve code clarity. Otherwise, I think we're good to revert the temporary CI changes here and merge. ","2021-02-25T03:51:58Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @madsbk! This, and [the companion PR in `distributed`](https://github.com/dask/distributed/pull/4489), look good to me : )

Since we _may_ be releasing tomorrow (xref https://github.com/dask/community/issues/129#issuecomment-786332754), and the changes here are an internal refactor instead of addressing user-facing issues, I'm inclined to wait a day before merging these PRs (until after the release) to give the changes here a little time to simmer in the main branch before pushing them out to users","2021-02-26T01:33:03Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @crusaderky for taking the time to clean up and add tests here ","2021-02-09T02:22:09Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @HamzaPekdogan. Is there an existing issue the changes here are addressing? 

Based on the PR title my initial guess was that this is to add support for reading in string columns with `read_sql_table` but I think that's already supported. For example, this test

https://github.com/dask/dask/blob/510bbc380531cbf56a409f1ae68e6fd84a9599e6/dask/dataframe/io/tests/test_sql.py#L218-L223

successfully reads in a `name` string column ","2023-01-23T16:45:00Z",false,"COMMENTED"
"jsignell","MEMBER","This looks great -  thanks!","2021-02-05T18:27:02Z",false,"APPROVED"
"eriknw","MEMBER","","2021-02-05T19:33:03Z",false,"COMMENTED"
"shwina","CONTRIBUTOR","","2021-02-05T20:03:06Z",false,"COMMENTED"
"jakirkham","MEMBER","Thanks Peter! Had a few questions below","2021-02-03T21:41:49Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-02-03T21:48:30Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-02-03T21:49:08Z",false,"COMMENTED"
"kkraus14","MEMBER","","2021-02-03T22:05:07Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-02-03T22:11:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-03T22:13:27Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-03T22:18:32Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-03T22:20:16Z",false,"COMMENTED"
"shwina","CONTRIBUTOR","","2021-02-03T22:23:19Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-02-03T22:27:26Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-02-03T22:35:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-03T22:52:36Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-03T22:53:16Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-04T17:42:01Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-02-04T18:45:06Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-04T19:09:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-02-04T19:12:01Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-04T19:27:13Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-02-04T19:46:55Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-02-04T19:47:20Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-04T20:15:43Z",false,"COMMENTED"
"jakirkham","MEMBER","One last suggestion. Otherwise LGTM","2021-02-04T20:16:16Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-04T20:16:44Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-02-04T20:40:32Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-04T20:52:27Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-04T20:52:47Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-02-04T20:53:20Z",false,"COMMENTED"
"shwina","CONTRIBUTOR","","2021-02-04T21:38:52Z",false,"APPROVED"
"kkraus14","MEMBER","","2021-02-04T23:25:54Z",false,"APPROVED"
"jrbourbeau","MEMBER","I pushed a commit to update the `pytest.mark.skipif` condition (hope that's okay @pentschev). Also left a couple of small comments, but they shouldn't block merging this PR ","2021-02-05T04:32:37Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-02-05T09:52:13Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-02-05T09:55:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-02-05T17:28:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-05T17:56:04Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-05T17:58:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-02-05T18:22:42Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-05T18:45:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @crusaderky! I look forward to looking through the changes here. 

cc @madsbk @rjzamora ","2021-02-03T16:01:02Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-02-03T19:21:37Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-04T09:16:28Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-04T09:30:56Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-04T09:32:09Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","LGTM, nice work @crusaderky !","2021-02-04T16:12:58Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the improvements @crusaderky! ","2021-02-04T19:25:29Z",false,"APPROVED"
"jsignell","MEMBER","Thanks!","2021-02-01T21:42:03Z",false,"APPROVED"
"crusaderky","COLLABORATOR","Could you implement and test NEP18 support? One should be able to just call ``numpy.append`` and, as long as the leftmost argument is a dask array, the call should be automatically routed to ``da.append``.","2021-02-01T16:43:13Z",false,"CHANGES_REQUESTED"
"jrbourbeau","MEMBER","@D-Stacks we test [NEP-18](https://numpy.org/neps/nep-0018-array-function-protocol.html) functionality over in `dask/array/tests/test_array_function.py`. Specifically, you can ensure `np.append` dispatches to `da.append` by adding a new `pytest.mark.parametrize` entry here

https://github.com/dask/dask/blob/d0ecbeafc03ce1a49fb613441bca6acd2941f9a3/dask/array/tests/test_array_function.py#L15-L45","2021-02-01T17:13:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the updates @D-Stacks!

Apologies I should have mentioned this earlier, but since this adds a new top-level `dask.array` method, could you add a new entry to the Dask Array API docs at `docs/source/array-api.rst`? Other than that this PR looks good to me ","2021-02-01T19:14:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @D-Stacks! This is in","2021-02-01T22:46:07Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @aktech!","2021-01-29T23:02:06Z",false,"APPROVED"
"mrocklin","MEMBER","Tiny comments!  

Please don't block on any of these.  The probability that github conversations get lost in my inbox these days is high.","2021-01-29T19:42:36Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-29T20:03:31Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-29T20:04:21Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-03T18:50:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-02-03T19:32:39Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-02-11T23:09:42Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-23T19:12:23Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-02-23T19:28:06Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-23T19:45:40Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-02-23T19:58:06Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-02-23T23:32:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR and thoroughly testing / documenting the changes here @crusaderky! 

cc @jcrist @eriknw @shoyer for visibility","2021-02-01T17:04:51Z",false,"COMMENTED"
"jcrist","MEMBER","","2021-02-01T17:09:45Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-01T17:22:52Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-01T17:25:48Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-01T17:25:58Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-02-01T17:29:38Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-01T17:41:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Looking through the custom collection docs, we'll need to update the example at https://docs.dask.org/en/latest/custom-collections.html#example-dask-collection too. 

As this touches the task graph spec, let's give a bit more time for feedback from others. But overall the changes here seem reasonable.","2021-02-02T03:47:25Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-02T11:42:22Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-02T11:46:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @crusaderky! This is in","2021-02-03T15:57:19Z",false,"APPROVED"
"eriknw","MEMBER","","2021-02-03T17:47:21Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","I would definitely add a note about documentation","2021-02-01T14:25:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR @raybellwaves! Would you mind opening up a similar PR over in distributed? 

FWIW we used to include a check for documentation / changelog entry and found this added friction for new contributors who are the primary target of this checklist (xref https://github.com/dask/dask/pull/3459). We found that most PRs which are large enough to need a documentation change are included by the person submitting the PR and/or asked for by the reviewer(s) ","2021-02-01T16:10:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @raybellwaves! This is in","2021-02-02T03:21:28Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2021-02-01T14:23:24Z",false,"COMMENTED"
"crusaderky","COLLABORATOR",".","2021-02-01T14:25:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @raybellwaves! 

cc @nils-braun. How has user feedback back on `dask-sql`? Are you comfortable with adding it to the docs here? ","2021-02-02T01:33:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR @QuLogic! It looks like `flake8` is happy but `black` would like to make some code formatting changes. Would you mind running `black` and pushing up the changes? ","2021-02-04T04:19:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @QuLogic ","2021-04-16T17:25:24Z",false,"APPROVED"
"d-v-b","MEMBER","","2021-01-29T18:40:57Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2021-01-29T18:53:27Z",false,"COMMENTED"
"d-v-b","MEMBER","","2021-01-29T19:06:25Z",false,"COMMENTED"
"d-v-b","MEMBER","","2021-01-29T19:10:59Z",false,"COMMENTED"
"d-v-b","MEMBER","","2021-01-29T19:11:57Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-01T14:57:46Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-01T15:02:39Z",false,"CHANGES_REQUESTED"
"jsignell","MEMBER","","2021-02-01T21:56:26Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-02-01T21:57:32Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-02-01T21:58:04Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-02-01T22:27:08Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-17T14:30:02Z",false,"APPROVED"
"rjzamora","MEMBER","Thanks @jorisvandenbossche - This test looks good to me.  Note that #7091 includes the ""easy"" fix for this, so we can certainly merge this after that PR gets in.","2021-01-28T19:45:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @mzjp2! I left a few small comments about the tests you added (thank for you including those 🙂). Overall the changes here look good 👍 ","2021-01-26T05:07:54Z",false,"COMMENTED"
"mzjp2","CONTRIBUTOR","","2021-01-26T16:52:11Z",false,"COMMENTED"
"mzjp2","CONTRIBUTOR","","2021-01-26T17:22:53Z",false,"COMMENTED"
"mzjp2","CONTRIBUTOR","","2021-01-26T17:24:32Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-01-25T15:03:58Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-01-25T15:06:24Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-01-28T18:57:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for all your work on this @crusaderky! I was able to look though the `__dask_postpersist__` updates, `base.py` utilities, and `drop` + `checkpoint` methods. Overall things look good and I've left a few comments. I'll get through `clone` + `bind` tomorrow and may have additional comments then. 

In terms of where docs on these methods should live, I think a new section in https://docs.dask.org/en/latest/api.html seems like good place  ","2021-01-28T23:17:03Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-01-29T11:23:22Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-01-29T11:27:01Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-01-29T11:29:15Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-01-29T11:29:31Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-01-29T11:31:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-01-29T18:21:41Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-08T15:26:10Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-08T15:26:15Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-08T15:28:01Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for all the updates @crusaderky -- in particular the thorough set of tests. Most of the comments below are suggestions on the new documentation page","2021-02-11T02:47:19Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-11T11:57:37Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-11T12:02:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for all your work on this @crusaderky! It'll be good to get this out to users ","2021-02-12T03:10:39Z",false,"APPROVED"
"jsignell","MEMBER","","2021-02-18T22:21:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-02-18T22:30:04Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-02-18T23:21:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Makes sense, thanks!","2021-01-24T01:48:52Z",false,"COMMENTED"
"jsignell","MEMBER","This looks great!","2021-01-25T20:56:21Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose! Just a couple of small comments, otherwise the changes here LGTM","2021-01-27T03:28:30Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-01-27T16:00:07Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-01-27T16:01:40Z",false,"COMMENTED"
"sjperkins","MEMBER","","2021-01-27T16:08:12Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-01-27T16:52:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ian-r-rose for the fix and @sjperkins for reviewing!","2021-01-27T20:40:27Z",false,"APPROVED"
"jsignell","MEMBER","","2021-01-25T22:00:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the fix @jsignell! If you wouldn't mind adding a small test that would we welcome (just so we ensure we don't raise a `SettingWithCopyWarning` in the future if this implementation changes)","2021-01-20T23:25:21Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-01-21T14:16:07Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-20T19:48:20Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-20T19:54:23Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-01-20T19:59:30Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-01-20T20:00:30Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-20T20:04:44Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-01-20T20:11:53Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-01-20T20:13:08Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-20T20:19:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-26T17:07:37Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-26T17:27:47Z",false,"COMMENTED"
"rjzamora","MEMBER","@martindurant @jrbourbeau -  Although this PR may look huge, it is really just moving around logic that was already there :)

I added some review comments to help explain the changes.","2021-01-26T19:32:45Z",false,"COMMENTED"
"martindurant","MEMBER","Sorry, more questions, but I think it's all along the right lines!","2021-01-26T19:59:16Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-26T20:01:51Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-26T20:11:07Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-26T20:13:01Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-26T20:19:54Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-01-26T20:20:56Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-26T20:28:00Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-26T20:30:30Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-01-26T20:31:52Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-26T20:40:18Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-26T20:41:28Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-26T20:54:00Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-26T21:03:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-26T21:05:09Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-01-26T21:10:47Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-27T00:27:27Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-01-27T01:40:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-27T16:31:23Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-01-27T16:33:27Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-27T17:07:59Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-27T17:28:11Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-27T17:37:52Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-27T18:49:22Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-27T19:03:13Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-27T19:04:26Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-27T19:05:14Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-01-27T19:07:04Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-27T19:58:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! ","2021-01-29T15:37:07Z",false,"APPROVED"
"jsignell","MEMBER","@jrbourbeau are you ok with the change in this commit 9831f4e? The goal is to make it so the user at least has some control over the chunksize to avoid the cumprod issues discussed in https://github.com/dask/dask/pull/7084","2021-01-21T17:43:06Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-01-21T18:46:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-01-22T16:44:53Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-01-22T17:13:46Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2021-03-19T15:10:21Z",false,"APPROVED"
"bmerry","CONTRIBUTOR","","2021-05-17T14:07:55Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks @McToel !

This addition seems good to me.  I don't personally like to access columns as an attribute (especially with a name like `col`), but I also don't feel that it matters much in this case.","2021-01-21T17:01:53Z",false,"COMMENTED"
"rjzamora","MEMBER","One minor text suggestion - Otherwise, this looks good. Thanks @McToel !","2021-02-23T14:23:29Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @jameslamb! Adding informative error messages here is a nice improvement ","2021-01-19T17:24:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-01-19T17:24:57Z",false,"COMMENTED"
"jameslamb","MEMBER","","2021-01-19T17:26:30Z",false,"COMMENTED"
"jameslamb","MEMBER","","2021-01-19T17:26:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jameslamb! This is in ","2021-01-20T22:31:18Z",false,"APPROVED"
"jsignell","MEMBER","This looks great! Thanks @Illviljan ","2021-01-18T21:22:27Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @patquem 

> Hmm.. Linting has failed and I have no idea about the meaning of the error msg.

`flake8` and `black` are used for code linting / formatting. I recommend checking out the [Dask contributing guide](https://docs.dask.org/en/latest/develop.html), specifically [this section](https://docs.dask.org/en/latest/develop.html#code-formatting) on code formatting","2021-01-15T16:37:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the fix @rjzamora! Will merge after CI finishes  ","2021-01-15T16:28:53Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-01-15T21:03:47Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-01-18T19:09:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! ","2021-01-20T22:35:48Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-01-15T01:48:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-01-14T15:32:24Z",false,"APPROVED"
"martindurant","MEMBER","","2021-01-19T16:03:31Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-19T17:09:09Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-20T20:37:58Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-25T21:38:12Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-25T21:41:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! Just let a few minor comments. Otherwise, is this good to go in your eyes? ","2021-01-25T21:59:38Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-25T22:33:55Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-25T22:45:55Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-01-27T15:18:37Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-27T15:41:21Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-27T15:43:56Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-27T16:01:29Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-01-28T09:44:24Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-28T15:05:56Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-28T15:27:25Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-28T15:55:33Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-01-28T16:30:55Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-01-28T16:35:13Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-28T17:59:56Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-01-28T22:55:05Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-28T23:36:44Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-01-29T01:36:38Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-01-12T21:43:18Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-01-13T07:43:31Z",false,"APPROVED"
"gforsyth","CONTRIBUTOR","This looks good -- thanks for reporting the initial issue and putting in the fix @jcmgray !

@dask/maintenance this is good to be merged.","2021-01-12T15:12:40Z",false,"APPROVED"
"martindurant","MEMBER","","2021-01-12T15:43:21Z",false,"COMMENTED"
"jcmgray","CONTRIBUTOR","","2021-01-12T17:10:16Z",false,"COMMENTED"
"martindurant","MEMBER","","2021-01-12T17:16:21Z",false,"COMMENTED"
"jcmgray","CONTRIBUTOR","","2021-01-12T17:23:19Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","This looks good to me.  Thanks for putting in the updates @rmalouf !

@dask/maintenance this can be merged in.","2021-01-11T16:38:13Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @rs9w33. I've merged in the `main` branch into this PR as there have been several updates to our CI which will (hopefully) result in tests passing here ","2021-03-12T15:18:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rs9w33! This is in ","2021-03-12T16:17:19Z",false,"APPROVED"
"rjzamora","MEMBER","","2021-01-07T22:01:06Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-01-07T22:28:01Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-01-07T23:57:29Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-08T01:10:06Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","I haven't had time for a in-depth review but overall I think it looks great! 
Awesome that you got Array support implemented as well.
","2021-01-08T15:10:58Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-08T15:15:54Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-08T15:17:59Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-08T17:06:06Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-02-01T20:02:30Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-02-12T18:20:25Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-02-18T01:38:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-02-18T02:05:46Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-02-18T02:15:55Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-02-18T02:17:06Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-02-18T03:12:35Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-02-18T03:44:22Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-02-18T15:16:38Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-02-26T17:50:11Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-03-02T01:57:14Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-02T02:35:08Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2021-03-02T03:01:27Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-02T05:20:02Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-02T10:40:13Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-03-02T13:55:54Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! Just bumped CI to see if it will help tests pass (I think there's a time delay before new conda-forge builds are available)","2021-01-06T21:45:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Looks good, thanks @jsignell! ","2021-01-06T22:45:41Z",false,"APPROVED"
"shoyer","MEMBER","","2021-01-06T17:20:52Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-01-06T17:31:34Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-01-06T17:32:51Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-01-06T17:33:39Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-01-06T17:33:40Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-01-06T17:36:23Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","Mostly grammar stuff from me at this point. I appreciate all the comments in the code. 

Perhaps all the extra features being added is well worth it but I was wondering with all this new code is there any change in performance?","2021-01-06T23:12:08Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-01-07T09:07:05Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-01-07T09:08:08Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-01-07T09:08:37Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-01-07T09:31:33Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2021-01-07T15:42:20Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-01-07T16:23:07Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-01-07T16:26:10Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2021-01-07T17:05:40Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2021-01-10T10:01:09Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-01-11T09:42:40Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-01-11T20:06:19Z",false,"COMMENTED"
"davidhassell","CONTRIBUTOR","","2021-01-11T20:12:28Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2021-01-12T22:22:08Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-01-06T16:14:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-01-06T18:59:31Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-01-06T20:53:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-01-07T15:43:25Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-01-14T14:08:17Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-01-14T15:24:28Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-01-14T15:32:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell, this is in ","2021-01-15T16:42:27Z",false,"APPROVED"
"TomAugspurger","MEMBER","Thanks! Looks nice, just one suggestion and a question. Good to go once those are addressed.","2021-01-05T02:08:08Z",false,"COMMENTED"
"rubenvdg","CONTRIBUTOR","","2021-01-05T09:04:21Z",false,"COMMENTED"
"rubenvdg","CONTRIBUTOR","","2021-01-05T09:20:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2021-01-05T14:36:06Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2021-01-05T14:36:58Z",false,"COMMENTED"
"TomAugspurger","MEMBER","@dask/maintenance there's some failures on windows-3.8 at https://github.com/dask/dask/pull/7026/checks?check_run_id=1650637862. Are those know failures? (I've been a bit out of the loop recently 😄)

If those can be ignored then this is good to go. Thanks @rubenvdg.","2021-01-05T15:41:26Z",false,"APPROVED"
"jsignell","MEMBER","","2021-01-07T17:07:57Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-01-07T17:11:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-01-07T17:14:43Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-01-07T17:19:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2021-01-07T17:21:20Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2021-01-07T17:30:43Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2021-01-07T17:59:41Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-01-07T19:06:26Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2021-01-07T20:30:13Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2021-01-07T20:30:34Z",false,"COMMENTED"
"jsignell","MEMBER","This looks good to me! Thanks @Illviljan ","2021-01-07T20:35:39Z",false,"APPROVED"
"martindurant","MEMBER","","2020-12-24T19:27:45Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-01-05T20:04:06Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-01-07T16:36:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-01-07T16:46:14Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-01-07T16:47:58Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-01-08T15:08:39Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-01-08T15:17:37Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-01-08T15:18:17Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-01-08T15:20:08Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-06T00:50:22Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-06T00:51:35Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-06T00:52:51Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-06T00:53:57Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-07T11:07:22Z",false,"CHANGES_REQUESTED"
"jrbourbeau","MEMBER","","2021-03-08T21:38:11Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-03-09T11:22:59Z",false,"APPROVED"
"jakirkham","MEMBER","","2021-03-09T17:38:05Z",false,"APPROVED"
"jsignell","MEMBER","This looks good to me. Sorry it sat for so long. ","2021-01-14T13:49:32Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2020-12-21T16:51:18Z",false,"COMMENTED"
"ravwojdyla","CONTRIBUTOR","","2020-12-21T16:56:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @ravwojdyla!","2020-12-21T17:17:22Z",false,"APPROVED"
"gforsyth","CONTRIBUTOR","Hey @ravwojdyla -- thanks for putting this in and for the very thorough notebook running through the performance changes.

The changes you've made look good to me and I've tried to break this locally and haven't been able to.  :tada:

In re: the slight performance regression vs the original implementation when the arrays fit cleanly in memory, the chunking used in those examples (for the in-memory ones) defaults to `(1000, 250)` which puts it at something like 2mb per chunk.  Bumping that up (as you do in the following example) shows that your implementation is much more performant overall.

My only request here is that we add a few more tests along the lines of @eric-czech's questions -- all the current tests seem to have symmetric chunk sizes and it would be good to have a few where the chunk sizes are a bit more disparate, e.g.

```
X = da.random.random(size=(3, 3, 50, 100), chunks=(1, 3, 10, 25))
Y = da.random.random(size=(3, 3, 100, 50), chunks=(1, 3, 20, 5))
```

I'd like to see that and maybe two other random disparate chunk size examples in the tests just to cover our bases and then this is good to go in.

","2021-01-08T20:09:42Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","Thanks for putting this in @ravwojdyla -- this looks great!  @jrbourbeau this is ready to go in.","2021-01-09T18:19:04Z",false,"APPROVED"
"ParticularMiner","CONTRIBUTOR","","2021-11-22T20:45:27Z",false,"COMMENTED"
"ravwojdyla","CONTRIBUTOR","","2021-11-22T21:18:02Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-11-22T21:37:55Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-11-25T14:14:19Z",false,"COMMENTED"
"ravwojdyla","CONTRIBUTOR","","2021-11-25T22:54:33Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-11-26T10:53:22Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-11-26T14:24:47Z",false,"COMMENTED"
"ParticularMiner","CONTRIBUTOR","","2021-11-29T10:23:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @Carreau!

Yeah, the doc failure is unrelated to the changes here (xref https://github.com/dask/dask/issues/7001) ","2020-12-21T15:28:56Z",false,"APPROVED"
"jsignell","MEMBER","This looks good to me. Sorry it took me so long to review. ","2021-03-01T21:12:48Z",false,"APPROVED"
"jorisvandenbossche","MEMBER","","2020-12-22T20:08:51Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-12-22T20:11:48Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-12-22T20:16:33Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-12-22T20:29:16Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-12-24T12:20:08Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-01-04T14:32:21Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-01-08T13:55:36Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-01-08T14:11:51Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-01-08T14:35:51Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-01-11T13:23:31Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-01-11T14:02:50Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-01-11T14:03:53Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2021-01-21T16:02:47Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-01-21T16:04:32Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-01-21T16:05:41Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-12-18T22:48:26Z",false,"APPROVED"
"jsignell","MEMBER","","2020-12-18T16:49:08Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-12-17T18:29:49Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2020-12-18T10:19:35Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-12-18T13:48:59Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","LGTM","2020-12-18T13:52:47Z",false,"APPROVED"
"jacobtomlinson","MEMBER","","2020-12-18T15:50:36Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-12-18T16:36:07Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2020-12-18T17:09:27Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-12-18T17:12:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-12-17T17:37:26Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-12-17T17:41:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! ","2020-12-14T16:56:51Z",false,"APPROVED"
"martindurant","MEMBER","All seems fair, yes. I still have a couple of small comments.","2020-12-17T17:09:03Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-17T17:34:22Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-17T17:35:27Z",false,"COMMENTED"
"ayushdg","CONTRIBUTOR","","2021-01-15T03:43:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-01-15T04:00:24Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-01-15T15:09:50Z",false,"COMMENTED"
"jsignell","MEMBER","This looks good to me","2020-12-11T15:09:51Z",false,"APPROVED"
"jsignell","MEMBER","These highlights look good to me! There was a fair amount of work on SVD improvements as well. ","2020-12-10T22:54:52Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-12-07T16:14:01Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks for opening this PR! I think the functionality will be very nice. I just have a comment about the test.","2020-12-07T16:14:41Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2020-12-07T18:24:09Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-12-07T19:18:44Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2020-12-07T20:36:34Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","Thanks for checking this!","2020-12-07T12:31:49Z",false,"COMMENTED"
"xhochy","CONTRIBUTOR","","2020-12-07T14:56:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-12-11T14:58:31Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-12-11T14:59:37Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-12-11T15:27:05Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-12-11T15:44:26Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-12-11T15:56:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @sjperkins! ","2020-12-14T21:16:35Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @rjzamora! Just for my own understanding this, we only need `blockwise_token(0)` here because `PackedFunctionCall` gets a tuple of arguments at run time?","2020-12-04T16:38:29Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Gotcha, thanks. And, so far, `ninds` has never been >1 since `BlockwiseIO` was only utilized for DataFrames. 

Also, @ian-r-rose is trying out this fix over in https://github.com/dask/dask/pull/6931","2020-12-04T18:50:54Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-08T06:21:42Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2020-12-08T18:20:43Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-08T19:22:31Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-08T19:43:08Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2020-12-08T19:45:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Happy to merge this in and continue updating as needed","2020-12-11T16:43:46Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","> @jrbourbeau - It may be best to avoid adding any more ""fixes"" to this PR. Do you have thoughts on getting this in and opening follow-up PRs if working through #6791 and #6931 exposes other problems?

I'm happy to move future work on this into #6931 (there are still some cases we will need to track down, I'll post some minimal examples to that PR). @rjzamora feel free to push commits to that branch, though be aware that I've been rebasing regularly.","2020-12-11T16:49:40Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-11T17:01:20Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-11T17:09:54Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! I pushed a small commit to make `_inject_io_tasks` return the updated graph which I think makes things a bit more clear to read -- hope that's okay. Will merge after CI passes ","2020-12-11T20:01:52Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2020-12-04T01:31:43Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2020-12-04T01:37:09Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-04T01:52:36Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-04T05:48:29Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2020-12-04T15:48:53Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-11T23:39:10Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2020-12-11T23:40:16Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2020-12-11T23:43:03Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2020-12-11T23:49:26Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-12T00:01:17Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2020-12-12T00:30:43Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-12T05:29:27Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-12T05:31:26Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2020-12-14T17:05:51Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2020-12-14T17:07:45Z",false,"COMMENTED"
"rjzamora","MEMBER","This looks good @ian-r-rose - Thanks for the work here!

I made some minor suggestions, but I am also happy with the PR as is.","2020-12-15T15:13:59Z",false,"APPROVED"
"ian-r-rose","COLLABORATOR","","2020-12-15T17:11:26Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2020-12-15T17:11:41Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-15T18:28:44Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2020-12-15T18:32:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for all your work on this @ian-r-rose @rjzamora! ","2020-12-17T00:09:56Z",false,"APPROVED"
"rjzamora","MEMBER","","2020-12-04T00:21:01Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-12-04T08:51:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @madsbk! Apologies for the `delayed` review ","2020-12-16T03:26:23Z",false,"APPROVED"
"rjzamora","MEMBER","","2020-12-01T21:10:03Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-12-01T21:27:44Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-01T21:52:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-11-30T22:06:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-11-30T22:07:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @mrocklin! This is in","2020-12-01T02:21:32Z",false,"APPROVED"
"jsignell","MEMBER","Yep this looks good to me. The failing test is a known one. I tried retriggering CI, but I am not sure if that worked properly. I'll merge this today either way. ","2020-12-01T16:06:52Z",false,"APPROVED"
"TomAugspurger","MEMBER","Thanks! My impression is that most users are on helm3 now, so it should be what's presented in the docs. No need to have both here I think.","2020-11-29T20:36:57Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2021-02-04T18:36:38Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-02-04T20:09:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2021-02-04T20:13:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-11-27T21:06:08Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-11-30T14:35:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-12-02T05:13:17Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-12-02T13:33:16Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-12-02T13:37:06Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-12-02T13:37:30Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-12-02T13:50:24Z",false,"COMMENTED"
"mrocklin","MEMBER","Minor comments","2020-12-02T15:11:11Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-12-02T15:34:50Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-12-02T15:41:29Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-12-02T15:51:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-12-02T16:04:18Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-12-02T16:59:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-12-02T17:03:17Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-12-02T18:38:15Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-12-02T18:38:29Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-12-02T18:39:18Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-12-02T18:44:35Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-11-24T19:34:11Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-11-24T19:38:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! ","2020-11-25T19:11:01Z",false,"APPROVED"
"mrocklin","MEMBER","Minor docstring comments!

In general this seems like a nice thing to have.  Thanks for centralizing it here rather than elsewhere.","2020-11-24T15:11:03Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2020-11-23T23:29:11Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @zzhengnan! ","2020-11-24T17:28:37Z",false,"APPROVED"
"rjzamora","MEMBER","","2020-11-23T22:46:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-12-01T23:51:01Z",false,"COMMENTED"
"jrbourbeau","MEMBER","From a high level this seems fine to me. Though cc @mrocklin who (I think) previously expressed an interest in not over-specializing layer classes","2020-12-01T23:52:40Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-02T00:06:22Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-02T00:15:43Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-02T18:53:26Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-02T18:53:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! I pushed a commit to fix some merge conflicts introduced by the recent addition of `Layer` annotations (xref https://github.com/dask/dask/pull/6889) - hope that's okay. I'm in favor of breaking out the I/O part of `Blockwise` into a separate `BlockwiseIO` layer. I'll merge this PR after CI passes ","2020-12-03T17:09:17Z",false,"APPROVED"
"KrishanBhasin","CONTRIBUTOR","","2020-11-22T09:43:07Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-11-23T15:27:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-11-23T15:39:38Z",false,"COMMENTED"
"KrishanBhasin","CONTRIBUTOR","","2020-11-23T22:08:46Z",false,"COMMENTED"
"jsignell","MEMBER","This seems like a nice addition, but you'll need to make sure that the existing tests pass and add a new test to check this new functionality. ","2020-11-23T19:31:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for this fix @rjzamora! ","2020-11-21T03:10:00Z",false,"APPROVED"
"quasiben","MEMBER","","2020-11-30T15:17:30Z",false,"COMMENTED"
"pentschev","MEMBER","","2020-11-30T16:17:41Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-01-14T14:15:39Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-02-04T13:32:41Z",false,"COMMENTED"
"pentschev","MEMBER","Thanks @jsignell , this reads much better, and looks good to me now! 😄 ","2021-02-05T23:40:40Z",false,"APPROVED"
"jsignell","MEMBER","","2021-06-18T15:06:56Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-06-18T15:27:42Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-18T17:27:04Z",false,"COMMENTED"
"pentschev","MEMBER","Sorry @jsignell for the late reply, overall changes look good, I suggested only using `meta_from_array` to get the correct `_meta`, hopefully that's a simpler way and will work as well.","2021-06-28T12:09:36Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-06-28T18:14:48Z",false,"COMMENTED"
"pentschev","MEMBER","LGTM, thanks @jsignell !","2021-06-29T15:07:04Z",false,"APPROVED"
"rjzamora","MEMBER","Nice!  I was getting abit confused by the existence of `get_dependencies` once it was no longer used, so im in favor of removing it :)

Just to clarify... The established approach now is to have the dependencies returned by layer.cull  only (at least from the perspective of a `Layer`).  Is that correct?","2020-11-19T16:32:18Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @madsbk @rjzamora ","2020-11-24T14:50:16Z",false,"APPROVED"
"jsignell","MEMBER","","2020-11-18T17:48:57Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-11-18T17:50:42Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-11-26T20:41:01Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-11-26T21:32:55Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-12-02T15:58:41Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-12-09T20:09:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @madsbk! In general I'm in favor of removing `map_tasks` and `map_basic_layers` if they're not being used. Though I wonder if things have settled enough that we're confident we won't need them in the near future. What do you think about keeping them around for a bit longer?","2020-11-18T16:12:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-11-18T17:04:27Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @madsbk ","2020-11-19T06:07:19Z",false,"APPROVED"
"jsignell","MEMBER","","2020-11-18T15:06:44Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-11-18T15:10:49Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-11-18T15:12:09Z",false,"COMMENTED"
"jsignell","MEMBER","It's fine with me to just merge this and handle bug reports as they come in since this is new isolated functionality.","2020-11-18T15:13:40Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @madsbk! This LGTM, but let's wait until CI is done running over in https://github.com/dask/distributed/pull/4248 so we can merge these PRs together ","2020-11-17T23:06:34Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @madsbk! Overall this LGTM. I left a comment about some potential follow up work, however I'm going to merge this so we can carry on with profiling","2020-11-21T04:34:43Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jacobtomlinson! ","2020-11-17T14:52:22Z",false,"APPROVED"
"pentschev","MEMBER","The changes look good to me overall, I've added some suggestions though.","2020-11-17T17:46:17Z",false,"COMMENTED"
"anaruse","CONTRIBUTOR","","2020-11-18T02:19:18Z",false,"COMMENTED"
"anaruse","CONTRIBUTOR","","2020-11-18T02:22:18Z",false,"COMMENTED"
"anaruse","CONTRIBUTOR","","2020-11-18T04:56:17Z",false,"COMMENTED"
"pentschev","MEMBER","Changes look good to me, thanks @anaruse ! :)

From my side, this is good to be merged, could someone with merge rights take a final look, maybe @mrocklin ?","2020-11-18T19:19:38Z",false,"APPROVED"
"jameslamb","MEMBER","","2020-11-16T15:10:14Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-11-16T15:15:17Z",false,"COMMENTED"
"jameslamb","MEMBER","","2020-11-16T15:17:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","> Maybe in tokenize we could add [type(arg).__qualname__ for arg in args] in the final md5 call?

+1 that sounds like a nice way to ensure we're covering other cases 

> So tokenize would be always safe to use, while normalize_token would be ok if you know the type is always fixed. Does that make sense?

Since `tokenize` maps `normalize_token` onto its inputs, you shouldn't have to call `normalize_token` inside a `__dask_tokenize__` method on a custom class. If `Foo.att1`, `Foo.att2`, ... are objects that have been registered with `normalize_token` to produce deterministic values then something like:

```python
class Foo:
  def __dask_tokenize__(self):
    return (type(self).__qualname__, self.att1, self.att2, ...)
```

should work
","2020-11-16T23:55:25Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-11-17T14:45:04Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-11-17T16:12:10Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-11-17T18:46:34Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-11-17T19:12:12Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-11-18T21:13:22Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-11-19T14:07:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-11-13T15:19:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @devanshuDesai","2020-11-13T16:26:50Z",false,"APPROVED"
"mrocklin","MEMBER","","2020-11-11T20:27:28Z",false,"COMMENTED"
"rjzamora","MEMBER","The change seems reasonable to me, and I can confirm that it works with cudf-base collections (dask_cudf) - Thanks!","2020-11-12T16:32:42Z",false,"APPROVED"
"rjzamora","MEMBER","Thanks for submitting this @hayesgb !

This seems like a reasonable solution to #6824, as long as the default is `overwrite=False`.  It would be nice if pandas had something similar, but it is good to know that the kwyword exists in spark.

Can you add a test to [test_parquet.py](https://github.com/dask/dask/blob/master/dask/dataframe/io/tests/test_parquet.py) to show that overwrite=True works whether or not the path is empty? It would also be nice to check the `partition_on` behavior.","2020-11-10T19:01:43Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks for all your work on this @hayesgb !  I made several suggestions, but I don't feel strongly about the specific implementation details.

My overall feedback:

1. We should probably allow the user to specify `overwrite=True` even when the specified path is an empty directory.  Although there is nothing to remove in this case, I think we can think of this parameter as ""remove dataset contents **if** there are any.""
2. We can probably simplify the testing a bit and should use the `engine` fixture.","2020-11-11T21:36:56Z",false,"CHANGES_REQUESTED"
"hayesgb","CONTRIBUTOR","","2020-11-12T14:56:44Z",false,"COMMENTED"
"rjzamora","MEMBER","I feel comfortable with these changes, but I'd also like to get thoughts from @martindurant ","2020-11-13T18:53:20Z",false,"APPROVED"
"martindurant","MEMBER","Good tests!
I have a couple of not-very-important comments.","2020-11-17T14:53:50Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-11-17T14:59:07Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-11-17T15:01:04Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-11-17T15:05:48Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-11-17T15:16:27Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-11-17T16:08:38Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-11-17T16:32:40Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-11-17T17:30:20Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-11-17T17:42:03Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-11-17T18:41:14Z",false,"COMMENTED"
"jsignell","MEMBER","Changing no to yes seems a little extreme. Perhaps it can be a little more qualified like https://docs.dask.org/en/latest/dataframe-sql.html is","2020-11-10T15:11:14Z",false,"COMMENTED"
"jsignell","MEMBER","This looks good and works as expected. Would you be able to add a test?","2020-11-10T14:04:35Z",false,"COMMENTED"
"jsignell","MEMBER","Looks good!","2020-11-11T14:15:02Z",false,"APPROVED"
"mrocklin","MEMBER","","2020-11-09T17:04:17Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-11-09T18:38:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-11-11T18:06:44Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-11-11T21:44:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR @manuels! I left a small comment about formatting, but otherwise this LGTM","2020-11-09T16:56:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-11-09T16:56:58Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","@rjzamora this is great work, awesome that you support all kinds of blockwise! 

I suggest that you remove [`key_deps` and `non_blockwise_keys`](https://github.com/dask/dask/blob/d8ad27a689fc498297322339930d4ef098a50c78/dask/blockwise.py#L286-L287) and remove the use of `BasicLayer` so that the cached dict just becomes:
```python
            self._cached_dict = {
                ""dsk"": dsk,
            }
```","2020-11-11T08:36:23Z",false,"CHANGES_REQUESTED"
"rjzamora","MEMBER","","2020-11-11T19:32:48Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","LGTM, nice work!","2020-11-12T12:37:47Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for working on this @rjzamora. I've left a few small comments, but overall this LGTM","2020-11-13T04:53:16Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-11-13T18:32:33Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-11-13T18:33:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora, I'll merge once CI builds finish ","2020-11-13T19:13:05Z",false,"APPROVED"
"eric-czech","CONTRIBUTOR","","2020-11-13T15:06:08Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-11-13T15:11:51Z",false,"COMMENTED"
"RogerMoens","CONTRIBUTOR","","2020-11-13T15:32:31Z",false,"COMMENTED"
"RogerMoens","CONTRIBUTOR","","2020-11-13T15:41:20Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-11-17T13:06:59Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-11-17T13:07:35Z",false,"COMMENTED"
"RogerMoens","CONTRIBUTOR","","2020-11-17T15:48:33Z",false,"COMMENTED"
"RogerMoens","CONTRIBUTOR","","2020-11-17T15:48:40Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","LGTM!  cc: @mrocklin ","2020-11-17T21:47:54Z",false,"APPROVED"
"jsignell","MEMBER","This looks great! Thanks for opening the PR!","2020-11-06T13:54:56Z",false,"APPROVED"
"jsignell","MEMBER","","2020-11-06T13:55:58Z",false,"COMMENTED"
"DavidKatz-il","CONTRIBUTOR","","2020-11-08T08:28:41Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-11-09T16:12:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-11-05T21:04:14Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-11-05T13:22:32Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-11-05T13:26:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the updates @sjperkins! Will merge after CI passes ","2020-11-05T13:30:26Z",false,"APPROVED"
"mrocklin","MEMBER","Some quick comments.  Thank you for working on this.","2020-11-06T14:26:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-11-06T18:18:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-11-06T18:19:47Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2021-01-21T15:51:43Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-11-09T17:20:06Z",false,"COMMENTED"
"RogerMoens","CONTRIBUTOR","","2020-11-09T17:55:49Z",false,"COMMENTED"
"RogerMoens","CONTRIBUTOR","","2020-11-11T15:30:43Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-11-11T15:54:07Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-11-12T13:27:21Z",false,"APPROVED"
"jsignell","MEMBER","This looks really nice to me and fixes both #6758 and #6784 as advertised :) 

Ping @martindurant for visibility","2020-11-05T15:09:34Z",false,"APPROVED"
"rjzamora","MEMBER","","2020-11-05T15:12:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-11-06T14:10:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-11-06T14:11:43Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-11-06T15:39:59Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @RogerMoens. Could you add a test which shows how the previous implementation was incorrect? 

cc @eric-czech ","2020-11-04T17:08:07Z",false,"COMMENTED"
"RogerMoens","CONTRIBUTOR","","2020-11-11T20:00:50Z",false,"COMMENTED"
"RogerMoens","CONTRIBUTOR","","2020-11-11T20:01:55Z",false,"COMMENTED"
"RogerMoens","CONTRIBUTOR","","2020-11-11T20:03:57Z",false,"COMMENTED"
"RogerMoens","CONTRIBUTOR","","2020-11-11T20:04:18Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-11-12T13:07:20Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-11-12T13:07:30Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-11-12T13:08:23Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-11-12T13:09:03Z",false,"COMMENTED"
"RogerMoens","CONTRIBUTOR","","2020-11-12T21:07:46Z",false,"COMMENTED"
"RogerMoens","CONTRIBUTOR","","2020-11-12T21:08:41Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-11-12T21:20:34Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","LGTM now!  Can we get a merge or review when you get a chance @TomAugspurger / @mrocklin?","2020-11-13T15:14:36Z",false,"APPROVED"
"RogerMoens","CONTRIBUTOR","See #6799","2020-11-13T15:42:41Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks for this change @jsignell - Do you know if we need to add anything [in the schema-inference code](https://github.com/dask/dask/blob/f937c06a2ee1b92515714365ea945ca7b4d0e945/dask/dataframe/io/parquet/arrow.py#L861)?  Also, do you think it is possible to test this change somehow (not sure if this makes sense)? ","2020-11-03T15:46:12Z",false,"APPROVED"
"jsignell","MEMBER","This seems like it's not too far off. Are you still interested in finishing it up @MichaelKarpe?","2021-06-11T14:02:46Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for all your work on this @jacobtomlinson! I've left a few small-ish comments, but overall the changes here look good ","2020-11-12T05:15:30Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2020-11-13T11:00:07Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","Small changes for the migration from `goanpeca` -> `conda-incubator` org","2020-11-13T22:22:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for all your work on this @jacobtomlinson! ","2020-11-14T20:52:12Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @manuels! This is in 

For reference, the `[source]` link is right next to the function signature in API docs

<img width=""1552"" alt=""Screen Shot 2020-11-04 at 3 45 18 PM"" src=""https://user-images.githubusercontent.com/11656932/98171253-0cf18200-1eb5-11eb-952b-18d07afe6f42.png"">
","2020-11-04T21:47:57Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @steff456! This is in","2020-11-03T01:45:32Z",false,"APPROVED"
"mrocklin","MEMBER","","2020-11-03T01:50:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-11-03T01:52:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-11-03T01:53:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-11-03T01:59:16Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-11-03T08:53:05Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-11-03T12:58:05Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-11-03T12:58:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-11-03T16:41:26Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-11-03T17:58:33Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-11-03T18:01:17Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-10-29T21:04:58Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-10-29T21:08:33Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-10-29T21:17:07Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-10-29T21:35:29Z",false,"COMMENTED"
"jsignell","MEMBER","I like the idea of this very much, just a few suggestions.
","2020-10-29T15:29:26Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-10-29T15:31:38Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-10-29T16:26:38Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-10-29T18:48:31Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-10-29T19:10:36Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-10-29T19:22:08Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-11-02T12:44:05Z",false,"APPROVED"
"rjzamora","MEMBER","The approach here makes sense to me @madsbk . I was particularly focued on the shuffle changes as I reviewed, but the use of external dependencies for culling seems like a good idea to me - Thanks for working on this!","2020-10-28T18:02:51Z",false,"APPROVED"
"madsbk","CONTRIBUTOR","","2020-10-29T06:43:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @madsbk! ","2020-10-30T14:48:48Z",false,"APPROVED"
"shoyer","MEMBER","","2020-10-27T20:36:42Z",false,"COMMENTED"
"shoyer","MEMBER","","2020-10-28T17:22:38Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-10-29T01:41:16Z",false,"COMMENTED"
"shoyer","MEMBER","","2020-10-29T03:00:03Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @TomAugspurger! This looks good overall, I've just got a few small comments","2020-12-19T05:33:11Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-12-19T15:41:58Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @rjzamora! Glad to hear the upcoming `pyarrow` release has fixes : ) 

Could you update the `pyarrow` version constraint over in `dask/continuous_integration/hdfs/install.sh`?","2020-12-01T23:16:18Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-02T18:09:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-12-02T18:40:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-12-02T18:42:46Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora!","2020-12-02T22:00:36Z",false,"APPROVED"
"jorisvandenbossche","MEMBER","","2020-12-04T09:08:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-12-04T19:08:31Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-12-07T12:34:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @magnunor! This is in ","2020-10-27T16:51:43Z",false,"APPROVED"
"mrocklin","MEMBER","","2020-11-04T17:01:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-11-04T17:01:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-11-04T17:04:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-11-04T17:05:15Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-11-04T18:04:23Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-11-04T18:04:54Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-11-04T18:05:14Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-11-04T18:09:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-11-04T18:11:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-11-04T18:13:08Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-11-04T18:14:22Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-11-04T18:31:06Z",false,"COMMENTED"
"sjperkins","MEMBER","","2020-11-04T18:31:38Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-11-04T18:35:14Z",false,"COMMENTED"
"mrocklin","MEMBER","This looks good to me.  I made a couple of tiny suggestions on the docstring, but everything here seems both simple and powerful to me.","2020-11-04T19:19:16Z",false,"APPROVED"
"jsignell","MEMBER","Thanks for opening this! Now that I've seen it, I think the hint should live in the `__setitem__` method. That way we don't need to change the logic in broadcast_shapes, we can just add an extra hint to the original error message. Something like this:

```python
            try:
                y = where(key, value, self)
            except ValueError as e:
                raise ValueError(
                    ""Boolean index assignment in Dask ""
                    ""expects equally shaped arrays. Example: da1[da2] = da3""
                    ""where da1.shape == (4,) and da3.shape == (4,).""
                ) from e
```

here: https://github.com/dask/dask/blob/46ef300d4174983e769702a38a51c6884a8765b5/dask/array/core.py#L1550","2020-10-23T15:17:43Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks for this! It looks great!","2020-10-26T16:52:13Z",false,"APPROVED"
"quasiben","MEMBER","Thank you @pentschev for adding these updates!  I left a few small typo comments","2020-10-22T13:20:20Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-10-23T13:19:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","LGTM once the doctest issues are resolved.","2020-10-26T15:46:45Z",false,"APPROVED"
"madsbk","CONTRIBUTOR","I think this is a great feature @rjzamora but I am a bit concerned with the Blockwise implementation of the key (see my comment).

But if we can get this to work, let's make the `key` argument mandatory. All the `map_tasks()` implementations need to support it anyways.","2020-10-22T12:13:53Z",false,"CHANGES_REQUESTED"
"madsbk","CONTRIBUTOR","LGTM","2020-10-22T10:37:25Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-10-21T17:02:07Z",false,"APPROVED"
"jsignell","MEMBER","","2020-10-23T15:30:21Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-10-23T15:33:21Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-10-23T15:34:26Z",false,"COMMENTED"
"kumarprabhu1988","CONTRIBUTOR","","2020-10-23T21:54:01Z",false,"COMMENTED"
"kumarprabhu1988","CONTRIBUTOR","","2020-10-23T22:02:45Z",false,"COMMENTED"
"jsignell","MEMBER","It looks like the style changes are still in and there is one print that seems unintentional.","2020-10-26T20:05:37Z",false,"COMMENTED"
"kumarprabhu1988","CONTRIBUTOR","","2020-10-26T21:29:19Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-10-26T22:56:06Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-10-27T13:29:02Z",false,"COMMENTED"
"kumarprabhu1988","CONTRIBUTOR","","2020-10-29T01:49:00Z",false,"COMMENTED"
"kumarprabhu1988","CONTRIBUTOR","","2020-10-29T01:49:04Z",false,"COMMENTED"
"kumarprabhu1988","CONTRIBUTOR","","2020-10-29T02:08:24Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-11-16T15:31:38Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-11-16T19:10:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","This seems sensible as we already have similar early-exit behavior for DataFrames and the `fuse` function in `dask/optimization.py`, thanks for the PR @madsbk! I pushed a small commit to move the new test to be alongside the existing array optimization tests. 

One difference between the array and DataFrame case is that setting `optimization.fuse.active` to `False` for DataFrames just excludes low-level task fusion, while in the array case `optimization.fuse.active = False` excludes both low-level task fusion and an `inline_functions` optimization. This is probably okay, but something we should be aware of. https://github.com/dask/dask/issues/6083 seems like a good next step if we want to implement finer disabling options for different types of optimizations. 

Additionally, as we build out our high-level graph optimizations (https://github.com/dask/dask/issues/5644) we might consider adding a config option to turn off all low-level graph optimizations -- which I think is what @madsbk is after here ","2020-10-21T04:17:14Z",false,"APPROVED"
"jsignell","MEMBER","This looks good to me! Thanks for submitting this PR :)","2020-10-20T13:50:14Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @madsbk! Big +1 for this : )

Just a note that `test_pivot_table` is a known flaky test (xref https://github.com/dask/dask/issues/6729) ","2020-10-19T16:55:04Z",false,"APPROVED"
"TomAugspurger","MEMBER","Thanks for working on this. A few comments.","2020-10-18T18:54:45Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2020-10-18T22:04:15Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-10-19T10:51:53Z",false,"COMMENTED"
"TomAugspurger","MEMBER","When we extract the attrs, we should do so conditional on the pandas version.","2020-10-19T19:31:40Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-10-16T16:16:13Z",false,"COMMENTED"
"callumanoble","CONTRIBUTOR","","2020-10-16T18:53:01Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks for this fix @mcguipat - My only suggestion is to allow the default scheduler in the tests (but that is not critical).","2020-10-21T14:40:45Z",false,"APPROVED"
"callumanoble","CONTRIBUTOR","","2020-10-21T22:09:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @gforsyth! 

> qq: is there a flag to skip non-doc CI for docs-only changes?

There isn't, although that would be nice to have. If you include `[skip ci]` in a commit message then Travis CI (and some other CI services) will automatically not run builds for that commit, however GitHub actions doesn't support `[skip ci]` and there may be some difficulty with trying to add that functionality (xref https://github.com/dask/dask/pull/6196) ","2020-10-15T16:41:02Z",false,"APPROVED"
"hameerabbasi","CONTRIBUTOR","","2021-02-11T15:13:22Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2021-02-11T15:14:23Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-02-11T15:30:33Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-02-11T15:33:41Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2021-02-11T15:33:58Z",false,"COMMENTED"
"pentschev","MEMBER","","2021-02-11T23:19:22Z",false,"COMMENTED"
"quasiben","MEMBER","","2020-10-15T13:02:06Z",false,"COMMENTED"
"pentschev","MEMBER","","2020-10-15T13:04:33Z",false,"COMMENTED"
"mathause","NONE","Thanks a lot for all the detailed explanations!

I left some suggestions. Turns out this also needs to be done for (byte-)strings (`""S""`).


","2020-10-14T20:18:56Z",false,"COMMENTED"
"mathause","NONE","","2020-10-14T20:27:36Z",false,"COMMENTED"
"pentschev","MEMBER","","2020-10-14T20:35:46Z",false,"COMMENTED"
"pentschev","MEMBER","","2020-10-14T20:42:46Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-10-12T20:38:06Z",false,"APPROVED"
"pentschev","MEMBER","LGTM, thanks @jakirkham !","2020-10-09T19:42:58Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @raybellwaves! ","2020-10-09T03:52:51Z",false,"APPROVED"
"rjzamora","MEMBER","","2020-10-08T16:35:12Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-10-08T16:37:46Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for all your work here @rjzamora! The test you've added does a really nice job of demonstrating blockwise layer optimizations","2020-11-03T02:23:59Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-11-03T04:26:16Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-11-03T04:26:54Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-11-03T04:28:09Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-11-03T04:54:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! This is in ","2020-11-04T03:45:10Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2022-08-25T19:34:13Z",false,"APPROVED"
"mrocklin","MEMBER","","2020-10-12T18:43:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-10-12T18:43:40Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-10-26T22:43:12Z",false,"COMMENTED"
"chrisroat","CONTRIBUTOR","","2020-10-27T18:46:51Z",false,"COMMENTED"
"chrisroat","CONTRIBUTOR","","2020-10-27T18:47:14Z",false,"COMMENTED"
"chrisroat","CONTRIBUTOR","","2020-10-27T18:49:08Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-10-27T18:59:35Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-10-27T19:04:51Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-10-27T19:05:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-10-30T19:42:07Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks @jsignell !

In principle the implementation here seems sound to me.  I made a few finicky remarks around testing.  They're not critical, but they seem like maybe good habits to adopt.","2020-10-30T19:48:51Z",false,"APPROVED"
"jsignell","MEMBER","","2020-11-04T18:18:13Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-11-04T18:20:51Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-11-04T18:24:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Playing around with this PR locally it looks like we can still produce `HighLevelGraphs` that have raw dictionaries in their layers which causes `HighLevelGraph.get_dependencies` to fail. For example:

```python
import dask.array as da

x = da.ones(10, chunks=(2,))
dsk = x.__dask_graph__()
# Print out HighLevelGraph layers for x
from pprint import pprint
pprint(dsk.layers)

# Get dependencies for all the keys
deps = dsk.get_dependencies()
print(f""{deps = }"")
```

raises and `AttributeError`:

```
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-1-61e7febb21f5> in <module>
      8
      9 # Get dependencies for all the keys
---> 10 deps = dsk.get_dependencies()
     11 print(f""{deps = }"")

~/projects/dask/dask/dask/highlevelgraph.py in get_dependencies(self)
    369             self.key_dependencies = {}
    370             for layer in self.layers.values():
--> 371                 self.key_dependencies.update(layer.get_dependencies(all_keys))
    372
    373         return self.key_dependencies

AttributeError: 'dict' object has no attribute 'get_dependencies'
```

I see there's a `HighLevelGraph._fix_hlg_layers_inplace` method which ensures all layers are of type `Layer`. Should we call that at the end of `HighLevelGraph.__init__` to make sure we always have a uniform layer type? @madsbk I'd be curious to hear what you think -- I also could be totally missing something


","2020-10-07T22:37:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the nice outline @madsbk, that gives me a much better sense of how the ongoing HLG pieces fit together. 

+1 to merging this PR, then #6699, and then moving `_fix_hlg_layers_inplace` to `HighLeveLGraph.__init__`. I'll leave this open for a bit for feedback, but then plan to start merging ","2020-10-08T14:49:58Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2020-10-05T18:44:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @gforsyth! ","2020-10-06T22:38:26Z",false,"APPROVED"
"sofroniewn","NONE","","2020-10-02T16:02:17Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @madsbk! This is in ","2020-10-08T17:02:43Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @TomAugspurger! ","2020-10-02T22:29:31Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @szabgab. We already have a `maintainer=` field in our `setup.py`, could you elaborate on how the `author=` field differs?

Side note: We also might consider changing this to something like ""Dask developers"". @mrocklin do you have any reservations against that? ","2020-10-01T17:34:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @madsbk! 

There was John's comment (https://github.com/dask/distributed/pull/4140#issuecomment-708059073) about not using `__reduce__` and instead defining separate methods. I'm happy to revisit that later and go with this for now to not block progress on https://github.com/dask/distributed/pull/4140","2020-10-19T22:04:16Z",false,"APPROVED"
"jsignell","MEMBER","Thanks for this!","2020-10-01T13:38:33Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for your work here @madsbk! Overall this looks good, I've left a few comments below","2020-10-08T19:43:51Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-10-09T06:33:26Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-10-09T06:37:47Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-10-09T06:44:07Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-10-09T06:47:09Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-10-09T06:50:29Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-10-09T07:00:33Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-10-09T07:06:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the updates @madsbk! Overall this looks good to me. I've left one small comment about a simplification we can make and another about a potential API change

","2020-10-13T18:21:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-10-13T18:31:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-10-13T18:32:06Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-10-13T18:34:03Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-10-13T18:34:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-10-13T18:37:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-10-13T18:40:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","LGTM, thanks for all your work here @madsbk! Planning to merge this once CI passes","2020-10-13T18:40:51Z",false,"APPROVED"
"madsbk","CONTRIBUTOR","","2020-10-13T18:48:00Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-09-30T01:40:04Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-09-30T02:14:47Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-09-30T16:01:56Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-09-30T20:27:10Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-10-01T13:44:27Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-10-01T15:07:23Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Ah, I didn't realize that ucx-py was seeing them. Sure, this is fine to merge then.","2020-10-02T11:08:17Z",false,"APPROVED"
"TomAugspurger","MEMBER","I like the updated version. Maybe leave it for a few hours but I think this is good to go.","2020-09-30T19:40:36Z",false,"APPROVED"
"mrocklin","MEMBER","","2020-09-29T01:16:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-29T01:21:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-29T01:24:03Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2020-09-29T01:34:35Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2020-09-29T01:36:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-29T01:42:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-29T01:43:35Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2020-09-29T07:10:21Z",false,"COMMENTED"
"pentschev","MEMBER","Thanks @GenevieveBuckley for working on this! All looks good to me, I only suggested adding tests for the other functions as well, but I confirmed locally everything works.","2020-10-08T08:13:07Z",false,"APPROVED"
"jsignell","MEMBER","Thanks for doing this!","2020-09-28T18:11:03Z",false,"APPROVED"
"eriknw","MEMBER","","2020-10-03T01:44:55Z",false,"COMMENTED"
"jsignell","MEMBER","This doesn't solve the original issue for me. I tried:

```python
import numpy as np
import dask.array as da

T = np.ones((10, )) * np.nan
T[0] = 1
T[1] = 2
V = da.nanstd(da.from_array(T, chunks=(2, ))).compute()
```

And still got a divide by zero warning. This is on numpy 1.19.1 in case that is relevant.","2020-09-28T16:18:51Z",false,"CHANGES_REQUESTED"
"jsignell","MEMBER","Works for me! Thanks @thomasjpfan ","2020-09-30T15:34:00Z",false,"APPROVED"
"jcrist","MEMBER","Good catch! Thanks @madsbk. Can you add a test for this as well? It also looks like the tests added in that PR could have been better (one of them just checks that a dict is true):

https://github.com/dask/dask/pull/6424/files#diff-7e0fa7dbafa23ca8c9a94bff278b4f3fR1129-R1131

would you mind improving those a bit as well while you're at it?","2020-09-24T14:41:05Z",false,"COMMENTED"
"mrocklin","MEMBER","Some minor comments about typos","2020-09-24T15:55:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-24T15:56:47Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-09-25T16:11:15Z",false,"COMMENTED"
"Illviljan","CONTRIBUTOR","","2021-02-20T17:02:52Z",false,"COMMENTED"
"ryan-williams","CONTRIBUTOR","","2021-02-20T17:16:01Z",false,"COMMENTED"
"ryan-williams","CONTRIBUTOR","","2021-03-15T15:33:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-23T00:56:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-23T00:57:03Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-09-23T14:39:06Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-09-23T14:40:13Z",false,"COMMENTED"
"itamarst","CONTRIBUTOR","","2020-09-23T20:27:27Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-09-21T21:19:39Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-09-21T21:36:18Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-09-21T20:32:01Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @charmoniumQ! I'll be happy to see these flaky test failures go away : ) 

FWIW I'm not sure why `np.empty` is returning a `nan` here. But using `np.zeros` instead seems harmless, especially as we made a similar change in https://github.com/dask/dask/pull/5511 which seemed to help resolve similar flaky test failures","2020-09-21T15:47:58Z",false,"APPROVED"
"pentschev","MEMBER","Changes look fine to me. I added only a small suggestion on a test, but it's good to go from my side.","2020-09-21T08:17:50Z",false,"COMMENTED"
"kylejn27","CONTRIBUTOR","","2020-09-22T13:44:12Z",false,"COMMENTED"
"pentschev","MEMBER","","2020-09-22T14:06:11Z",false,"COMMENTED"
"pentschev","MEMBER","LGTM, thanks for the work on this @kylejn27 !","2020-09-24T11:43:54Z",false,"APPROVED"
"mrocklin","MEMBER","","2020-09-25T16:50:43Z",false,"COMMENTED"
"kylejn27","CONTRIBUTOR","","2020-09-25T18:14:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-17T20:23:25Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-23T22:21:28Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","Nice work @rjzamora, I only have some minor suggestions","2020-09-29T07:07:05Z",false,"APPROVED"
"mrocklin","MEMBER","Oops.  I had a bunch of comments queued. My apologies for the delay.

> The optimization pass is now significantly faster...

Note that we're caching things, so the `timeit` call here may not be representative
","2020-09-29T18:19:12Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-29T22:37:43Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-29T22:38:08Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-09-30T15:13:53Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-30T19:22:44Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-30T19:25:31Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-30T19:28:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-30T19:36:26Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-30T19:37:40Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-30T20:07:42Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-30T20:12:31Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-10-01T05:08:54Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-10-01T20:23:39Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-10-02T09:41:59Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-10-02T13:25:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for all your work here @rjzamora!

Please correct me if I'm wrong, but from what I can tell this PR moves existing DataFrame shuffling code into two new `SimpleShuffleLayer` and `ShuffleLayer` layer classes. The corresponding low-level task graphs aren't materialized until we try to inspect the underlying task graph (e.g. `__getitem__`) which will eventually help us send a smaller object to the scheduler (once we're directly sending `HighLevelGraphs`).

One piece of follow-up work that comes to mind is adding a custom serialization method for these new shuffle layers. The implementation over in https://github.com/dask/dask/pull/6693 would cause us to fully materialize the task graph for shuffle layers before sending them to the scheduler. Though that's certainly future work we don't need to worry about for this PR : )  

Overall I think the changes here look good. The fact that tests are passing gives me confidence. I've left a few small comments, but otherwise this appears to be good to go. Would you recommend we merge this in?","2020-10-15T20:18:51Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-10-15T22:06:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-10-15T22:07:59Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-10-15T22:12:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-10-16T17:00:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! Will merge once CI passes ","2020-10-16T17:01:16Z",false,"APPROVED"
"jsignell","MEMBER","I have some suggestions for how to simplify, but thanks for writing these up! To make both tests pass you can run it with PYTHONHASHSEED set:

```sh
env PYTHONHASHSEED=42 pytest -k test_bag_groupby
```","2020-09-18T15:59:56Z",false,"COMMENTED"
"lazarillo","NONE","","2020-09-22T07:29:46Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-09-23T14:25:21Z",false,"COMMENTED"
"Korijn","NONE","","2020-09-16T19:19:39Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-09-18T14:31:13Z",false,"COMMENTED"
"Korijn","NONE","","2020-09-18T14:46:16Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-09-21T15:06:42Z",false,"COMMENTED"
"Korijn","NONE","","2020-09-21T17:12:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-21T17:16:47Z",false,"COMMENTED"
"Korijn","NONE","","2020-09-21T17:25:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-23T01:02:13Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-09-15T18:37:46Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-09-15T18:39:25Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-09-15T18:42:10Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-09-15T20:46:21Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2020-09-15T23:39:39Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-09-16T13:23:17Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-09-16T13:39:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Good catch, thanks.","2020-09-15T20:01:04Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell! ","2020-09-15T14:44:02Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell! There's a small linting error in CI, otherwise this LGTM ","2020-09-14T16:25:12Z",false,"APPROVED"
"mrocklin","MEMBER","","2020-09-22T22:14:46Z",false,"COMMENTED"
"jthielen","CONTRIBUTOR","","2020-09-23T17:19:58Z",false,"COMMENTED"
"ravwojdyla","CONTRIBUTOR","","2020-09-23T18:41:18Z",false,"COMMENTED"
"ravwojdyla","CONTRIBUTOR","","2020-09-23T18:48:07Z",false,"COMMENTED"
"jthielen","CONTRIBUTOR","","2020-09-23T18:48:57Z",false,"COMMENTED"
"ravwojdyla","CONTRIBUTOR","","2020-09-23T18:54:45Z",false,"COMMENTED"
"jthielen","CONTRIBUTOR","","2020-09-23T18:56:44Z",false,"APPROVED"
"pentschev","MEMBER","I also didn't follow the work prior to this too closely, so I'll also pass and trust @jthielen 's judgment here. I'm only requesting a change on a typo that make things hard to grep.","2020-09-24T11:43:17Z",false,"CHANGES_REQUESTED"
"ravwojdyla","CONTRIBUTOR","","2020-09-24T12:41:29Z",false,"COMMENTED"
"ravwojdyla","CONTRIBUTOR","","2020-09-24T12:42:00Z",false,"COMMENTED"
"pentschev","MEMBER","Looks good, thanks for fixing the typos @ravwojdyla .","2020-09-24T13:10:00Z",false,"APPROVED"
"gjoseph92","COLLABORATOR","LGTM implementation-wise, just have some ideas for making the docs more descriptive. Thanks @jsignell, I'd love to see this!","2021-11-03T23:30:12Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-11-04T17:25:21Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks, a couple comments.","2020-09-16T20:49:12Z",false,"COMMENTED"
"madhur-tandon","CONTRIBUTOR","","2020-09-16T21:46:04Z",false,"COMMENTED"
"madhur-tandon","CONTRIBUTOR","","2020-09-16T21:50:34Z",false,"COMMENTED"
"madhur-tandon","CONTRIBUTOR","","2020-09-18T11:15:41Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-09-18T11:54:01Z",false,"COMMENTED"
"madhur-tandon","CONTRIBUTOR","","2020-09-18T15:35:34Z",false,"COMMENTED"
"madhur-tandon","CONTRIBUTOR","","2020-09-18T18:03:35Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-09-23T20:34:12Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-09-24T19:52:13Z",false,"COMMENTED"
"madhur-tandon","CONTRIBUTOR","","2020-09-24T20:38:02Z",false,"COMMENTED"
"madhur-tandon","CONTRIBUTOR","","2020-09-24T20:47:45Z",false,"COMMENTED"
"madhur-tandon","CONTRIBUTOR","","2020-09-24T20:48:44Z",false,"COMMENTED"
"madhur-tandon","CONTRIBUTOR","","2020-09-24T21:06:13Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-10-01T14:06:20Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-09-11T17:40:31Z",false,"APPROVED"
"jacobtomlinson","MEMBER","Thanks!","2020-09-11T14:57:07Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-09-10T14:36:52Z",false,"COMMENTED"
"dsaxton","CONTRIBUTOR","","2020-09-10T14:58:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-10T14:55:05Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks, just a couple comments / questions.","2020-09-10T15:01:07Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-09-10T18:09:52Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-09-10T18:10:40Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-09-10T18:11:34Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-09-10T21:15:55Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-09-10T22:25:48Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-09-11T00:17:34Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-09-11T10:57:04Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-09-11T11:32:42Z",false,"APPROVED"
"eric-czech","CONTRIBUTOR","","2020-09-11T11:42:44Z",false,"COMMENTED"
"pentschev","MEMBER","","2020-09-11T11:54:41Z",false,"COMMENTED"
"pentschev","MEMBER","","2020-09-11T11:55:57Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-09-11T12:08:02Z",false,"COMMENTED"
"quasiben","MEMBER","Thanks @jsignell","2020-09-08T15:07:27Z",false,"APPROVED"
"martindurant","MEMBER","","2020-09-28T16:49:58Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-09-29T11:32:53Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-10-01T14:15:38Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-10-01T14:16:19Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-10-01T14:18:51Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Looks good once CI passes.","2020-10-01T14:18:59Z",false,"APPROVED"
"jsignell","MEMBER","","2020-10-01T14:22:53Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-10-01T14:28:58Z",false,"COMMENTED"
"mrocklin","MEMBER","Some minor comments","2020-09-08T19:09:34Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2020-09-08T19:29:08Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2020-09-08T19:31:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-08T19:34:22Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2020-09-08T20:00:35Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2020-09-08T20:31:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-08T22:37:27Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-08T22:48:26Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2020-09-08T22:49:35Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2020-09-08T23:33:06Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @TomAugspurger! ","2020-09-03T14:54:45Z",false,"APPROVED"
"jsignell","MEMBER","This makes sense to me. Maybe @jakirkham can double check though.","2020-09-08T15:07:19Z",false,"COMMENTED"
"nbren12","CONTRIBUTOR","","2020-09-03T04:28:59Z",false,"COMMENTED"
"nbren12","CONTRIBUTOR","","2020-09-03T04:29:22Z",false,"COMMENTED"
"TomAugspurger","MEMBER","The CI failure is being fixed in https://github.com/dask/dask/pull/6598. I'll merge master after that's in.","2020-09-03T14:52:59Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2020-09-03T14:55:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","LGTM, thanks @nbren12! ","2020-09-03T14:56:24Z",false,"APPROVED"
"TomAugspurger","MEMBER","If we're just using `svd_flip` in testing then I'm fine with where you've put it. Do you think it's OK to just adjust the output in the test, or should we be doing that in `svd` for the user?","2020-09-03T12:52:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-04T05:09:05Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-04T06:59:28Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2020-08-30T18:00:26Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks for taking this on @dcherian !  

This looks good to me.  I made a couple of small requests below, but I think that they should be easy to resolve.","2020-08-30T18:06:15Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2020-08-30T21:00:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-08-30T21:05:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-08-30T21:07:21Z",false,"COMMENTED"
"dcherian","CONTRIBUTOR","","2020-08-30T21:10:53Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks @abduhbm. Looks good, aside from one potential performance concern.","2020-08-31T14:39:08Z",false,"COMMENTED"
"abduhbm","CONTRIBUTOR","","2020-09-01T04:31:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","LGTM, thanks @jakirkham! ","2020-08-29T04:08:21Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-08-28T11:46:44Z",false,"APPROVED"
"mrocklin","MEMBER","","2020-08-31T14:49:27Z",false,"COMMENTED"
"dgerlanc","NONE","","2020-09-02T01:45:05Z",false,"COMMENTED"
"dgerlanc","NONE","","2020-09-02T01:46:20Z",false,"COMMENTED"
"mrocklin","MEMBER","Looks neat!","2020-08-26T14:15:47Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-08-26T20:39:51Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-08-27T06:50:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-08-25T20:29:48Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @TomAugspurger! ","2020-08-25T21:58:05Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @Timost! ","2020-09-11T14:57:26Z",false,"APPROVED"
"quasiben","MEMBER","","2020-08-24T21:16:59Z",false,"COMMENTED"
"raybellwaves","MEMBER","","2020-08-24T21:43:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @TomAugspurger! ","2020-08-24T20:55:21Z",false,"APPROVED"
"goodwanghan","NONE","","2020-08-24T18:39:13Z",false,"COMMENTED"
"rjzamora","MEMBER","","2021-06-11T21:18:14Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! ","2021-06-14T21:28:00Z",false,"COMMENTED"
"TomAugspurger","MEMBER","LGTM, one question about the implementation, which is also present on master so not a huge deal to fix here.","2020-08-21T17:32:04Z",false,"APPROVED"
"rjzamora","MEMBER","","2020-08-21T17:50:10Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-08-19T17:52:35Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","Cool, thanks for working on this! Did a quick first pass and added some comments (mainly questions for clarifications / clarifying code comments)","2020-08-20T15:39:32Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-08-21T18:42:10Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-08-21T18:46:52Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-08-21T18:55:01Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-08-21T19:36:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-08-22T00:02:56Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-08-24T15:14:13Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-08-25T11:48:47Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-08-27T19:19:30Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-08-27T19:30:11Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-08-27T20:36:01Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-08-27T20:42:45Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-08-27T20:47:27Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-08-27T20:49:29Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-08-27T21:30:56Z",false,"COMMENTED"
"TomAugspurger","MEMBER","The changes to the tests all look good (just one question). Haven't looked at the new implementation yet.","2020-09-23T15:52:53Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-09-23T15:55:14Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-09-23T16:10:30Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-09-23T16:11:52Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-23T18:20:32Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","Did a first pass, it's a heavy read ;) But thanks for doing this!

A meta-question: there is still a quite complex piece of code (also for good reasons, of course). But so assume for a moment that the ArrowLegacyEngine would already be removed: are there then things that pyarrow can do to make certain aspects of the ArrowDatasetEngine simpler? Some missing functionality? 


","2020-09-24T14:21:44Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-24T21:11:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-25T03:29:22Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-25T04:21:05Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-25T04:29:37Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-25T04:34:32Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-25T04:47:34Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-09-25T15:23:35Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-09-25T19:14:05Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-09-25T19:16:20Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-25T23:10:22Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-26T05:47:06Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-26T05:50:02Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-09-26T07:16:34Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-26T14:56:43Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-09-26T16:02:39Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-26T16:08:16Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-09-30T08:50:54Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-09-30T09:05:40Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-30T14:40:26Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-09-30T14:46:14Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-10-27T15:49:03Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-10-27T16:40:45Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-12-01T14:42:30Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-12-01T14:43:17Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-12-01T14:49:46Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-01T14:59:18Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-01T14:59:55Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-12-01T15:01:03Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-12-01T17:46:00Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-12-01T18:19:31Z",false,"COMMENTED"
"cjnolet","CONTRIBUTOR","LGTM","2020-08-20T23:03:12Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-18T14:41:16Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-08-18T14:46:46Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-17T21:15:55Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-08-17T21:25:50Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-17T21:29:53Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-08-17T21:38:20Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-17T21:42:47Z",false,"COMMENTED"
"Carreau","CONTRIBUTOR","","2020-08-20T02:26:31Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-08-20T03:56:08Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-08-20T03:56:53Z",false,"COMMENTED"
"Carreau","CONTRIBUTOR","","2020-08-20T14:05:54Z",false,"COMMENTED"
"Carreau","CONTRIBUTOR","","2020-08-20T20:48:58Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-08-20T21:21:59Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR @davidsmf, good catch!

Would you mind updating this to use [`dask.config.get`](https://docs.dask.org/en/latest/configuration.html#access-configuration) instead of the the top-level `config` module (that's what we usually recommend for accessing the configuration system)? `dask.config.get` also treats hyphens and underscores the same, both ""scheduler_address"" and ""scheduler-address"" would work in this particular example:

```python
(distributed) ➜  distributed git:(master) DASK_SCHEDULER_ADDRESS=""foo"" ipython
Python 3.8.3 | packaged by conda-forge | (default, Jun  1 2020, 17:21:09)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.17.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import dask

In [2]: dask.config.get(""scheduler_address"")
Out[2]: 'foo'

In [3]: dask.config.get(""scheduler-address"")
Out[3]: 'foo'
```","2020-08-17T22:24:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @davidsmf! This is in

Also, I noticed this was your first PR to this repository. Welcome! ","2020-08-26T02:58:05Z",false,"APPROVED"
"mrocklin","MEMBER","","2020-08-16T15:02:14Z",false,"COMMENTED"
"joshreback","CONTRIBUTOR","","2020-08-16T20:51:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-08-15T03:04:37Z",false,"COMMENTED"
"thomasjpfan","CONTRIBUTOR","","2020-08-15T03:18:32Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-14T20:02:11Z",false,"APPROVED"
"jsignell","MEMBER","","2020-08-14T20:13:39Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-08-14T20:23:57Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-14T21:26:22Z",false,"COMMENTED"
"mrocklin","MEMBER","I took a brief look.  I don't understand this code well enough any more to have anything substantive to say though :/","2020-08-14T14:28:05Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this looks good to me, just one small question.","2020-09-01T15:43:39Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-09-01T17:51:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-08-19T02:51:22Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-08-19T13:50:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-08-19T14:30:45Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-08-19T15:12:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-08-19T16:37:16Z",false,"COMMENTED"
"mrocklin","MEMBER","A couple of small comments, but it's probably too early for this kind of review.  ","2020-08-20T19:30:55Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-08-27T12:27:02Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-08-27T13:30:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-08-28T14:25:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-08-28T14:27:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-08-28T14:28:05Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-08T11:10:36Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-08T11:14:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-08T23:21:58Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-09T09:56:28Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-09T10:23:41Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-09T10:30:43Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-09T13:46:24Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-09T13:52:40Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-09T14:58:39Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-09T15:13:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-09T15:44:31Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-10T13:21:56Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-10T14:18:05Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-10T17:16:42Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-11T06:38:08Z",false,"COMMENTED"
"mrocklin","MEMBER","I meant to give this a more thorough review this weekend but didn't get to it.  My apologies.  I will try to make more dedicated time for this in the next couple of days.  In the meantime, a small comment (certainly not a blocker though).","2020-09-21T04:09:57Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-21T07:47:18Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-23T01:20:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-23T01:21:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-23T01:22:37Z",false,"COMMENTED"
"mrocklin","MEMBER","In general this looks good to me.  I'm actually surprised at how small this change ended up being.  In my mind it was considerably larger.  Thank you for exploring this space @madsbk .  I feel like we both have a much better sense for how this work is going to go now. 

I've made a few comments, but they're all pretty minor or future-leaning.  If you have time to clean things up tomorrow (I'm guessing that this will take 30m ) I'm happy to merge when I wake up.","2020-09-23T01:35:39Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-23T06:32:38Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-23T06:43:37Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-23T06:52:34Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-23T06:54:11Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-09-23T06:56:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-09-23T14:44:37Z",false,"COMMENTED"
"jsignell","MEMBER","Just some minor comments, otherwise this looks great!","2020-08-20T13:33:18Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-08-20T13:37:35Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-20T13:47:20Z",false,"COMMENTED"
"mariusvniekerk","CONTRIBUTOR","","2020-10-18T14:38:14Z",false,"APPROVED"
"jsignell","MEMBER","This looks right to me and seems pretty uncontroversial :) Thanks!","2020-08-11T18:32:51Z",false,"APPROVED"
"jsignell","MEMBER","","2020-08-11T18:36:18Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-11T19:08:35Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-11T19:37:22Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-08-14T11:55:34Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-14T13:37:10Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-08-14T13:59:46Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-14T19:54:43Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-14T19:56:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-08-14T20:03:56Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-08-14T20:27:12Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-08-14T20:27:30Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-14T20:27:52Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-14T20:28:18Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-13T13:35:14Z",false,"COMMENTED"
"Carreau","CONTRIBUTOR","","2020-08-13T15:03:43Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Makes sense to me, thanks.","2020-08-07T20:49:46Z",false,"APPROVED"
"jorisvandenbossche","MEMBER","The general approach looks good to me!","2020-08-10T20:22:03Z",false,"COMMENTED"
"davesque","NONE","Sorry to inject myself again into this discussion :).  I just had a thought about the last update I saw so I thought I'd share.  Feel free to ignore.","2020-08-11T00:51:40Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-08-11T15:38:07Z",false,"COMMENTED"
"davesque","NONE","","2020-08-11T16:34:48Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-08-11T16:49:13Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-08-12T01:58:32Z",false,"COMMENTED"
"davesque","NONE","","2020-08-13T00:10:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @TomAugspurger, overall this looks great! One small comment: I suspect we should skip this test for older versions of pandas","2020-08-04T21:53:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks! Merging ","2020-08-05T14:10:05Z",false,"APPROVED"
"gforsyth","CONTRIBUTOR","Looks good. 

@dask/maintenance this is good to go.","2020-08-03T21:12:40Z",false,"APPROVED"
"hermesribeiro","NONE","","2020-08-03T13:30:19Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-03T13:35:26Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-03T13:36:06Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-03T14:23:57Z",false,"COMMENTED"
"hermesribeiro","NONE","","2020-08-03T14:57:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-08-03T15:28:28Z",false,"APPROVED"
"jrbourbeau","MEMBER","This is really nice! Thanks for using your magical javascript powers @jacobtomlinson : ) 
","2020-07-30T15:44:57Z",false,"APPROVED"
"jacobtomlinson","MEMBER","","2020-07-30T16:10:15Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2020-07-30T16:13:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for adding this @jacobtomlinson! Merging ","2020-07-30T17:29:05Z",false,"APPROVED"
"mrocklin","MEMBER","","2020-07-30T14:34:30Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","","2020-07-30T15:14:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jsignell! It looks like this already caught a few config inconsistencies : ) ","2021-10-20T18:28:56Z",false,"COMMENTED"
"jsignell","MEMBER","","2021-10-21T16:05:23Z",false,"COMMENTED"
"raybellwaves","MEMBER","","2020-07-24T01:04:45Z",false,"COMMENTED"
"raybellwaves","MEMBER","","2020-07-24T01:05:50Z",false,"COMMENTED"
"raybellwaves","MEMBER","","2020-07-24T01:18:16Z",false,"COMMENTED"
"jsignell","MEMBER","Cool @martindurant! I know it's just a draft, but I did some typo checking while I was reading.","2020-07-24T18:11:09Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-07-24T18:13:05Z",false,"COMMENTED"
"raybellwaves","MEMBER","","2020-07-30T20:06:43Z",false,"COMMENTED"
"raybellwaves","MEMBER","","2020-07-30T20:09:44Z",false,"COMMENTED"
"raybellwaves","MEMBER","","2020-07-30T20:14:36Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-04T14:37:40Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","Overall looks great.  I marked a few typos.","2020-08-04T14:41:05Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","Thanks for putting this together, Martin!","2020-08-04T15:33:53Z",false,"APPROVED"
"martindurant","MEMBER","","2020-07-24T13:05:39Z",false,"COMMENTED"
"mnarodovitch","CONTRIBUTOR","","2020-07-24T14:55:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-07-23T01:41:25Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-07-24T14:45:06Z",false,"COMMENTED"
"stsievert","MEMBER","","2020-07-24T16:02:07Z",false,"COMMENTED"
"quasiben","MEMBER","","2020-07-22T21:05:07Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-07-22T21:17:35Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-07-23T13:31:35Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","looks good.  thanks @martindurant !","2020-07-23T14:24:28Z",false,"APPROVED"
"gforsyth","CONTRIBUTOR","Thanks for putting this in @rpanai -- I've made a few suggestions so that the docstring better matches dask's version of `histogram`.","2020-07-23T15:38:50Z",false,"CHANGES_REQUESTED"
"TomAugspurger","MEMBER","This should be good to go.","2020-07-21T16:29:45Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","There's one test failure in the `upstream-dev` env on Travis but it's a pyarrow error and seems unrelated to this:
https://travis-ci.org/github/dask/dask/jobs/710430328

Should be good to go @dask/maintenance ","2020-07-23T13:33:50Z",false,"APPROVED"
"quasiben","MEMBER","","2020-07-20T14:50:28Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-07-20T15:08:18Z",false,"COMMENTED"
"joshreback","CONTRIBUTOR","","2020-07-20T22:55:57Z",false,"COMMENTED"
"joshreback","CONTRIBUTOR","","2020-07-20T22:58:08Z",false,"COMMENTED"
"joshreback","CONTRIBUTOR","","2020-07-20T22:59:55Z",false,"COMMENTED"
"joshreback","CONTRIBUTOR","","2020-07-20T23:01:29Z",false,"COMMENTED"
"joshreback","CONTRIBUTOR","","2020-07-20T23:02:27Z",false,"COMMENTED"
"joshreback","CONTRIBUTOR","","2020-07-20T23:06:46Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-07-21T14:13:46Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-07-21T14:17:54Z",false,"COMMENTED"
"jsignell","MEMBER","@dask/maintenance this looks good to me! Thanks, @joshreback for the contribution!","2020-07-22T20:33:55Z",false,"APPROVED"
"martindurant","MEMBER","","2020-07-22T20:43:08Z",false,"COMMENTED"
"joshreback","CONTRIBUTOR","","2020-07-22T23:39:48Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-07-23T12:53:48Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2020-07-18T14:49:42Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2020-07-18T14:55:42Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2020-07-18T14:57:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-07-17T18:14:04Z",false,"COMMENTED"
"andrewfulton9","CONTRIBUTOR","","2020-07-17T18:23:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @andrewfulton9! 

@jcrist would mind taking a look at this if you get a moment","2020-08-07T14:50:16Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-08-07T15:00:23Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-08-07T15:03:18Z",false,"COMMENTED"
"andrewfulton9","CONTRIBUTOR","","2020-08-07T18:20:03Z",false,"COMMENTED"
"Carreau","CONTRIBUTOR","","2020-08-11T22:27:09Z",false,"COMMENTED"
"Carreau","CONTRIBUTOR","","2020-08-11T22:29:37Z",false,"COMMENTED"
"Carreau","CONTRIBUTOR","","2020-08-13T00:48:16Z",false,"APPROVED"
"gforsyth","CONTRIBUTOR","Yep, thanks for catching that @Carreau !

@dask/maintenance this is good to go in.","2020-07-17T13:05:30Z",false,"APPROVED"
"mrocklin","MEMBER","","2020-07-19T02:16:14Z",false,"COMMENTED"
"stsievert","MEMBER","","2020-07-19T02:59:20Z",false,"COMMENTED"
"stsievert","MEMBER","","2020-07-19T13:11:50Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-07-20T15:33:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-07-29T02:44:42Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-07-29T02:44:56Z",false,"COMMENTED"
"stsievert","MEMBER","","2020-07-29T03:41:27Z",false,"COMMENTED"
"stsievert","MEMBER","","2020-07-29T16:03:42Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","","2020-07-17T13:08:58Z",false,"COMMENTED"
"jsignell","MEMBER","@dask/maintenance this looks good to me! ","2020-07-20T13:35:45Z",false,"APPROVED"
"martindurant","MEMBER","","2020-07-20T13:57:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-07-20T14:33:17Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-07-20T14:34:37Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-07-20T14:39:31Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-07-20T14:45:14Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-07-20T14:49:29Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","This looks good to me @johnomotani -- thanks for putting it in!

I see that this is your first contribution to `dask/dask`.  Welcome!

@dask/maintenance this is ready to be merged.","2020-07-16T21:58:38Z",false,"APPROVED"
"derrix060","NONE","","2020-09-15T20:38:48Z",false,"APPROVED"
"gforsyth","CONTRIBUTOR","Hey @tebesfinwo -- this looks good to me!  

I also see the problem with the missing colons on local builds.  That can be investigated separately, but it's unrelated to your changes here.  Thanks for spotting the duplicate entry and for the extra work cleaning this up!

@dask/maintenance this is ready to be merged.","2020-07-20T14:19:17Z",false,"APPROVED"
"jcrist","MEMBER","","2020-07-11T19:49:34Z",false,"COMMENTED"
"owena11","NONE","","2020-07-11T20:02:18Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-07-11T19:57:41Z",false,"COMMENTED"
"quasiben","MEMBER","","2020-07-13T15:12:51Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-08-07T13:44:13Z",false,"COMMENTED"
"quasiben","MEMBER","","2020-07-13T14:30:43Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","","2020-07-13T14:34:13Z",false,"COMMENTED"
"quasiben","MEMBER","","2020-07-13T15:17:17Z",false,"COMMENTED"
"JimCircadian","CONTRIBUTOR","","2020-07-14T22:18:35Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","Hey @JimCircadian -- this is great!  Thanks for testing out the various link checks and _especially_ for searching out and finding all the _new_ links for the rotted ones.

Once we get the CI sorted this is good to go (or even before then if someone is feeling bold).","2020-07-27T14:25:48Z",false,"APPROVED"
"gforsyth","CONTRIBUTOR","Thanks for putting this in @JimCircadian !  This is good to go.

@dask/maintenance this can be merged in.","2020-07-28T15:36:25Z",false,"APPROVED"
"jcrist","MEMBER","Thanks for working on this, just a few comments.","2020-07-11T15:47:11Z",false,"COMMENTED"
"raybellwaves","MEMBER","","2020-07-11T16:01:42Z",false,"COMMENTED"
"mmccarty","MEMBER","","2020-07-11T16:02:46Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-07-11T16:02:50Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-07-11T16:03:49Z",false,"COMMENTED"
"raybellwaves","MEMBER","","2020-07-11T16:09:26Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-07-11T16:22:20Z",false,"COMMENTED"
"mmccarty","MEMBER","","2020-07-11T16:42:04Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","This looks good.  Thanks for putting this in @raybellwaves !  @dask/maintenance this can be merged in.","2020-07-13T13:55:34Z",false,"APPROVED"
"hameerabbasi","CONTRIBUTOR","","2020-07-13T09:42:22Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2020-08-03T15:16:07Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2020-08-04T07:57:27Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","One small comment, otherwise this looks good.","2020-08-04T07:57:58Z",false,"APPROVED"
"jcrist","MEMBER","Two small comments and I'm happy to merge this. Thanks for working on this @jthielen!","2020-08-04T21:24:31Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","One pedantic comment to preserve the type of a `list`/`tuple`. Otherwise this looks great to me!","2020-08-24T18:00:19Z",false,"APPROVED"
"jthielen","CONTRIBUTOR","","2020-08-24T18:15:07Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2020-10-01T22:08:19Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","Ok CI looks good and things seem generally positive in dask/dask-ml#687 so let's get this in.","2021-10-27T10:19:51Z",false,"APPROVED"
"mrocklin","MEMBER","Thank you for your work @ZhengnanZhao !

I've added a couple of comments and suggestions below.","2020-07-09T02:32:03Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2020-07-09T04:00:37Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2020-07-09T04:04:16Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2020-07-10T12:49:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-07-10T19:52:26Z",false,"COMMENTED"
"zzhengnan","CONTRIBUTOR","","2020-07-10T23:59:46Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-07-08T19:15:40Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-07-08T19:17:57Z",false,"COMMENTED"
"quasiben","MEMBER","","2020-07-08T19:27:18Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-07-08T19:30:43Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","Thanks, looks good to me","2020-07-08T16:54:24Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-07-06T13:24:55Z",false,"COMMENTED"
"sroet","NONE","","2020-07-07T08:57:37Z",false,"COMMENTED"
"joshreback","CONTRIBUTOR","","2020-07-07T12:51:35Z",false,"COMMENTED"
"joshreback","CONTRIBUTOR","","2020-07-07T13:58:40Z",false,"COMMENTED"
"joshreback","CONTRIBUTOR","","2020-07-12T13:24:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-07-13T14:49:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-07-13T14:50:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-07-13T14:51:03Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-07-15T15:23:40Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-07-15T15:28:03Z",false,"COMMENTED"
"joshreback","CONTRIBUTOR","","2020-07-16T02:08:10Z",false,"COMMENTED"
"joshreback","CONTRIBUTOR","","2020-07-16T02:41:56Z",false,"COMMENTED"
"joshreback","CONTRIBUTOR","","2020-07-19T01:32:13Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-07-20T14:08:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-07-20T14:37:08Z",false,"COMMENTED"
"joshreback","CONTRIBUTOR","","2020-07-21T02:13:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-07-24T21:55:16Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-07-24T21:56:49Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-06T14:50:03Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-08-06T14:51:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR @joshreback! This looks close to done and I'm looking forward to seeing it merge : ) In particular, it was good to see the several tests you added to ensure repartitioning is acting as expected

I've left a few small comments and it looks like there are a couple of comments from @jsignell that are still TODO ","2020-08-06T16:49:48Z",false,"COMMENTED"
"joshreback","CONTRIBUTOR","","2020-08-06T23:06:01Z",false,"COMMENTED"
"joshreback","CONTRIBUTOR","","2020-08-06T23:07:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for your work on this @joshreback! This is in ","2020-08-07T14:45:12Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-07-06T13:28:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-07-06T14:45:27Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-07-06T15:37:17Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-06-29T19:05:24Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","","2020-06-29T19:07:39Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-29T20:06:51Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Can you add a couple sanity tests that the result of a `df.iloc[:, ...]` is correct with duplicate columns?

* `df.iloc[:, 0]` with duplicate columns and different values for the columns with the same name
* `df.iloc[:, list_of_integers]` selecting some duplicates and some non-duplicate columns
* `df.iloc[:, negative_slice]`
","2020-06-29T21:10:01Z",false,"COMMENTED"
"TomAugspurger","MEMBER","cc @martindurant. Merging later today if there's no objections.","2020-06-29T11:33:57Z",false,"APPROVED"
"martindurant","MEMBER","","2020-06-29T12:56:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-06-26T16:15:16Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-06-26T22:25:27Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-06-26T23:35:27Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-07-03T14:10:16Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-03T14:46:56Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-03T14:49:12Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-03T14:53:14Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-07-03T14:56:00Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-07-03T15:01:15Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-07-07T09:48:28Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-07T15:25:30Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-07-07T18:38:26Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-07T18:41:00Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-07-07T18:43:02Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-07-07T18:44:05Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-07-07T20:57:53Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-07-08T14:08:09Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-08T14:17:46Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-08T15:25:30Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-07-08T15:34:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-15T16:32:09Z",false,"COMMENTED"
"martindurant","MEMBER","Almost all requests for comments in the code and a couple of questions.
This is complex stuff, well done for enumerating all of the conditions!","2020-07-25T19:46:06Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-25T23:27:41Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-25T23:36:47Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-25T23:48:04Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-26T00:02:13Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-26T00:18:27Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-26T00:20:34Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-26T00:23:59Z",false,"COMMENTED"
"dhirschfeld","NONE","","2020-07-26T03:36:07Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-07-27T13:22:32Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-07-27T13:24:56Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-07-27T13:26:05Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-07-27T13:33:32Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-07-27T13:35:39Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-07-27T13:36:29Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-07-27T13:41:41Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-27T14:44:16Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-07-27T14:47:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-27T14:52:43Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-27T15:21:07Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-07-27T15:22:57Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-27T15:32:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-27T16:04:27Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-07-27T16:06:57Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-07-27T16:30:00Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-07-27T16:35:59Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-08-07T13:44:04Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","","2020-06-26T15:35:21Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-06-26T15:42:13Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Just to be sure, can you do something like

```python
# column order is A B C
df = dd.read_parquet(...)[['B', 'A']]  # swap the columns
result = df.iloc[:, 0]
assert result.name == ""B""
assert result.compute().name == ""B""
```","2020-06-26T15:52:27Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","","2020-06-26T15:53:51Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","","2020-06-26T16:04:28Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-24T17:42:57Z",false,"COMMENTED"
"matheper","NONE","","2020-06-25T13:54:34Z",false,"COMMENTED"
"Carreau","CONTRIBUTOR","","2020-06-23T21:29:32Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-24T11:26:15Z",false,"COMMENTED"
"Carreau","CONTRIBUTOR","","2020-06-24T16:58:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-06-26T13:44:30Z",false,"COMMENTED"
"TomAugspurger","MEMBER","@Carreau sorry for the delay. I'm going to trust that this doesn't break anything since our tests pass. If you could make the one requested change I'll get this merged.","2020-07-06T13:48:42Z",false,"COMMENTED"
"pentschev","MEMBER","Changes make sense to me, thanks for doing that @jakirkham .","2020-06-23T11:06:50Z",false,"APPROVED"
"TomAugspurger","MEMBER","LGTM. One question inline.","2020-06-23T13:15:09Z",false,"APPROVED"
"jakirkham","MEMBER","","2020-06-23T17:07:25Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-23T18:14:20Z",false,"COMMENTED"
"Carreau","CONTRIBUTOR","","2020-06-19T17:19:25Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the fix @Carreau! Overall the changes here look great, just left a couple of small comments ","2020-06-19T17:54:50Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-19T18:52:56Z",false,"APPROVED"
"TomAugspurger","MEMBER","Agreed that we probably don't want to allow unordered collections.","2020-06-17T14:55:37Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-06-17T15:01:48Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","","2020-06-17T15:10:01Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","","2020-06-17T15:10:40Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-06-17T15:12:38Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","","2020-06-17T15:16:32Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Looks nice. Ready to go @gforsyth?","2020-06-18T13:58:15Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-06-16T18:23:10Z",false,"APPROVED"
"mrocklin","MEMBER","","2020-06-15T13:45:16Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-06-15T17:14:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-06-15T17:33:21Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-06-15T17:44:14Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-06-15T17:46:10Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-06-15T18:00:59Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-06-15T18:27:37Z",false,"COMMENTED"
"jakirkham","MEMBER","Noticed some issues trying to query the `num_workers` with these `concurrent.futures` use case as shown below. This seems to be used by some logic in `get_async` to avoid oversubscription. Given `concurrent.futures` already has its own logic for avoiding oversubscription, am going to try removing our logic and the `num_workers` parameter and see if that works. Not expecting any issues. Just trying to document this for transparency.","2020-06-19T23:09:18Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-06-20T00:21:08Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-06-20T01:32:47Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-19T19:10:20Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-20T04:23:36Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-21T00:08:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-21T00:20:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-03-21T00:22:18Z",false,"COMMENTED"
"jakirkham","MEMBER","","2021-04-02T19:18:06Z",false,"COMMENTED"
"zanieb","NONE","","2021-06-01T15:41:00Z",false,"COMMENTED"
"TomAugspurger","MEMBER","I'm not sure why this would generate different docs for SeriesGroupBy.size, sorry.","2020-06-15T11:49:42Z",false,"COMMENTED"
"asmith26","CONTRIBUTOR","","2020-06-15T16:19:14Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-19T18:49:44Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @bpshaver! 

Also I noticed this was your first PR to this repository, welcome! ","2020-06-12T16:23:55Z",false,"APPROVED"
"gforsyth","CONTRIBUTOR","Great!  Thanks for putting this in @KrishanBhasin!
The test failure on travis is a known flaky test.

@dask/maintenance this is ready to be merged.","2020-06-10T21:41:50Z",false,"APPROVED"
"TomAugspurger","MEMBER","Still thinking through this.

I notice that pandas 1.1.0 has a new keyword `origin`:

```
origin : {'epoch', 'start', 'start_day'}, Timestamp or str, default 'start_day'
    The timestamp on which to adjust the grouping. The timezone of origin
    must match the timezone of the index.
    If a timestamp is not used, these values are also supported:

    - 'epoch': `origin` is 1970-01-01
    - 'start': `origin` is the first value of the timeseries
    - 'start_day': `origin` is the first day at midnight of the timeseries

    .. versionadded:: 1.1.0
```

Does that seem likely to help us here? I vaguely recall an issue with the points not matching up because the result of the `.resample` depended on where in the month / year the first point fell?","2020-06-09T13:21:54Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-18T14:14:16Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-18T14:26:47Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-18T14:27:50Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-18T15:33:53Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-08T18:53:02Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-06-08T19:00:48Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-08T19:34:59Z",false,"COMMENTED"
"jcrist","MEMBER","Just a couple high-level nits, haven't looked too deeply.","2020-06-05T16:22:02Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-05T18:55:02Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-05T18:55:47Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-03T16:11:29Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-03T16:14:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-09T17:59:02Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-09T19:26:56Z",false,"COMMENTED"
"TomAugspurger","MEMBER","LGTM other than the nitpick","2020-06-10T01:39:21Z",false,"APPROVED"
"jsignell","MEMBER","","2020-06-10T12:48:53Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-16T20:14:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-06-16T21:53:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","cc @martindurant if you have time to take a look.

@rjzamora are there any changes we could make to the pandas metadata that might have made this whole process easier, or perhaps avoided the need for the special `NONE_LABEL`?","2020-06-18T20:21:24Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-23T17:41:59Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-06-23T18:35:11Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-06-23T18:35:28Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2021-02-08T15:55:49Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks for opening this! Apparently people have been running into this bug for a long time so it'll be nice to have it fixed. I just have one suggestion for improving the test. ","2020-06-01T21:12:54Z",false,"COMMENTED"
"abduhbm","CONTRIBUTOR","","2020-06-01T21:39:00Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks Julia, overall this looks good to me.","2020-06-01T21:39:04Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-02T15:21:32Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks @stephaniegott! Just a few small suggestions.

Could you also add a test for this error? This would be updating the test here: https://github.com/dask/dask/blob/9e994bad3be012c4ecb03678a88934c4e66cdebb/dask/array/tests/test_array_core.py#L3620 to better check the error message.","2020-06-01T21:54:04Z",false,"COMMENTED"
"stephaniegott","CONTRIBUTOR","","2020-06-02T05:58:04Z",false,"COMMENTED"
"jcrist","MEMBER","LGTM, merging.","2020-06-02T13:29:09Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-06-01T12:52:14Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-06-01T13:41:32Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-01T14:04:58Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-06-01T14:12:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks Will wait a day or so for others to give feedback on the new parameter name. `target_dataframe` feels OK. I'd be happier if it somehow specified that this is used to determine the type of the concrete dataframe container. But we (maybe) don't want something like `dataframe_type`, since the value should be an instance.

Do we have a name for the ""concrete partition type"" concept?","2020-06-01T18:46:21Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-06-01T18:55:09Z",false,"COMMENTED"
"kkraus14","MEMBER","","2020-06-01T20:15:41Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-06-01T22:04:01Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-06-01T22:14:01Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-06-01T22:46:53Z",false,"COMMENTED"
"kkraus14","MEMBER","","2020-06-01T22:49:49Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-06-02T10:41:08Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-02T13:05:56Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-06-02T13:14:57Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-02T13:23:28Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-06-02T15:23:40Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-03T02:07:06Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-06-03T02:11:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-04T12:58:29Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-04T12:58:54Z",false,"APPROVED"
"TomAugspurger","MEMBER","Thanks for pushing this up. Will give it a closer look later.","2020-05-29T20:40:57Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Anything I can do to help unstick this @gforsyth?","2020-06-08T17:44:31Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Looks nice. I'd be happy to merge this soon, and follow up with a PR implementing the column selection optimization later. Just a couple questions:

Is the parameter `collection=False` still useful in `text_block_to_pandas`? My understanding is that that's what controlled the DataFrame vs. list[DataFrame] return value.","2020-06-09T13:34:14Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Looks good, thanks. Not sure why travis didn't run. Going to wait to see if it turns up.","2020-06-09T15:31:27Z",false,"APPROVED"
"mrocklin","MEMBER","I'm very excited to see this start.  Thanks for beginning this @TomAugspurger ","2020-05-30T05:18:48Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-02T14:21:09Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-02T14:25:08Z",false,"COMMENTED"
"martindurant","MEMBER","I just left a couple of comments for now. The two optimize functions are pretty hard for me to read, might take some time.","2020-06-23T19:03:41Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks for the PR @raybellwaves! This looks great :)","2020-05-29T14:18:18Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jcrist! I'll do another small release ","2020-05-28T17:06:24Z",false,"APPROVED"
"TomAugspurger","MEMBER","Least invasive sounds good, given how complicated this is :)","2020-05-28T15:26:21Z",false,"APPROVED"
"jcrist","MEMBER","Thanks @gjoseph92, this looks pretty good to me. I definitely like this approach better than that of #6073.","2020-05-29T19:21:30Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2020-05-29T21:59:57Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2020-05-29T22:07:36Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-05-29T22:15:05Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-05-29T22:17:09Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2020-05-29T22:20:09Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-05-29T22:22:20Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2020-05-29T22:25:47Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-05-29T22:43:35Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2020-05-30T00:41:15Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2020-05-30T00:49:21Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Looks good, one question.","2020-05-29T20:44:09Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-05-29T21:59:00Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-06-03T00:28:23Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","","2020-06-23T17:12:13Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-23T17:47:06Z",false,"APPROVED"
"aulemahal","CONTRIBUTOR","","2020-05-28T16:02:30Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-05-28T16:18:08Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-05-28T16:21:04Z",false,"COMMENTED"
"Zeitsperre","NONE","","2020-05-28T16:23:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jacobtomlinson! ","2020-05-27T13:40:45Z",false,"APPROVED"
"TomAugspurger","MEMBER","Ping when CI finishes.","2020-05-26T20:34:01Z",false,"APPROVED"
"quasiben","MEMBER","","2020-05-26T17:27:41Z",false,"COMMENTED"
"quasiben","MEMBER","","2020-05-26T17:44:25Z",false,"COMMENTED"
"jsignell","MEMBER","I mentioned that we still need to add this to the doc build. It'd be nice if you could add this to this PR. The file to change is https://github.com/dask/dask/blob/master/docs/source/bag-api.rst","2020-05-26T21:32:46Z",false,"COMMENTED"
"eracle","CONTRIBUTOR","","2020-05-27T13:37:26Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-05-27T13:57:18Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-05-27T13:59:13Z",false,"COMMENTED"
"eracle","CONTRIBUTOR","","2020-05-27T14:06:18Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-05-27T16:13:00Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-05-27T17:02:11Z",false,"COMMENTED"
"eracle","CONTRIBUTOR","","2020-05-28T17:16:19Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-05-28T17:30:13Z",false,"COMMENTED"
"eracle","CONTRIBUTOR","","2020-05-30T15:41:47Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-01T13:48:45Z",false,"COMMENTED"
"eracle","CONTRIBUTOR","","2020-06-01T14:32:16Z",false,"COMMENTED"
"jsignell","MEMBER","This looks good to me! ","2020-06-01T14:39:39Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-05-26T11:37:18Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-05-26T14:51:56Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-05-26T21:02:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-05-26T21:09:41Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR @andrewfulton9! The current set of changes definitely fix things for the 1-d case. But I'm still observing hanging behavior when re-chunking an empty array which is greater than 1-d. For example:

```python
import dask.array as da

array = da.array([[], []])
array.rechunk()
```

Perhaps instead of exiting early if `x.shape == (0,)`, we could avoid re-chunking any axis with a length of 0?","2020-05-25T15:03:51Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks @KrishanBhasin, overall this looks good. Just one function name change and I'd be happy to merge.","2020-05-22T19:04:45Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-05-19T13:24:22Z",false,"CHANGES_REQUESTED"
"mindhash","CONTRIBUTOR","","2020-05-19T16:20:44Z",false,"COMMENTED"
"jcrist","MEMBER","Hi @mindhash, the updated fix looks good. Our linting tests are failing though. Could you run

```
$ black dask/
```

on the codebase to correct the formatting issues and push the update?","2020-05-19T19:06:48Z",false,"CHANGES_REQUESTED"
"jcrist","MEMBER","Apologies for the delayed response here, overall this looks pretty good.","2020-05-19T13:28:43Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks. We have a placeholder page when bokeh isn't installed now.","2020-09-11T15:56:32Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-09-11T15:57:14Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-09-11T15:57:30Z",false,"COMMENTED"
"jsignell","MEMBER","This looks good to me. There was a suggestion in the original issue that the 64MB cap be included in the docstring: 

> Default value is computed based on available physical memory and the number of cores, up to a maximum of 64MB","2020-05-15T16:11:44Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jcrist! LGTM","2020-05-15T16:44:05Z",false,"APPROVED"
"jcrist","MEMBER","Thanks @mark-boer, overall this looks good to me.","2020-05-15T16:05:30Z",false,"COMMENTED"
"mark-boer","CONTRIBUTOR","","2020-05-15T20:47:18Z",false,"COMMENTED"
"mark-boer","CONTRIBUTOR","","2020-05-15T20:50:31Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-05-15T22:31:47Z",false,"APPROVED"
"rjzamora","MEMBER","These changes seem reasonable to me - Thanks @mariusvniekerk ","2020-05-18T16:06:56Z",false,"APPROVED"
"jcrist","MEMBER","Thanks @3cham! This looks pretty good. Just a few small changes then we'll be happy to merge.","2020-05-15T14:05:23Z",false,"CHANGES_REQUESTED"
"jcrist","MEMBER","","2020-05-15T20:42:23Z",false,"APPROVED"
"jsignell","MEMBER","Thanks for making the change to take out numpy! This looks pretty good. I have a few comments about code style, but the biggest point is that `sample` does not work properly as written.","2020-05-15T20:31:48Z",false,"CHANGES_REQUESTED"
"eracle","CONTRIBUTOR","","2020-05-17T11:20:48Z",false,"COMMENTED"
"eracle","CONTRIBUTOR","","2020-05-17T13:05:15Z",false,"COMMENTED"
"eracle","CONTRIBUTOR","","2020-05-17T13:05:51Z",false,"COMMENTED"
"eracle","CONTRIBUTOR","","2020-05-17T13:16:14Z",false,"COMMENTED"
"eracle","CONTRIBUTOR","","2020-05-17T13:28:21Z",false,"COMMENTED"
"eracle","CONTRIBUTOR","","2020-05-17T13:38:47Z",false,"COMMENTED"
"eracle","CONTRIBUTOR","","2020-05-17T13:46:19Z",false,"COMMENTED"
"eracle","CONTRIBUTOR","","2020-05-17T13:46:35Z",false,"COMMENTED"
"eracle","CONTRIBUTOR","","2020-05-17T13:46:45Z",false,"COMMENTED"
"eracle","CONTRIBUTOR","","2020-05-17T13:47:12Z",false,"COMMENTED"
"jsignell","MEMBER","Just a small cleanup of an errant `replace`","2020-05-20T19:32:03Z",false,"CHANGES_REQUESTED"
"jsignell","MEMBER","","2020-05-20T19:33:45Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-05-20T19:36:09Z",false,"COMMENTED"
"eracle","CONTRIBUTOR","","2020-05-21T17:08:32Z",false,"COMMENTED"
"eracle","CONTRIBUTOR","","2020-05-21T17:08:43Z",false,"COMMENTED"
"jsignell","MEMBER","Thanks for your patience @eracle. @dask/maintenance this looks good to me! ","2020-05-21T18:27:22Z",false,"APPROVED"
"lr4d","CONTRIBUTOR","","2020-05-14T10:05:03Z",false,"APPROVED"
"jsignell","MEMBER","","2020-05-13T21:19:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Sorry, I completely missed this notification.

Ideally we would avoid the intermediate cast to object dtype that pandas does in `lhs.merge(*args, **kwargs)`. Casting to object dtype can be expensive.

So I hope that something like

```python
# discover categoricals
left_cats = left.select_dtypes(include=""category"").dtypes
right_cats = right.select_dtypes(include=""category"").dtypes

unioned = {col: union_categorical(l, r) for l, r in zip(...)}  # probably have to do an intersection of the cats. Make sure order matches.
for col, dtype in unioned.items():
    left[col] = left.astype(dtype)
    right[col] = right.astype(dtype)

out = lhs.merge(*arge, **kwargs)
```

Does that make sense?","2020-05-18T11:01:34Z",false,"COMMENTED"
"TomAugspurger","MEMBER","The index handling does make this complicated, sorry :/","2020-05-20T21:35:41Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-05-21T18:41:40Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-05-21T20:21:30Z",false,"COMMENTED"
"st-bender","NONE","","2020-05-16T20:28:16Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-05-13T14:15:13Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks @crusaderky, overall this looks like a nice change. Just one small nit then ready for merge.","2020-05-15T13:52:03Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2020-05-15T14:00:57Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2020-05-15T16:47:30Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-05-15T17:01:16Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2020-05-15T23:03:24Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-05-16T16:45:27Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-05-11T16:17:26Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-05-11T16:29:16Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-05-11T17:39:49Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-05-11T18:53:38Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-05-11T13:39:36Z",false,"CHANGES_REQUESTED"
"noreentry","CONTRIBUTOR","","2020-05-11T14:21:50Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-05-11T14:26:59Z",false,"COMMENTED"
"noreentry","CONTRIBUTOR","","2020-05-11T14:54:28Z",false,"COMMENTED"
"noreentry","CONTRIBUTOR","","2020-05-11T15:07:34Z",false,"COMMENTED"
"noreentry","CONTRIBUTOR","","2020-05-11T15:19:24Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-05-11T17:49:31Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-05-11T17:55:57Z",false,"COMMENTED"
"noreentry","CONTRIBUTOR","","2020-05-11T18:56:56Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-05-11T20:21:26Z",false,"COMMENTED"
"noreentry","CONTRIBUTOR","","2020-05-14T14:38:15Z",false,"COMMENTED"
"jcrist","MEMBER","This looks pretty good to me, just one small fix and I'm happy to merge. Thanks for working through this @noreentry!","2020-05-15T14:10:36Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-05-15T20:43:52Z",false,"APPROVED"
"jcrist","MEMBER","Thanks!","2020-05-11T13:03:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Good catch, thanks @ssanderson! ","2020-05-09T16:20:29Z",false,"APPROVED"
"TomAugspurger","MEMBER","Just one question. Looks good otherwise.","2020-05-08T18:57:13Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-05-08T21:03:08Z",false,"COMMENTED"
"kkraus14","MEMBER","","2020-05-09T02:08:53Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this looks pretty good to me. Thanks @endremborza!","2020-05-08T14:20:41Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Can you add an example using this to `docs/dataframe-indexing.rst`?

What is passed to the callable? These are the concrete (pandas) DataFrames within a partition?","2020-05-08T16:25:41Z",false,"COMMENTED"
"endremborza","CONTRIBUTOR","","2020-05-08T16:47:17Z",false,"COMMENTED"
"endremborza","CONTRIBUTOR","","2020-05-08T16:47:54Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR @madsbk!

Apologies for coming late into this discussion. In https://github.com/dask/dask/pull/4918 we intentionally overloaded the `values` method because the default `Mapping.values` implementation is ~10x slower for `HighLeveLGraph`s with many layers. In particular, this leads to a noticeable performance decrease for large collections with the distributed scheduler as `distributed.futures_of` [uses `HighLevelGraph.values()`](https://github.com/dask/distributed/blob/77f6c55f2482544871cf38b3730fb6f902bf2682/distributed/client.py#L4554).

I should have included a code comment about this in https://github.com/dask/dask/pull/4918 as this additional context is definitely not clear from looking at the code. I can add a comment as well as a benchmark to `dask-benchmarks` so we'll be able to track the performance of `HighLevelGraph.values()`, etc.

I'm in favor of keeping the existing implementation in order to avoid a performance regression","2020-05-08T20:17:48Z",false,"COMMENTED"
"pentschev","MEMBER","","2020-05-04T22:51:45Z",false,"APPROVED"
"rjzamora","MEMBER","","2020-06-17T21:01:25Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-06-18T19:30:23Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-06-18T19:50:22Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-05-07T16:40:28Z",false,"COMMENTED"
"mrocklin","MEMBER","I apologize for the long delay in response here @eric-czech .  

In general this looks nice to me.  The code seems clean and the tests provide reassurance.  I appreciate the care you've taken around informative warnings in particular.

I may not be the right person to determine if there are subtlties here.  I wonder if @jni or @crusaderky would be interested in looking through this PR as well.","2020-05-10T01:01:17Z",false,"COMMENTED"
"jni","CONTRIBUTOR","","2020-05-10T08:22:26Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-05-21T20:16:06Z",false,"COMMENTED"
"eric-czech","CONTRIBUTOR","","2020-05-21T20:26:05Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","","2020-05-28T15:56:40Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-05-28T16:18:20Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-05-28T16:18:43Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-05-28T16:19:32Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Sorry I missed this earlier. Looks good to me.","2020-05-05T16:32:55Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-05-05T17:40:11Z",false,"COMMENTED"
"jakirkham","MEMBER","Thanks Tom! Had a couple minor wording suggestions. Otherwise LGTM.","2020-05-05T17:40:45Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-05-05T18:01:33Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @quasiben! ","2020-05-01T15:17:05Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell! ","2020-04-30T17:08:09Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @galipremsagar! Could you add a test to make sure we get the desired output here? Also, for my own understanding, what input for `x` is causing `x.unique()` to be index-like? ","2020-04-29T20:19:03Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the example and test @galipremsagar. This is in","2020-04-30T01:28:29Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @TomAugspurger, I'll merge once CI passes*","2020-04-28T14:22:23Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-04-27T18:30:30Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-04-27T18:38:34Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-27T18:48:55Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-04-27T18:50:36Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-27T18:52:21Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-27T19:30:37Z",false,"APPROVED"
"jrbourbeau","MEMBER","Overall this looks really good, thanks for including it @martindurant! I've left a few minor comments","2020-04-27T22:48:28Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-04-28T13:03:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-04-28T13:20:01Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-04-28T13:25:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @quasiben! ","2020-04-27T13:05:21Z",false,"APPROVED"
"jsignell","MEMBER","Thanks for the PR James! This seems reasonable to me. I suppose we should be running flake8 on .py files in docs?","2020-04-27T13:24:54Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jameslamb! This is in","2020-04-29T14:49:31Z",false,"APPROVED"
"rjzamora","MEMBER","","2020-04-27T15:09:44Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks agian for making these optimizations @galipremsagar - My only suggestion is to make sure we get back the same `DataFrame` subclass if we are using something like dask_cudf.  This suggestion is not related to a change from your PR - but I think it is a good oportunity to fix it.","2020-04-29T14:06:25Z",false,"CHANGES_REQUESTED"
"mrocklin","MEMBER","","2020-04-29T14:54:40Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-04-29T16:28:14Z",false,"COMMENTED"
"kkraus14","MEMBER","","2020-05-03T23:54:52Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-05-04T02:58:12Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-05-05T16:17:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-05-05T16:20:37Z",false,"APPROVED"
"galipremsagar","CONTRIBUTOR","","2020-05-05T16:31:22Z",false,"COMMENTED"
"kkraus14","MEMBER","","2020-05-05T21:13:28Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-24T11:42:13Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-04-23T21:11:53Z",false,"COMMENTED"
"TomAugspurger","MEMBER","I think this looks OK. @jcrist do you have a preference on order between this and https://github.com/dask/dask/pull/6276?","2020-06-02T13:17:37Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-04-23T11:48:45Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-22T21:14:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-23T16:24:33Z",false,"APPROVED"
"TomAugspurger","MEMBER","Do you have some timings for how this affects performance? If it's not too much work it'd be great to put something in at https://github.com/dask/dask-benchmarks.","2020-04-21T18:13:30Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-04-21T21:05:46Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-22T13:49:11Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-04-22T14:02:57Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Looks good, thanks.","2020-04-22T14:04:55Z",false,"APPROVED"
"TomAugspurger","MEMBER","Thanks for working on this. Can you add tests and documentation as well?","2020-04-22T14:02:44Z",false,"COMMENTED"
"psimaj","CONTRIBUTOR","","2020-04-27T21:25:58Z",false,"COMMENTED"
"psimaj","CONTRIBUTOR","","2020-04-27T21:27:38Z",false,"COMMENTED"
"psimaj","CONTRIBUTOR","","2020-04-27T21:50:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @eugeneh101! ","2020-04-20T15:01:16Z",false,"APPROVED"
"TomAugspurger","MEMBER","The `sys.modules` stuff feels a bit fragile. Hopefully the inline suggestion provides an alternative that works.","2020-04-20T11:45:51Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-04-20T15:32:52Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-20T15:41:46Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-04-20T15:44:36Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-20T15:58:09Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-04-20T15:59:37Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-20T16:01:49Z",false,"COMMENTED"
"kkraus14","MEMBER","","2020-04-20T16:08:59Z",false,"COMMENTED"
"kkraus14","MEMBER","","2020-04-20T16:12:48Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-20T16:24:19Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-04-20T16:31:49Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks @galipremsagar. Just a few minor comments but the general approach of dispatching on the type of the dataframe makes sense.","2020-04-22T13:46:23Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-04-22T14:13:56Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-04-22T14:14:14Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-04-22T14:14:22Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-04-22T14:14:36Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-22T14:15:05Z",false,"APPROVED"
"kkraus14","MEMBER","","2020-04-22T14:38:09Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-04-17T17:46:02Z",false,"APPROVED"
"mrocklin","MEMBER","","2020-04-18T17:03:32Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-27T13:51:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @TomAugspurger ","2020-04-28T16:01:06Z",false,"APPROVED"
"martindurant","MEMBER","","2020-04-13T18:29:39Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-13T18:37:28Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-04-13T18:48:33Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-13T18:52:44Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-04-13T19:24:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Agreed that the CI failures are unrelated. Two small nitpicks on the tests.","2020-04-14T20:19:41Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-04-15T02:03:10Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-04-15T02:04:09Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-15T13:55:32Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-15T13:56:28Z",false,"APPROVED"
"martindurant","MEMBER","I think this now does the right thing. ","2020-04-20T13:49:29Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-04-20T14:34:41Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-04-20T14:42:08Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Merged master to fix this CI failure. This should be good to go once it passes.","2020-04-21T18:21:08Z",false,"APPROVED"
"jcrist","MEMBER","","2020-04-13T02:14:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-04-13T14:29:18Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-04-13T14:30:52Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-04-13T14:45:08Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-04-13T14:45:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-04-14T02:50:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-04-14T02:51:27Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-04-14T12:39:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-04-18T15:50:54Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-04-15T14:17:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-04-15T14:22:48Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-04-15T14:24:00Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks @gjoseph92. I've left a few notes inline. Overall this looks fairly good. One general comment is that the logic in here is getting a bit gnarly. I'm not sure if the branches can be restructured to make the control flow cleaner, or if some things could be broken out a bit, I'll leave that up to you.

> Do you mind manually delaying linspace since da.linspace also doesn't support lazy values as inputs? Would be nice to fix, but I didn't feel like dragging that into this PR as well.

This is fine, I'll make an issue referencing this to remind us for later.

 > Overall, is there a better way to handle this ""it-might-be-a-lazy-value-or-it-might-not"" situation than the bins_ref sort of pattern I'm using here (which feels cumbersome)?

`dask.delayed.unpack_collections` can be useful for these cases. It returns a task representing the input, and a set of dependencies. A common pattern is:

```python
a, deps = unpack_collections(a)
depenendencies.extend(deps)
# `a` can now be used inside a task definition, even if it was a dask collection before
dsk = {""some-key"": (foo, a)}
...
```","2020-04-20T21:21:21Z",false,"CHANGES_REQUESTED"
"gjoseph92","COLLABORATOR","","2020-05-28T00:19:38Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-05-28T13:17:21Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Woo, thanks for working on this @quasiben! Looking forward to seeing this added. It appears the `configuration-reference.rst` file hasn't yet been included ","2020-04-06T15:36:33Z",false,"COMMENTED"
"quasiben","MEMBER","","2020-04-06T21:57:08Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-04-06T22:27:37Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this looks pretty good. I pushed up a commit fixing up the extension setup, and left a few comments.","2020-04-20T20:20:38Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-04-21T13:36:55Z",false,"COMMENTED"
"quasiben","MEMBER","","2020-04-21T14:12:05Z",false,"COMMENTED"
"quasiben","MEMBER","","2020-04-21T20:27:56Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this looks pretty good to me. Thanks @quasiben.","2020-04-21T20:37:41Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-04-22T15:14:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-04-22T15:14:16Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-04-22T15:14:39Z",false,"COMMENTED"
"jsignell","MEMBER","@quasiben - Feel free to merge this PR as-is when you have time to make sure that everything goes according to plan.","2020-04-24T13:13:19Z",false,"APPROVED"
"TomAugspurger","MEMBER","Going through the `shuffle_dtype` changes now. It seems like an implementation detail that's leaking through to the public API. Is there any reason to *not* use `shuffle_dtype=False` when using hash-based partitioning?","2020-04-27T18:21:06Z",false,"COMMENTED"
"fjetter","MEMBER","I agree with the remark of @TomAugspurger  about the `shuffle_dtype` as part of the public API and if it is actually included in the public API there should also be a remark about which scenarios would benefit from creating the column. I'm struggling to come up with a scenario which would benefit from this situation. If this is very rare, I would suggest to not expose this parameter (internally it's fine if it makes a difference e.g. for set_index)


@TomAugspurger the non-uniformity of the buckets is something which didn't change here, did it? The hash bucketing logic is effectively the same, isn't it?","2020-04-30T14:07:59Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-05-20T14:06:35Z",false,"COMMENTED"
"jonmmease","CONTRIBUTOR","","2020-05-20T18:48:46Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-05-20T18:54:36Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks for working on this. Overall it's looking nice.

IIUC, this hasn't changed the data model at all: there's no indication on the object that the dataframe is now partitioned by one or more columns. Should we? For index-based partitioning, we have `.divisions`, and known divisions are reflected in the repr. Or perhaps that doesn't make sense to add, since we don't know the hashed values like we know the divisions? I haven't thought through this fully.","2020-05-21T14:41:05Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-05-21T14:59:46Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-05-21T15:39:01Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-05-21T15:58:36Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-05-21T15:59:51Z",false,"COMMENTED"
"TomAugspurger","MEMBER","This looks good.

@rjzamora do you have strong thoughts on if we should / how to expose (hash-based) column partioning in the data model? I'd like to have an issue to collect discussion on this topic, but I'm still working through it in my head. If you don't have strong thoughts then I'll assign myself a task to write up an issue.","2020-05-26T14:03:38Z",false,"APPROVED"
"jakirkham","MEMBER","","2020-04-03T22:10:29Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks for doing this @andersy005 .  I left some minor comments, mostly stylistic.","2020-04-04T17:33:35Z",false,"COMMENTED"
"andersy005","MEMBER","","2020-04-13T18:30:11Z",false,"COMMENTED"
"andersy005","MEMBER","","2020-04-13T18:30:36Z",false,"COMMENTED"
"andersy005","MEMBER","","2020-04-13T18:41:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @andersy005! I've restarted the failed CI builds here to see if any test failures persist ","2020-04-17T15:15:15Z",false,"COMMENTED"
"jsignell","MEMBER","Can you reproduce the failures locally?","2020-04-24T13:17:11Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-09T13:40:24Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-09T14:36:51Z",false,"COMMENTED"
"andersy005","MEMBER","","2020-06-09T16:02:05Z",false,"COMMENTED"
"TomAugspurger","MEMBER","I don't recall seeing the CI failure before: https://travis-ci.org/github/dask/dask/jobs/670481541?utm_medium=notification&utm_source=github_status. Does it look related?

```
dask/dataframe/core.py:4610: 

_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (   A  B

0  1  1

1  1  1, array(140320365338896)), kwargs = {}

function = <ufunc 'ldexp'>, other = []

args2 = [   A  B

0  1  1

1  1  1, array(140320365338896)]

    def partial_by_order(*args, **kwargs):

        """"""

    

        >>> from operator import add

        >>> partial_by_order(5, function=add, other=[(1, 10)])

        15

        """"""

        function = kwargs.pop(""function"")

        other = kwargs.pop(""other"")

        args2 = list(args)

        for i, arg in other:

            args2.insert(i, arg)

>       return function(*args2, **kwargs)

E       RuntimeWarning: overflow encountered in ldexp

dask/utils.py:1075: RuntimeWarning
```","2020-04-03T11:23:48Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-03T16:02:04Z",false,"APPROVED"
"rjzamora","MEMBER","","2020-04-02T14:44:52Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-04-02T15:03:26Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-03T11:40:42Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-04-03T12:04:03Z",false,"COMMENTED"
"mrocklin","MEMBER","I've attached some comments and questions below.

Additionally, this is a big change for the project, and probably one that requires a decent amount of community involvement.  It would be good to engage https://github.com/dask/dask/issues/3783 and figure out what the right long term approach should be.  There are people there who, I think, care somewhat deeply about this topic and we should get their approval.  

I think that this approach has a lot going for it in terms of being a lightweight modification of the current system, but a change like this is low level enough that I'd also like to make it only once, ","2020-04-03T16:31:08Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-03T19:18:27Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-04-03T19:56:48Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-03T20:46:13Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-04-04T13:06:55Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-04-04T14:07:21Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-04-04T14:13:28Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-04-04T16:08:49Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-04-17T16:52:19Z",false,"COMMENTED"
"KrishanBhasin","CONTRIBUTOR","","2020-04-02T06:49:37Z",false,"COMMENTED"
"KrishanBhasin","CONTRIBUTOR","","2020-04-02T06:53:26Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","Hey @KrishanBhasin !  I know this is a draft, but I have a few comments here (also will help with the test failures).  ","2020-04-02T11:04:57Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","","2020-04-02T11:10:29Z",false,"COMMENTED"
"gforsyth","CONTRIBUTOR","Hey @KrishanBhasin -- this is coming along!  I haven't had a chance to look at `to_hdf` yet, I'll try to do that this week.  

@martindurant may have thoughts on how to handle that","2020-04-08T12:01:40Z",false,"CHANGES_REQUESTED"
"gforsyth","CONTRIBUTOR","This looks great!  Thanks for putting this in @KrishanBhasin!

@jrbourbeau this is good to go","2020-04-29T14:21:32Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for this contribution @KrishanBhasin, I'm looking forward to seeing this merged. Overall things here look really good, just left a few small comments","2020-04-30T02:36:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-04-30T02:39:32Z",false,"COMMENTED"
"KrishanBhasin","CONTRIBUTOR","","2020-05-03T13:44:49Z",false,"COMMENTED"
"KrishanBhasin","CONTRIBUTOR","","2020-05-03T13:45:57Z",false,"COMMENTED"
"KrishanBhasin","CONTRIBUTOR","","2020-05-03T13:54:42Z",false,"COMMENTED"
"KrishanBhasin","CONTRIBUTOR","","2020-05-03T14:03:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-05-04T16:34:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-05-04T16:35:36Z",false,"COMMENTED"
"KrishanBhasin","CONTRIBUTOR","","2020-05-04T20:16:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","This looks great, thank you for working on this @KrishanBhasin! Thanks @gforsyth for reviewing! ","2020-05-04T23:07:42Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for adding this @fjetter!

The version of `distributed` required for building the `dask` docs is here

https://github.com/dask/dask/blob/5d5b43b4373677ff5fb7cf25eb4bdfb514cf3e76/docs/requirements-docs.txt#L10

Right now there is no version restriction, though it would be nice to keep track of the minimum version required. I'm planning to do a 2.14.0 release of `distributed` this Friday. What do you think about adding `distributed>=2.14.0` to the doc requirements and merging this PR after the release?","2020-04-01T15:20:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @fjetter. This is in","2020-04-04T03:11:47Z",false,"APPROVED"
"rjzamora","MEMBER","","2020-03-31T21:09:49Z",false,"COMMENTED"
"madsbk","CONTRIBUTOR","","2020-04-01T13:05:39Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","Looks good to me! 

Just a question for my own understanding","2020-04-02T12:28:36Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-04-02T15:11:18Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-04-14T13:06:09Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks!","2020-04-17T20:39:39Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-03-26T01:55:26Z",false,"COMMENTED"
"ryan-williams","CONTRIBUTOR","all addressed; one somewhat open still","2020-03-26T03:08:25Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks for working on this!

Can you also add `DataFrame.to_sql` to the API documentation?","2020-03-26T13:18:01Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-03-26T16:56:44Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-03-26T17:34:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-03-26T19:31:06Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-26T19:55:50Z",false,"COMMENTED"
"ryan-williams","CONTRIBUTOR","whew, thx for the comments all. A couple things I'll flag:

## New ""sequential-blocks"" mode (on by default)
[This comment](https://github.com/dask/dask/pull/6038/files#r398756904) by @martindurant led me to build this out a lot more.

- [I made a `chain` helper for linearizing a sequence of `Delayed`s](https://github.com/dask/dask/pull/6038/files#diff-64b17ee9155433cad463c80a971a3223R1391)
- [I use that to make sure blocks get `to_sql`'d in the right order](https://github.com/dask/dask/pull/6038/files#diff-df044dbe60002295b3efc377f5575d71R407)
- [I added a `parallel` flag (off by default) that does the original behavior](https://github.com/dask/dask/pull/6038/files#diff-df044dbe60002295b3efc377f5575d71R229)

### Example notebooks
I also added a couple helpful notebooks showing `chain` and `to_sql` in action:
- [`chain-example.ipynb`](https://github.com/dask/dask/blob/6f4991b6fe22aa9566f7b1daaf801bc801ce48c3/chain-example.ipynb) ([nbviewer](https://nbviewer.jupyter.org/gist/ryan-williams/0aeb2111cb8b7fd588784e2a7c35433e/chain-example.ipynb))
- [`dask.dataframe.to_sql example.ipynb`](https://github.com/dask/dask/blob/6f4991b6fe22aa9566f7b1daaf801bc801ce48c3/dask.dataframe.to_sql%20example.ipynb) ([nbviewer](https://nbviewer.jupyter.org/gist/ryan-williams/0aeb2111cb8b7fd588784e2a7c35433e/dask.dataframe.to_sql%20example.ipynb))

They're top-level files in the repo at the moment; I'll remove them before merging / once folks have had a chance to have a glance; [they're also in this gist](https://gist.github.com/ryan-williams/0aeb2111cb8b7fd588784e2a7c35433e), for posterity.

## Docsite testing
The docsite is mostly updated and looks fine, but there's some things I'm not following about which docstrings are showing up where on `dataframe-api.html`: https://github.com/dask/dask/pull/6038/files#r398852243

Anyone have a good way to publish a preview of the docsite publicly for others to inspect? I tried dumping a build `docs/build/html` directory into its own git repository and making that a git submodule of my personal github-pages site, which I've had success with before, but the CSS is 404'ing for some reason I can't figure out: https://runsascoded.com/dask/docs/dataframe-api.html","2020-03-30T04:53:37Z",false,"COMMENTED"
"ryan-williams","CONTRIBUTOR","","2020-03-30T17:01:37Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-03-30T17:04:46Z",false,"COMMENTED"
"ryan-williams","CONTRIBUTOR","","2020-03-30T17:58:54Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-03-30T18:04:52Z",false,"COMMENTED"
"ryan-williams","CONTRIBUTOR","","2020-03-30T18:34:15Z",false,"COMMENTED"
"ryan-williams","CONTRIBUTOR","","2020-03-30T18:34:45Z",false,"COMMENTED"
"TomAugspurger","MEMBER","I don't see any tests for parallel=True / False. Can you verify that we have full test coverage on the new code?","2020-04-01T13:28:10Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-04-01T13:35:19Z",false,"COMMENTED"
"ryan-williams","CONTRIBUTOR","@martindurant https://github.com/dask/dask/pull/6038#issuecomment-607240705
> The method will need to be put into the documentation at https://github.com/dask/dask/blob/master/docs/source/dataframe-api.rst#store-dataframes

It should be there!

![image](https://user-images.githubusercontent.com/465045/78208896-846cb800-7473-11ea-83a1-a42f6b3f3237.png)

[Some things about the docsite build I'm seeing locally are still confusing me a bit though](https://github.com/dask/dask/pull/6038#pullrequestreview-383423911). Pointers welcome.

------
@TomAugspurger https://github.com/dask/dask/pull/6038#pullrequestreview-385574041
> I don't see any tests for parallel=True / False. Can you verify that we have full test coverage on the new code?

~Check out https://github.com/ryan-williams/dask/pull/2!~

~The tests pass, but I'm a bit concerned about some apparent timeouts that are happening while cleaning up tests that simulated failures ([using the default `if_exists=fail` when the table already exists](https://github.com/ryan-williams/dask/pull/2/files#diff-6dd213d7000c7e672b94c2166a45e13fR405)).~

~My thought was to debug/iterate/review over there and then merge it into this branch, but if we're mostly settled here now I can merge it in here and we can continue discussion here.~

Sorry, I misread your ask. I've added some basic tests for `parallel=True` now.

`assert_eq` seems to handle comparing two DFs though the rows are out of order, so the `parallel=True` tests should pass regardless of what order the blocks get inserted in.

I locally changed the test to have a 5-partition, 10-element version, and observed scrambled DFs to come back from SQL (similar to [my notebook example](https://nbviewer.jupyter.org/gist/ryan-williams/0aeb2111cb8b7fd588784e2a7c35433e/dask.dataframe.to_sql%20example.ipynb#Check-the-DB-table-)), but the assertions still passed, so hopefully we're good there.

------
## Open Q's
- are the timeouts in the distributed tests ok? https://github.com/ryan-williams/dask/pull/2 ([latest comment](https://github.com/ryan-williams/dask/pull/2#issuecomment-607610513))
- is `pickle.dumps(result)` failing on a ""chained"" Dask object ok? https://github.com/ryan-williams/dask/pull/3

## Open comment threads:
- [`dd.DataFrame.to_sql` docstring](https://github.com/dask/dask/pull/6038/files#r401606634)
- [eager vs. lazy `df.meta.to_sql`](https://github.com/dask/dask/pull/6038/files#r401610741)

## Travis `tlz` import failure
Finally, I still don't know why the `tlz` import is failing in `test_imports.sh`, but if that ends up being the last problem I'm sure we can fix it.

**Update**: this passed in the latest Travis. I'm not sure why! Maybe upstream tests all passing helped it, or maybe something subtle about circular-import-deps between modules (I broke a `delayed.py`↔️`utils.py` cycle in one of the recent commits) was causing it. Still dunno why I couldn't repro it locally…","2020-04-02T04:07:17Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-02T11:11:27Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-02T11:12:50Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-03T19:24:35Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks @psimaj !  In principle this looks great to me.  I left one small comment about exceptions and `os.path.exists`.  Thank you for helping to improve informative error messages.","2020-03-22T16:18:40Z",false,"COMMENTED"
"psimaj","CONTRIBUTOR","","2020-03-23T01:41:12Z",false,"COMMENTED"
"jakirkham","MEMBER","LGTM. Thanks Matt! 😄","2020-03-20T22:28:54Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2020-03-19T20:39:30Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-03-20T21:58:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the update here @TomAugspurger! Will merge once CI passes 

Edit:

For reference the `test_cov` failure is a known flaky test","2020-03-18T19:21:05Z",false,"APPROVED"
"rjzamora","MEMBER","","2020-03-24T14:02:01Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","Added some comments / questions.

One more thing I am wondering: what happens if you specify the combination of `split_row_groups=False, gather_statistics=True` ? Is filtering supported then?","2020-03-25T16:54:43Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-03-25T17:02:19Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-03-25T17:10:28Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-03-25T17:17:53Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-03-25T17:23:28Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-03-25T17:37:59Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-03-26T15:55:19Z",false,"COMMENTED"
"martindurant","MEMBER","I am *very* glad not to have had to do this work!
The logic is hard to follow, but looks good from a high level. One would think it ought to be doable in a simpler way for all the combinations of partitions/stats/options, but I don't see how. I mainly have questions. 
Is row-group-level filtering (multiple row-groups within a file) useful at all? This all seems to be leading towards real row-level filter pushdown...","2020-03-26T17:24:27Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-03-26T19:50:14Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-03-26T19:55:38Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-03-26T19:55:50Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-03-26T19:58:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-03-26T20:03:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-03-26T20:05:50Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-03-26T20:11:10Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-03-26T20:15:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-03-26T20:19:36Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-03-27T03:25:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-03-27T03:51:03Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-03-27T12:31:05Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-03-27T12:32:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-03-27T14:57:30Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2020-03-30T18:00:18Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-03-30T18:01:42Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-03-30T18:28:02Z",false,"COMMENTED"
"jsignell","MEMBER","![image](https://user-images.githubusercontent.com/4806877/77168194-c79b5400-6a8d-11ea-8760-1dccf7e51f5a.png)

It think one more space change is needed. See suggestion","2020-03-20T13:35:55Z",false,"CHANGES_REQUESTED"
"jrbourbeau","MEMBER","The current set of changes looks good to me when building the docs locally with `sphinx==2.4.4`:

<img width=""722"" alt=""Screen Shot 2020-03-21 at 10 57 13 AM"" src=""https://user-images.githubusercontent.com/11656932/77230514-cab44400-6b62-11ea-8669-59f4acb6e972.png"">

I'm going to merge this, see how the built docs look on RTD, and submit a follow up PR if needed","2020-03-21T15:59:37Z",false,"APPROVED"
"martindurant","MEMBER","Glad to see it passing! Do we have benchmarks?

Unfortunately, covering every case means regaining some of the complexity that the original refactor alleviated :|","2020-03-17T19:33:29Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-03-17T19:41:57Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-17T20:57:23Z",false,"COMMENTED"
"mlondschien","CONTRIBUTOR","","2020-03-18T07:50:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-20T14:57:32Z",false,"COMMENTED"
"TomAugspurger","MEMBER","It's probably worth expanding the tests a bit. The currently written one only covers int and float.","2020-03-20T19:07:20Z",false,"COMMENTED"
"quasiben","MEMBER","","2020-03-23T13:39:06Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-23T13:55:17Z",false,"COMMENTED"
"mlondschien","CONTRIBUTOR","","2020-03-23T13:59:58Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-23T14:31:51Z",false,"COMMENTED"
"mlondschien","CONTRIBUTOR","","2020-03-23T14:50:29Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-23T14:58:44Z",false,"COMMENTED"
"quasiben","MEMBER","","2020-03-23T14:59:08Z",false,"COMMENTED"
"mlondschien","CONTRIBUTOR","","2020-03-23T15:49:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-23T16:28:01Z",false,"COMMENTED"
"mlondschien","CONTRIBUTOR","","2020-03-23T16:31:17Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-23T18:11:42Z",false,"APPROVED"
"jsignell","MEMBER","This seems like a reasonable change to me. @jrbourbeau do you agree?","2020-03-12T15:01:27Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @xcz011! The changes here LGTM","2020-03-13T02:06:19Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @lr4d! This is in","2020-03-10T18:22:25Z",false,"APPROVED"
"TomAugspurger","MEMBER","Thanks!

Can you also update the versions of tools and cloudpickle in the table at /docs/source/install.rst?","2020-03-10T12:26:30Z",false,"COMMENTED"
"groutr","CONTRIBUTOR","","2020-03-10T15:35:02Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR @groutr! It looks like there are a couple of linting errors causing CI to fail. Running `flake8 dask` and `black dask` should resolve the errors ","2020-03-10T16:37:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for cleaning things up @groutr! I left a few minor comments, but generally the changes here look good. ","2020-03-10T17:22:55Z",false,"COMMENTED"
"groutr","CONTRIBUTOR","","2020-03-10T18:08:06Z",false,"COMMENTED"
"groutr","CONTRIBUTOR","","2020-03-10T18:10:18Z",false,"COMMENTED"
"groutr","CONTRIBUTOR","","2020-03-10T18:11:20Z",false,"COMMENTED"
"groutr","CONTRIBUTOR","","2020-03-10T18:19:28Z",false,"COMMENTED"
"groutr","CONTRIBUTOR","","2020-03-10T18:28:57Z",false,"COMMENTED"
"groutr","CONTRIBUTOR","","2020-03-10T18:52:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2020-03-10T23:28:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @groutr! This is in ","2020-03-10T23:34:05Z",false,"APPROVED"
"TomAugspurger","MEMBER",">  I couldn't come up with an idea for a test.

I think a test like

```python
function_attributes = {...}
original = copy.copy(function_attributes, deep=True)

result = to_graphviz(dsk, function_attributes=function_attributes)
assert original == result
```","2020-03-09T15:08:22Z",false,"COMMENTED"
"JulianWgs","CONTRIBUTOR","","2020-03-09T15:29:58Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-09T20:12:03Z",false,"COMMENTED"
"JulianWgs","CONTRIBUTOR","","2020-03-09T21:01:23Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-09T21:31:43Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-03-11T15:44:50Z",false,"CHANGES_REQUESTED"
"JulianWgs","CONTRIBUTOR","","2020-03-11T16:12:58Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-03-12T14:44:57Z",false,"COMMENTED"
"JulianWgs","CONTRIBUTOR","","2020-03-12T15:22:27Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-03-12T15:29:01Z",false,"COMMENTED"
"jsignell","MEMBER","This looks good to me! Except you need to run black: `black dask`","2020-03-13T14:23:37Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-03-20T13:43:53Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-03-06T13:11:08Z",false,"APPROVED"
"Adam-D-Lewis","NONE","","2020-03-06T04:14:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @gjoseph92! This is in ","2020-03-05T23:50:53Z",false,"APPROVED"
"TomAugspurger","MEMBER","Thanks for this, it seems reasonable. Can you add tests?","2020-03-05T21:48:37Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-06T15:25:37Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-06T19:43:15Z",false,"COMMENTED"
"petiop","CONTRIBUTOR","","2020-03-06T20:21:35Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-06T20:50:04Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks @petiop!","2020-03-06T20:52:03Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @groutr! I left one small comment, otherwise the changes here LGTM","2020-03-06T02:18:51Z",false,"COMMENTED"
"mrocklin","MEMBER","OK, so now I see that we're still using the existing cleanup mechanism in partd, so presumably this is unlikely to be less robust.  I guess I'm coming around.  I do have a few comments below though.","2020-03-24T20:08:38Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Just for reference, here's the dask graph for the set_index test.

![mydask](https://user-images.githubusercontent.com/1312546/77654987-c9f32780-6f3f-11ea-93fe-12b78a3c2384.png)
","2020-03-26T13:57:27Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-26T13:58:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-03-26T16:33:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Gave this another look and I'm sufficiently happy with where it's at.","2020-03-31T19:34:15Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks, this looks really nice.

Do you have an example of collapse removing an unconnected box? Or is it in the examples you posted and I just missed it?","2020-03-04T21:51:58Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-03-05T14:04:49Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-03-05T14:05:42Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Merging later today if there aren't any objections.","2020-03-06T14:21:25Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2020-03-06T15:02:59Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-03-04T21:44:20Z",false,"APPROVED"
"TomAugspurger","MEMBER","Makes sense, thanks.

Just to confirm, will pandas-backed Dask DataFrame's see similar speedup, since `group_split_pandas` doesn't do anything with `ignore_index`?","2020-03-04T17:18:16Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-04T17:18:24Z",false,"APPROVED"
"TomAugspurger","MEMBER","Thanks @jrbourbeau. I see that `total_mem_usage` is also used in `test_repartition_partition_size` in `test_dataframe.py`, and I think it's being called with `deep=False` now. I think we do want `deep=True` there, since we do have a string column.

LGTM otherwise.","2020-03-03T21:19:30Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-03T21:30:15Z",false,"APPROVED"
"xhochy","CONTRIBUTOR","LGTM, thanks!","2020-03-04T09:51:35Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jameslamb! ","2020-03-01T15:50:06Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @gforsyth!","2020-02-28T19:09:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @gforsyth! This is in","2020-02-28T20:38:37Z",false,"APPROVED"
"TomAugspurger","MEMBER","Thanks for working on this. We'll want to make sure we have tests for Series and Dataframes that have multiple values for the mode","2020-03-01T16:27:27Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-06T03:56:10Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-06T17:02:49Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-06T21:13:17Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-06T21:41:59Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-06T21:48:07Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-06T22:54:07Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-07T03:26:52Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-12T04:03:26Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-12T04:03:44Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-12T04:03:55Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-12T04:04:19Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-12T04:04:38Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-12T04:05:21Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-12T04:08:00Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-12T04:10:33Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-12T04:13:04Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-12T04:22:36Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-12T04:27:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-03-22T19:14:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-03-22T19:16:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-03-22T19:19:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-23T13:22:58Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-23T18:46:30Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-23T19:14:47Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-24T20:53:21Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-24T21:12:19Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-24T21:15:59Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-24T21:16:50Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-03-24T21:18:28Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Looking close, thanks.","2020-03-30T20:13:08Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-04-03T18:34:38Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-04-03T18:35:17Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-03T19:05:48Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-04-03T22:14:30Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-04-06T13:50:13Z",false,"COMMENTED"
"TomAugspurger","MEMBER","LGTM once we have a note for https://github.com/dask/dask/pull/5958#discussion_r404105556.","2020-04-06T13:50:36Z",false,"COMMENTED"
"Adam-D-Lewis","NONE","","2020-04-06T14:49:03Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR @groutr! 

Historically we've tried to keep modules like `dask.utils`, `dask.base`, `dask.core`, etc. free from non-standard library dependencies. This is nice for use cases where having additional dependencies can be a hurdle. Because of this I'm slightly against adding a `toolz` dependency here. 

What type of speedups do using `toolz` / `cytoolz` give here?","2020-02-26T17:50:06Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-28T19:08:20Z",false,"APPROVED"
"quasiben","MEMBER","Looks good!  I suppose we could do the same for np.arange i the numpy section -- though I would be hard pressed to come up with a use case","2020-02-26T12:11:09Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-02-26T12:26:35Z",false,"APPROVED"
"kkraus14","MEMBER","","2020-02-25T18:34:12Z",false,"APPROVED"
"jsignell","MEMBER","","2020-02-27T02:42:11Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-02-27T03:07:40Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks @jsignell , in principle this looks good to me.  I'm happy to wait for the dask-cudf folks though.

The Appveyor failure is concerning.  It doesn't look related, but we should probably check it out.","2020-02-27T03:38:48Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-02-27T16:16:41Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-02-28T04:26:43Z",false,"COMMENTED"
"TomAugspurger","MEMBER","This looks nice, but I'm not familiar with this section of code. Planning to merge tomorrow if there aren't any objections.

Would you be interested in submitting a PR with your initial benchmark to https://github.com/dask/dask-benchmarks? Perhaps with something a bit smaller so that it runs in ~1 second?","2020-03-03T17:18:38Z",false,"APPROVED"
"bmerry","CONTRIBUTOR","","2020-03-03T17:26:37Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-27T13:40:52Z",false,"APPROVED"
"jsignell","MEMBER","This can get merged now right?","2020-02-21T21:00:49Z",false,"APPROVED"
"TomAugspurger","MEMBER","Thanks!

Thinking this through, we may need to require a `meta` from the user. Consider the following two

```python
dd.to_numeric(dd.from_pandas(pd.Series(['1', '2']), 2))

dd.to_numeric(dd.from_pandas(pd.Series(['1.5', '2.5']), 2))
```

The first should have int64 dtype, while the second should have float64. But we have no way of knowing that without looking at the values.

If we don't require it, we can perhaps fall back to float64 as a default (which I think is what's happening now when we do `pd.to_numeric(arg._meta)`.","2020-02-19T22:07:40Z",false,"COMMENTED"
"TomAugspurger","MEMBER","I'm a bit concerned about the behavior of downcast and errors. You'll potentially end up with a Series where dtype differs by partition. For example

```python
In [27]: ds = dd.from_pandas(pd.Series([1, 2, 3, 1, 2, 2**8]), npartitions=2)

In [28]: ds
Out[28]:
Dask Series Structure:
npartitions=2
0    int64
3      ...
5      ...
dtype: int64
Dask Name: from_pandas, 2 tasks

In [29]: dd.to_numeric(ds, downcast='integer').dtype
Out[29]: dtype('int8')

In [30]: dd.to_numeric(ds, downcast='integer').compute().dtype
Out[30]: dtype('int16')

In [31]: dd.to_numeric(ds, downcast='integer').map_partitions(lambda x: x.dtype).compute()
Out[31]:
0     int8
1    int16
dtype: object
```

I just don't think there's a way around `downcast` (and I think `errors`) having to look at the full data in order to figure out the dtype. Looking at the data might be an option, and we do it in other places (see `DataFrame.categorize`), but we'll need to document that it'll have really different performance behavior compared specifying `meta` yourself.

We'll also want to add this to the `dataframe-api.rst` page","2020-02-26T11:47:57Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-02-27T01:57:59Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-02-27T01:58:26Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-02-27T02:45:09Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-27T13:54:29Z",false,"APPROVED"
"quasiben","MEMBER","","2020-02-19T20:45:02Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-02-19T20:54:36Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-19T21:06:42Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell! Glad to see more f-strings ","2020-02-19T18:11:15Z",false,"APPROVED"
"mrocklin","MEMBER","","2020-02-21T06:54:25Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-02T18:07:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @TomAugspurger! ","2020-02-18T20:14:58Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-02-14T20:56:16Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @mrocklin! Will merge once CI passes","2020-02-14T21:06:10Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-03-03T17:40:08Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2020-03-04T06:45:53Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-04T13:22:25Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks, this looks good to me.

Just to confirm, we have tests for the ValueError being raised in blockwise, since it would have previously been tested to raise in `map_blocks`?","2020-02-14T17:46:42Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @jsignell! ","2020-02-13T20:50:06Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @bmerry! Does it make sense to add a check at the beginning of `rewrite_blockwise` and return early if the input is a single blockwise layer? That would help speed up other occurrences of `rewrite_blockwise` throughout the codebase","2020-02-13T20:58:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Awesome, thanks @bmerry! Merging","2020-02-14T15:14:54Z",false,"APPROVED"
"mrocklin","MEMBER","","2020-02-14T00:05:36Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2020-02-14T06:58:14Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-10T21:37:42Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-02-13T22:16:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-02-13T22:17:29Z",false,"COMMENTED"
"kkraus14","MEMBER","","2020-02-13T22:56:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-02-13T23:27:50Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-14T13:27:30Z",false,"COMMENTED"
"kkraus14","MEMBER","","2020-02-14T15:14:25Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-14T15:38:02Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks for resolving this @jsignell and thanks for pushing up the WIP work.

I've left two tiny comments below.","2020-02-10T17:30:46Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-02-10T17:39:07Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-02-10T17:41:35Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-02-10T17:53:05Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-02-10T17:56:00Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Looking nice.

> So presumably if we pin the version above latest we could merge this? Not sure if that is a good idea or not... :)

I think we can just do the version check inside `sort_values` depending on the arguments.","2020-06-02T13:34:51Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-03T19:25:26Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-03T19:35:21Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-03T19:59:02Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-03T19:59:15Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-03T20:07:31Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-03T20:14:36Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-03T20:29:00Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-03T20:52:49Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-03T21:20:13Z",false,"COMMENTED"
"jsignell","MEMBER","","2020-06-03T21:22:20Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-06-04T13:46:30Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @michaelaye! ","2020-02-09T04:18:14Z",false,"APPROVED"
"quasiben","MEMBER","","2020-02-10T15:10:04Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-11T16:27:34Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-02-10T15:48:50Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-02-17T21:16:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-17T21:34:55Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-02-17T22:09:56Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-02-17T22:10:49Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks for working on this @eriknw! Do you think you'll have time to give a high-level summary of the changes over the next few days?

I'm going to take a look at the performance of this in the dask-benchmarks repo later today to see how things look.","2020-02-19T14:32:02Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks @eriknw. I can attempt to push up some descriptions for the new concepts you introduced here later on in the week.

I'll also try to add tests for the lines that aren't covered.","2020-03-03T22:08:30Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-03-03T23:33:30Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-03-03T23:37:49Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-03-03T23:42:02Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-03-03T23:43:23Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-03-04T02:47:06Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-04T13:23:56Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-03-04T18:18:59Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-03-04T18:19:11Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-03-04T18:21:02Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-03-04T18:22:13Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-03-04T18:23:28Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-03-04T18:25:35Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-18T19:21:12Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-03-18T19:50:30Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-03-18T20:01:54Z",false,"COMMENTED"
"TomAugspurger","MEMBER","I've given this a couple read-throughs, and I'm generally happy with it. Things make sense to the extent that I'm able to understand them.

@mrocklin there's a discussion on performance at https://github.com/dask/dask/pull/5872/files#r394585154 that may interest you. Our benchmarks pick up what should be a worst case scenario for the new `partition_keys` concept. Do you have thoughts on the relative value of runtime of `order` vs. getting a good ordering?","2020-03-24T13:24:43Z",false,"APPROVED"
"jcrist","MEMBER","Thanks @eriknw. Overall this looks good to me. I was unable to find any cases where this resulted in a worse ordering or was noticeably slower with realistic workloads. Great comments in the implementation too.

I found two places where we currently don't have test coverage that I think we should. There were a couple other one-off lines, but they're mostly for switching between sorting and random pop'ing for larger lists (and are visibly correct), so I'm less concerned with hitting those (though full coverage would be nice).","2020-04-29T18:19:23Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-04-30T19:47:58Z",false,"COMMENTED"
"jcrist","MEMBER","","2020-04-30T20:07:33Z",false,"COMMENTED"
"eriknw","MEMBER","","2020-05-01T19:55:09Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks @shcherbin!","2020-02-04T20:25:13Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @amcnicho! This is in","2020-02-03T19:29:27Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-01-30T23:52:13Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the quick fix @TomAugspurger. We can do a bugfix release for both `dask` and `distributed`. I'm happy to do so after this PR is merged","2020-01-30T15:02:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","LGTM! Thanks for tracking down the CI failure too","2020-01-30T16:25:04Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-02-04T20:33:00Z",false,"COMMENTED"
"gyf304","CONTRIBUTOR","","2020-02-04T21:41:45Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-05T15:28:47Z",false,"COMMENTED"
"gyf304","CONTRIBUTOR","","2020-02-05T21:42:24Z",false,"COMMENTED"
"gyf304","CONTRIBUTOR","","2020-02-05T21:43:09Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-06T12:28:47Z",false,"APPROVED"
"mrocklin","MEMBER","Thanks @suryaavala !  I've added two small requests to your test.","2020-01-27T16:45:04Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks @suryaavala!","2020-02-04T20:35:04Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @Saanidhyavats. Could you add a test to `dask/array/tests/test_slicing.py` to demonstrate this function gives the same result as NumPy's `take_along_axis` function? I'd recommend looking at existing tests in the same module to get a sense for how to go about this (e.g. `test_empty_list`)","2020-01-25T05:31:39Z",false,"COMMENTED"
"Saanidhyavats","NONE","","2020-01-25T14:10:24Z",false,"COMMENTED"
"Saanidhyavats","NONE","","2020-01-25T14:37:59Z",false,"COMMENTED"
"Saanidhyavats","NONE","","2020-01-25T15:03:46Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-06T12:31:07Z",false,"COMMENTED"
"Saanidhyavats","NONE","","2020-02-07T03:25:18Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-07T13:25:20Z",false,"COMMENTED"
"Saanidhyavats","NONE","","2020-02-07T14:39:56Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-07T18:15:59Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @TomAugspurger! ","2020-01-23T23:04:54Z",false,"APPROVED"
"rjzamora","MEMBER","","2020-01-22T19:02:47Z",false,"COMMENTED"
"ig248","CONTRIBUTOR","","2020-01-22T19:05:43Z",false,"COMMENTED"
"ig248","CONTRIBUTOR","","2020-01-26T12:46:18Z",false,"COMMENTED"
"rjzamora","MEMBER","LGTM - Thanks for the nice contribution here @ig248 ","2020-01-26T15:15:33Z",false,"APPROVED"
"mrocklin","MEMBER","","2020-01-26T15:45:32Z",false,"COMMENTED"
"ig248","CONTRIBUTOR","","2020-01-26T15:59:27Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-04T20:53:59Z",false,"COMMENTED"
"martindurant","MEMBER","","2020-02-04T20:54:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-04T20:59:50Z",false,"COMMENTED"
"ig248","CONTRIBUTOR","","2020-02-04T21:08:32Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-04T21:10:24Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-04T21:11:27Z",false,"COMMENTED"
"ig248","CONTRIBUTOR","","2020-02-04T21:12:15Z",false,"COMMENTED"
"ig248","CONTRIBUTOR","","2020-02-04T21:20:10Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-05T15:13:06Z",false,"COMMENTED"
"jrbourbeau","MEMBER","+1 Thanks @TomAugspurger! ","2020-01-22T02:18:46Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2020-01-24T15:20:01Z",false,"APPROVED"
"TomAugspurger","MEMBER","Can you add ""Closes #5746"" to your original post so that it's closed when this is merged?","2020-01-20T17:24:31Z",false,"COMMENTED"
"dfonnegra","CONTRIBUTOR","","2020-01-20T18:26:57Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-20T18:49:09Z",false,"COMMENTED"
"dfonnegra","CONTRIBUTOR","","2020-01-20T19:00:54Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-20T19:11:52Z",false,"COMMENTED"
"dfonnegra","CONTRIBUTOR","","2020-01-20T20:11:33Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-20T21:23:54Z",false,"COMMENTED"
"dfonnegra","CONTRIBUTOR","","2020-01-20T21:31:16Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-21T13:59:42Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-01-20T15:41:31Z",false,"COMMENTED"
"exemplary-citizen","CONTRIBUTOR","","2020-01-20T18:09:42Z",false,"COMMENTED"
"exemplary-citizen","CONTRIBUTOR","","2020-01-20T18:10:58Z",false,"COMMENTED"
"exemplary-citizen","CONTRIBUTOR","","2020-01-20T18:14:50Z",false,"COMMENTED"
"exemplary-citizen","CONTRIBUTOR","","2020-01-20T18:16:06Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-20T19:28:03Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-20T19:29:41Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-20T19:29:56Z",false,"COMMENTED"
"exemplary-citizen","CONTRIBUTOR","","2020-01-20T20:01:17Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-20T21:21:13Z",false,"COMMENTED"
"exemplary-citizen","CONTRIBUTOR","","2020-01-20T22:48:04Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-21T16:24:03Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-04T20:55:45Z",false,"COMMENTED"
"exemplary-citizen","CONTRIBUTOR","","2020-02-04T21:30:19Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-05T19:28:46Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-05T19:29:09Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-01-21T14:15:49Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-01-21T14:56:23Z",false,"COMMENTED"
"beckernick","MEMBER","This generally LGTM, but I'm a bit concerned about how this would interact with `split_out`. It would be useful to explicitly test a few multi-partition output scenarios","2020-01-29T16:45:44Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-05T19:47:54Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for updating to a test that exists @chrisroat! This is in ","2020-01-17T01:44:33Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-01-16T13:41:39Z",false,"COMMENTED"
"exemplary-citizen","CONTRIBUTOR","","2020-01-16T18:47:16Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-17T02:26:37Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-21T16:28:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-01-21T16:31:30Z",false,"COMMENTED"
"exemplary-citizen","CONTRIBUTOR","","2020-01-21T18:45:17Z",false,"COMMENTED"
"exemplary-citizen","CONTRIBUTOR","","2020-01-21T18:46:51Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-21T22:35:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for investigating and the test fix @TomAugspurger!","2020-01-24T18:18:19Z",false,"APPROVED"
"TomAugspurger","MEMBER","Thanks for the quick fix!","2020-01-14T19:56:58Z",false,"APPROVED"
"TomAugspurger","MEMBER","Thanks for the PR. Can you also add tests?","2020-01-14T17:01:21Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-14T17:42:34Z",false,"COMMENTED"
"ChrWesp","CONTRIBUTOR","","2020-01-14T18:02:26Z",false,"COMMENTED"
"ChrWesp","CONTRIBUTOR","","2020-01-14T18:02:43Z",false,"COMMENTED"
"ChrWesp","CONTRIBUTOR","","2020-01-14T18:03:08Z",false,"COMMENTED"
"ChrWesp","CONTRIBUTOR","","2020-01-14T18:04:46Z",false,"COMMENTED"
"ChrWesp","CONTRIBUTOR","","2020-01-14T18:11:03Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-14T19:11:33Z",false,"COMMENTED"
"ChrWesp","CONTRIBUTOR","","2020-01-14T21:02:06Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-14T22:57:39Z",false,"COMMENTED"
"ChrWesp","CONTRIBUTOR","","2020-01-15T10:01:42Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-15T11:54:14Z",false,"COMMENTED"
"ChrWesp","CONTRIBUTOR","","2020-01-15T14:05:53Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-15T14:08:10Z",false,"COMMENTED"
"ChrWesp","CONTRIBUTOR","","2020-01-15T15:10:29Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-15T15:12:42Z",false,"COMMENTED"
"ChrWesp","CONTRIBUTOR","","2020-01-15T15:18:00Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-16T13:44:42Z",false,"APPROVED"
"TomAugspurger","MEMBER","Thanks for working on this.","2020-01-13T11:52:38Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-13T17:38:00Z",false,"COMMENTED"
"exemplary-citizen","CONTRIBUTOR","","2020-01-13T17:56:48Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-13T19:01:56Z",false,"COMMENTED"
"exemplary-citizen","CONTRIBUTOR","","2020-01-13T22:38:27Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-14T17:16:54Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-14T17:17:22Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks, looks great. Merging when CI passes.","2020-01-14T19:43:57Z",false,"APPROVED"
"TomAugspurger","MEMBER","LGTM overall. One tiny question.","2020-01-13T15:28:36Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-01-13T15:41:33Z",false,"COMMENTED"
"rjzamora","MEMBER","","2020-01-13T16:27:17Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-08T20:45:19Z",false,"APPROVED"
"mrocklin","MEMBER","","2020-01-06T15:05:29Z",false,"COMMENTED"
"tacaswell","CONTRIBUTOR","","2020-01-06T16:07:29Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this looks good to me.","2020-01-14T17:26:55Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks @devin-petersohn !  I left a few bits of micro-feedback.  I was a little more verbose than usual, just because I'm hoping to see you around these parts again :)  Hope that's alright.","2020-01-05T01:12:58Z",false,"COMMENTED"
"devin-petersohn","CONTRIBUTOR","","2020-01-05T01:23:37Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks @devin-petersohn !  A few more small comments.  It looks like we're converging though.","2020-01-05T01:57:07Z",false,"COMMENTED"
"devin-petersohn","CONTRIBUTOR","","2020-01-05T02:34:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-01-01T16:26:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-01-01T16:27:20Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-01-01T16:27:49Z",false,"COMMENTED"
"WesRoach","CONTRIBUTOR","","2020-01-02T14:03:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-01-02T15:29:37Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-01-02T15:30:05Z",false,"COMMENTED"
"WesRoach","CONTRIBUTOR","","2020-01-04T00:24:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-12-31T16:27:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-12-22T15:39:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-12-23T01:17:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-12-23T01:31:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-12-21T02:18:30Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-12-21T16:35:05Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-12-21T02:31:15Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-12-21T02:31:27Z",false,"COMMENTED"
"thomcom","CONTRIBUTOR","","2019-12-23T18:12:18Z",false,"COMMENTED"
"thomcom","CONTRIBUTOR","","2019-12-23T18:14:41Z",false,"COMMENTED"
"thomcom","CONTRIBUTOR","","2019-12-23T18:15:27Z",false,"COMMENTED"
"thomcom","CONTRIBUTOR","","2019-12-23T18:55:56Z",false,"COMMENTED"
"beckernick","MEMBER","","2020-01-06T23:08:16Z",false,"COMMENTED"
"quasiben","MEMBER","","2020-01-10T19:19:28Z",false,"COMMENTED"
"thomcom","CONTRIBUTOR","","2020-01-10T23:16:52Z",false,"COMMENTED"
"thomcom","CONTRIBUTOR","","2020-01-10T23:21:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-01-14T15:23:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-01-14T15:24:28Z",false,"COMMENTED"
"thomcom","CONTRIBUTOR","","2020-01-14T15:24:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-01-14T15:26:20Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-01-14T15:27:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2020-01-14T15:28:02Z",false,"COMMENTED"
"thomcom","CONTRIBUTOR","","2020-01-14T15:29:33Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-14T19:25:46Z",false,"COMMENTED"
"thomcom","CONTRIBUTOR","","2020-01-14T21:52:39Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-14T22:41:56Z",false,"COMMENTED"
"thomcom","CONTRIBUTOR","","2020-01-15T20:34:18Z",false,"COMMENTED"
"TomAugspurger","MEMBER","@thomcom can you try my suggested fix from
https://github.com/dask/dask/pull/5737#discussion_r366527613?","2020-01-15T21:36:58Z",false,"COMMENTED"
"thomcom","CONTRIBUTOR","","2020-01-16T14:52:15Z",false,"COMMENTED"
"quasiben","MEMBER","","2020-03-06T15:41:29Z",false,"APPROVED"
"jakirkham","MEMBER","","2020-03-06T20:13:32Z",false,"COMMENTED"
"jakirkham","MEMBER","To follow-up, here are a couple of suggestions on how we might improve this concatenation test.","2020-03-09T19:44:56Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-03-09T23:59:58Z",false,"COMMENTED"
"cjnolet","CONTRIBUTOR","","2020-03-10T00:10:13Z",false,"COMMENTED"
"cjnolet","CONTRIBUTOR","","2020-03-10T00:10:59Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-03-10T00:23:05Z",false,"COMMENTED"
"cjnolet","CONTRIBUTOR","","2020-03-10T01:00:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-03-10T01:16:08Z",false,"COMMENTED"
"cjnolet","CONTRIBUTOR","","2020-03-10T01:30:06Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-03-10T02:05:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Nice addition, thanks @TomAugspurger!

> Unless I missed something, we only link to examples.dask.org from the educational resources page

The examples are linked to in the ""Get Started"" section of the `dask-sphinx-theme` navbar","2019-12-19T16:11:39Z",false,"APPROVED"
"jcrist","MEMBER","","2019-12-18T19:11:26Z",false,"COMMENTED"
"eriknw","MEMBER","","2019-12-18T19:32:49Z",false,"COMMENTED"
"eriknw","MEMBER","","2019-12-18T20:01:37Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-12-18T20:06:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-12-17T15:44:45Z",false,"APPROVED"
"jrbourbeau","MEMBER","Merging as the Linux builds are passing","2019-12-16T23:36:12Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @TomAugspurger!","2019-12-16T21:22:34Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-12-18T14:46:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-12-18T14:51:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @quasiben, this is a nice addition! Could you add `performance_report` to the `.. autosummary:` at the top of this section? ","2019-12-16T17:11:36Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-16T17:31:00Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @rockwellw, looking forward to seeing this merged! There are a couple of linting errors which are causing the CI builds to fail (https://travis-ci.org/dask/dask/jobs/640234711#L1418 and https://travis-ci.org/dask/dask/jobs/640234711#L1441). Running `flake8` and `black` locally will resolve the linting errors (optionally, you can also install our pre-commit hooks to have these linting commands automatically run every time you make a new commit)","2020-01-22T01:42:40Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-04T21:23:43Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-02-05T19:29:37Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-12-13T21:03:51Z",false,"COMMENTED"
"jsignell","MEMBER","","2019-12-16T14:30:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Just a couple of nitpicks","2019-12-11T22:39:47Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-10T16:24:33Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-12-09T14:46:53Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-12-09T15:27:22Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-10T14:40:21Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-12-10T15:07:30Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-10T18:02:18Z",false,"APPROVED"
"zacharylawrence","NONE","","2019-12-07T18:18:05Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-10T17:07:06Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks @rjzamora !

I've added some comments below (although please don't handle them tonight).","2019-12-05T05:22:18Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-05T12:19:09Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-05T12:22:25Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-12-05T15:47:57Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-12-05T16:11:41Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-12-05T16:12:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-12-05T16:13:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-12-05T16:15:32Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-12-05T16:16:46Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-05T16:22:22Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-05T16:24:18Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-12-05T16:26:15Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-05T16:27:55Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-12-05T16:27:55Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-12-05T17:29:20Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-05T17:52:13Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-04T20:23:03Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-12-03T01:25:17Z",false,"APPROVED"
"rjzamora","MEMBER","Thanks @mdwint! This looks good.

My only suggestion is to add a bit more to the documentation (as you already suggested).  Adding a small blurb about the filter-definition convention will make the code a bit easier to read/maintain.","2019-12-08T15:59:11Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-12-09T15:29:16Z",false,"COMMENTED"
"mdwint","CONTRIBUTOR","","2019-12-10T08:30:20Z",false,"COMMENTED"
"mdwint","CONTRIBUTOR","","2019-12-10T08:37:21Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-12-10T14:38:36Z",false,"APPROVED"
"rjzamora","MEMBER","","2019-12-10T14:42:54Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-12-10T14:44:04Z",false,"COMMENTED"
"rjzamora","MEMBER","Thanks again @mdwint -  I like the new filters documentation.  I am now realizing that this should work for both fastparquet and pyarrow, but we are only testing pyarrow.  Would you mind adding coverage for fastparquet as well?","2019-12-10T14:54:36Z",false,"CHANGES_REQUESTED"
"rjzamora","MEMBER","","2019-12-10T15:18:19Z",false,"COMMENTED"
"TomAugspurger","MEMBER","This looks nice. Will give @martindurant a few hours in case he wants to look, but otherwise merging later today.","2019-12-11T19:21:11Z",false,"APPROVED"
"TomAugspurger","MEMBER","Thanks @sephib, sorry for the delay.

Is your intent to implement `.str.cat` with a `DataFrame` for other? If so, then we'll need to update a few things.","2019-12-09T22:25:50Z",false,"COMMENTED"
"sephib","CONTRIBUTOR","","2019-12-10T08:10:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-10T14:58:12Z",false,"COMMENTED"
"sephib","CONTRIBUTOR","","2019-12-12T09:25:03Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-12T15:44:59Z",false,"COMMENTED"
"sephib","CONTRIBUTOR","","2019-12-14T17:09:13Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-14T22:30:10Z",false,"COMMENTED"
"sephib","CONTRIBUTOR","","2019-12-15T11:03:00Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","This looks like a really useful change. Intersphinx is a nice addition to the documentation.

I'm a little confused though as the title and description do not seem to match the changes here 🤔.","2019-12-02T09:51:51Z",false,"COMMENTED"
"sephib","CONTRIBUTOR","","2019-12-02T13:25:55Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2019-12-02T13:26:54Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","","2019-12-02T13:28:10Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-03T17:24:03Z",false,"COMMENTED"
"eriknw","MEMBER","","2019-12-03T17:59:05Z",false,"COMMENTED"
"jcrist","MEMBER","Erik and I talked this through IRL, and I'm quite happy with these changes. The new ordering is both better for these example problems, and faster in most cases (sometimes significantly). I have one comment on clarifying a docstring, but otherwise this LGTM.","2019-12-17T17:56:31Z",false,"COMMENTED"
"eriknw","MEMBER","","2019-12-17T22:23:42Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-01-09T14:57:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @raybellwaves! ","2019-11-26T00:35:35Z",false,"APPROVED"
"mikedeltalima","NONE","","2019-11-24T18:34:19Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks for working on this. A few comments.","2019-11-25T12:30:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-25T15:35:16Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-11-25T15:43:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-25T15:49:17Z",false,"COMMENTED"
"mikedeltalima","NONE","","2019-11-25T16:47:42Z",false,"COMMENTED"
"mikedeltalima","NONE","","2019-11-25T16:49:13Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-11-25T18:12:41Z",false,"COMMENTED"
"mikedeltalima","NONE","","2019-11-25T18:21:04Z",false,"COMMENTED"
"mikedeltalima","NONE","","2019-12-02T18:36:19Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-04T01:00:16Z",false,"COMMENTED"
"mikedeltalima","NONE","","2019-12-04T01:33:04Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-04T12:04:10Z",false,"COMMENTED"
"mikedeltalima","NONE","","2019-12-05T04:23:16Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-05T22:36:25Z",false,"COMMENTED"
"mikedeltalima","NONE","","2019-12-18T22:55:13Z",false,"COMMENTED"
"mikedeltalima","NONE","","2019-12-30T23:03:35Z",false,"COMMENTED"
"mrocklin","MEMBER","Some comments below.  I think that we need to be more conservative about when we issue warnings.  We can't issue warnings for common workflows that sometimes the right thing to do.","2019-12-31T16:48:10Z",false,"COMMENTED"
"mikedeltalima","NONE","","2019-12-31T17:12:03Z",false,"COMMENTED"
"mikedeltalima","NONE","","2019-12-31T17:28:58Z",false,"COMMENTED"
"mikedeltalima","NONE","","2019-12-31T17:33:17Z",false,"COMMENTED"
"TomAugspurger","MEMBER","What's the current state here? It seems like there's a merge conflict and a few unaddressed comments like https://github.com/dask/dask/pull/5631#discussion_r362246365.

@mikedeltalima are you still interested in working on this?","2020-03-09T20:33:02Z",false,"COMMENTED"
"TomAugspurger","MEMBER","LGTM, aside from a doc issue.

Are we OK with leaving testing the specific issue of Array[cupy] -> DataFrame[cudf] to the cudf test suite?","2019-11-25T22:16:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-25T22:26:41Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-11-25T22:49:34Z",false,"COMMENTED"
"quasiben","MEMBER","","2020-06-01T19:33:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-10-09T16:55:04Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-10-09T16:55:51Z",false,"COMMENTED"
"pentschev","MEMBER","","2020-10-09T18:52:37Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-10-09T19:28:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-23T00:30:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @rjzamora! ","2019-11-23T04:14:16Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks! Did you try this out locally? Things seem OK?","2019-11-20T16:13:14Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-11-20T18:09:55Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-20T18:10:55Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-20T18:11:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-11-20T18:24:21Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-11-20T19:32:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-20T20:33:26Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-12-03T16:00:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-20T15:28:46Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @TomAugspurger ","2019-11-20T17:49:54Z",false,"APPROVED"
"TomAugspurger","MEMBER","Thanks @mgsnuno, the changes look reasonable.

@rjzamora do you have a chance to look through this as well?","2019-11-21T14:01:12Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-11-21T15:11:36Z",false,"APPROVED"
"mrocklin","MEMBER","Thanks for working on this.  If possible, I'd like to encourage you to push this even further into core.  Notes below.","2019-11-20T06:16:06Z",false,"COMMENTED"
"mrocklin","MEMBER","I'm glad to hear it.  More small comments!","2019-11-20T18:35:51Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-11-20T20:11:37Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-11-20T20:11:49Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-11-20T20:17:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-20T20:23:04Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-11-21T02:38:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","LGTM (I pushed a small commit to update the `rechunk` docstring), thanks @mrocklin! ","2019-11-20T01:16:49Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-11-15T19:58:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-15T19:59:28Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-15T20:00:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-15T20:04:56Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-11-15T20:10:52Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-11-15T20:17:27Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-11-15T21:20:23Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-11-15T21:36:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-16T04:53:01Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Feel free to merge on green","2019-11-13T19:26:26Z",false,"APPROVED"
"jrbourbeau","MEMBER","> are we OK with adding a ""Sponsor"" button to the repo?

+1 from me","2019-11-13T19:04:12Z",false,"APPROVED"
"jrbourbeau","MEMBER","Awesome, thanks for the update here (and all your recent work on `s3fs`, `gcsfs`, and `fsspec`) @TomAugspurger! 

Should we also update the CI conda environment files?","2019-11-13T17:46:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @TomAugspurger, merging","2019-11-13T19:11:17Z",false,"APPROVED"
"jakirkham","MEMBER","","2019-11-13T23:50:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-11-13T23:50:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-11-14T00:34:31Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-11-14T01:17:58Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-11-14T03:28:29Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-11-15T05:48:38Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-11-13T17:40:43Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @mrocklin, this is a nice addition! ","2019-11-12T21:25:16Z",false,"APPROVED"
"rjzamora","MEMBER","","2019-11-12T00:45:46Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-12T15:38:35Z",false,"COMMENTED"
"TomAugspurger","MEMBER","The implementation looks good, thanks. Just one requested change on the test.","2019-11-12T18:42:34Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-11-12T21:14:19Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-11-12T21:15:47Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Seems reasonable. Are there other places where we automatically rechunk?

Just to confirm, if our auto rechunking results in many more chunks, the user would get the usual warning, right? That seems like the best behavior.

A note in the docstring that this rechunks would be nice I think. If you use `derived_from` instead of `wraps` I think it's included automatically.","2019-11-11T22:26:13Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-11-11T22:49:13Z",false,"APPROVED"
"mrocklin","MEMBER","Thanks @bouweandela !  In general this seems good to me and I would be happy to merge.  I made a couple of minor comments below, but they are small.

cc @jakirkham in case he is interested in this.  No pressure though.","2019-11-09T23:50:49Z",false,"COMMENTED"
"bouweandela","CONTRIBUTOR","","2019-11-10T20:48:06Z",false,"COMMENTED"
"bouweandela","CONTRIBUTOR","","2019-11-10T20:49:54Z",false,"COMMENTED"
"bouweandela","CONTRIBUTOR","","2019-11-10T20:50:58Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-11-07T15:54:19Z",false,"APPROVED"
"TomAugspurger","MEMBER","Thanks, a couple comments on the implementation.

We would also need tests.","2019-11-04T21:54:08Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Haven't looked closely, but I think you can do something like a

```
reduce(operator.add, self._series.map_partitions(str_cat, ...).to_delayed()
```","2019-11-13T19:01:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-02T16:13:11Z",false,"COMMENTED"
"petioptrv","CONTRIBUTOR","","2019-11-03T21:43:30Z",false,"COMMENTED"
"petioptrv","CONTRIBUTOR","","2019-11-03T21:44:18Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-04T16:44:01Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-11-04T19:31:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-05T18:06:16Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-01T17:35:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-11-01T21:49:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-01T23:50:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR @normanb. Would it be possible to only skip the `shape` check if we're using global order?

cc @ihnorton (who did most of the existing TileDB work) for any thoughts on these changes","2019-10-30T22:13:12Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-10-29T14:58:58Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-10-25T23:59:59Z",false,"APPROVED"
"jrbourbeau","MEMBER","LGTM, thanks @TomAugspurger! ","2019-10-25T01:21:42Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-10-23T20:05:28Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-10-25T20:37:20Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-10-23T19:31:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-10-23T19:37:17Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-10-23T20:04:08Z",false,"APPROVED"
"TomAugspurger","MEMBER","cc @magonser if you have a chance to look at this.

> I wasn't sure how to test for this, since it is a purely internal optimization.

We could look at the number of tasks. But I'm not sure how we could write a robust test. I think we're fine without tests here.","2019-10-22T20:30:39Z",false,"COMMENTED"
"rabernat","CONTRIBUTOR","","2019-10-22T20:32:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-10-22T23:11:51Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-10-23T13:57:32Z",false,"APPROVED"
"TomAugspurger","MEMBER","A couple minor comments. Looks good though.","2019-10-22T15:54:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-10-22T16:00:53Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-10-22T16:27:17Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-10-23T13:41:14Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @mrocklin!","2019-10-20T15:44:43Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2019-10-24T11:16:56Z",false,"COMMENTED"
"mrocklin","MEMBER","Thank you for the changes here @crusaderky .  In general I'm in favor of the changes in the main code, but would prefer that we roll back some of the changes in the tests and make some edits to the proposed documentation.  I've added detailed notes below. 

I haven't yet reviewed the changes to CI.  If we want to include these then review will probably take a little bit longer, or we can try to find someone else who is more familiar there.

Thanks again for your work, and for your patience as maintainers try to deal with the backlog here.","2019-11-05T17:56:41Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2019-11-05T23:00:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-05T23:04:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-05T23:06:37Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2019-11-06T15:51:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-06T16:52:13Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2019-11-06T16:52:28Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2019-11-06T17:07:05Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-06T17:14:23Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2019-11-06T17:35:25Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2019-11-06T17:43:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-11-07T15:18:29Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2019-11-07T16:13:19Z",false,"COMMENTED"
"TomAugspurger","MEMBER","This seems sensible at a glance. Would welcome your feedback @martindurant.

@rjzamora is https://issues.apache.org/jira/browse/ARROW-2801 the relevant JIRA for implementing `split_row_groups` in pyarrow? Could you comment on the sections of code that can be removed once it's implemented?","2019-10-23T20:47:37Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-10-24T16:02:48Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks @rjzamora. Nice to have this working in both engines to get those xfails removed.","2019-10-24T20:16:11Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @darindf!","2019-10-18T19:15:32Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thank you for the updates @AlbertDeFusco! I've attached a few comments","2019-10-31T21:50:44Z",false,"COMMENTED"
"AlbertDeFusco","CONTRIBUTOR","","2019-11-01T18:24:26Z",false,"COMMENTED"
"AlbertDeFusco","CONTRIBUTOR","","2019-11-01T18:24:45Z",false,"COMMENTED"
"AlbertDeFusco","CONTRIBUTOR","","2019-11-01T18:25:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for updating @mrocklin! ","2019-10-15T16:52:59Z",false,"APPROVED"
"mrocklin","MEMBER","Thanks @quasiben !","2019-10-14T14:50:07Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Merging once CI passes.","2019-10-14T16:21:03Z",false,"APPROVED"
"TomAugspurger","MEMBER","Whoops, forgot to remove these.","2019-10-10T19:10:20Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-10-09T15:35:05Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-10-08T19:50:16Z",false,"APPROVED"
"TomAugspurger","MEMBER","The travis issue should be resolved on your next push.","2019-10-10T13:35:30Z",false,"COMMENTED"
"bartbroere","CONTRIBUTOR","","2019-10-14T15:05:54Z",false,"COMMENTED"
"bartbroere","CONTRIBUTOR","","2019-10-14T15:07:45Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-10-07T18:28:40Z",false,"APPROVED"
"TomAugspurger","MEMBER","This document needs to be included in a toctree. Can you add it to `index.rst`?","2019-10-10T13:41:18Z",false,"COMMENTED"
"javad94","CONTRIBUTOR","","2019-10-10T20:42:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-10-04T10:27:43Z",false,"COMMENTED"
"bluecoconut","CONTRIBUTOR","","2019-10-04T15:41:32Z",false,"COMMENTED"
"bluecoconut","CONTRIBUTOR","","2019-10-04T17:36:22Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Sorry for the delay @pmk21, GitHub doesn't always send notifications when you force push to a branch. In Dask, we prefer just additional commits, which we squash down at the end.","2019-10-14T14:53:30Z",false,"COMMENTED"
"mrocklin","MEMBER","Looks good!

Some minor comments!","2019-10-02T22:33:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-10-03T14:54:31Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-10-07T11:37:20Z",false,"COMMENTED"
"jcrist","MEMBER","Content-wise this looks good. I might de-nest things one level and use headings instead, not sure how the formatting would look.","2019-10-01T16:34:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-10-01T21:55:49Z",false,"COMMENTED"
"jacobtomlinson","MEMBER","Nice to see this","2019-10-01T14:35:22Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-10-01T14:39:27Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-09-30T13:30:07Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks @CJ-Wright .  I've made some small comments below.","2019-09-26T17:41:37Z",false,"COMMENTED"
"CJ-Wright","CONTRIBUTOR","","2019-09-26T17:50:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-09-26T19:36:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Great stuff @mrocklin! Thanks for working on this","2019-09-24T19:17:41Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @vertexclique! ","2019-09-24T15:27:41Z",false,"APPROVED"
"arpit1997","CONTRIBUTOR","","2019-09-23T21:09:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","+1 from me, these are really nice additions to the docs @mrocklin

While we're bikeshedding, I pushed some minor styling changes to center and add a larger margin to the bottom of the `iframe`s

Before:
![Screen Shot 2019-09-23 at 8 34 04 PM](https://user-images.githubusercontent.com/11656932/65474641-4185b400-de42-11e9-878e-3549bed03dd6.png)

After:
![Screen Shot 2019-09-23 at 8 35 32 PM](https://user-images.githubusercontent.com/11656932/65474654-49455880-de42-11e9-9416-ef33d67d7840.png)

","2019-09-24T01:43:01Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-11-20T12:55:54Z",false,"COMMENTED"
"OliverHofkens","CONTRIBUTOR","","2019-11-21T08:52:52Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-11-21T17:51:02Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @mrocklin! ","2019-09-21T03:40:20Z",false,"APPROVED"
"jorisvandenbossche","MEMBER","Some suggestions for more tests (from looking through the issue):

- Currently by doing `ddf2.name.where(ddf2.timestamp == ""2000-01-01"", None)`, which partition had all nulls was random, which made it harder to debug (there were two failures, but ran in one or the other depending on how the data was generated). Suggestion would be to more hardcode this, and explicitly test both at the same time (once all nulls in first partition, once in second partition) 
  Also the actual bug (the part which was not solved by adding `write_index=False` to the test) will only happen 1 in 2 times with the current test.
- The issue came up with a string column (because there we changed from `''` to `None`), but it might be worth to also have a similar test for a numerical column.

But this are certainly more ""nice to have"" that will make the test significantly more complex, so just a suggestion (from someone is not writing the test ;-))","2019-09-21T08:11:57Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-09-24T19:21:48Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Merging. Thanks @TomAugspurger and @mrocklin ","2019-09-19T22:53:20Z",false,"APPROVED"
"arpit1997","CONTRIBUTOR","","2019-09-15T15:54:51Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-09-15T17:04:16Z",false,"COMMENTED"
"arpit1997","CONTRIBUTOR","","2019-09-15T17:39:19Z",false,"COMMENTED"
"WesRoach","CONTRIBUTOR","","2019-09-16T14:29:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks again @WesRoach! 

For future reference, for documentation updates like this you should feel free to include `[skip ci]` in the git commit message to avoid launching CI builds. Just an FYI about this little trick : )","2019-09-13T16:45:23Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @WesRoach!","2019-09-13T16:37:50Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-09-13T16:04:29Z",false,"APPROVED"
"jcrist","MEMBER","","2019-09-12T20:19:20Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-09-12T20:20:52Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-09-12T20:36:42Z",false,"COMMENTED"
"mrocklin","MEMBER","Ah, I see that I had this sitting in an unsubmitted review.","2019-09-12T20:50:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for working on this @jcrist, the changes here LGTM. Do we want to hold off on merging until after the release later today to let this simmer in `master` for a little bit?","2019-09-13T16:13:01Z",false,"APPROVED"
"TomAugspurger","MEMBER","This looks generally nice. Will give @martindurant a chance to look.","2019-09-19T22:18:10Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-09-25T13:48:25Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-09-25T13:51:46Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-09-25T15:51:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-09-25T15:52:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-09-10T14:39:43Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-09-10T15:25:58Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-09-10T14:15:52Z",false,"APPROVED"
"quasiben","MEMBER","This looks really great @arpit1997 !  I left a few comments -- nothing too big","2019-09-09T19:30:15Z",false,"COMMENTED"
"arpit1997","CONTRIBUTOR","","2019-09-09T20:34:05Z",false,"COMMENTED"
"arpit1997","CONTRIBUTOR","","2019-09-09T20:36:26Z",false,"COMMENTED"
"arpit1997","CONTRIBUTOR","","2019-09-09T20:38:03Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-09-09T20:46:37Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-09-11T18:56:53Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-09-08T19:17:29Z",false,"COMMENTED"
"stsievert","MEMBER","","2019-09-09T02:21:22Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-09-09T11:17:13Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-09-10T11:32:59Z",false,"COMMENTED"
"stsievert","MEMBER","","2019-09-10T14:18:04Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-09-10T16:13:15Z",false,"COMMENTED"
"stsievert","MEMBER","","2019-09-10T16:41:15Z",false,"COMMENTED"
"stsievert","MEMBER","","2019-09-10T16:42:14Z",false,"COMMENTED"
"stsievert","MEMBER","","2019-09-10T16:42:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Just wanted to note that the CI failures here are from the new `h5py` release and not related to changes in this PR. I'm working on a fix for the failures now. ","2019-09-10T18:33:42Z",false,"COMMENTED"
"TomAugspurger","MEMBER","I removed the changelog changes. We typically do that at release time.","2019-09-12T18:06:42Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for adding this @mrocklin! I pushed some minor edits (hope you don't mind)","2019-09-06T20:04:09Z",false,"COMMENTED"
"stsievert","MEMBER","","2019-09-23T02:13:16Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-09-26T13:51:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-09-26T13:53:48Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-09-26T13:55:35Z",false,"COMMENTED"
"stsievert","MEMBER","","2019-10-13T02:55:21Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-10-14T13:21:18Z",false,"COMMENTED"
"stsievert","MEMBER","","2019-10-14T15:47:16Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-10-14T20:14:50Z",false,"COMMENTED"
"stsievert","MEMBER","","2019-10-15T18:45:09Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Restarted the failed worker. Should be good to merge when CI is green.","2019-10-16T21:52:54Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-08-30T15:22:17Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-08-30T15:39:54Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-08-30T15:53:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR @estebanag! This generally look good, but there are a couple of linting issues that are causing the CI to fail. Running `flake8` and `black` locally should fix these issues (https://docs.dask.org/en/latest/develop.html#code-formatting)","2019-08-30T15:55:53Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks @OliverHofkens !  

I left some small comments, but I suspect that they will be straightforward to address.

cc @TomAugspurger if you're interested, but this seems low risk if you're busy (which you seem to be)","2019-08-30T15:58:43Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-30T18:21:14Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-08-30T18:53:24Z",false,"COMMENTED"
"OliverHofkens","CONTRIBUTOR","","2019-09-02T10:28:32Z",false,"COMMENTED"
"OliverHofkens","CONTRIBUTOR","","2019-09-02T10:29:03Z",false,"COMMENTED"
"OliverHofkens","CONTRIBUTOR","","2019-09-02T10:31:52Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-29T20:11:05Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @DomHudson! ","2019-08-29T15:52:29Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @mrocklin, this is a really nice addition and generally LGTM. I left a couple of small comments. ","2019-08-29T14:04:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-08-29T03:54:18Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-08-29T03:54:29Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-08-29T03:55:17Z",false,"COMMENTED"
"gjoseph92","COLLABORATOR","","2019-08-29T16:03:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR @gjoseph92 and @jcrist @mrocklin for reviewing! ","2020-04-30T01:50:34Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-28T20:22:58Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-29T14:01:35Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-29T14:23:51Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-29T17:16:47Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-29T17:16:52Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-08-28T14:09:07Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Can you add a test that would fail without this? I can't think of one offhand, but can spend some time thinking about it if needed.","2019-08-27T19:25:30Z",false,"COMMENTED"
"arpit1997","CONTRIBUTOR","","2019-08-27T19:55:11Z",false,"COMMENTED"
"mrocklin","MEMBER","Thank you for this PR @OliverHofkens !  In general it looks great.  I'll admit that I don't know a ton about Pandas' groupby-apply, and so haven't yet gone in depth into the algorithm, but what I see there looks clean, and the test suite that you've provided gives a lot of confidence.  I've left a few small comments below that are mostly stylistic.  

@TomAugspurger , if you have a chance to skim through things here and give a Pandas-expert opinion, that would be welcome.","2019-08-28T01:11:15Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-28T21:22:50Z",false,"COMMENTED"
"OliverHofkens","CONTRIBUTOR","","2019-08-29T07:06:24Z",false,"COMMENTED"
"OliverHofkens","CONTRIBUTOR","","2019-08-29T07:20:14Z",false,"COMMENTED"
"OliverHofkens","CONTRIBUTOR","","2019-08-29T08:04:57Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-09-01T16:15:28Z",false,"COMMENTED"
"OliverHofkens","CONTRIBUTOR","","2019-09-02T06:47:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-08-26T21:44:08Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-08-26T21:46:27Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-27T02:39:00Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-27T02:39:51Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks for continuing to push on this @rjzamora .  Some comments/questions!","2019-08-28T01:18:46Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-28T01:42:07Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-28T01:43:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-08-28T01:43:14Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-28T01:44:30Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-28T01:56:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-09-18T15:39:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-09-18T15:42:26Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-09-18T16:02:28Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-09-18T16:10:17Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-09-18T20:15:56Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-09-18T20:21:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-09-18T20:26:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks again for working on this @stsievert, looking forward to seeing this PR merged. Overall, these additions looks good! I've attached a few review comments.

I think the main thing left to do is to determine a name for the new method (e.g. `compute_metadata` vs. `compute_chunksizes`) and decide if we want to add a new `compute_metadata` (or some other name) parameter to the `Array.persist` method. @mrocklin [previously](https://github.com/dask/dask/issues/3293#issuecomment-475276554) you were hesitant to add parameters to `persist` that weren't general to all dask collections, is this still the case?

Also, @stsievert once we finalize a method name could you it to the array API docs?","2019-08-27T02:19:32Z",false,"COMMENTED"
"stsievert","MEMBER","","2019-08-27T03:52:11Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks @stsievert !  I left a few tiny comments, but hopefully everything is straightforward.","2019-08-30T15:51:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-09-01T15:51:24Z",false,"COMMENTED"
"stsievert","MEMBER","","2019-09-02T04:05:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-09-02T14:52:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-09-02T14:54:04Z",false,"COMMENTED"
"stsievert","MEMBER","","2019-09-02T16:31:17Z",false,"COMMENTED"
"stsievert","MEMBER","","2019-09-03T05:00:07Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-09-04T18:48:26Z",false,"COMMENTED"
"stsievert","MEMBER","","2019-09-04T19:11:10Z",false,"COMMENTED"
"stsievert","MEMBER","","2019-09-04T19:12:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Looks good overall. Can you add a note to https://docs.dask.org/en/latest/array-chunks.html#unknown-chunks and an api entry in https://docs.dask.org/en/latest/array-api.html.

If you're interested, it'd be nice to be more consistent on the error message. Some of ""Solution in"", others have ""A solution in"". Some have colons.","2019-09-05T17:33:36Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-09-06T13:54:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-09-06T14:07:49Z",false,"COMMENTED"
"stsievert","MEMBER","","2019-09-06T21:35:03Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-09-07T15:34:53Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for noticing and fixing this @eugeneh101! ","2019-08-22T13:28:42Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-08-26T13:28:25Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-26T13:51:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-08-28T01:22:20Z",false,"COMMENTED"
"hongzmsft","CONTRIBUTOR","","2019-08-29T18:28:54Z",false,"COMMENTED"
"hongzmsft","CONTRIBUTOR","","2019-08-29T23:30:13Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks @hongzmsft !  

Your implementation looks good to me.

@jrbourbeau @jcrist any thoughts on where we want this in the API?  Currently this is in a `df.to_single_csv` method.  I'll also propose an alternative of `df.to_csv(..., single_file=True)` (although this might make keyword argument handling more complex).

@hongzmsft if people here do decide to go with `to_single_csv`, then we will ask you to add this method to `docs/source/dataframe-api.rst` as well.","2019-08-30T16:06:48Z",false,"COMMENTED"
"mrocklin","MEMBER","Thank you for the update @hongzmsft .

I've left some additional comments, mostly about style.  I also have a larger question about how/whether this works with cloud object stores below:","2019-09-02T15:55:40Z",false,"COMMENTED"
"hongzmsft","CONTRIBUTOR","","2019-09-02T20:03:33Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks, this looks quite close.

I'm a bit concerned about the interaction with the `header_first_partition_only` keyword. Right now that's `False`, but `single_file` implies that it's True.

Can you change the default for `header_first_partition_only` to None, and document that its default depends on the value of `single_file`?

If `single_file` is True, then `header_first_partition_only` must be None (or maybe True?). Otherwise an exception is raised.

If `single_file` is False, then `header_first_partition_only` is False by default, but can be True as well.","2019-09-04T11:12:01Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-09-04T18:21:35Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-09-05T02:40:31Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-09-05T11:16:01Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-08-20T16:09:40Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for adding this @TomAugspurger! 

The CI failure looks to be from a bug in NumPy which was fixed in version `1.14.1` (ref https://github.com/numpy/numpy/pull/10563). It's probably safe to mark `test_union1d` as `xfail` when input arrays have more than one dimension and `numpy<1.14.1`","2019-08-19T15:34:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","This looks good and tests are passing! I left a couple of small comments. Also, one last nitpick, could you add `shape` and `union1d` to the array API docs? (I'm also happy to do this if you'd prefer)","2019-08-19T21:10:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-08-20T17:23:56Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-08-16T22:51:16Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-08-16T23:06:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-08-16T23:12:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-08-16T23:19:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-08-16T23:32:29Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-08-15T13:48:59Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-08-19T11:58:10Z",false,"COMMENTED"
"OliverHofkens","CONTRIBUTOR","","2019-08-19T12:06:56Z",false,"COMMENTED"
"OliverHofkens","CONTRIBUTOR","","2019-08-21T07:18:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Glad to hear it's working now. @jcrist do you have any concerns with the changes to `_aca_agg`?","2019-08-21T13:51:01Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks!","2019-08-14T19:43:05Z",false,"APPROVED"
"jakirkham","MEMBER","","2019-08-15T21:35:25Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-08-13T14:48:29Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-08-13T14:51:06Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-13T15:03:23Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-08-13T15:05:40Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-13T15:10:30Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-08T11:07:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-08-08T16:00:04Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-08-08T16:02:57Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-08T18:24:34Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2019-08-07T18:23:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Great idea to add a TOC which links to the array, dataframe, etc. API docs ","2019-08-07T18:19:38Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-08-07T17:58:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-08-07T18:13:50Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-08-07T17:02:18Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-08-07T17:02:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-08-07T17:24:05Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2019-08-07T17:04:20Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-08-07T16:41:16Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @mrocklin, LGTM. Left one small question","2019-08-06T22:46:26Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-08-06T22:13:08Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-07T00:36:16Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-08-07T16:14:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for handling this @jcrist! Left a couple of small comments","2019-08-05T23:49:59Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-08-06T09:23:18Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-08-06T09:32:22Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-08-06T09:33:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-08-06T15:01:15Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-08-06T15:07:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-08-06T15:08:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-08-06T15:15:37Z",false,"COMMENTED"
"mrocklin","MEMBER","The support of `__` looks good to me.  The rewrite of writing and unrolling config I understand less, but it all seems reasonable.  I'm +1","2019-08-06T16:20:20Z",false,"APPROVED"
"jcrist","MEMBER","","2019-08-06T16:22:38Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-08-06T16:40:17Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-06T11:46:41Z",false,"COMMENTED"
"henriqueribeiro","CONTRIBUTOR","","2019-08-12T20:26:52Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-12T20:29:35Z",false,"COMMENTED"
"henriqueribeiro","CONTRIBUTOR","","2019-08-12T20:31:50Z",false,"COMMENTED"
"mrocklin","MEMBER","I apologize for the long review @henriqueribeiro .  I've added a bunch more small comments (sorry to keep this dragging on).  I'll be responsive for the next few days if you want to quickly work to get this in.","2019-08-30T17:54:34Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-10-28T17:54:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-08-28T01:29:25Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-10-22T18:32:20Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for working on this @henriqueribeiro, generally the changes here look good!

Could you update the `NotImplementedError` message to include `columns`. Perhaps something like `""Drop currently only works for axis=1 or when columns is not None""`.

Looks like `black` is taking issue with one file (ref https://travis-ci.org/dask/dask/jobs/567840498#L1412). Running `black dask` locally will fix the CI issues. Also, while not required, you may consider [setting up `pre-commit` hooks](https://docs.dask.org/en/latest/develop.html#code-formatting) to automatically run `flake8` and `black` in the future. ","2019-08-05T13:22:14Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Great work @jrbourbeau.","2019-08-13T20:44:11Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2019-08-13T21:57:03Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-08-02T21:59:26Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-08-03T19:12:14Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-08-03T22:09:40Z",false,"COMMENTED"
"mmccarty","MEMBER","","2019-08-09T01:07:56Z",false,"COMMENTED"
"mmccarty","MEMBER","","2019-08-09T01:13:37Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-08-09T14:07:31Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-09T14:37:03Z",false,"COMMENTED"
"mmccarty","MEMBER","","2019-08-09T17:36:05Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-08-09T17:46:23Z",false,"COMMENTED"
"mmccarty","MEMBER","","2019-08-09T17:54:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-08-09T17:56:35Z",false,"COMMENTED"
"mmccarty","MEMBER","","2019-08-09T17:58:34Z",false,"COMMENTED"
"TomAugspurger","MEMBER","This looks good. Adding anything else @mrocklin?","2019-08-07T21:51:43Z",false,"APPROVED"
"mrocklin","MEMBER","Thanks @rjzamora  and sorry for the late review (I haven't been watching the Dask issue tracker as actively as usual the last few weeks).

In general I'm happy to see the generalization of the `meta=pd.Series([0])` call, though I'm curious if we can find a way to avoid explicit user input.

The typechecks around `divisions` concern me.  There are a lot of these and it's not clear in this codebase why they're there.  Do you have thoughts on how we can be more consistent here?

In a couple of places it looks like you're working around small pieces of API that doesn't exist in cudf.  In general I would strongly prefer that we fix these upstream rather than work around them in dask dataframe, especially if they're easy to fix upstream.","2019-08-06T17:15:52Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-06T17:22:42Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-08-06T17:25:10Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-06T17:25:25Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-06T17:28:20Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-06T18:05:39Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-06T19:12:24Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-06T21:05:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-08-06T21:09:15Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-07T15:46:00Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-07T16:45:48Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Looks nice overall. A few comments about dtypes & duplicates that may be broken on master.","2019-08-08T13:29:39Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-08T15:52:01Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-08T15:53:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-08T18:11:51Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-08T18:13:21Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-08T18:20:36Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-08T19:17:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-08T19:21:05Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Sorry for the delay. A few comments / questions.","2019-08-12T14:51:24Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-12T15:12:37Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-12T15:13:19Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-12T15:28:17Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-12T15:29:03Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-12T16:08:14Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-08-12T18:24:48Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-07-31T21:06:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-31T22:02:26Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-07-31T18:41:34Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-07-31T20:03:44Z",false,"COMMENTED"
"kkraus14","MEMBER","","2019-08-01T03:17:05Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-08-01T15:53:54Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-08-02T21:34:57Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-03T02:50:57Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-08-03T13:29:40Z",false,"COMMENTED"
"TomAugspurger","MEMBER","A couple small comments.

Can you add basic tests for that our dispatch is working correctly for pandas objects.


```python
@pytest.mark.parametrize('obj', [pd.Index(...), pd.Series(...), pd.DataFrame(...)])
def test_hash_object_dispatch(obj):
    result = dd.util.hash_object_dispatch(obj)
    expected = pd.util.hash_pandas_object(obj)
    tm.assert_equal(result, expected)
```","2019-08-05T15:18:44Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-08-06T01:09:31Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-08-06T01:12:33Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-06T02:13:26Z",false,"APPROVED"
"jcrist","MEMBER","LGTM","2019-07-30T15:57:37Z",false,"APPROVED"
"jrbourbeau","MEMBER","Just as a heads up, NumPy 1.17.0 is currently on PyPI but not yet on conda-forge ","2019-07-30T15:00:15Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-07-30T23:00:48Z",false,"APPROVED"
"jrbourbeau","MEMBER","LGTM, thanks for taking care of this (again) @TomAugspurger! ","2019-07-30T02:54:06Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-07-29T18:11:54Z",false,"APPROVED"
"mrocklin","MEMBER","Thanks for doing this @martindurant .  It looks great to me.  I have proposed a bunch of tiny copy-editing suggestions below.","2019-07-29T16:43:06Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-07-30T13:18:21Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-07-29T15:19:08Z",false,"COMMENTED"
"dickreuter","NONE","","2019-07-27T19:02:48Z",false,"COMMENTED"
"dickreuter","NONE","","2019-07-27T19:06:14Z",false,"COMMENTED"
"dickreuter","NONE","","2019-07-27T19:13:52Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-07-25T17:00:02Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-07-25T20:06:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-07-25T13:50:57Z",false,"APPROVED"
"jcrist","MEMBER","","2019-07-26T15:31:21Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-07-29T14:54:44Z",false,"COMMENTED"
"","NONE","","2019-07-30T08:47:12Z",false,"COMMENTED"
"","NONE","","2019-07-30T08:56:21Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-01T21:39:23Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-07-25T14:34:18Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-07-25T16:10:12Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-07-25T16:12:07Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-07-29T17:08:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-07-29T19:00:30Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-07-29T19:08:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-07-29T20:11:44Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-08-05T10:11:15Z",false,"COMMENTED"
"jakirkham","MEMBER","One final question above (in the existing thread). Otherwise LGTM. Thanks for working on this @jrbourbeau!","2019-08-05T10:11:56Z",false,"APPROVED"
"jcrist","MEMBER","","2019-08-05T12:01:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-24T15:50:02Z",false,"COMMENTED"
"birdsarah","CONTRIBUTOR","","2019-07-24T16:56:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-24T17:17:29Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-07-24T17:21:12Z",false,"COMMENTED"
"birdsarah","CONTRIBUTOR","","2019-07-24T19:48:55Z",false,"COMMENTED"
"birdsarah","CONTRIBUTOR","","2019-07-24T20:26:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-24T23:31:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-24T23:32:26Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-24T23:33:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-24T23:33:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-24T23:34:56Z",false,"COMMENTED"
"birdsarah","CONTRIBUTOR","","2019-07-24T23:46:48Z",false,"COMMENTED"
"birdsarah","CONTRIBUTOR","","2019-07-24T23:47:27Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-07-29T20:13:03Z",false,"COMMENTED"
"birdsarah","CONTRIBUTOR","","2019-07-29T20:24:06Z",false,"COMMENTED"
"birdsarah","CONTRIBUTOR","","2019-07-29T20:24:22Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-07-29T20:26:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-29T20:33:28Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-07-29T20:51:09Z",false,"COMMENTED"
"birdsarah","CONTRIBUTOR","","2019-07-29T21:06:57Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-07-29T19:19:34Z",false,"APPROVED"
"jrbourbeau","MEMBER","LGTM, thanks @TomAugspurger ","2019-07-23T22:15:30Z",false,"APPROVED"
"quasiben","MEMBER","","2019-07-23T16:26:52Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2019-07-24T01:08:04Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-07-24T01:57:32Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-07-25T21:41:50Z",false,"APPROVED"
"jcrist","MEMBER","","2019-07-23T18:15:35Z",false,"COMMENTED"
"QuLogic","CONTRIBUTOR","","2019-07-23T23:17:48Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-23T14:50:30Z",false,"CHANGES_REQUESTED"
"TomAugspurger","MEMBER","","2019-07-23T15:06:09Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-07-23T16:14:30Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-07-23T16:38:45Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-07-23T16:40:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-23T17:01:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-23T17:05:10Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-07-23T19:32:17Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-07-23T21:24:28Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-07-24T00:15:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-24T00:43:40Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-07-24T14:05:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-24T15:35:32Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-07-24T21:48:18Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-24T23:28:28Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-24T23:28:37Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-08T13:37:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-08-30T18:03:30Z",false,"COMMENTED"
"kkraus14","MEMBER","","2019-08-30T18:39:25Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-30T19:12:49Z",false,"COMMENTED"
"kkraus14","MEMBER","","2019-08-30T19:36:43Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-10-31T13:56:47Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-10-31T14:29:18Z",false,"COMMENTED"
"kkraus14","MEMBER","Changes LGTM now","2019-10-31T18:38:56Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2020-05-08T20:15:33Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-05-08T22:43:47Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-05-08T22:44:14Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-05-08T22:45:07Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-05-26T20:29:01Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2020-05-26T23:31:45Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-05-27T13:27:27Z",false,"APPROVED"
"jrbourbeau","MEMBER","LGTM, thanks for working on this @martindurant

> provide that in separate PR together with general remote bytes docs update

Sounds good to me (I'll open up a separate issue for this so we don't loose track). Will merge this PR now so that `master` builds pass again on Travis ","2019-07-22T21:17:22Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-07-22T15:27:00Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-07-19T18:00:23Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-07-19T18:00:25Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2019-07-17T17:22:45Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-07-17T18:52:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","This is in, thanks for handling this @pentschev! ","2019-07-17T20:36:20Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-07-15T19:58:35Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-07-15T20:17:56Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-07-25T16:15:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-07-25T18:09:08Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-07-25T18:27:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Awesome, thanks @natalya-patrikeeva! I left a couple of minor comments, but this looks good overall","2019-07-13T22:26:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for working on this @NicolasHug! Apologies for the delayed response. 

The `RuntimeWarning: '<' not supported between instances of 'str' and 'int'` error we're seeing here seem to be because in `_var_chunk`, `x` still has integer columns:

https://github.com/dask/dask/blob/a53d45edd6b30b514e0e4dee475ae72d78d62a62/dask/dataframe/groupby.py#L285

while `n` and `x2` have string columns. 

On a related note, I suspect we should be able to support the tuples-based solution proposed in https://github.com/dask/dask/issues/3560#issuecomment-395842847 with the following changes: 

```diff
diff --git a/dask/dataframe/groupby.py b/dask/dataframe/groupby.py
index f1b03b2a..59ac4955 100644
--- a/dask/dataframe/groupby.py
+++ b/dask/dataframe/groupby.py
@@ -284,11 +284,11 @@ def _var_chunk(df, *index):
     g = _groupby_raise_unaligned(df, by=index)
     x = g.sum()

-    n = g[x.columns].count().rename(columns=lambda c: str(c) + ""-count"")
+    n = g[x.columns].count().rename(columns=lambda c: (c, ""count""))

     df[cols] = df[cols] ** 2
     g2 = _groupby_raise_unaligned(df, by=index)
-    x2 = g2.sum().rename(columns=lambda c: str(c) + ""-x2"")
+    x2 = g2.sum().rename(columns=lambda c: (c ,""x2""))

     x2.index = x.index
     return concat([x, x2, n], axis=1)
@@ -302,8 +302,8 @@ def _var_agg(g, levels, ddof):
     g = g.groupby(level=levels, sort=False).sum()
     nc = len(g.columns)
     x = g[g.columns[: nc // 3]]
-    x2 = g[g.columns[nc // 3 : 2 * nc // 3]].rename(columns=lambda c: c[:-3])
-    n = g[g.columns[-nc // 3 :]].rename(columns=lambda c: c[:-6])
+    x2 = g[g.columns[nc // 3 : 2 * nc // 3]].rename(columns=lambda c: c[0])
+    n = g[g.columns[-nc // 3 :]].rename(columns=lambda c: c[0])

     # TODO: replace with _finalize_var?
     result = x2 - x ** 2 / n
```

This approach should be a little more robust. It will, for example, avoid the column 0 vs. column '0' issue you mentioned","2019-07-19T21:58:46Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-09T18:09:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-08-09T18:19:04Z",false,"COMMENTED"
"NicolasHug","CONTRIBUTOR","","2019-08-12T12:56:31Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-12T13:25:36Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-12T13:26:23Z",false,"COMMENTED"
"NicolasHug","CONTRIBUTOR","","2019-08-12T13:32:03Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-12T13:35:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for adding this @msbrown47! This generally looks really good. I've attached a couple of minor comments","2019-07-13T19:44:07Z",false,"COMMENTED"
"beckernick","MEMBER","","2019-07-12T18:42:45Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-07-12T19:00:05Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-07-16T14:52:34Z",false,"APPROVED"
"mrocklin","MEMBER","Thanks for doing this work @codercody !

Some small comments are inline.","2019-07-09T10:39:05Z",false,"COMMENTED"
"codercody","CONTRIBUTOR","","2019-07-09T11:02:50Z",false,"COMMENTED"
"codercody","CONTRIBUTOR","","2019-07-09T11:07:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-09T11:12:07Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-07-08T12:38:16Z",false,"APPROVED"
"pentschev","MEMBER","","2019-07-06T08:02:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-06T21:10:46Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-07-08T16:57:34Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-07-08T17:13:06Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-07-09T22:50:16Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-10T02:57:11Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-07-10T21:08:31Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-10T21:44:11Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-07-10T22:25:09Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks @BlaneG !

Can I ask you for a small test for this functionality?  If you search for `def test.*iter` in dask/dataframe/tests/test_dataframe.py you should find some examples of tests for similar functionality.","2019-07-05T06:29:14Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks @BlaneG !

Looks good.  I made a small suggestion but other than that eveything looks fine.  You should be able to just press the green button to commit the suggested change.","2019-07-14T14:20:05Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-05T20:07:41Z",false,"COMMENTED"
"BlaneG","CONTRIBUTOR","","2019-08-06T00:18:29Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-08-06T16:51:52Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-07-04T06:59:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-04T07:00:07Z",false,"COMMENTED"
"bnaul","CONTRIBUTOR","","2019-07-04T16:58:11Z",false,"COMMENTED"
"bnaul","CONTRIBUTOR","","2019-07-04T16:58:53Z",false,"COMMENTED"
"bnaul","CONTRIBUTOR","","2019-07-04T17:00:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-04T19:12:47Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-04T19:13:15Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-05T09:27:48Z",false,"COMMENTED"
"bnaul","CONTRIBUTOR","","2019-07-05T16:38:25Z",false,"COMMENTED"
"bnaul","CONTRIBUTOR","","2019-07-05T16:49:22Z",false,"COMMENTED"
"bnaul","CONTRIBUTOR","","2019-07-05T17:14:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-07T21:28:46Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-07T21:29:16Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-07-08T14:56:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-08T15:27:18Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-07-08T16:46:07Z",false,"COMMENTED"
"bnaul","CONTRIBUTOR","","2019-07-08T17:23:35Z",false,"COMMENTED"
"bnaul","CONTRIBUTOR","","2019-07-08T17:24:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @seanmck! Merging","2019-07-03T23:14:33Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @davidbrochart! ","2019-07-03T15:14:28Z",false,"APPROVED"
"mrocklin","MEMBER","Hi @galipremsagar !

Thanks for taking this on.  I have a few questions about this.  They're in-lined below.","2019-07-03T17:15:44Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-07-03T17:31:52Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-07-03T17:31:53Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-07-03T17:31:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-07-03T18:09:42Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-03T18:12:17Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-07-03T18:27:07Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-07-03T18:30:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-03T18:34:17Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-07-03T18:38:35Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-07-03T23:19:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-04T09:56:13Z",false,"COMMENTED"
"galipremsagar","CONTRIBUTOR","","2019-07-04T19:35:16Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-07-19T13:39:45Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-07-19T13:43:23Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-07-19T13:46:42Z",false,"COMMENTED"
"jrbourbeau","MEMBER","I gave this a quick review and generally things look good to me, thanks for working on this @TomAugspurger. The only change that looked curious to me was removing a `is_dataframe_like` check (attached review comment). 

I saw you filed a few upstream issues related to some of the changes here (thanks for doing that!). Could you cross reference those issues here so there's a reference we can follow up on","2019-07-19T14:35:40Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-07-19T14:41:05Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-07-02T10:03:37Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-07-02T14:01:57Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-07-02T14:12:33Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks for the PR @asmith26, the test looks good.

You have a linting failure at https://travis-ci.org/dask/dask/jobs/553167158#L2074. If you run `black dask/dataframe/tests/test_dataframe.py` and commit the changes we should be good.","2019-07-02T12:03:30Z",false,"COMMENTED"
"rgommers","CONTRIBUTOR","","2019-07-02T01:37:17Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-07-02T01:52:05Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-07-02T01:53:31Z",false,"COMMENTED"
"rgommers","CONTRIBUTOR","","2019-07-02T02:20:05Z",false,"COMMENTED"
"rgommers","CONTRIBUTOR","","2019-07-02T02:39:53Z",false,"COMMENTED"
"rgommers","CONTRIBUTOR","","2019-07-02T02:40:06Z",false,"COMMENTED"
"rgommers","CONTRIBUTOR","","2019-07-02T19:24:28Z",false,"COMMENTED"
"rgommers","CONTRIBUTOR","","2019-07-02T19:26:56Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-07-02T19:36:15Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-07-02T19:37:45Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-07-02T19:46:46Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-07-02T19:55:56Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-07-02T20:05:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-02T20:09:06Z",false,"COMMENTED"
"rgommers","CONTRIBUTOR","","2019-07-02T23:28:59Z",false,"COMMENTED"
"rgommers","CONTRIBUTOR","","2019-07-02T23:31:59Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-07-03T00:37:44Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-07-03T00:40:53Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-07-03T00:43:38Z",false,"COMMENTED"
"rgommers","CONTRIBUTOR","","2019-07-03T00:44:10Z",false,"COMMENTED"
"rgommers","CONTRIBUTOR","","2019-07-03T00:47:28Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-07-03T00:57:03Z",false,"COMMENTED"
"rgommers","CONTRIBUTOR","","2019-07-03T01:02:17Z",false,"COMMENTED"
"rgommers","CONTRIBUTOR","","2019-07-03T01:11:22Z",false,"COMMENTED"
"rgommers","CONTRIBUTOR","","2019-07-03T01:16:41Z",false,"COMMENTED"
"rgommers","CONTRIBUTOR","","2019-07-03T01:17:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-03T07:02:26Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-07-03T08:17:06Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-07-03T08:17:58Z",false,"COMMENTED"
"rgommers","CONTRIBUTOR","","2019-07-03T17:59:18Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-03T20:39:45Z",false,"COMMENTED"
"rgommers","CONTRIBUTOR","","2019-07-03T20:41:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-03T20:42:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-03T20:45:22Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-07-03T21:55:59Z",false,"COMMENTED"
"rgommers","CONTRIBUTOR","","2019-07-03T23:53:24Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-07-04T06:53:40Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-07-01T20:32:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-01T20:58:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-01T21:13:05Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-01T21:41:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-02T07:45:46Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-07-02T13:18:54Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-07-02T13:22:27Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-07-02T13:24:28Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-02T17:09:57Z",false,"COMMENTED"
"TomAugspurger","MEMBER","I updated the original post with a summary. Planning to merge in a couple hours.","2019-07-02T11:46:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Overall this looks good, thanks for working on this ","2019-07-02T13:57:48Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Seems reasonable to me. I'd recommend merging if we don't hear otherwise from @mrocklin or @jrbourbeau in the next couple hours.","2019-07-19T20:02:21Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-07-19T20:52:54Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-07-19T21:23:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-07-22T04:37:22Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-07-22T07:19:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-07-22T15:24:32Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-07-22T16:36:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-07-22T18:22:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-07-22T18:23:04Z",false,"APPROVED"
"pentschev","MEMBER","","2019-07-22T18:53:03Z",false,"COMMENTED"
"TomAugspurger","MEMBER","LGTM. Merged master to fix CI. Ping on green.","2019-07-01T18:23:15Z",false,"APPROVED"
"mrocklin","MEMBER","Thanks @dlovell , in general this seems good to me.  Our tests are bit borked here at the moment.  You should also be aware of @rjzamora 's work rewriting a lot of this code in https://github.com/dask/dask/pull/4995","2019-07-01T09:38:50Z",false,"COMMENTED"
"dlovell","NONE","","2019-07-03T20:23:49Z",false,"COMMENTED"
"dlovell","NONE","","2019-07-03T20:23:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Woo, thanks for catching and fixing this @TomAugspurger

Looks like there's a remaining `pytest.raises` that should use the `match` parameter

https://github.com/dask/dask/blob/0e970f51735841b01865da0ed3473881743e016d/dask/dataframe/io/tests/test_orc.py#L64","2019-06-30T03:19:46Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-07-01T18:28:05Z",false,"APPROVED"
"TomAugspurger","MEMBER","Strange that flake8 doesn't catch this. Thanks!","2019-06-28T18:29:02Z",false,"APPROVED"
"TomAugspurger","MEMBER","Actually, one small request to preserve the name.","2019-06-28T18:30:31Z",false,"COMMENTED"
"bnaul","CONTRIBUTOR","","2019-06-28T20:10:26Z",false,"COMMENTED"
"bnaul","CONTRIBUTOR","","2019-06-28T20:10:39Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-28T20:16:07Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-06-28T11:42:23Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-06-28T12:46:02Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-28T19:06:44Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-06-28T19:16:19Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-27T16:14:09Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-06-26T01:49:13Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-06-26T15:13:57Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-06-26T19:28:59Z",false,"COMMENTED"
"martindurant","MEMBER","First pass:
looked over everything except tests and fastprquet module.","2019-06-28T16:14:48Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-06-28T18:34:14Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-06-28T19:23:06Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-06-28T19:36:43Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-06-28T19:37:28Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-06-28T19:48:57Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-06-28T21:37:28Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-06-28T21:42:56Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-06-28T21:48:32Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-06-28T21:56:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-01T09:39:32Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-07-12T16:21:47Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-07-15T17:17:13Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-07-15T17:18:34Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-07-15T18:36:56Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-07-15T18:39:24Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-07-15T18:40:29Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-07-16T15:19:12Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-07-16T15:21:33Z",false,"COMMENTED"
"mrocklin","MEMBER","Two small comments after reading through the engine spec (though these may have been my fault, who knows :) )

I'm still reading through, but nothing crazy is jumping out at me, which is very welcome indeed!  It'll be nice to see this in.","2019-07-16T19:40:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-16T19:44:50Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-07-16T19:52:53Z",false,"COMMENTED"
"mrocklin","MEMBER","A couple other small comments.  Generally this seems good to me.  

A few broader questions:

1.  @rjzamora do you have thoughts on how hard it would be to integrate a cudf engine into this same framework?
2.  Do we, eventually, want to use some of this same logic with ORC?  I imagine that if we got stats reading into the Arrow C++ ORC reader that we could get much nicer ORC support with this.","2019-07-16T19:54:05Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-16T19:55:28Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-07-16T20:03:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-16T21:06:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-17T20:22:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-07-17T20:24:47Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-07-17T20:32:13Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-07-19T14:35:58Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-24T15:10:24Z",false,"APPROVED"
"jrbourbeau","MEMBER","These additions seem reasonable, thanks @jakirkham ","2019-06-24T17:35:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the nice explanation and test @jakirkham! Do we want to test the `mode='maximum'`, `'minimum'`, and `'mean'` cases here? These appear to fail `assert da_r is da_a` locally","2019-06-24T15:21:06Z",false,"COMMENTED"
"jrbourbeau","MEMBER","LGTM, thanks for the added test! ","2019-06-24T20:28:28Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-25T02:40:47Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-24T13:09:53Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-24T13:35:05Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-24T13:36:30Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Ready to merge after the release.","2019-06-25T16:15:59Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-06-22T08:36:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-06-22T14:52:00Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-21T19:22:25Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-06-21T07:41:30Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-21T10:00:21Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-21T14:51:17Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-21T17:19:54Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-21T17:23:10Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-21T17:30:04Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Tiny question / comment I'd be curious to hear your opinion on @jakirkham.

Otherwise, I think we can merge now that 2.0 is out.","2019-06-26T15:19:36Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-28T14:21:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-06-28T17:28:57Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-28T18:38:52Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-28T19:04:15Z",false,"APPROVED"
"jrbourbeau","MEMBER","This is in, thanks @jakirkham!","2019-06-21T00:13:51Z",false,"APPROVED"
"jrbourbeau","MEMBER","This looks good to me, thanks @bouweandela! ","2019-06-19T22:20:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @TomAugspurger! This generally looks good, but I don't think we need to modify the Appveyor installation as the `%CONDA_INSTALL%` and `%PIP_INSTALL%` variables already have the `-q` option set

https://github.com/dask/dask/blob/1b810e951c67170d439acdfa2f39dd164f6bca1d/continuous_integration/appveyor/setup_conda_environment.cmd#L4-L5","2019-06-18T16:17:04Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-17T21:06:40Z",false,"APPROVED"
"pentschev","MEMBER","","2019-06-17T14:42:55Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-17T14:44:11Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-17T16:14:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-20T09:45:38Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-20T15:08:48Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-20T15:10:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-20T15:12:09Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-20T15:27:31Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-20T15:31:32Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-20T15:32:28Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-20T15:34:11Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-20T15:34:22Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-20T15:52:03Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-20T16:00:03Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-20T16:01:39Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-20T16:02:47Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-20T16:04:31Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-20T16:06:44Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-21T08:36:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-21T08:36:29Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-21T08:37:18Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-21T08:39:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-21T09:09:21Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-21T10:02:58Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-21T10:03:21Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-21T10:03:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-17T09:19:14Z",false,"COMMENTED"
"TomAugspurger","MEMBER","cc @martindurant ","2019-06-13T11:41:10Z",false,"COMMENTED"
"btw08","CONTRIBUTOR","","2019-06-13T11:54:01Z",false,"COMMENTED"
"btw08","CONTRIBUTOR","","2019-06-13T12:49:02Z",false,"COMMENTED"
"btw08","CONTRIBUTOR","","2019-06-13T13:20:06Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-13T13:25:58Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-13T13:26:23Z",false,"COMMENTED"
"btw08","CONTRIBUTOR","","2019-06-13T13:48:21Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-06-13T15:09:40Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-06-13T15:09:54Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-06-13T17:05:36Z",false,"COMMENTED"
"Chilipp","CONTRIBUTOR","","2019-06-13T17:44:21Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-06-17T14:42:17Z",false,"COMMENTED"
"Chilipp","CONTRIBUTOR","","2019-06-17T14:52:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thank you for the PR @henrypinkard! Could you please add a small test that ensures these changes fix the originally posted issue in #4920","2019-06-13T01:24:28Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-06-17T13:49:48Z",false,"CHANGES_REQUESTED"
"jrbourbeau","MEMBER","This looks good, thanks for cleaning things up @jakirkham. Happy to merge on green","2019-06-12T16:22:44Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-12T16:01:26Z",false,"COMMENTED"
"jrbourbeau","MEMBER","I'm in favor of bumping the minimum version of bokeh to 0.13.0 as @TomAugspurger suggested. Otherwise LGTM. ","2019-06-12T16:15:50Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-12T17:50:00Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-12T17:51:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-13T07:16:02Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2019-06-13T07:23:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-13T07:28:46Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2019-06-13T08:04:55Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-13T09:27:25Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2019-06-13T09:46:16Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-13T09:50:14Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-12T13:54:40Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-12T00:11:09Z",false,"APPROVED"
"jcrist","MEMBER","Overall this seems fine to me.","2019-06-11T21:03:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-11T21:29:01Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-06-11T21:30:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-06-11T22:29:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-06-11T22:43:23Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-06-12T17:57:17Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks @mcsoini, this is an excellent PR. I left a comment about possibly changing the warning formatting, but otherwise this looks good to me. If you prefer things as is, I'm happy to merge.","2019-06-11T21:11:49Z",false,"COMMENTED"
"mcsoini","CONTRIBUTOR","","2019-06-12T20:52:31Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-11T19:26:17Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-11T22:05:21Z",false,"COMMENTED"
"jrbourbeau","MEMBER","LGTM. Merging, thanks @mrocklin ","2019-06-11T15:08:39Z",false,"APPROVED"
"jakirkham","MEMBER","","2019-06-11T14:47:43Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-06-10T20:36:14Z",false,"APPROVED"
"mrocklin","MEMBER","Thanks for the fix @bolliger32 .  A couple small comments, but in general this looks good to me.","2019-06-08T01:09:01Z",false,"COMMENTED"
"bolliger32","CONTRIBUTOR","","2019-06-08T01:11:45Z",false,"COMMENTED"
"bolliger32","CONTRIBUTOR","","2019-06-08T01:16:16Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-08T03:01:48Z",false,"COMMENTED"
"bolliger32","CONTRIBUTOR","","2019-06-08T04:16:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-07T22:10:22Z",false,"COMMENTED"
"bolliger32","CONTRIBUTOR","","2019-06-07T22:20:29Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-10T22:44:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-11T13:05:12Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-11T14:03:23Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-06-05T21:13:24Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks @quasiben !  

It looks like you've also run `black` on a couple files. To aid review, can I ask you to not include the style changes here?  There are a couple reasons for this:

1.  It's hard to see what is substantive and what is a style change, making reviewing hard
2.  Style changes are going to screw with `git blame`.  I'd rather that we do this once in a mega-PR rather than file by file attached to various commits.

I'm all in favor of running black on this codebase, but that should probably be a separate effort.","2019-06-05T22:42:34Z",false,"COMMENTED"
"mrocklin","MEMBER","Some tiny comments, but in general things here look really clean to me.  ","2019-06-06T02:17:41Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-06-06T02:20:07Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-06-06T02:22:44Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-06-07T20:13:40Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-07T20:21:40Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-06-07T20:30:13Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-06-08T16:10:21Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Looks quite nice overall, thanks.

Can you also add this to the dataframe-api.rst page?","2019-06-11T03:35:51Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-06-11T13:02:42Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-06-11T13:12:44Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-06-11T13:13:18Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-06-11T13:13:50Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-11T13:15:12Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-06-11T13:20:21Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-11T13:23:33Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-06-11T14:05:23Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-06-11T15:04:29Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-06-12T00:28:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","I think this looks nice @quasiben. Thanks for working on it.","2019-06-12T03:39:50Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-06-12T13:35:28Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-05T18:19:42Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks for your work here @henriqueribeiro !

I've made a few small comments, but they're fairly minor.  I hope that we can get this in soon.","2019-06-05T14:53:13Z",false,"COMMENTED"
"Sriharsha-hatwar","CONTRIBUTOR","","2019-06-05T18:02:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-06T14:55:25Z",false,"COMMENTED"
"henriqueribeiro","CONTRIBUTOR","","2019-06-06T15:32:24Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-06T15:52:00Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-06T15:52:37Z",false,"COMMENTED"
"henriqueribeiro","CONTRIBUTOR","","2019-06-07T09:49:00Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-05T12:18:41Z",false,"COMMENTED"
"endremborza","CONTRIBUTOR","","2019-06-05T15:13:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-07T20:10:47Z",false,"COMMENTED"
"endremborza","CONTRIBUTOR","","2019-06-07T22:44:11Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-08T16:57:13Z",false,"COMMENTED"
"endremborza","CONTRIBUTOR","","2019-06-09T20:09:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks @codercody, still going through this.","2019-06-04T21:11:20Z",false,"COMMENTED"
"codercody","CONTRIBUTOR","","2019-06-04T21:47:50Z",false,"COMMENTED"
"codercody","CONTRIBUTOR","","2019-06-04T21:54:01Z",false,"COMMENTED"
"codercody","CONTRIBUTOR","","2019-06-04T22:05:10Z",false,"COMMENTED"
"codercody","CONTRIBUTOR","","2019-06-04T23:38:09Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-05T12:28:20Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-05T12:30:31Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-05T12:33:25Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-05T20:59:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-05T20:59:37Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-05T21:00:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-05T21:02:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-06T22:22:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-06T22:22:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-06T22:23:47Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-06T22:24:30Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-06T22:28:16Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-06T23:06:22Z",false,"COMMENTED"
"codercody","CONTRIBUTOR","","2019-06-07T14:47:15Z",false,"COMMENTED"
"codercody","CONTRIBUTOR","","2019-06-11T19:16:57Z",false,"COMMENTED"
"codercody","CONTRIBUTOR","","2019-06-11T19:18:01Z",false,"COMMENTED"
"codercody","CONTRIBUTOR","","2019-06-11T19:18:44Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Can you check on the CI failure: https://travis-ci.org/dask/dask/jobs/544385948#L1798

It's possible you're relying on dict ordering here, while we support Python 3.5.","2019-06-13T20:46:20Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-20T15:37:22Z",false,"COMMENTED"
"TomAugspurger","MEMBER","I'm probably misremembering something about pandas' Series.map, but does the following alternative implementation work?

```python
In [65]: def map2(self, s):
    ...:     return dd.map_partitions(lambda a, b: a.reindex(b.values), self, s)
    ...:
    ...:

In [66]: s = pd.Series([1, 2])

In [67]: ds = dd.from_pandas(s, 2)

In [68]: map2(ds, ds).compute()
Out[68]:
1    2.0
2    NaN
dtype: float64
```","2019-06-03T02:58:59Z",false,"COMMENTED"
"bluecoconut","CONTRIBUTOR","","2019-06-03T03:12:36Z",false,"COMMENTED"
"bluecoconut","CONTRIBUTOR","","2019-06-03T03:12:41Z",false,"COMMENTED"
"TomAugspurger","MEMBER","What's the communication patter like here? Does every partition of `self` see every partition of `arg`? I think it has to, right?","2019-06-03T21:17:14Z",false,"COMMENTED"
"bluecoconut","CONTRIBUTOR","","2019-06-03T21:38:26Z",false,"COMMENTED"
"bluecoconut","CONTRIBUTOR","","2019-06-03T21:49:40Z",false,"COMMENTED"
"bluecoconut","CONTRIBUTOR","","2019-06-03T21:49:45Z",false,"COMMENTED"
"bluecoconut","CONTRIBUTOR","","2019-06-03T21:49:51Z",false,"COMMENTED"
"bluecoconut","CONTRIBUTOR","","2019-06-03T21:50:23Z",false,"COMMENTED"
"bluecoconut","CONTRIBUTOR","","2019-06-03T21:50:57Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-04T11:53:15Z",false,"COMMENTED"
"bluecoconut","CONTRIBUTOR","","2019-06-04T15:28:37Z",false,"COMMENTED"
"bluecoconut","CONTRIBUTOR","","2019-06-04T15:29:10Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-31T21:38:04Z",false,"COMMENTED"
"almaleksia","CONTRIBUTOR","","2019-05-31T22:11:45Z",false,"COMMENTED"
"almaleksia","CONTRIBUTOR","","2019-05-31T22:14:52Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-31T22:39:14Z",false,"COMMENTED"
"TomAugspurger","MEMBER","For homogenous dataframes, or for mixes of int / float this looks quite good. It's the trying to support Timedelta that's complicating things.

@almaleksia what do you think about continuing to (incorrectly) drop Timedelta columns? Then I think your implementation is just fine, and doesn't make supporting time deltas any harder than in the future. The benefit to ignoring Timedeltas for now is that we maintain the previous behavior, rather than raising at graph construction time.","2019-06-04T20:42:34Z",false,"COMMENTED"
"almaleksia","CONTRIBUTOR","","2019-06-04T21:43:11Z",false,"COMMENTED"
"almaleksia","CONTRIBUTOR","","2019-06-04T21:44:08Z",false,"COMMENTED"
"almaleksia","CONTRIBUTOR","","2019-06-06T22:42:03Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Looks quite close I think.","2019-06-07T02:49:24Z",false,"COMMENTED"
"almaleksia","CONTRIBUTOR","","2019-06-07T06:33:22Z",false,"COMMENTED"
"almaleksia","CONTRIBUTOR","","2019-06-07T07:19:20Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-07T13:12:35Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-07T13:22:32Z",false,"COMMENTED"
"almaleksia","CONTRIBUTOR","","2019-06-08T16:28:38Z",false,"COMMENTED"
"almaleksia","CONTRIBUTOR","","2019-06-08T16:28:49Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-10T04:06:44Z",false,"APPROVED"
"jakirkham","MEMBER","","2019-05-31T17:07:03Z",false,"COMMENTED"
"mpeaton","CONTRIBUTOR","","2019-06-03T15:16:01Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-03T15:43:37Z",false,"COMMENTED"
"mpeaton","CONTRIBUTOR","","2019-06-04T01:50:31Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-06T22:26:00Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-07T14:30:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-07T14:39:41Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-07T14:39:53Z",false,"COMMENTED"
"mpeaton","CONTRIBUTOR","","2019-06-07T14:49:01Z",false,"COMMENTED"
"mpeaton","CONTRIBUTOR","","2019-06-07T14:51:08Z",false,"COMMENTED"
"mpeaton","CONTRIBUTOR","","2019-06-07T14:52:43Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-07T17:08:17Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-07T17:10:02Z",false,"COMMENTED"
"mpeaton","CONTRIBUTOR","","2019-06-10T13:59:30Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-10T14:31:01Z",false,"COMMENTED"
"mpeaton","CONTRIBUTOR","","2019-06-10T20:36:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-10T22:56:37Z",false,"COMMENTED"
"mpeaton","CONTRIBUTOR","","2019-06-13T14:41:20Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-17T14:59:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-06-17T16:39:53Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-17T16:50:33Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-17T16:51:09Z",false,"COMMENTED"
"mpeaton","CONTRIBUTOR","","2019-06-18T18:25:21Z",false,"COMMENTED"
"mpeaton","CONTRIBUTOR","","2019-06-18T18:29:38Z",false,"COMMENTED"
"mpeaton","CONTRIBUTOR","","2019-06-18T18:40:01Z",false,"COMMENTED"
"mpeaton","CONTRIBUTOR","","2019-06-18T18:40:14Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-19T19:58:15Z",false,"APPROVED"
"jakirkham","MEMBER","","2019-06-20T20:05:30Z",false,"COMMENTED"
"mpeaton","CONTRIBUTOR","","2019-06-20T20:28:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @mrocklin! Confirmed locally this video no longer autoplays","2019-05-29T16:32:07Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-06-05T00:24:12Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-06-05T13:53:58Z",false,"COMMENTED"
"mmccarty","MEMBER","","2019-06-18T23:12:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @jakirkham! I'm also in favor of dropping things. Left a couple of minor comments ","2019-05-28T17:30:52Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-28T17:32:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-05-28T17:36:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-05-28T17:43:37Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-28T18:45:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for adding this @martindurant!","2019-05-23T20:02:42Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-05-22T19:20:44Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @mrocklin! Merging","2019-05-23T03:18:17Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks for the PR @andersy005! Things here generally seem good, looking forward to this addition. I've attached a few comments ","2019-05-22T17:08:15Z",false,"COMMENTED"
"andersy005","MEMBER","","2019-05-22T17:22:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-05-22T17:34:13Z",false,"COMMENTED"
"andersy005","MEMBER","","2019-05-22T18:30:39Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-22T19:33:42Z",false,"COMMENTED"
"andersy005","MEMBER","","2019-05-22T23:53:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-05-23T02:54:12Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-22T15:58:08Z",false,"APPROVED"
"jrbourbeau","MEMBER","Thanks @TomAugspurger, this all looks really good! I've attached a few comments. 

Also, question: Is there a reason to include these additions in a new `dask/dataframe/_accessor.py` module as opposed to the `dask/dataframe/accessor.py` module which already exists?","2019-05-31T05:14:33Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-31T14:10:19Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-31T14:13:08Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for this PR @TAdeJong!

I haven't had a chance for a thorough review yet, but the Python 3.7 errors on Travis seem to originate from the new NumPy [`__array_function__` protocol](https://www.numpy.org/neps/nep-0018-array-function-protocol.html). The protocol is currently experimental and turned off by default, but it can be enabled by setting the environment variable `NUMPY_EXPERIMENTAL_ARRAY_FUNCTION=1` (which is done in the 3.7 Travis build). The implementation of `da.moveaxis` here calls `np.moveaxis` which, when the `__array_function__` protocol is enabled, dispatches back to the `da.moveaxis` function and that's where the `RecursionError` is coming from. 

cc @jakirkham ","2019-05-19T21:55:16Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-20T18:07:33Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-20T18:08:14Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-20T18:08:33Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-20T19:19:42Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-06-20T20:40:54Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-20T20:49:44Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Pushed to changes

1. Added the test using the `np` API
2. moved the implementation to `numpy_compat`.


Should be good to go.","2019-08-12T15:01:12Z",false,"APPROVED"
"jakirkham","MEMBER","","2019-08-12T15:35:57Z",false,"APPROVED"
"jrbourbeau","MEMBER","LGTM, merging on green. Thanks @mrocklin for improving these error messages!","2019-05-18T15:48:02Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for this PR @rjzamora! This generally looks good. I've attached some review comments ","2019-05-21T16:38:34Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-21T16:45:21Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-05-21T18:39:47Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-21T19:41:27Z",false,"COMMENTED"
"rjzamora","MEMBER","","2019-05-21T20:01:23Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-22T20:14:55Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-05-16T14:40:49Z",false,"COMMENTED"
"lijose","CONTRIBUTOR","","2019-05-16T14:43:50Z",false,"COMMENTED"
"lijose","CONTRIBUTOR","","2019-05-16T14:50:22Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-05-16T14:58:37Z",false,"COMMENTED"
"lijose","CONTRIBUTOR","","2019-05-16T15:27:49Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-05-16T15:39:51Z",false,"COMMENTED"
"lijose","CONTRIBUTOR","","2019-05-16T16:31:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-15T15:20:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-17T19:10:49Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-17T19:11:09Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-05-17T20:18:09Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-20T15:03:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-22T14:42:00Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-22T15:15:06Z",false,"COMMENTED"
"mrocklin","MEMBER","Oh wow.  That's super clever.  I didn't expect `derived_from` to just work on modules.  I guess that makes sense though.  Great!","2019-05-16T14:36:30Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-05-16T14:37:40Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-05-21T18:42:29Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-21T20:21:00Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-21T20:23:35Z",false,"APPROVED"
"martindurant","MEMBER","","2019-05-14T21:07:27Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-14T23:23:03Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-05-15T00:41:37Z",false,"COMMENTED"
"jrbourbeau","MEMBER","LGTM, merging in ","2019-05-16T19:44:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for expanding the documentation here @TomAugspurger! This generally looks good to me. I've attached a few minor comments ","2019-05-15T15:49:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Merging this in, thanks @TomAugspurger! ","2019-05-15T18:17:38Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-14T18:50:33Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-14T18:51:09Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-14T20:33:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-15T03:01:37Z",false,"COMMENTED"
"TomAugspurger","MEMBER","This looks quite nice. Just a small request for de-duplication.

On the the simpler, commented out implementation, I think what you have fine now is just fine.","2019-05-14T16:17:20Z",false,"COMMENTED"
"TomAugspurger","MEMBER","LGTM. cc @jcrist if you have a chance to glance this over. Otherwise I'll merge later today.","2019-05-15T14:05:42Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-05-13T14:33:59Z",false,"APPROVED"
"quasiben","MEMBER","","2019-05-13T14:58:41Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-05-13T15:12:49Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-13T15:59:39Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-13T16:03:01Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-13T16:07:42Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-13T16:11:37Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-13T16:11:59Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this looks pretty good to me. Thanks for putting this doc together.","2019-05-13T16:25:37Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-13T18:03:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-13T18:22:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-13T18:23:10Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-13T19:01:51Z",false,"APPROVED"
"jcrist","MEMBER","Thanks for the PR @almaleksia, I left a few comments, but overall this looks pretty good to me (provided tests pass).","2019-05-10T18:12:52Z",false,"COMMENTED"
"almaleksia","CONTRIBUTOR","","2019-05-10T18:53:02Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-05-10T18:57:25Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks @almaleksia, I gave this a deeper review. There's a few issues with how the tests are written (we generally don't want to compute before calling `assert_eq`), and I left a few other comments, but this is pretty close to done.","2019-05-14T16:40:39Z",false,"COMMENTED"
"almaleksia","CONTRIBUTOR","","2019-05-14T18:55:27Z",false,"COMMENTED"
"almaleksia","CONTRIBUTOR","","2019-05-14T19:07:01Z",false,"COMMENTED"
"almaleksia","CONTRIBUTOR","","2019-05-14T19:48:07Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-14T20:49:53Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-14T20:59:24Z",false,"COMMENTED"
"almaleksia","CONTRIBUTOR","","2019-05-14T21:20:54Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Small comment on the test for timedelta data. LGTM otherwise.","2019-05-16T20:18:51Z",false,"COMMENTED"
"almaleksia","CONTRIBUTOR","","2019-05-16T20:35:13Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-17T13:39:48Z",false,"APPROVED"
"jcrist","MEMBER","","2019-05-10T17:47:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-09T19:40:19Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-05-09T20:42:26Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-05-09T21:05:44Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-09T21:07:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-09T22:22:47Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this looks good to me.","2019-05-07T15:47:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-08T00:32:11Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-05-08T01:34:50Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks for doing this @chrish42 !  A small request, but otherwise this looks good to me.","2019-05-04T13:28:09Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-05-06T15:23:14Z",false,"COMMENTED"
"chrish42","CONTRIBUTOR","","2019-05-06T15:25:16Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-05-03T17:59:14Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-03T18:34:08Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-05-03T18:41:44Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-30T20:03:19Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-04-30T20:04:28Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-30T21:46:24Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-04-30T22:54:08Z",false,"COMMENTED"
"shoyer","MEMBER","Thanks, this looks like the right way to handle xarray objects in dask. (Short of a more generic numpy duck-typing protocol that we could use instead)","2019-04-30T17:17:08Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-04-30T18:57:35Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Pushed a small update with an assertion on the dtype. LGTM","2019-04-30T19:12:24Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-04-30T19:13:54Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-05-10T18:28:17Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2019-05-14T08:26:06Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2019-05-14T08:28:44Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-14T15:30:00Z",false,"COMMENTED"
"TomAugspurger","MEMBER","@mrocklin I removed an array-specific reference (changed Array to APIs). I think you're good to merge if my change looks OK to you.","2019-05-14T16:29:43Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-05-14T16:57:07Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-04-30T14:29:16Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-04-30T15:13:53Z",false,"COMMENTED"
"mrocklin","MEMBER","In principle this looks fine to me.  I did make a bunch of small nitpicky requests though (hope you don't mind) mostly around reducing indirection for ease of future review.","2019-04-25T15:23:27Z",false,"CHANGES_REQUESTED"
"beckernick","MEMBER","","2019-04-25T15:35:23Z",false,"COMMENTED"
"beckernick","MEMBER","","2019-04-25T15:41:38Z",false,"COMMENTED"
"beckernick","MEMBER","","2019-04-25T15:43:57Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-25T15:51:17Z",false,"CHANGES_REQUESTED"
"mrocklin","MEMBER","","2019-04-26T19:20:25Z",false,"COMMENTED"
"beckernick","MEMBER","","2019-04-26T19:37:29Z",false,"COMMENTED"
"beckernick","MEMBER","","2019-04-26T19:52:49Z",false,"COMMENTED"
"beckernick","MEMBER","","2019-04-26T20:02:41Z",false,"COMMENTED"
"beckernick","MEMBER","","2019-04-26T21:01:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-26T21:27:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-26T21:28:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-26T21:29:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-26T21:32:37Z",false,"APPROVED"
"beckernick","MEMBER","","2019-04-26T21:32:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-26T21:39:27Z",false,"COMMENTED"
"beckernick","MEMBER","","2019-04-26T21:42:47Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this seems fine to me.","2019-04-25T13:02:17Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-25T13:35:20Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-24T20:00:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-24T20:02:23Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-04-24T20:06:16Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-04-24T20:07:42Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-24T20:08:18Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-04-24T20:09:22Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-04-24T20:19:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-24T20:23:27Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-04-24T20:27:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-22T18:10:26Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-04-20T13:24:18Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-04-20T21:07:07Z",false,"COMMENTED"
"birdsarah","CONTRIBUTOR","","2019-04-22T00:46:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-19T18:32:04Z",false,"COMMENTED"
"beckernick","MEMBER","","2019-04-19T18:33:24Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-19T18:38:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-19T18:39:11Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks @horta !

I've added a couple comments about tests.  Also, can I ask you to include this in `docs/source/array-api.rst` ?","2019-04-18T19:36:28Z",false,"COMMENTED"
"horta","CONTRIBUTOR","","2019-04-19T21:08:26Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-04-22T19:28:57Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-24T23:53:35Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks @mrocklin, this looks good

Minor comment: Could you add `replace` to the DataFrame API docs? ","2019-04-18T14:23:47Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-04-18T14:26:14Z",false,"COMMENTED"
"mrocklin","MEMBER","Things here look reasonable to me.  Merging in 24 hours if there are no further comments.  

I did leave a couple comments for potential improvement, one of which might be easy to accomplish short term, but there's no obligation here (and I suspect that you'd like to see things merged finally :))","2019-04-22T17:26:54Z",false,"APPROVED"
"bmerry","CONTRIBUTOR","","2019-04-22T18:05:29Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-22T18:06:53Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2019-04-22T18:09:18Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-13T14:04:35Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-13T15:51:50Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-13T15:53:43Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-13T15:54:56Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-13T16:05:06Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-13T16:15:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-13T16:16:30Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-13T16:16:42Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-13T16:23:14Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-13T16:27:18Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-13T16:28:40Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-13T16:31:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-13T16:40:05Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-13T16:42:47Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-13T16:43:09Z",false,"COMMENTED"
"jakirkham","MEMBER","One question above. Otherwise LGTM (assuming CI passes). Planning on merging in 24hrs if no comments.","2019-05-13T16:43:46Z",false,"APPROVED"
"jakirkham","MEMBER","","2019-05-13T16:47:26Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-13T16:48:08Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-13T16:53:18Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-13T17:03:13Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-13T17:53:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-13T18:05:45Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-13T18:06:18Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-13T18:53:21Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-13T18:59:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-13T19:12:10Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-13T20:02:42Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-13T20:15:38Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-13T20:16:45Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-13T20:22:05Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-13T20:31:26Z",false,"APPROVED"
"pentschev","MEMBER","","2019-05-13T20:45:52Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-13T21:19:01Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-13T21:22:52Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-13T21:56:37Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","I don't have permissions on this repository so just made some comments. Looks really good. Thanks for adding this information. I think it will be a really helpful resource.","2019-04-16T19:49:04Z",false,"COMMENTED"
"rabernat","CONTRIBUTOR","A few minor suggestions and additions. I have another larger suggestion that I will add via PR to your branch.","2019-04-17T01:06:07Z",false,"COMMENTED"
"jhamman","MEMBER","","2019-04-17T17:52:27Z",false,"COMMENTED"
"rabernat","CONTRIBUTOR","","2019-04-17T17:54:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-27T20:07:47Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-27T20:08:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-27T20:09:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-27T20:09:17Z",false,"COMMENTED"
"quasiben","MEMBER","","2019-04-29T20:20:05Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-04-30T20:35:23Z",false,"APPROVED"
"jakirkham","MEMBER","","2019-04-30T20:44:51Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-04-30T20:47:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-30T20:47:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-04-30T20:49:10Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-04-30T20:50:27Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-04-30T20:54:34Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-04-30T20:55:46Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-30T20:56:44Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-04-30T20:58:53Z",false,"COMMENTED"
"jakirkham","MEMBER","Generally looks great! Very helpful. Certainly know a few people that would benefit from having something like this as reference. Thanks for working on it @mrocklin !

Made a few minor comments inline with suggested code changes. Though should be pretty easy to go through.","2019-04-30T21:00:22Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-04-30T21:01:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-30T21:07:05Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-04-30T21:21:40Z",false,"APPROVED"
"jakirkham","MEMBER","","2019-04-30T21:26:05Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-04-17T00:12:29Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-04-17T00:24:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-17T00:24:38Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","LGTM","2019-04-12T15:01:18Z",false,"APPROVED"
"jcrist","MEMBER","","2019-04-12T15:19:04Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-04-12T20:48:07Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-04-12T20:56:30Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-04-12T21:11:14Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-04-12T21:17:47Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-04-15T10:36:25Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","I would prefer manual triggering, yes.

However, about nightlies, I’m only +1 on them if they don’t make the main badge red.","2019-04-15T11:12:18Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-04-15T14:07:44Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-04-15T15:30:06Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-04-15T15:43:10Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-04-15T15:53:37Z",false,"COMMENTED"
"martindurant","MEMBER","I am fine with the parquet part of this","2019-04-20T22:02:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-11T13:48:17Z",false,"COMMENTED"
"mrocklin","MEMBER","A few minor suggestions on code style below.  In general this looks great to me though.

> It looks like numpy needs to be bumped up to version 1.13.0 for the python 3.5 travis job, so I'm trying that now.

I'm curious, what was breaking before?  We like to be intentional of when we stop supporting older versions of those libraries.","2019-04-17T14:04:00Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2019-04-21T04:50:14Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-04-22T19:07:38Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-04-22T19:24:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-22T19:27:07Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-04-22T19:28:00Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-04-22T19:29:46Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2019-04-24T00:13:16Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2019-04-24T04:01:19Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2019-04-24T08:03:10Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2019-04-24T08:17:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-24T14:24:14Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2019-04-26T03:31:01Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks @GenevieveBuckley !  In general this looks like a good PR.  It's nice to see you pick up Dask graphs so readily!  I'll be tempted to start assigning you issues soon :)

I've left a few minor comments, mostly to start some thinking.  

Generally though I want to raise a higher level concern/question. Scheduling-wise this becomes tricky, because Dask will have to compute the maximum value first, before computing any bincount computations.  Today's schedulers will evaluate each chunk, compute the maximum of that chunk, and then hold onto that chunk so that, after it computes the max-of-maxes, it can compute binchunk.  This means that we'll have the entire array in memory, which we usually try to avoid if possible.

As an alternative, what if we just called `np.bincount` on all of the chunks without specifying a minlength value and only afterwards, once we had all of them together, would we make a new array of the correct length and then add all of them into that array?  This might require a bit more book keeping as we add things together (it's no longer a simple `np.sum` I think) but would probably improve our ability to keep this running smoothly in low memory.

Thoughts?","2019-04-10T03:32:13Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2019-04-10T04:01:07Z",false,"COMMENTED"
"GenevieveBuckley","CONTRIBUTOR","","2019-04-10T04:12:49Z",false,"COMMENTED"
"martindurant","MEMBER","In general, liking this PR a lot, and want to see it merged rapidly, so people can experiment with it. 

Note that you should make sure that the new methods are added to the API docs.","2019-04-10T16:26:27Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-10T17:40:24Z",false,"COMMENTED"
"ihnorton","CONTRIBUTOR","","2019-04-10T21:38:15Z",false,"COMMENTED"
"ihnorton","CONTRIBUTOR","","2019-04-10T21:39:31Z",false,"COMMENTED"
"ihnorton","CONTRIBUTOR","","2019-04-10T21:43:34Z",false,"COMMENTED"
"martindurant","MEMBER","Sorry, very small nit-picks on the docstring. 
You can push a commit with `[skip ci]` in the message to avoid retesting.","2019-04-15T14:37:04Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks @Dimplexion for working on this. I've only left high-level api comments for now, will try to give a deeper review later.","2019-04-08T19:41:33Z",false,"COMMENTED"
"Dimplexion","CONTRIBUTOR","","2019-04-09T06:33:53Z",false,"COMMENTED"
"Dimplexion","CONTRIBUTOR","","2019-04-09T06:34:20Z",false,"COMMENTED"
"Dimplexion","CONTRIBUTOR","","2019-04-09T06:42:04Z",false,"COMMENTED"
"Dimplexion","CONTRIBUTOR","","2019-04-09T06:42:59Z",false,"COMMENTED"
"Dimplexion","CONTRIBUTOR","","2019-04-09T06:43:05Z",false,"COMMENTED"
"Dimplexion","CONTRIBUTOR","","2019-04-09T06:43:20Z",false,"COMMENTED"
"Dimplexion","CONTRIBUTOR","","2019-04-09T06:44:03Z",false,"COMMENTED"
"Dimplexion","CONTRIBUTOR","","2019-04-09T06:45:37Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-09T13:14:07Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-04-10T02:57:03Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-04-10T03:01:23Z",false,"COMMENTED"
"Dimplexion","CONTRIBUTOR","","2019-04-10T16:35:13Z",false,"COMMENTED"
"Dimplexion","CONTRIBUTOR","","2019-04-11T07:19:42Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks @Dimplexion. Overall the implementation looks good - I left a few comments about the tests and docstrings but this is pretty close to mergeable.","2019-04-19T19:57:35Z",false,"COMMENTED"
"Dimplexion","CONTRIBUTOR","","2019-04-23T18:32:24Z",false,"COMMENTED"
"Dimplexion","CONTRIBUTOR","","2019-04-23T18:32:49Z",false,"COMMENTED"
"Dimplexion","CONTRIBUTOR","","2019-04-23T18:42:15Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-08T16:37:23Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-04-08T16:53:37Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-08T13:48:40Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-04-08T13:52:19Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-04-08T13:52:41Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-04-08T16:02:36Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-04-08T16:04:02Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-04-08T16:05:13Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-04-08T16:09:14Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-08T16:12:17Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-04-08T16:31:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-06-10T16:13:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-11T04:31:38Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-06-11T05:19:59Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-11T07:47:45Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-11T07:49:20Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-06-11T08:30:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-13T07:10:44Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-06-19T15:45:24Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-06-20T11:52:28Z",false,"COMMENTED"
"mhvk","NONE","@hameerabbasi - thanks for pointing me to this - a few comments in-line, in the hope that they're useful.","2019-06-20T12:27:00Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-06-20T12:30:05Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-06-20T12:49:37Z",false,"COMMENTED"
"mhvk","NONE","","2019-06-20T12:49:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thank you for the PR @mpeaton! Could you add a test to `dask/array/tests/test_array_core.py` to demonstrate that the changes here provide the desired behavior for `from_zarr`","2019-04-02T21:23:10Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-04-05T15:48:00Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-04-05T15:49:01Z",false,"COMMENTED"
"mpeaton","CONTRIBUTOR","","2019-04-05T16:04:02Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for adding a test @mpeaton! I've included a few comments

I think we can avoid adding `zarr` to the Appveyor CI in this PR. While I'm in favor of this addition generally (thank you @mpeaton  for noticing `zarr` is not being installed in the Appveyor environment), since it doesn't seem to be as simple as adding `conda install zarr` we can open up a separate issue for this. 

Also there are a couple of minor code linting issues https://travis-ci.org/dask/dask/jobs/516317003#L3142-L3145","2019-04-05T19:32:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Looks like other commits are showing up here, you may want to rebase on `master` to take the parquet fix out of the diff. 

Since we're adding the `name` keyword to `from_zarr`, could you add a test to ensure that when `name` is given, the output dask array has the specified name. Something like the following should work:

```python
def test_from_zarr_name():
    zarr = pytest.importorskip('zarr')
    a = zarr.array([1, 2, 3])
    assert da.from_zarr(a, name='foo').name == 'foo'
```","2019-04-08T15:52:33Z",false,"COMMENTED"
"mpeaton","CONTRIBUTOR","name:  str, optional
     The key name used for the array.  Defaults to the string 'from-zarr-' prepended to a hash of ``x``.
","2019-04-13T01:50:09Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-04-15T17:13:36Z",false,"COMMENTED"
"mpeaton","CONTRIBUTOR","","2019-04-15T18:04:57Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-04-16T21:35:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-04-16T21:53:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-04-17T01:16:23Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-04-17T01:17:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","LGTM, merging this afternoon if there are no additional comments ","2019-04-17T14:04:08Z",false,"APPROVED"
"jrbourbeau","MEMBER","LGTM, thanks @mrocklin ","2019-04-01T15:43:59Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-03-29T16:36:19Z",false,"COMMENTED"
"gregrf","CONTRIBUTOR","","2019-03-29T17:04:38Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-03-29T18:42:12Z",false,"COMMENTED"
"gregrf","CONTRIBUTOR","","2019-03-29T19:01:32Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-03-29T14:00:14Z",false,"COMMENTED"
"fuglede","CONTRIBUTOR","","2019-03-29T14:49:35Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-03-29T14:50:56Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-04-09T17:26:49Z",false,"COMMENTED"
"gregrf","CONTRIBUTOR","","2019-04-09T17:32:18Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-04-09T17:37:24Z",false,"COMMENTED"
"jrbourbeau","MEMBER","LGTM, thanks for fixing this. I left one minor question ","2019-03-29T17:58:24Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-03-29T18:03:11Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-03-29T18:27:25Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-03-27T13:28:14Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-27T15:29:35Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-03-27T15:30:34Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-03-27T15:31:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","LGTM, thanks @mrocklin!","2019-03-28T00:58:51Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-03-27T03:07:04Z",false,"COMMENTED"
"bluecoconut","CONTRIBUTOR","","2019-03-27T03:10:27Z",false,"COMMENTED"
"bluecoconut","CONTRIBUTOR","","2019-03-27T03:11:18Z",false,"COMMENTED"
"bluecoconut","CONTRIBUTOR","","2019-03-27T03:14:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-27T03:27:35Z",false,"COMMENTED"
"bluecoconut","CONTRIBUTOR","","2019-03-27T03:38:50Z",false,"COMMENTED"
"martindurant","MEMBER","Thanks for the quick attention, @ian-r-rose !","2019-03-26T21:26:52Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2019-03-26T21:27:54Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2019-03-26T21:28:52Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2019-03-26T21:29:35Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-03-26T21:30:00Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2019-03-27T18:11:42Z",false,"COMMENTED"
"ian-r-rose","COLLABORATOR","","2019-03-27T18:13:47Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-03-27T18:16:02Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-03-21T15:45:01Z",false,"COMMENTED"
"xhochy","CONTRIBUTOR","","2019-03-21T07:46:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-03-21T16:08:28Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-03-21T18:32:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-19T20:19:23Z",false,"COMMENTED"
"amerkel2","CONTRIBUTOR","","2019-03-20T09:34:12Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for the PR @HSR05! Looking forward to having this added

Could you please add a test to `dask/array/tests/test_random.py` to ensure that the new `dtype` keyword is behaving as expected. Also, it looks like there are some code linting issues causing the CI builds to fail. You can render these locally by running `flake8 dask`. ","2019-03-20T20:46:25Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-17T03:47:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-03-17T04:08:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-03-17T04:13:51Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-03-17T04:27:35Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-17T07:50:23Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-17T07:51:18Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-03-17T15:56:36Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-26T21:31:49Z",false,"APPROVED"
"jakirkham","MEMBER","","2019-03-16T21:39:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","LGTM. Thanks @mrocklin ","2019-03-17T16:53:09Z",false,"APPROVED"
"mrocklin","MEMBER","Thanks for the PR.  The implementation looks clean to me, but it raises some questions.  Some thoughts below.  Conversation welcome.","2019-03-16T02:41:46Z",false,"COMMENTED"
"bchu","CONTRIBUTOR","","2019-03-16T06:56:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-17T16:25:36Z",false,"COMMENTED"
"bchu","CONTRIBUTOR","","2019-03-26T23:38:07Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-03-14T14:10:17Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-03-14T14:43:12Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2019-03-21T18:25:32Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-03-13T13:56:56Z",false,"COMMENTED"
"kszucs","NONE","","2019-03-13T15:00:00Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-03-13T15:06:35Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Can you add ""Closes #<issue number>"" to the original post in the PR?

Does this PR have some git issues?","2019-03-12T19:48:18Z",false,"COMMENTED"
"HSR05","CONTRIBUTOR","","2019-03-12T20:02:12Z",false,"COMMENTED"
"HSR05","CONTRIBUTOR","","2019-03-12T20:02:23Z",false,"COMMENTED"
"HSR05","CONTRIBUTOR","","2019-03-12T20:04:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-03-13T00:01:50Z",false,"COMMENTED"
"HSR05","CONTRIBUTOR","> 
> 
> @HSR05 there seems to be a number of different things going on in this PR. Ideally a PR should close only one issue. It's somewhat difficult to review otherwise.

That was bad on my part. I forgot to create a new branch when i took up the new issue. I will keep that in mind next time, so that it is easier to review. Cheers 👍 ","2019-03-14T17:25:23Z",false,"COMMENTED"
"TomAugspurger","MEMBER","It looks like you still have changes from other issues here. What issue is this supposed to close?","2019-03-14T17:41:53Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-03-08T19:36:15Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-03-08T20:53:30Z",false,"APPROVED"
"jrbourbeau","MEMBER","Couple of minor nitpicks, otherwise LGTM. Thank you for adding this @mrocklin, it reads well ","2019-03-08T20:59:58Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2019-03-08T21:01:17Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-03-09T00:56:06Z",false,"COMMENTED"
"mrocklin","MEMBER","Ah, looks like I didn't submit this review.  I copy a bit of what @shoyer said, but some other comments as well.","2019-03-09T01:06:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-09T01:07:13Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-03-09T01:20:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-09T02:05:44Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-03-09T08:38:17Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-03-09T08:42:47Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-09T13:18:00Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-09T13:24:59Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-09T13:42:42Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-09T13:42:53Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-03-09T17:49:57Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-03-09T17:59:18Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-03-09T18:14:27Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-03-09T18:15:04Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-09T18:15:32Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-03-09T18:17:12Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-03-09T18:27:11Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-03-09T18:28:53Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-03-09T18:32:45Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-03-10T13:17:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-10T17:14:48Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-03-10T17:55:16Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-10T18:41:34Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-03-10T22:33:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-11T02:06:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-11T02:08:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-11T02:09:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-11T02:11:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-11T02:11:36Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-11T14:52:24Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-11T16:17:13Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-11T19:22:48Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-12T12:41:13Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-12T12:49:38Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-12T17:33:06Z",false,"COMMENTED"
"jakirkham","MEMBER","This seems fine to me. I added a small comment above about adjusting the tests a little, but don't view this as a blocker.","2019-03-12T17:41:51Z",false,"APPROVED"
"pentschev","MEMBER","","2019-03-12T17:52:24Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-12T20:39:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-14T18:53:03Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-14T20:10:52Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-03-14T20:13:05Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-14T20:44:20Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-14T20:56:21Z",false,"COMMENTED"
"jrbourbeau","MEMBER","LGTM, thanks @mrocklin! ","2019-03-08T16:54:13Z",false,"APPROVED"
"TomAugspurger","MEMBER","I think this is a good approach. Just a couple doc requests.","2019-03-11T18:52:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-11T23:04:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-11T23:04:10Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Docs look good. I think merge whenever you're ready.","2019-03-12T15:49:45Z",false,"APPROVED"
"TomAugspurger","MEMBER","I believe the idea was to accept a `meta` keyword in `read_json` that the could provide. Something similar to `dask.dataframe.core.map_partitions`.

The default would be None, in which case we use `meta=first[0]`. But if the user provides a `meta`  we would do something roughly like `meta = make_meta(meta)`.

You'll need to edit the original post to include ""Closes #4553"".","2019-03-07T13:41:22Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-03-08T14:16:00Z",false,"COMMENTED"
"abhinavralhan","CONTRIBUTOR","","2019-03-10T12:03:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Were you able to look at the read_csv tests for inspiration?","2019-03-12T19:50:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-06T19:39:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-07T14:10:51Z",false,"COMMENTED"
"JulianWgs","CONTRIBUTOR","","2019-03-07T14:56:32Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-03-06T22:25:15Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-07T14:35:49Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-03-07T14:42:10Z",false,"APPROVED"
"martindurant","MEMBER","","2019-03-06T15:57:43Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-06T16:50:54Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-03-06T16:53:58Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks for sending the WIP PR @pentschev !

Yes, in principle this seems like it's going in the right direction to me.  I added a few comments below.","2019-03-05T14:51:03Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-05T15:17:19Z",false,"COMMENTED"
"mrocklin","MEMBER","In general this looks good.  I raised a few points below where I think that we will eventually need to be more careful.  I should probably come up with more tests though.","2019-03-06T21:26:29Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-06T21:37:24Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-06T21:39:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-06T21:40:22Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-06T21:41:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-06T21:46:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-06T21:47:36Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-06T22:46:40Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-07T12:39:42Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-07T14:18:22Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-07T14:43:44Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-07T14:53:16Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-07T14:54:41Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-07T15:07:53Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-14T16:24:08Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-14T16:25:22Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-14T16:26:58Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-03-14T19:02:41Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-14T19:21:00Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-14T19:46:30Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-14T19:47:53Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-14T19:50:02Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-14T19:54:52Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-18T15:22:03Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-18T20:50:03Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-19T17:51:40Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-21T18:50:40Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-21T19:00:05Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-21T19:17:20Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-21T19:19:40Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-21T19:21:48Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-22T09:34:27Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-22T09:35:24Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-22T09:49:37Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-22T10:10:14Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-22T10:10:24Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-29T06:16:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-29T06:22:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-29T06:24:02Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-04-01T19:49:42Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-04-26T20:34:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-13T13:19:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-13T13:20:02Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-13T13:47:13Z",false,"COMMENTED"
"mrocklin","MEMBER","On second review I think that everything here looks pretty good.  I left some comments below, but I think that they're mostly in line with your previously stated thoughts on cleaning up.","2019-05-13T22:44:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-13T22:45:53Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-14T09:04:44Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-14T09:08:36Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-14T09:46:45Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-14T10:06:11Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-14T10:23:59Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-14T10:27:53Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-14T10:31:50Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-14T10:37:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-24T13:42:59Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-05-24T17:02:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-31T23:22:19Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-01T11:00:19Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-01T11:04:51Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-01T11:40:25Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-01T11:44:16Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-01T11:51:22Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-06-01T23:12:16Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-03T07:17:28Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-03T14:55:17Z",false,"COMMENTED"
"mrocklin","MEMBER","I took another pass through this.  Most of my comments are pretty minor.  I would be pretty comfortable merging this if there are no other objections.","2019-06-03T17:31:24Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-03T17:50:34Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-03T17:54:35Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-03T18:04:25Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-03T18:15:02Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-03T18:19:10Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-03T18:24:23Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-03T18:32:47Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-03T18:42:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-06-03T18:43:35Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-03T18:52:02Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-12T15:17:45Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-12T15:30:22Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-05T07:01:59Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-03-01T18:32:36Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-02-28T13:12:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-02-28T15:18:40Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-02-27T18:46:56Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-02-28T13:03:24Z",false,"COMMENTED"
"HSR05","CONTRIBUTOR","","2019-02-28T15:54:28Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-10T20:03:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-11T01:57:49Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-12T13:55:56Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-12T15:04:29Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-03-14T19:09:26Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","Another comment.","2019-03-14T19:29:11Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-03-14T19:29:41Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-14T19:41:25Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-14T19:42:52Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-26T03:39:10Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-26T03:43:54Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-26T03:44:12Z",false,"COMMENTED"
"jakirkham","MEMBER","Thanks for working on this, @pentschev. Couple of comments above. Otherwise looks good.","2019-03-26T03:50:12Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-26T08:36:15Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-26T08:38:13Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-26T08:38:19Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-27T01:02:51Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-03-27T06:15:22Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-28T07:10:42Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-03-28T09:05:45Z",false,"COMMENTED"
"hameerabbasi","CONTRIBUTOR","","2019-04-02T07:43:23Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-04-02T07:53:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","A few nitpicky comments. Otherwise LGTM","2019-03-01T03:54:38Z",false,"COMMENTED"
"stsievert","MEMBER","","2019-03-01T20:16:15Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-03-13T14:36:49Z",false,"COMMENTED"
"asmith26","CONTRIBUTOR","","2019-03-18T19:25:51Z",false,"COMMENTED"
"asmith26","CONTRIBUTOR","","2019-03-18T20:27:01Z",false,"COMMENTED"
"asmith26","CONTRIBUTOR","","2019-03-24T22:41:22Z",false,"COMMENTED"
"asmith26","CONTRIBUTOR","","2019-03-24T22:46:52Z",false,"COMMENTED"
"asmith26","CONTRIBUTOR","","2019-04-22T22:24:39Z",false,"COMMENTED"
"TomAugspurger","MEMBER","I think the issue with the KeyError is coming from the dimensionality of the chunks being incorrect. Fixing that should fix up everything.","2019-05-14T13:33:57Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-02-21T14:42:15Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-02-19T18:38:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-02-19T18:48:06Z",false,"COMMENTED"
"jrbourbeau","MEMBER","LGTM, thanks @mrocklin 

Minor comment: adding

```
inplace : bool, default False
    Modifying the DataFrame in place is not supported by Dask.
```

to the `set_index` docstring could be helpful for those looking at the API documentation. I'm happy to push the docstring update to this PR if you want.  ","2019-02-19T03:48:39Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-02-19T00:14:38Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-02-19T14:06:39Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-02-18T15:55:18Z",false,"COMMENTED"
"henriqueribeiro","CONTRIBUTOR","","2019-02-18T16:02:04Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-02-18T16:04:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for this contribution @henriqueribeiro! Looking forward to seeing it added ","2019-03-04T01:45:03Z",false,"COMMENTED"
"henriqueribeiro","CONTRIBUTOR","","2019-03-05T16:41:03Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-03-05T17:00:59Z",false,"COMMENTED"
"henriqueribeiro","CONTRIBUTOR","","2019-03-05T17:46:27Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-03-05T17:50:30Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-03-05T18:23:10Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-03-21T16:43:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Yes, this LGTM. Thanks @henriqueribeiro! ","2019-03-27T02:26:13Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-02-14T14:07:36Z",false,"APPROVED"
"mrocklin","MEMBER","Thanks for the work @bmerry , and again my apologies that it took so long for someone to review this.

This looks like good work.  I've left some detail-oriented comments in the review below, but let me first mention some high level things.

The constraint today that `map_blocks` expects at least one dask array is, indeed, a limitation and often yields complexity.  However, I hesitate to add a new abstraction to the codebase.  Using `from_block_function` as written in this PR does require the user to pick up and learn a new tool, which is slightly concerning.  This makes me curious about how we might align this work to existing APIs within dask.array with which users might already be familiar.  For example, rather than using a new `block_info` object, maybe this should use an extended version of the `block_info` dict already used in `map_blocks`.  Maybe there is some way to integrate this more tightly into the map_blocks API directly, rather than making a new function (though map_blocks is already quite dense).

Finally, I'm curious why you needed this function originally.  Was this solving a problem for you in your work, or are you just trying to clean things up inside of dask array?

Thanks again for all the work.","2019-04-14T15:09:12Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-02-08T20:24:42Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-02-08T20:48:15Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-02-06T00:00:05Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-03-04T18:48:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","This looks really nice @TomAugspurger, thanks for your work here. I've left a few comments and questions. ","2019-05-16T17:43:24Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-16T18:37:40Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-05-16T18:37:52Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-05-16T18:38:56Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-02-01T19:24:55Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-02-01T19:27:30Z",false,"COMMENTED"
"asmith26","CONTRIBUTOR","","2019-02-01T20:08:24Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-02-14T15:40:04Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-02-14T15:57:53Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-02-07T16:38:52Z",false,"COMMENTED"
"mrocklin","MEMBER","This looks good to me.  I added a couple of small comments.","2019-01-28T23:58:17Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for this PR @horta! I've attached a few comments and questions. In particular, I was wondering about the internal `rechunk`-ing that would happen for a large input Dask array","2019-02-01T04:29:01Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-02-01T05:23:54Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-02-01T07:15:32Z",false,"COMMENTED"
"horta","CONTRIBUTOR","","2019-02-09T16:17:30Z",false,"COMMENTED"
"horta","CONTRIBUTOR","","2019-02-09T16:18:25Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-02-09T20:51:30Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-02-09T20:52:04Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-02-09T20:54:45Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-02-09T21:05:29Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-02-09T21:34:44Z",false,"COMMENTED"
"horta","CONTRIBUTOR","","2019-02-09T22:44:22Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-02-13T07:18:18Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-02-13T07:21:03Z",false,"COMMENTED"
"horta","CONTRIBUTOR","","2019-02-13T13:58:48Z",false,"COMMENTED"
"horta","CONTRIBUTOR","","2019-02-13T14:06:08Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-02-14T15:21:52Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-02-14T15:25:46Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-02-17T06:12:05Z",false,"APPROVED"
"birdsarah","CONTRIBUTOR","","2019-01-28T18:24:19Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-01-29T03:38:06Z",false,"COMMENTED"
"birdsarah","CONTRIBUTOR","","2019-01-29T18:53:59Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks for the contribution @daniel-severo !  I've added a few comments below.  I'm looking forward to seeing this in.","2019-01-26T19:35:20Z",false,"COMMENTED"
"dsevero","CONTRIBUTOR","","2019-01-28T14:40:55Z",false,"COMMENTED"
"dsevero","CONTRIBUTOR","","2019-01-28T14:55:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-01-28T16:54:11Z",false,"COMMENTED"
"mrocklin","MEMBER","Looking good .  Some additional feedback below.","2019-01-28T20:35:20Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-01-23T22:09:31Z",false,"COMMENTED"
"gsakkis","CONTRIBUTOR","","2019-01-24T08:00:15Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-01-24T13:47:15Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-01-25T17:52:12Z",false,"COMMENTED"
"mrocklin","MEMBER","A few small comments.  Review by others would still be welcome.","2019-02-10T17:23:49Z",false,"COMMENTED"
"gsakkis","CONTRIBUTOR","","2019-02-14T21:27:40Z",false,"COMMENTED"
"gsakkis","CONTRIBUTOR","","2019-02-14T21:29:10Z",false,"COMMENTED"
"gsakkis","CONTRIBUTOR","","2019-02-14T21:35:43Z",false,"COMMENTED"
"martindurant","MEMBER","I am OK with adding this explanation to the docs here. Note that a PR to S3FS may be in order to clear up some of the similar config confusion that may exist there.","2019-01-23T14:47:51Z",false,"COMMENTED"
"aploium","CONTRIBUTOR","","2019-01-23T14:59:34Z",false,"COMMENTED"
"TomAugspurger","MEMBER","I generally agree that when a user passes an unordered object to `meta`, like a dict, then the order shouldn't end up affecting the output. But I don't think this approach is the right one.

IIUC, it would this PR would also change the behavior when a user passes an ordered object like an OrderedDict or a DataFrame.","2019-01-20T17:49:09Z",false,"COMMENTED"
"ilango100","NONE","","2019-01-20T21:16:26Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-01-17T15:44:20Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-01-15T21:10:08Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-01-15T21:14:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-01-17T18:45:04Z",false,"COMMENTED"
"TomAugspurger","MEMBER","> For now, we can do a dumb for if x.dtype().dtype()

When you first said you had a patch in mind, I was worried you'd need to some frame introspection :) This is much better.

And we probably have tests for this, but can you double check that basics of `.dtype` on a delayed object with an actual dtype are tested still work? `Delayed(np.array([])).dtype`
","2019-01-15T15:20:04Z",false,"COMMENTED"
"jcrist","MEMBER","","2019-01-15T15:21:44Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-01-15T16:13:15Z",false,"APPROVED"
"TomAugspurger","MEMBER","Thanks for the PR. I'm a little concerned about the need to store the `._kwargs` and pass it through everywhere. I was hoping the change could be a bit more localized, but I haven't thought of a way better than how you've done it. I'll think on it a bit more.","2019-01-15T13:04:02Z",false,"COMMENTED"
"jmunar","NONE","","2019-01-15T19:49:30Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-01-15T20:09:51Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-01-16T20:43:38Z",false,"COMMENTED"
"jmunar","NONE","","2019-01-18T23:14:00Z",false,"COMMENTED"
"jmunar","NONE","","2019-01-18T23:19:16Z",false,"COMMENTED"
"jmunar","NONE","","2019-01-18T23:21:05Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-01-15T16:04:31Z",false,"COMMENTED"
"jendrikjoe","CONTRIBUTOR","","2019-01-15T17:20:22Z",false,"COMMENTED"
"jendrikjoe","CONTRIBUTOR","","2019-01-15T17:21:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-01-15T20:01:35Z",false,"COMMENTED"
"jendrikjoe","CONTRIBUTOR","","2019-01-16T11:36:14Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-01-16T12:42:43Z",false,"COMMENTED"
"jendrikjoe","CONTRIBUTOR","","2019-01-16T13:36:30Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-01-16T14:22:56Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-01-14T14:56:06Z",false,"COMMENTED"
"mrocklin","MEMBER","Thoughts on getting new elementwise operations out of Pandas' extension array API?  Or should this be done separately in micro-libraries like `dask-cyberpandas` for example?","2019-01-14T19:23:53Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-01-14T13:32:49Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2019-01-13T20:00:45Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-01-13T20:01:03Z",false,"COMMENTED"
"TomAugspurger","MEMBER","All green. Planning to merge later today if there are no objections.","2019-01-16T14:35:54Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Only one comment on the meaning of the `is_*_like` methods. LGTM otherwise.","2019-01-09T18:09:55Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-01-09T19:41:18Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-01-09T21:04:50Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-01-09T21:05:04Z",false,"APPROVED"
"mrocklin","MEMBER","","2019-01-09T23:28:19Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2019-01-14T16:17:20Z",false,"APPROVED"
"jakirkham","MEMBER","Seems ok to me. Thanks @stuarteberg. Had a quick question below.","2019-01-07T02:07:25Z",false,"COMMENTED"
"stuarteberg","MEMBER","","2019-01-07T02:45:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Looks good on a quick skim. Only request would be for a sanity test to ensure that `da.atop` works and produces a warning when used, but good otherwise.

I don't have a name better than blockwise.","2019-01-09T18:05:20Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Yep!","2019-01-09T20:33:48Z",false,"APPROVED"
"mrocklin","MEMBER","Thanks @hmaarrfk .  This looks good to me.  One small question as an inline comment.","2019-01-01T23:03:43Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2019-01-01T23:04:53Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2019-01-01T23:05:41Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-01-01T23:06:43Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2019-01-01T23:10:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-01-02T00:12:52Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2019-01-02T00:14:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-01-02T00:14:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-30T17:52:21Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-12-30T17:55:34Z",false,"COMMENTED"
"martindurant","MEMBER","A few thought for you. Generally, the changes are fine - but I'm not yet convinced how much simpler this layout is. That may become clear when the fastparquet arm is also done.","2018-12-31T15:34:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-31T15:50:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-31T15:51:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-31T15:52:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-31T15:53:42Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-31T15:53:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-31T15:54:20Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-31T15:54:58Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-12-31T18:51:38Z",false,"COMMENTED"
"xhochy","CONTRIBUTOR","","2019-01-04T18:27:25Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-01-04T18:30:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-01-04T18:33:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-01-04T18:34:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-26T15:16:25Z",false,"COMMENTED"
"martindurant","MEMBER","I have gone through the core API and scattered some initial comments (of highly variable importance); I have not looked in detail at the pyarrow module yet (which, in any case, is largely the same code as before). There may be some thorny issues around the fixes I recently made. Do tests pass if skipping all fastparquet, now?

It would be useful for me to add minimal documentation to the engine methods, since it's not obvious in every case what the inputs are. It may be good form, but the engine class is not really a class at all, and you could just have normal functions and reference the module.

On the whole, I think I can work with this for fastparquet, although I might require more passing around of arbitrary kwargs between places.","2019-04-12T21:22:55Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-12T21:38:42Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-12T21:43:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-12T21:44:49Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-04-12T21:45:05Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-12T21:46:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-12T21:47:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-12T21:50:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-12T21:50:33Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-04-12T21:51:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-12T21:53:31Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-04-12T21:54:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-12T21:57:37Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-12T21:58:52Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-04-12T21:59:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-12T21:59:24Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-12T22:02:04Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-04-12T22:04:29Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-12T22:06:57Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-12T22:10:00Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-04-15T13:38:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-15T13:47:57Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-04-15T13:50:02Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-04-15T14:04:11Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-09T20:19:18Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-05-09T20:20:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-09T20:21:42Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-05-09T20:28:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-13T22:23:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-13T22:24:55Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-05-14T03:39:17Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-05-14T03:42:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-14T12:44:13Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-05-14T14:22:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-14T14:38:22Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-05-14T14:45:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-14T14:49:55Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-05-14T14:54:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-14T17:09:19Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-05-14T17:58:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-05-14T18:28:20Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-12-29T04:31:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-29T04:42:31Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-12-29T09:08:15Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-21T15:31:44Z",false,"COMMENTED"
"crepererum","CONTRIBUTOR","","2018-12-21T16:15:43Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-21T16:25:31Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-12-16T23:09:49Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-12-17T21:53:56Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-12-17T23:24:22Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-12-17T23:25:00Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-12-14T21:24:18Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-15T01:39:14Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Good catch @mrocklin, thanks for fixing

I have one minor question (not related to changes in this PR)","2018-12-08T16:18:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-08T17:19:24Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-12-16T14:43:46Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-12-04T15:25:22Z",false,"COMMENTED"
"guillaumeeb","MEMBER","","2018-12-04T17:01:02Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-12-04T17:26:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-04T01:07:34Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-12-04T22:58:11Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-12-04T23:10:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-05T18:43:31Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-12-05T21:53:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-09T02:18:08Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-12-09T10:50:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-01T15:58:30Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-12-01T18:03:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-01T15:54:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-01T15:56:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-01T15:57:40Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-12-01T18:07:51Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-12-01T18:09:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-11-27T19:50:09Z",false,"COMMENTED"
"mrocklin","MEMBER","In general this looks good to me.","2018-11-27T18:29:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2018-11-27T18:53:34Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-11-28T15:36:21Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2018-11-26T17:25:10Z",false,"APPROVED"
"DPeterK","NONE","Looks good. Thanks @garaud! ","2018-11-23T14:12:23Z",false,"APPROVED"
"jcrist","MEMBER","","2018-11-26T14:15:58Z",false,"CHANGES_REQUESTED"
"garaud","CONTRIBUTOR","","2018-11-28T22:03:34Z",false,"COMMENTED"
"garaud","CONTRIBUTOR","","2018-11-29T07:23:46Z",false,"COMMENTED"
"DPeterK","NONE","This looks good. I like the implementation here with the thin wrapper 👍 ","2018-11-29T10:33:14Z",false,"APPROVED"
"jcrist","MEMBER","","2018-11-29T17:51:16Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2018-12-18T18:22:46Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-18T18:56:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-18T18:56:55Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-18T21:53:46Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-12-18T21:54:57Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-18T21:57:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-12-18T21:57:20Z",false,"COMMENTED"
"TomAugspurger","MEMBER","This PR looks good, but I haven't really kept up with the new high-level graph stuff.

Only request would be a docstring for the new `broadcast` method. And could you explain the reasoning behind that name? IIUC, adds a task to each partition / block of the input args? I worry a bit about broadcast because it clashes with NumPy's concept (and broadcasting data in distributed), but I haven't come up with a better name.","2018-12-19T15:23:48Z",false,"COMMENTED"
"jcrist","MEMBER","> There was an informal benchmark in #3998 (comment) which showed that it is marginally faster. The overhead in both cases is pretty small though.

This is only to clean up tracebacks/profiling information then? In that case, would we want to reconsider #4091 again, as it also solves those problems with no performance overhead (and some mild speedup)? Happy either way.","2018-11-26T14:37:16Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-11-26T15:54:07Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-11-26T16:01:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-11-26T16:08:47Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-11-26T16:10:30Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-11-26T16:11:32Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks for doing this @crusaderky !","2018-11-16T12:59:23Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-11-18T23:47:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-11-19T00:17:38Z",false,"COMMENTED"
"mrocklin","MEMBER","This seems great to me.  Thanks for tracking this down @jrbourbeau .

Merging in an hour if there are no further comments.","2018-11-15T12:33:51Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2018-11-15T13:28:40Z",false,"COMMENTED"
"jrbourbeau","MEMBER","LGTM","2018-11-14T03:43:17Z",false,"APPROVED"
"jakirkham","MEMBER","","2018-11-07T00:10:12Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-11-07T00:12:05Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-11-07T00:12:52Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-11-07T00:19:59Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-11-07T00:20:37Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-11-07T00:30:08Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-11-08T20:30:26Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-11-08T22:37:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-11-02T09:55:40Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-11-02T14:09:40Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-11-02T15:06:14Z",false,"COMMENTED"
"samc0de","CONTRIBUTOR","","2018-11-03T04:35:44Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-11-02T03:15:36Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-11-02T14:16:37Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-11-02T14:22:15Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-11-02T14:25:20Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-11-02T14:57:42Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-11-02T14:59:43Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-11-02T15:01:14Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-11-02T15:14:14Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-11-02T15:14:55Z",false,"COMMENTED"
"jakirkham","MEMBER","Thanks @jrbourbeau. Pushed a few commits to tidy some things as this has simplified the code a bit. Hope that is ok. Think there is one outstanding issue to address (noted below).","2019-05-23T11:43:25Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-12T18:32:28Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-12T18:33:56Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Thanks for all your work on this @jakirkham! This generally looks good to me. I've attached a couple of questions and a few nitpicky comments ","2019-06-12T20:19:01Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-12T20:33:47Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-12T20:34:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-12T20:37:35Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-12T20:38:09Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-12T21:28:35Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-12T21:34:20Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-06-12T22:14:50Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-13T14:31:25Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-13T15:13:53Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-13T15:17:37Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-13T15:17:54Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2019-06-13T15:24:13Z",false,"COMMENTED"
"jrbourbeau","MEMBER","This looks good to me. Thanks for all your work on this @jakirkham! Merging on green ","2019-06-13T15:25:12Z",false,"APPROVED"
"jakirkham","MEMBER","","2019-06-13T15:45:22Z",false,"COMMENTED"
"pentschev","MEMBER","","2019-06-13T15:50:19Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-06-21T01:59:41Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks @aberres, for the most part this looks good.

Besides the comments here, this could use a test (one in `dask.tests.test_delayed` and one in `dask.tests.test_base`). If you're not already familiar with pytest, you can skip a test if an import fails with `pytest.importorskip`.","2018-11-02T16:00:58Z",false,"COMMENTED"
"aberres","CONTRIBUTOR","","2018-11-06T14:03:18Z",false,"COMMENTED"
"jcrist","MEMBER","Apologies for the delay here, I've left a few comments.","2018-11-05T16:09:00Z",false,"CHANGES_REQUESTED"
"DPeterK","NONE","","2018-11-06T10:17:38Z",false,"COMMENTED"
"DPeterK","NONE","","2018-11-06T10:20:30Z",false,"COMMENTED"
"DPeterK","NONE","","2018-11-06T11:32:42Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-11-06T15:00:14Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-11-01T23:26:05Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-11-01T23:36:43Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-11-02T02:21:01Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-11-02T02:22:23Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-11-02T03:02:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-11-03T21:37:16Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-11-03T21:39:31Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks @andersy005 !  I left a couple small comments but generally this looks good to me.","2018-10-30T08:12:21Z",false,"COMMENTED"
"andersy005","MEMBER","","2018-10-30T15:51:25Z",false,"COMMENTED"
"andersy005","MEMBER","","2018-10-30T15:56:57Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-26T20:40:00Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2018-10-26T21:21:34Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2018-10-26T21:22:49Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2018-10-26T21:38:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2018-10-26T21:39:46Z",false,"COMMENTED"
"jcrist","MEMBER","This seems like a good change.","2018-10-29T17:37:46Z",false,"COMMENTED"
"djhoese","CONTRIBUTOR","","2018-10-29T17:44:01Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2018-10-29T20:07:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2018-10-29T20:12:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-30T23:58:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-30T23:59:33Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2018-10-31T02:19:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-24T21:14:11Z",false,"COMMENTED"
"jrbourbeau","MEMBER","Overall, this looks good to me! 

Added one comment","2018-10-24T20:57:41Z",false,"APPROVED"
"mrocklin","MEMBER","","2018-11-08T19:14:50Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-11-08T19:25:43Z",false,"COMMENTED"
"jrbourbeau","MEMBER","The failing Travis build appears to be due to using the `--doctest-modules` flag with `pytest`. I think this can be fixed by adding `dask/array/ghost.py` to the `collect_ignore` list in `conftest.py`. ","2018-10-23T17:50:54Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-10-23T18:05:27Z",false,"COMMENTED"
"jrbourbeau","MEMBER","LGTM

Added a couple of minor comments","2018-10-23T00:58:19Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2018-10-23T14:45:18Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2018-10-22T15:26:21Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2018-10-15T14:40:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-15T14:43:50Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-10-15T14:51:14Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-10-15T14:53:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-15T15:56:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-15T16:19:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-12T23:09:59Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-10-13T00:46:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-13T01:24:41Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-10-13T02:16:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-13T02:18:33Z",false,"COMMENTED"
"jcrist","MEMBER","On initial review this (and [this comment](https://github.com/dask/dask/issues/4038#issuecomment-426792480)) seems sane to me. Documentation on `HighGraph`, as well as the intent of `__dask_layers__` would be welcome. From what I understand these are the keys in the `HighGraph` that the collection output depends on *directly* (usually just the key)? It would be good to formally state this, as well as the desired output type (in the code I saw lists, sets, and tuples all being returned by different collections).","2018-10-24T18:27:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-24T19:49:58Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-10-30T14:36:28Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-10-30T14:42:14Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-10-30T14:52:43Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-10-30T14:56:50Z",false,"COMMENTED"
"jakirkham","MEMBER","Sorry for the additional nits. Tried to group them into a PR review to reduce noise while still isolating them. May have missed a few myself in the last review.

This makes me wonder if there is a way to get Sphinx to reference one example in multiple places to make maintenance efforts more focused. Guess there are tradeoffs in terms of potential added indirection. Maybe something to think about though.","2018-10-31T17:49:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-12T21:28:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-12T21:30:45Z",false,"COMMENTED"
"bartbroere","CONTRIBUTOR","","2018-10-12T21:36:29Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-12T21:37:27Z",false,"COMMENTED"
"bartbroere","CONTRIBUTOR","","2018-10-12T21:47:10Z",false,"COMMENTED"
"TomAugspurger","MEMBER","DataFrame changes look good. I'm not sure why the changes from https://github.com/dask/dask/pull/4093 are still showing up in this diff though.","2018-10-15T12:44:36Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-10-12T15:15:11Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-12T17:56:20Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-10-11T18:39:18Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-10-11T18:39:49Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-10-11T18:40:08Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-10-11T18:41:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-11T18:52:29Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-11T18:53:31Z",false,"COMMENTED"
"jrbourbeau","MEMBER","LGTM

Nice use of `to_dask_array()`","2018-10-11T18:14:09Z",false,"APPROVED"
"mrocklin","MEMBER","This seems good to me.  We should include it in documentation.  Also, we might want to call out the need to provide a `schema` and where to find that schema more loudly in the docstring.  I notice that it's already listed (with link!) in the parameters, but we might also want to include it in the main description for now. I suspect that it will be a common stumbling block.  Maybe we could also include an example for them that might be easy for them to copy-paste-modify for their own data?","2018-10-10T15:51:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-10T16:53:01Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Using `.partitions` seems fine to me, since `df.partitions[0]` is equivalent to `df.get_partition(0)`.","2018-10-09T14:08:15Z",false,"APPROVED"
"jcrist","MEMBER","","2018-10-09T16:19:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-09T16:29:00Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-10-09T16:43:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-09T16:47:00Z",false,"COMMENTED"
"jni","CONTRIBUTOR","","2018-10-11T03:55:13Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-10-08T15:44:24Z",false,"APPROVED"
"mrocklin","MEMBER","","2018-10-10T16:32:48Z",false,"COMMENTED"
"dhirschfeld","NONE","","2018-10-11T01:34:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-11T11:17:07Z",false,"COMMENTED"
"dhirschfeld","NONE","","2018-10-11T11:39:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-11T11:47:14Z",false,"COMMENTED"
"dhirschfeld","NONE","","2018-10-11T12:58:45Z",false,"COMMENTED"
"jcrist","MEMBER","LGTM.","2018-10-02T18:24:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-02T17:48:48Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-01T11:54:25Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-01T11:55:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-01T11:57:35Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-05T17:20:06Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-05T17:21:35Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-05T17:27:08Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-05T17:31:34Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-19T01:34:49Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-03-19T01:46:14Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-03-19T02:10:46Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-04-30T21:06:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-30T21:23:43Z",false,"COMMENTED"
"mrocklin","MEMBER","","2019-04-30T21:58:35Z",false,"COMMENTED"
"mrocklin","MEMBER","Some nitpicky comments.  In general this looks great though!","2019-04-30T22:53:42Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-01T17:52:33Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-01T17:52:55Z",false,"COMMENTED"
"jakirkham","MEMBER","","2019-05-01T17:53:28Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-28T12:58:06Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-09-28T14:04:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-28T12:47:46Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-28T12:48:44Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-28T12:49:08Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-28T12:56:30Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-09-28T14:00:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-28T14:02:25Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-09-28T14:02:48Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-09-28T14:03:17Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-28T13:42:04Z",false,"COMMENTED"
"martindurant","MEMBER","A couple of comments; but mostly: why put in this PR, do you mean to invite cupy people to develop more on it, or add more yourself? Without (experimental) support being mentioned in the docs, no one will use this.

On speed, mostly this is working on small data, and requires synchronous passing of all data to and from the GPU, so I am not surprised it is slow. You get fast with big arrays that stay on the GPU.","2018-09-29T22:46:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-01T18:07:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-01T18:08:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-01T18:10:48Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-09-29T22:21:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-29T23:19:05Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-29T23:21:54Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Looks good.","2018-09-28T16:20:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-28T18:03:44Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-10-02T18:55:43Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-02T20:50:54Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-10-02T20:55:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-03T21:22:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-03T21:29:18Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-10-03T21:41:47Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-04T16:32:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-04T20:54:06Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-10-04T20:57:22Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-10-04T20:58:36Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-10-04T21:11:48Z",false,"COMMENTED"
"mrocklin","MEMBER","Nice work!  A couple small comments.","2018-09-25T19:57:38Z",false,"COMMENTED"
"epall","CONTRIBUTOR","","2018-09-25T21:07:48Z",false,"COMMENTED"
"epall","CONTRIBUTOR","","2018-09-25T21:32:15Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-25T21:39:07Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-09-25T22:02:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-25T22:08:09Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-09-25T22:16:07Z",false,"COMMENTED"
"epall","CONTRIBUTOR","","2018-09-25T23:10:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-25T23:17:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-26T13:28:08Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-26T13:29:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-26T13:30:16Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-09-24T23:28:09Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-09-25T09:02:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-25T12:59:23Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-09-25T13:19:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-25T14:12:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-26T14:08:52Z",false,"COMMENTED"
"farrajota","MEMBER","","2018-09-26T14:18:36Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-04-24T18:39:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-04-24T18:41:45Z",false,"COMMENTED"
"jakirkham","MEMBER","","2020-04-24T20:00:22Z",false,"COMMENTED"
"TomAugspurger","MEMBER","cc @mrocklin and @jcrist. I'm guess your opinions have changed now that distributed is using it, but want to confirm.","2020-04-27T15:39:17Z",false,"APPROVED"
"jcrist","MEMBER","","2018-09-21T16:11:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-21T16:16:41Z",false,"COMMENTED"
"ian-whitestone","NONE","","2018-09-20T21:07:49Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-09-20T21:13:23Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-09-20T21:15:29Z",false,"COMMENTED"
"ian-whitestone","NONE","","2018-09-20T21:28:14Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-09-20T21:30:26Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-02T20:30:23Z",false,"COMMENTED"
"jcrist","MEMBER","I didn't reason out too much about the actual fusion algorithm, but from an impact on `dask.array` and the rest of dask, this seems good. The tests are nice to see. Left some cursory feedback, some of it probably more nit-picky than is needed right now (sorry). From a higher-level standpoint, it'd be nice if some of these internals were more heavily commented (mostly `optimize_atop` and `rewrite_atop`), as it's not 100% clear what's going on.","2018-10-05T16:55:28Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-05T19:12:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-05T19:15:55Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-05T19:22:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-05T19:58:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-05T19:58:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-05T19:58:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-05T19:59:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-05T19:59:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-05T20:58:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-05T21:21:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-05T22:44:54Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-10-09T19:10:22Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-10-09T19:11:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-19T13:00:19Z",false,"COMMENTED"
"shoyer","MEMBER","just a few style nits, I'm quite happy with the implementation here!","2018-10-03T15:42:47Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-10-03T17:07:17Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-10-08T23:12:33Z",false,"APPROVED"
"magonser","CONTRIBUTOR","","2018-10-09T18:03:43Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-09T18:05:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-10-09T18:05:32Z",false,"COMMENTED"
"ogrisel","CONTRIBUTOR","LGTM, besides the docstring that is now outdated.","2018-09-14T14:12:42Z",false,"APPROVED"
"mrocklin","MEMBER","","2018-09-13T19:47:53Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2018-09-13T22:08:44Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-13T22:27:37Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-13T22:38:29Z",false,"COMMENTED"
"mrocklin","MEMBER","The performance numbers on that example look pretty great.  I looked over things and left a couple of superficial comments.  I'll admit that I passed over the actual logic here in hopes that @eriknw will take that on :)

What are your thoughts on turning this on by default?  Alternatively, we might consider engaging configuration options more heavily in optimizations generally and encourage people to play around a bit in config files.","2018-09-14T13:56:42Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-21T20:08:56Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-09-21T20:18:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-21T20:44:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-25T16:27:44Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-25T16:28:33Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-09-25T16:45:24Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-09-25T16:46:31Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Things look OK at a glance, though I didn't review thoroughly. docstrings would help me follow things a bit better I think.","2018-09-19T16:17:56Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Gave another quick look. Mostly beyond me, but things look fine overall.","2018-09-28T16:30:55Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-09-28T19:20:07Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-09-28T19:28:46Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-09-28T19:31:42Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-10-01T16:18:07Z",false,"APPROVED"
"martindurant","MEMBER","","2018-10-01T17:15:35Z",false,"COMMENTED"
"TomAugspurger","MEMBER","This looks good I think, just a couple small comments.

~@jsignell do you have any thoughts on how this will interact with https://github.com/dask/dask/pull/3909?~

Sorry I was thinking of a different issue.","2018-09-12T15:19:02Z",false,"COMMENTED"
"jsignell","MEMBER","","2018-09-13T14:28:23Z",false,"COMMENTED"
"jsignell","MEMBER","","2018-09-13T14:29:03Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Sorry, I'm not sure why but this review wasn't submitted on Friday :/","2018-09-17T12:28:50Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-09-17T12:45:07Z",false,"COMMENTED"
"jsignell","MEMBER","","2018-09-17T16:00:12Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks, LGTM.","2018-09-17T16:15:25Z",false,"APPROVED"
"jakirkham","MEMBER","","2018-09-10T19:06:31Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-09-08T21:49:57Z",false,"APPROVED"
"hmaarrfk","CONTRIBUTOR","","2018-09-10T15:30:16Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-09-10T15:46:42Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-09-10T16:04:10Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-09-10T16:08:29Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-09-10T16:43:27Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-09-10T16:44:20Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-09-10T16:45:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-09-13T19:07:29Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-09-15T22:46:55Z",false,"APPROVED"
"mrocklin","MEMBER","","2018-09-05T17:15:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-05T17:17:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-05T17:18:09Z",false,"COMMENTED"
"TAdeJong","CONTRIBUTOR","","2018-09-05T17:27:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-05T17:28:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-05T17:29:37Z",false,"COMMENTED"
"TAdeJong","CONTRIBUTOR","","2018-09-05T17:32:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-05T17:35:25Z",false,"COMMENTED"
"TAdeJong","CONTRIBUTOR","","2018-09-05T17:41:08Z",false,"COMMENTED"
"TAdeJong","CONTRIBUTOR","","2018-09-05T17:43:41Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-05T17:47:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-05T17:48:34Z",false,"COMMENTED"
"TAdeJong","CONTRIBUTOR","","2018-09-05T17:59:46Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-05T18:01:12Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-09-07T14:46:30Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-09-07T14:52:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-05T12:19:07Z",false,"COMMENTED"
"rainwoodman","CONTRIBUTOR","","2018-09-05T20:39:05Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-05T20:43:54Z",false,"COMMENTED"
"rainwoodman","CONTRIBUTOR","","2018-09-05T21:51:10Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-09-04T19:49:49Z",false,"APPROVED"
"shoyer","MEMBER","","2018-09-04T15:14:28Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-09-04T20:12:57Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-09-04T20:13:54Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-09-04T20:14:49Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-09-04T20:15:05Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-09-04T20:16:20Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-09-04T20:28:16Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-09-04T20:41:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-09-05T12:36:38Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-09-14T15:19:11Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-09-14T16:39:39Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-09-14T17:06:38Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks @TAdeJong .  In general this looks good to me.  

The tests that you've provided do a good job to establish confidence that these changes are accurate across many situations.  However, it also looks like they extend the duration of the test suite significantly.  (13 of 56s for dask.array on my machine).  Do you have any thoughts on how we might speed these up?

It looks like the test failures on travis-ci are unrelated and probably due to a conda or CI issue.  I'm restarting them now.","2018-09-02T20:27:46Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-09-04T04:10:06Z",false,"COMMENTED"
"TAdeJong","CONTRIBUTOR","","2018-09-04T13:31:13Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-09-04T15:42:36Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-09-05T20:44:52Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-09-05T20:48:05Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-09-05T20:48:52Z",false,"APPROVED"
"martindurant","MEMBER","","2019-02-08T02:15:54Z",false,"COMMENTED"
"martindurant","MEMBER","","2019-02-08T02:16:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Sorry for the delay in reviewing.","2018-09-12T15:36:05Z",false,"COMMENTED"
"rvaidya","CONTRIBUTOR","","2018-09-12T23:50:57Z",false,"COMMENTED"
"rvaidya","CONTRIBUTOR","","2018-09-13T00:01:43Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-09-13T11:22:01Z",false,"COMMENTED"
"rvaidya","CONTRIBUTOR","","2018-09-13T18:08:26Z",false,"COMMENTED"
"rvaidya","CONTRIBUTOR","","2018-09-13T18:12:57Z",false,"COMMENTED"
"rvaidya","CONTRIBUTOR","","2018-09-13T18:15:51Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-09-13T18:58:08Z",false,"COMMENTED"
"mrocklin","MEMBER","This looks great @jsignell !  Thanks!  

A couple questions below for @martindurant about how best to handle the changes in dask.bytes (he tends to play in this space the most) and a small suggestion for windows compatibility.

I'm looking forward to seeing this in.","2018-08-28T16:52:50Z",false,"COMMENTED"
"jsignell","MEMBER","","2018-08-28T18:41:49Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-08-29T12:56:42Z",false,"COMMENTED"
"jsignell","MEMBER","","2018-08-29T13:03:29Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-08-29T17:05:32Z",false,"COMMENTED"
"jsignell","MEMBER","","2018-08-29T17:09:25Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-08-29T17:11:16Z",false,"COMMENTED"
"jsignell","MEMBER","","2018-08-29T17:24:23Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this looks pretty good to me. Thanks Julia!","2018-08-29T17:28:15Z",false,"COMMENTED"
"jsignell","MEMBER","","2018-08-29T17:36:42Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-08-29T17:40:24Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-08-29T17:49:43Z",false,"COMMENTED"
"jsignell","MEMBER","","2018-08-29T17:56:05Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-08-29T19:12:17Z",false,"COMMENTED"
"jcrist","MEMBER","One last nit, otherwise I think this is good to go (provided tests pass).","2018-08-29T19:18:07Z",false,"COMMENTED"
"jsignell","MEMBER","","2018-08-29T19:18:22Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-08-30T13:35:19Z",false,"COMMENTED"
"jsignell","MEMBER","","2018-08-30T13:39:38Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-08-27T23:35:49Z",false,"COMMENTED"
"shoyer","MEMBER","","2019-06-24T22:55:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-25T16:21:24Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-08-21T20:15:24Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-08-21T20:16:15Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-08-21T19:50:54Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-08-21T22:32:44Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-08-22T00:42:29Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-08-22T13:58:26Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-08-22T18:04:08Z",false,"COMMENTED"
"mrocklin","MEMBER","This looks good.  I left a few inline comments.

Additionally:

1.  I think it might be good for this function to return a new value rather than mutate the inputs
2.  We should add this to the docs in configuration.rst","2018-08-21T02:50:00Z",false,"COMMENTED"
"jhamman","MEMBER","","2018-08-21T05:11:48Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-08-21T11:47:45Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this seems fine to me.","2018-08-21T15:15:11Z",false,"COMMENTED"
"jhamman","MEMBER","","2018-08-21T16:38:11Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-08-22T11:48:39Z",false,"COMMENTED"
"jhamman","MEMBER","","2018-08-22T14:10:42Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-08-22T15:51:07Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-08-22T17:29:40Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-09-04T10:45:58Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-09-04T10:46:42Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-09-04T10:47:17Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Change and test looks good, just need to fix the linting errors.","2018-09-04T10:47:43Z",false,"COMMENTED"
"Sriharsha-hatwar","CONTRIBUTOR","","2018-09-04T16:20:14Z",false,"COMMENTED"
"Sriharsha-hatwar","CONTRIBUTOR","","2018-09-04T16:20:48Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-08-19T18:59:14Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this looks good to me. Thanks for the PR.

Grepping also turned up one you missed in `dask/dataframe/core.py`. I don't think there's an easy way to test for this though, so until we get 3.7 on travis ci this may regress.","2018-08-15T01:11:03Z",false,"COMMENTED"
"TomAugspurger","MEMBER","minor comment. LGTM","2018-08-07T18:00:37Z",false,"APPROVED"
"jcrist","MEMBER","","2018-08-07T18:06:43Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-08-06T19:50:10Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-08-06T20:12:36Z",false,"COMMENTED"
"hugovk","CONTRIBUTOR","","2018-08-07T05:57:43Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-08-05T14:25:13Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-08-06T20:36:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-08-20T16:04:49Z",false,"COMMENTED"
"TAdeJong","CONTRIBUTOR","","2018-08-20T16:07:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-08-20T16:10:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-08-20T19:27:20Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks for doing this @hmaarrfk .  Sorry for the late review.","2018-08-04T13:22:02Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-08-04T14:36:19Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-08-04T14:41:37Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-08-04T14:42:23Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-08-04T14:45:27Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-08-04T14:47:24Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-08-03T13:56:28Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-08-03T14:15:36Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-08-01T18:18:11Z",false,"APPROVED"
"jcrist","MEMBER","Apologies for the late review here. Overall this looks fine, requested a few additional cleanups to the warnings.","2018-08-02T14:39:20Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-08-02T14:47:55Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-08-02T14:48:25Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-08-02T14:50:24Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-08-02T14:50:58Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-08-02T14:51:14Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-08-02T14:51:20Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-08-02T14:58:57Z",false,"COMMENTED"
"rmsare","CONTRIBUTOR","","2018-08-02T18:51:44Z",false,"COMMENTED"
"jakirkham","MEMBER","LGTM. Thanks @rmsare. 😄","2018-08-06T15:39:54Z",false,"APPROVED"
"martindurant","MEMBER","Looks good, a couple of small comments.","2018-07-31T20:21:49Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2018-07-31T20:31:11Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-07-31T20:32:37Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2018-07-31T20:36:07Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2018-07-31T20:40:02Z",false,"COMMENTED"
"j-bennet","CONTRIBUTOR","","2018-07-31T20:48:02Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Just a small comment, but no need to address that here or at all if you think it's not a big deal.","2018-07-26T21:13:05Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2018-07-26T21:14:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-07-26T22:02:52Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-07-26T22:08:21Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-07-26T22:08:55Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-08-07T14:58:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-07-24T19:22:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-07-24T19:24:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-07-24T19:24:29Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-07-24T21:23:12Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-07-25T11:21:32Z",false,"COMMENTED"
"mrocklin","MEMBER","Looks good to me.  Thanks @jakirkham ","2018-07-23T14:51:50Z",false,"APPROVED"
"TomAugspurger","MEMBER","+1

We'll want to think a bit about if / how we'll include these in the documentation. I'm not even sure if an entry in the API docs is necessary.","2018-07-21T03:05:55Z",false,"APPROVED"
"mrocklin","MEMBER","This looks great!  Thank you for the extensive testing.  I have a small comment about assertions and testing but generally this looks great.","2018-07-17T11:25:24Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-07-17T11:39:29Z",false,"COMMENTED"
"mrocklin","MEMBER","In principle this seems good to me.  Any thoughts or concerns @jakirkham ?","2018-07-17T20:45:36Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks for tracking this down @itamarst !  In general this looks good to me, although we'll need to simplify the testing stuff for now.  It would be nice to separate the conversation about the use of hypothesis to an issue of its own.","2018-07-15T03:38:53Z",false,"COMMENTED"
"itamarst","CONTRIBUTOR","","2018-07-15T15:57:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-07-15T20:51:27Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-07-15T02:37:39Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2018-07-15T14:49:43Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-07-15T14:51:12Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-07-14T19:49:33Z",false,"COMMENTED"
"itamarst","CONTRIBUTOR","","2018-07-14T20:39:10Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-07-14T20:48:17Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-07-15T22:22:31Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-07-15T22:23:17Z",false,"COMMENTED"
"itamarst","CONTRIBUTOR","","2018-07-15T22:43:39Z",false,"COMMENTED"
"itamarst","CONTRIBUTOR","","2018-07-15T22:44:43Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-07-16T14:16:53Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-07-16T14:18:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-07-16T14:20:21Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-07-16T18:30:10Z",false,"COMMENTED"
"itamarst","CONTRIBUTOR","","2018-07-16T18:46:37Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-07-16T18:56:17Z",false,"COMMENTED"
"pp-mo","NONE","","2018-08-03T15:31:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-07-20T05:09:21Z",false,"COMMENTED"
"cmohl2013","CONTRIBUTOR","","2018-07-20T09:16:36Z",false,"COMMENTED"
"mrocklin","MEMBER","This is fantastic. Thank you for solving this @eric-bonfadini .  I have one small comment, but generally this looks great to me.  Thank you so much.","2018-07-10T21:13:39Z",false,"COMMENTED"
"eric-bonfadini","CONTRIBUTOR","","2018-07-10T22:22:57Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-07-20T13:45:20Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-07-20T13:48:18Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-07-20T13:52:35Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-07-20T13:53:15Z",false,"COMMENTED"
"d-v-b","MEMBER","","2018-07-23T14:13:39Z",false,"COMMENTED"
"d-v-b","MEMBER","","2018-07-23T14:26:55Z",false,"COMMENTED"
"d-v-b","MEMBER","","2018-07-23T14:46:51Z",false,"COMMENTED"
"d-v-b","MEMBER","","2018-07-23T17:56:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-08-02T18:05:32Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-08-02T18:09:40Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-08-02T18:11:35Z",false,"COMMENTED"
"d-v-b","MEMBER","","2018-08-02T19:35:34Z",false,"COMMENTED"
"d-v-b","MEMBER","","2018-12-09T22:15:35Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-28T20:09:29Z",false,"COMMENTED"
"d-v-b","MEMBER","lgtm","2019-06-29T23:01:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","This is a really nice addition to the delayed documentation! Lots of good information 👍 

Did a read through and am including a couple of tiny edits. ","2018-07-08T23:27:48Z",false,"COMMENTED"
"jrmlhermitte","CONTRIBUTOR","Gave it a quick read. This is a great addition!
One small thing I'd suggest is maybe mentioning how to avoid calling `compute()` (or pointing to documentation that explains it).
For example
`a = np.asarray(a)`","2018-07-09T00:17:22Z",false,"APPROVED"
"mrocklin","MEMBER","","2018-07-09T11:11:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-07-09T11:11:40Z",false,"COMMENTED"
"mrocklin","MEMBER","This looks great!  Thanks for tracking this down and fixing things @crusaderky 

I've added a few comments, mostly cosmetic","2018-07-05T12:40:00Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-07-05T13:34:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-07-05T13:35:57Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-07-08T00:07:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-07-08T00:08:11Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-07-08T00:08:24Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-07-08T16:46:32Z",false,"COMMENTED"
"jhamman","MEMBER","LGTM.","2018-07-12T03:51:35Z",false,"APPROVED"
"jcrist","MEMBER","Apologies for the delay here. One nit, otherwise this looks good to me.","2018-08-02T14:46:21Z",false,"COMMENTED"
"mrocklin","MEMBER","In principle this looks good to me.  Thanks @hmaarrfk !

Small note on testing and Python 2.  We can wait to see how the CI system responds though first.","2018-06-29T22:51:48Z",false,"COMMENTED"
"hmaarrfk","CONTRIBUTOR","","2018-06-29T22:55:36Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-07-20T16:28:04Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-07-20T16:31:10Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-06-29T17:29:31Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-06-29T18:21:49Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-29T20:11:03Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-06-29T20:21:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-30T11:42:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-30T16:41:24Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-30T16:51:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-30T21:24:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-30T21:24:29Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-27T02:01:24Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-27T02:01:52Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-27T02:03:42Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-27T02:04:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2018-06-27T02:43:04Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-27T03:34:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-27T17:22:50Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2018-06-27T20:14:36Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2018-06-27T20:21:15Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2018-06-27T20:21:56Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-22T16:36:52Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-06-21T14:06:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-21T14:15:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-21T14:15:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-21T14:16:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-21T14:16:36Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-06-22T15:39:24Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-22T18:33:36Z",false,"COMMENTED"
"shoyer","MEMBER","Looks great!","2018-06-22T19:58:45Z",false,"APPROVED"
"jakirkham","MEMBER","","2018-06-20T03:11:36Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-20T03:14:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-20T03:23:49Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-20T03:24:07Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-20T03:25:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-20T14:02:50Z",false,"COMMENTED"
"shoyer","MEMBER","Thanks @mrocklin! This looks good to me.","2018-06-19T19:58:54Z",false,"APPROVED"
"jrbourbeau","MEMBER","","2018-06-19T19:07:55Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-06-19T23:29:07Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2018-06-20T00:28:15Z",false,"COMMENTED"
"TomAugspurger","MEMBER","💯 this will come in handy for dask-ml, which needs a weighted average.","2018-06-20T13:51:14Z",false,"COMMENTED"
"TomAugspurger","MEMBER","The implementation seems good.

Only thing missing is a changelog entry.","2018-06-20T13:59:50Z",false,"APPROVED"
"mrocklin","MEMBER","","2018-06-19T17:09:16Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-19T17:37:36Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-19T18:30:49Z",false,"COMMENTED"
"mrocklin","MEMBER","Overall this looks good to me.  Two small comments.","2018-06-19T23:24:07Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-06-17T04:59:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-17T05:04:40Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-17T06:17:37Z",false,"COMMENTED"
"mrocklin","MEMBER","In general the approach seems sensible to me.  One small comment.","2018-06-17T14:04:38Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-17T17:33:49Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-17T06:14:39Z",false,"COMMENTED"
"martindurant","MEMBER","Yep, makes sense.
I trust that in the *general* case, we want to get the latest of any dependency, so that we sport when something changed/broke upstream before users do.","2018-06-18T12:29:14Z",false,"APPROVED"
"mrocklin","MEMBER","","2018-06-16T13:54:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-16T13:55:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-14T19:41:50Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-14T21:56:01Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-14T21:56:15Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-14T23:17:12Z",false,"COMMENTED"
"mrocklin","MEMBER","This looks great to me.  Thanks for the fix @henriqueribeiro !

I left a small comment, but I'd be happy to merge this as-is.","2018-06-14T17:11:32Z",false,"COMMENTED"
"henriqueribeiro","CONTRIBUTOR","","2018-06-15T09:41:16Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-06-14T12:28:09Z",false,"COMMENTED"
"mrocklin","MEMBER","A few minor comments, mostly stylistic.  

@crusaderky you may be over-estimating the intelligence of reviewers.  If you have time to say what you did and how you solved the problem that would help. It takes me a surprisingly long time to get into how someone else solves a problem only by looking at their code.","2018-06-15T02:38:22Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-06-16T15:56:05Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-06-16T16:04:08Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-06-16T16:05:06Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-06-16T17:33:10Z",false,"COMMENTED"
"mrocklin","MEMBER","In general this looks good to me.  Thank you for adding the comprehensive docstrings @crusaderky .  A few small comments below.  

I also appreciate your patience with review on this.  We seem to be low on reviewers these days.","2018-06-20T14:55:55Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-06-21T18:04:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-13T19:14:11Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-13T19:24:44Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-14T05:02:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-13T16:48:29Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-13T17:21:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-13T17:24:10Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-13T17:38:04Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-13T17:39:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-13T17:40:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-13T17:40:41Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-13T18:12:11Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-13T18:57:40Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-13T19:04:12Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-13T14:40:16Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-13T14:45:24Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-13T15:11:25Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-13T15:28:56Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-13T15:45:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-13T15:49:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-13T17:21:22Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-13T19:36:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-13T13:56:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-13T14:50:00Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-13T14:59:41Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-12T22:33:20Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-13T02:17:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-13T13:57:34Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-13T14:43:16Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-13T14:45:38Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-13T19:38:34Z",false,"APPROVED"
"mrocklin","MEMBER","","2018-06-11T13:50:04Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-06-26T20:41:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-26T20:56:21Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-06-26T21:34:47Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-27T01:53:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-27T10:42:24Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-27T17:46:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-27T17:50:24Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-14T10:54:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-14T11:01:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-14T11:03:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-14T11:04:10Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-14T11:06:54Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-14T11:08:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-14T11:09:55Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-14T11:13:38Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-14T11:15:51Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-14T11:16:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-14T11:19:57Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-14T11:23:12Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-14T11:24:41Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-14T11:28:17Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-14T11:31:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-14T11:36:53Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-14T13:21:22Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-14T13:23:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-14T15:27:50Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-08T00:10:33Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-08T15:18:01Z",false,"COMMENTED"
"mrocklin","MEMBER","Nice work!  A few nitpicky comments below.","2018-06-07T17:46:57Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-08T03:07:10Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-08T03:07:14Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-08T03:19:27Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-08T03:21:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-08T13:18:26Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-08T14:23:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-08T17:48:33Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-09T02:41:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-10T15:18:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-10T15:19:08Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-10T16:10:27Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-10T16:12:39Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-10T16:13:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-10T16:25:47Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-10T16:29:40Z",false,"COMMENTED"
"convexset","CONTRIBUTOR","","2018-06-10T16:35:41Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-06-07T14:45:27Z",false,"COMMENTED"
"erdnaavlis","CONTRIBUTOR","","2018-06-07T15:24:31Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-06-07T15:32:30Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-06-11T14:57:16Z",false,"COMMENTED"
"erdnaavlis","CONTRIBUTOR","","2018-06-11T17:46:22Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-06-11T19:29:04Z",false,"COMMENTED"
"erdnaavlis","CONTRIBUTOR","","2018-06-12T10:58:21Z",false,"COMMENTED"
"shoyer","MEMBER","This looks sane to me, but I'm not familiar with the details of arrays optimizations that dask uses to optimize indexing.","2018-06-11T22:58:56Z",false,"COMMENTED"
"shoyer","MEMBER","Based on my cursory understanding of slice optimizations in dask.array, this is OK.","2018-06-20T20:51:48Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-06T12:46:30Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-13T18:54:24Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-14T03:48:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-07T17:32:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-07T17:34:19Z",false,"COMMENTED"
"stsievert","MEMBER","","2018-06-08T22:27:31Z",false,"COMMENTED"
"stsievert","MEMBER","","2018-06-08T22:28:12Z",false,"COMMENTED"
"stsievert","MEMBER","","2018-06-08T22:28:38Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2018-06-05T01:13:32Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-05-31T13:29:42Z",false,"COMMENTED"
"rainwoodman","CONTRIBUTOR","","2018-05-31T17:17:31Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-05-31T22:46:47Z",false,"COMMENTED"
"rainwoodman","CONTRIBUTOR","","2018-06-01T01:51:56Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-05-29T20:22:41Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-05-29T20:23:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-29T14:04:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-30T18:04:57Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-06-01T14:32:26Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks! Just one small comment / request. Looks good otherwise.","2018-05-26T13:17:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2018-05-26T14:58:22Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-05-26T15:11:47Z",false,"APPROVED"
"mrocklin","MEMBER","","2018-06-07T20:10:20Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-07T20:15:43Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-06-07T20:23:52Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-07T20:47:02Z",false,"COMMENTED"
"shoyer","MEMBER","This will be quite welcome!

(Edit: I did not mean to click approve -- I have an inline comment that GitHub dropped)","2018-05-17T15:38:26Z",false,"APPROVED"
"shoyer","MEMBER","","2018-05-17T16:12:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-17T19:14:50Z",false,"COMMENTED"
"martindurant","MEMBER","Mostly questions, but some of those were answered in the doc at the end - may want to point some docstrings to the doc too. ","2018-05-18T14:53:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T14:56:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T14:56:37Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T14:57:31Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T14:58:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T14:58:48Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T14:59:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T15:00:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T15:00:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T15:01:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T15:05:35Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-18T15:05:59Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-18T15:06:37Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T15:07:11Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T15:11:37Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-18T15:14:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T15:24:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T15:25:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T15:25:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T15:26:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T15:26:14Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T15:26:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T15:26:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T15:27:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-18T15:29:45Z",false,"COMMENTED"
"shoyer","MEMBER","some minor comments","2018-05-19T20:53:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-19T21:37:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-19T21:38:11Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-19T21:38:17Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-19T21:38:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-19T21:39:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-19T21:39:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-19T21:40:00Z",false,"COMMENTED"
"jakirkham","MEMBER","Thanks for working on this @mrocklin! Excited to play with these changes.

Added a few comments above mainly how documentation/commenting might improve. Fair warning I'm still getting over a cold so some confusion is probably on my part alone. Feel free to use your discretion on what part you respond to/address.

Independently it's not clear to me whether this behavior should be called `auto` or whether it should get a more descriptive name and we add a few other options alongside. Think there are arguments both ways and would be good to hear your POV on this.

Also had some comments about how things like `limit` might be extended in this and/or future PRs. Would be good to hear your thoughts on this as well.

Hope this helps. Happy to answer questions should any arise. Thanks again for putting this together. :)","2018-05-23T21:03:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-23T22:41:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-23T22:41:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-23T22:41:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-23T22:42:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-23T22:42:08Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-23T22:44:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-23T22:45:42Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-23T22:46:14Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-23T22:47:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-23T22:50:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-23T22:54:16Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-05-17T00:47:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-17T11:18:08Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-17T14:22:01Z",false,"COMMENTED"
"TomAugspurger","MEMBER","cc @mrocklin if you have a chance to look.","2018-05-16T13:57:13Z",false,"COMMENTED"
"mrocklin","MEMBER","In general this looks nice to me.  

The deviation from the Pandas convention seems slightly concerning, but I think that what is in here is probably the right choice.  

I like the disclaimer in the docstring.  I might recommend also using the phrase ""line-delimited JSON"" in the header of the `to_json` method.  I suspect that this will be more clear to some users (at least me :)) than by using the pandas keyword names in the description.  I suspect that these may not be as well known.","2018-05-13T01:17:45Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-13T01:40:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-15T14:49:47Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-15T14:50:11Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-15T14:52:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-15T14:54:34Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-15T14:59:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-15T15:02:40Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-15T15:05:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-15T15:14:10Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-15T15:24:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-15T15:26:04Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-15T15:29:14Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-15T16:58:08Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-15T17:03:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-15T17:04:14Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-15T17:05:51Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-15T17:09:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-15T17:10:56Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-05-12T07:17:40Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-12T12:17:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-16T12:22:41Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-16T12:26:09Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-16T13:09:33Z",false,"COMMENTED"
"mrocklin","MEMBER","This looks good to me.  Thanks for taking this on @cr458 ","2018-05-10T11:06:28Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-05-10T12:31:46Z",false,"COMMENTED"
"cr458","CONTRIBUTOR","","2018-05-11T02:12:17Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-05-17T13:50:10Z",false,"COMMENTED"
"cr458","CONTRIBUTOR","","2018-05-23T08:55:10Z",false,"COMMENTED"
"tollask","NONE","","2018-12-21T21:34:58Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-09-04T19:02:47Z",false,"COMMENTED"
"joergdietrich","CONTRIBUTOR","","2019-09-10T19:23:16Z",false,"COMMENTED"
"joergdietrich","CONTRIBUTOR","","2019-09-10T19:24:06Z",false,"COMMENTED"
"joergdietrich","CONTRIBUTOR","","2019-09-10T19:31:37Z",false,"COMMENTED"
"joergdietrich","CONTRIBUTOR","","2019-09-10T19:31:49Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-10-09T13:53:11Z",false,"COMMENTED"
"joergdietrich","CONTRIBUTOR","","2019-10-09T20:22:08Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-10-10T18:02:57Z",false,"COMMENTED"
"joergdietrich","CONTRIBUTOR","","2019-10-10T19:16:53Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-10-10T20:23:09Z",false,"APPROVED"
"mrocklin","MEMBER","Thanks for doing this!  A few small style comments below.","2018-05-08T10:46:16Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-05-05T01:46:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-06T16:09:01Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-05-06T20:29:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-07T16:08:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-09T15:07:48Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-09T15:08:37Z",false,"COMMENTED"
"shoyer","MEMBER","Looks good to me!","2018-05-11T22:38:11Z",false,"APPROVED"
"mrocklin","MEMBER","","2018-05-04T16:25:54Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-05-04T16:58:41Z",false,"COMMENTED"
"xhochy","CONTRIBUTOR","","2018-05-03T14:17:02Z",false,"APPROVED"
"mrocklin","MEMBER","In principle this seems fine to me.  Thanks @Pierre-Bartet ","2018-05-03T12:42:40Z",false,"COMMENTED"
"Pierre-Bartet","CONTRIBUTOR","","2018-05-03T13:10:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-03T13:13:03Z",false,"COMMENTED"
"mrocklin","MEMBER","Generally seems sensible.  A few small comments.  Looking forward to seeing where this goes.","2018-05-02T20:22:18Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-03T20:54:32Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-04T20:38:55Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-04T20:40:06Z",false,"COMMENTED"
"alimanfoo","CONTRIBUTOR","","2018-05-04T21:28:18Z",false,"COMMENTED"
"alimanfoo","CONTRIBUTOR","","2018-05-04T21:33:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-04T21:35:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-04T21:36:37Z",false,"COMMENTED"
"alimanfoo","CONTRIBUTOR","Great to see this PR, will be very useful!","2018-05-04T21:41:45Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-04T22:04:10Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-04T22:34:41Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-04T22:36:22Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-04T22:41:30Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-04T23:50:51Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-09T05:48:37Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-09T05:52:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-09T06:08:46Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-09T06:16:17Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-09T11:38:21Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-09T11:39:25Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-09T14:37:52Z",false,"COMMENTED"
"alimanfoo","CONTRIBUTOR","","2018-05-09T15:03:41Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-09T15:07:31Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-09T15:11:28Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-09T15:14:29Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-09T15:17:59Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-09T15:24:06Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-14T15:31:48Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-14T15:32:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-15T12:17:39Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-15T13:42:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-15T13:45:22Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-15T13:55:53Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-16T22:31:39Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-16T22:48:32Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-22T19:28:03Z",false,"COMMENTED"
"alimanfoo","CONTRIBUTOR","","2018-05-23T14:35:47Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-23T14:59:54Z",false,"COMMENTED"
"alimanfoo","CONTRIBUTOR","","2018-05-23T21:26:19Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-23T21:37:10Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-23T21:37:50Z",false,"COMMENTED"
"alimanfoo","CONTRIBUTOR","","2018-05-23T21:39:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-23T21:39:07Z",false,"COMMENTED"
"alimanfoo","CONTRIBUTOR","","2018-05-23T21:40:51Z",false,"COMMENTED"
"alimanfoo","CONTRIBUTOR","","2018-05-23T21:44:08Z",false,"COMMENTED"
"alimanfoo","CONTRIBUTOR","All looks good to me.","2018-05-24T11:55:36Z",false,"APPROVED"
"alimanfoo","CONTRIBUTOR","","2018-05-24T12:13:29Z",false,"COMMENTED"
"alimanfoo","CONTRIBUTOR","","2018-05-24T12:39:58Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-24T13:29:59Z",false,"COMMENTED"
"alimanfoo","CONTRIBUTOR","","2018-05-24T13:36:20Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-25T21:20:26Z",false,"COMMENTED"
"alimanfoo","CONTRIBUTOR","","2018-05-25T21:34:40Z",false,"COMMENTED"
"alimanfoo","CONTRIBUTOR","","2018-05-25T21:34:44Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-13T16:29:15Z",false,"COMMENTED"
"xhochy","CONTRIBUTOR","+1, I really like that this goes away. I felt awalys quite weird to add this while opening a PR (especially as the log also references the yet-unknown PR number)","2018-05-03T06:39:15Z",false,"APPROVED"
"jcrist","MEMBER","","2018-05-03T13:09:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-02T10:01:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-02T12:03:51Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-02T15:49:56Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-02T15:50:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-03T12:18:25Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-08T05:47:56Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-08T06:02:02Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-06-03T02:47:22Z",false,"COMMENTED"
"martindurant","MEMBER","A couple of quick thoughts without going deep.","2018-04-30T14:37:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-30T17:03:44Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-30T17:04:14Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this seems mostly fine to me. I do think if we move forward with this we might want to deprecate the old `get` keyword, as it doesn't make sense to have two ways to do something.","2018-05-02T20:48:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-02T21:49:48Z",false,"COMMENTED"
"shoyer","MEMBER","I think this will be a big win for readability!","2018-05-02T22:06:28Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-03T11:07:33Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-04-25T19:58:37Z",false,"APPROVED"
"TomAugspurger","MEMBER","Just one extremely minor nitpick, and one question :)

Does the same wrapping need to be applied to `dd.Index`?","2018-04-26T11:13:14Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2018-04-26T17:41:44Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-05-01T16:41:36Z",false,"APPROVED"
"mrocklin","MEMBER","Looks good to me.  A couple minor comments follow.","2018-04-24T06:20:26Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-24T07:44:57Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-24T07:47:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-24T14:44:37Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-24T16:52:40Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-24T18:27:14Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-24T20:05:54Z",false,"COMMENTED"
"mrocklin","MEMBER","Some small comments and questions. Generally this looks good to me.","2018-04-25T09:48:16Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-25T15:00:30Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-25T15:06:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-25T15:08:57Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-25T15:26:25Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-04-25T15:27:45Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-25T15:34:10Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-25T15:35:01Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-25T16:54:21Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-23T19:57:30Z",false,"APPROVED"
"jakirkham","MEMBER","","2018-04-23T19:58:44Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2018-04-23T20:09:34Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-23T20:30:11Z",false,"COMMENTED"
"martindurant","MEMBER","Several minor comments here.","2018-04-24T19:48:17Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-25T09:08:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-25T09:09:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-25T09:10:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-25T09:14:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-25T09:16:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-25T09:18:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-25T09:20:43Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-25T09:21:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-25T09:22:18Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-01T11:59:26Z",false,"COMMENTED"
"lesteve","MEMBER","","2018-05-02T15:26:00Z",false,"COMMENTED"
"lesteve","MEMBER","","2018-05-02T15:33:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-02T15:36:24Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-02T15:36:33Z",false,"COMMENTED"
"lesteve","MEMBER","","2018-05-02T15:46:00Z",false,"COMMENTED"
"lesteve","MEMBER","","2018-05-02T15:59:26Z",false,"COMMENTED"
"jcrist","MEMBER","My main issue with this is the use of a *global* configuration object. I have a slight preference for moving the global config state and functions into a class, and initing an instance of that class on load. This would consolidate the implementation into a single object, which would be clearer to me what's global and what's not. It also would allow for changing the configuration files after init and reloading them.

This is similar to the hadoop ecosystem, where services subclass `Configuration`, and applications create an instance of `Configuration` to use throughout. A super simple version of this can be seen in python [here](https://github.com/jcrist/skein/blob/master/skein/hadoop_config.py#L46)","2018-05-02T21:15:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-03T10:22:26Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-03T10:32:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-03T10:33:11Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-05-03T13:17:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-03T13:21:19Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-04-20T18:01:41Z",false,"COMMENTED"
"lesteve","MEMBER","","2018-04-20T14:20:17Z",false,"COMMENTED"
"lesteve","MEMBER","","2018-04-20T14:23:14Z",false,"COMMENTED"
"jhamman","MEMBER","","2018-04-23T23:05:45Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-24T03:31:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-02T13:16:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-03T03:28:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-03T08:52:24Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-16T20:39:57Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-16T23:03:58Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-04-16T23:48:35Z",false,"COMMENTED"
"sjperkins","MEMBER","","2018-04-17T09:18:20Z",false,"COMMENTED"
"sjperkins","MEMBER","","2018-04-17T09:18:42Z",false,"COMMENTED"
"sjperkins","MEMBER","","2018-04-17T09:20:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-17T15:24:35Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-04-17T15:37:59Z",false,"COMMENTED"
"sjperkins","MEMBER","","2018-04-17T19:13:21Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-04-17T20:16:53Z",false,"COMMENTED"
"sjperkins","MEMBER","","2018-04-17T20:24:45Z",false,"COMMENTED"
"sjperkins","MEMBER","","2018-04-17T20:37:18Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-04-17T21:33:10Z",false,"COMMENTED"
"sjperkins","MEMBER","","2018-04-18T03:50:49Z",false,"COMMENTED"
"dgasmith","NONE","","2018-04-18T12:49:29Z",false,"COMMENTED"
"sjperkins","MEMBER","","2018-04-18T13:14:57Z",false,"COMMENTED"
"mrocklin","MEMBER","Some small administrative comments.  ","2018-04-18T14:39:32Z",false,"COMMENTED"
"sjperkins","MEMBER","","2018-04-18T14:49:33Z",false,"COMMENTED"
"sjperkins","MEMBER","","2018-04-18T14:49:45Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-04-18T15:05:21Z",false,"COMMENTED"
"sjperkins","MEMBER","","2018-04-18T15:16:14Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-04-18T15:18:51Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-18T15:52:29Z",false,"COMMENTED"
"sjperkins","MEMBER","","2018-04-18T15:59:56Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-18T16:09:46Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-04-18T16:31:54Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-18T16:47:02Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-04-18T18:08:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-18T20:19:03Z",false,"COMMENTED"
"sjperkins","MEMBER","","2018-04-18T20:25:14Z",false,"COMMENTED"
"mrocklin","MEMBER","This looks great to me.  ","2018-04-16T19:30:44Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-04-16T19:40:11Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-04-15T14:57:03Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-04-15T14:57:39Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-04-15T15:27:52Z",false,"COMMENTED"
"shoyer","MEMBER","A few comments. Generally I like this approach, though.","2018-06-21T16:28:43Z",false,"APPROVED"
"crusaderky","COLLABORATOR","","2018-06-27T18:03:03Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-06-27T18:03:12Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-06-27T18:03:17Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-06-27T18:03:24Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-06-27T18:03:28Z",false,"COMMENTED"
"shoyer","MEMBER","It looks like the only thing major thing to add here is handling negative indices, or at least being sure that we give a graceful error message?","2018-06-27T18:32:29Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-06-27T18:41:19Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-06-27T18:41:59Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-06-27T18:44:25Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-06-27T18:47:44Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-06-27T19:01:03Z",false,"COMMENTED"
"shoyer","MEMBER","OK, this looks good to me. I'll merge this in day or two unless anyone else has comments.","2018-06-27T19:06:48Z",false,"APPROVED"
"jcrist","MEMBER","Thanks for the PR. Overall this looks good to me. I left some comments on style and slight improvements, but this is pretty close to being ready to merge.","2018-04-17T16:02:20Z",false,"COMMENTED"
"crusaderky","COLLABORATOR","","2018-04-22T20:43:10Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-04-22T20:47:21Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-23T06:29:54Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-04-12T17:45:56Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-04-12T17:46:47Z",false,"COMMENTED"
"fjetter","MEMBER","","2018-04-15T12:34:56Z",false,"COMMENTED"
"fjetter","MEMBER","","2018-04-15T12:38:05Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-04-15T12:44:34Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-04-15T12:51:22Z",false,"COMMENTED"
"fjetter","MEMBER","","2018-04-16T08:11:21Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-16T14:59:45Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-04-16T15:32:41Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-16T15:54:15Z",false,"APPROVED"
"mrocklin","MEMBER","This seems great to me.  I also really appreciate the effort to clean up the testing infrastructure.","2018-04-10T12:42:18Z",false,"COMMENTED"
"almaleksia","CONTRIBUTOR","","2018-04-10T13:04:41Z",false,"COMMENTED"
"xhochy","CONTRIBUTOR","","2018-04-09T08:31:44Z",false,"CHANGES_REQUESTED"
"jonmmease","CONTRIBUTOR","","2018-04-09T09:27:54Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-04-09T15:57:16Z",false,"COMMENTED"
"jonmmease","CONTRIBUTOR","","2018-04-09T16:07:14Z",false,"COMMENTED"
"mrocklin","MEMBER","In general this seems fine to me.  It seems safe given that it's off by default and that it escapes early if divisions are not sorted.  

I can't say much about the accuracy of actual parquet code.  It would be good if someone else is able to look things over as well.","2018-04-16T12:35:48Z",false,"COMMENTED"
"jonmmease","CONTRIBUTOR","","2018-04-16T17:43:25Z",false,"COMMENTED"
"jonmmease","CONTRIBUTOR","","2018-04-16T17:45:52Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this looks good to me. I didn't read too much into how you're getting the divisions, but the tests look good and if they pass that's fine. I left a couple stylistic, linting comments.","2018-04-16T20:20:01Z",false,"COMMENTED"
"jcrist","MEMBER","I only gave this a cursory review, but overall this seems fine to me.

> Remove use of partial and dynamic functions in array reductions

I only see partials being removed here. I understand the argument against dynamic functions, but why remove partial? Clarity when inspecting graphs?","2018-04-06T23:52:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-06T14:32:34Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-04-06T14:35:38Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-04-05T05:44:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-05T10:53:53Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-04-05T12:39:30Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-04-05T12:53:37Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-04-05T13:01:32Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-04-05T13:07:37Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-04-05T13:09:43Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-05T13:09:48Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-04-05T13:24:30Z",false,"COMMENTED"
"jglaser","NONE","","2020-07-03T19:11:25Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2020-07-06T13:29:31Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-04T03:39:51Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-04T03:42:00Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-04T06:19:50Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-04-03T15:54:30Z",false,"COMMENTED"
"almaleksia","CONTRIBUTOR","","2018-04-03T17:23:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-03T22:09:48Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-03T22:12:40Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-04-03T22:19:49Z",false,"COMMENTED"
"shoyer","MEMBER","Looks good to me!","2018-04-04T15:36:49Z",false,"COMMENTED"
"almaleksia","CONTRIBUTOR","","2018-04-05T09:25:24Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-05T10:56:27Z",false,"COMMENTED"
"almaleksia","CONTRIBUTOR","","2018-04-05T15:38:43Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-05T17:05:31Z",false,"COMMENTED"
"shoyer","MEMBER","Generally looks good to me!","2018-04-03T01:38:47Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-03T12:45:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-02T15:55:59Z",false,"COMMENTED"
"cr458","CONTRIBUTOR","","2018-04-11T09:00:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-12T17:05:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-12T17:42:02Z",false,"COMMENTED"
"cr458","CONTRIBUTOR","","2018-04-13T14:42:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-13T14:45:19Z",false,"COMMENTED"
"cr458","CONTRIBUTOR","","2018-04-13T14:54:16Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-13T15:22:47Z",false,"COMMENTED"
"cr458","CONTRIBUTOR","","2018-04-13T15:25:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-13T15:36:55Z",false,"COMMENTED"
"cr458","CONTRIBUTOR","","2018-04-14T14:55:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-14T19:31:08Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-15T12:59:12Z",false,"COMMENTED"
"cr458","CONTRIBUTOR","","2018-04-16T11:27:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-16T12:04:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-16T12:41:48Z",false,"COMMENTED"
"cr458","CONTRIBUTOR","","2018-04-16T12:50:41Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-16T12:53:46Z",false,"COMMENTED"
"cr458","CONTRIBUTOR","","2018-04-16T13:03:55Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-16T13:06:38Z",false,"COMMENTED"
"cr458","CONTRIBUTOR","","2018-04-16T13:46:08Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-04-01T14:34:02Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-04-01T14:37:00Z",false,"APPROVED"
"shoyer","MEMBER","","2018-03-30T21:25:31Z",false,"COMMENTED"
"jakirkham","MEMBER","Thanks @shoyer. Have been meaning to do this for a while. Guess you beat me to it. ;)

Looks pretty good. Had some questions about how `test_elements` factors into the result shape and a couple minor comments. Otherwise seems fine.","2018-03-30T22:01:13Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-30T22:15:42Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-03-30T23:12:48Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-03-30T23:13:30Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-03-30T23:16:07Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-30T23:34:27Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-31T19:12:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-03-30T01:16:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-03-30T13:32:07Z",false,"COMMENTED"
"ArcticLampyrid","NONE","","2018-04-06T06:00:40Z",false,"COMMENTED"
"stefanv","CONTRIBUTOR","","2018-04-06T06:25:43Z",false,"COMMENTED"
"stefanv","CONTRIBUTOR","","2018-04-06T06:28:09Z",false,"COMMENTED"
"shoyer","MEMBER","generally looks good, just a few minor comments","2018-03-29T16:51:20Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-29T17:18:11Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-29T17:19:12Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-03-29T17:20:49Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-29T17:23:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-30T04:44:35Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-30T04:52:33Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-30T04:53:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-03-29T14:03:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-29T14:18:12Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-30T04:32:27Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-03-28T14:02:05Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-03-29T21:35:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-03-27T20:24:43Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-28T21:05:48Z",false,"COMMENTED"
"mrocklin","MEMBER","This looks good to me.  My one concern is that we might want to solve this problem more deeply within the project to ensure that it is resolved everywhere consistently.  It looks like we do support pathlib objects with those functions that use `dask.bytes.core`.

Looking at `read_parquet` as an example it looks like the following might be what some of the other data ingestion functions use to normalize paths:

```python
    fs, fs_token, paths = get_fs_token_paths(path, mode='rb', storage_options=storage_options)
```

Presumably we would only need the `paths` return value here.  All of the other functionality probably does not apply to the HDF case.","2018-03-27T12:13:45Z",false,"COMMENTED"
"jrbourbeau","MEMBER","@joergdietrich I pushed a few minor commits to resolve merge conflicts and address https://github.com/dask/dask/pull/3335#issuecomment-376503838, hope that's okay. Planning to merge this on Monday if no further comments ","2019-06-23T04:45:05Z",false,"COMMENTED"
"martindurant","MEMBER","It seems to me that writing this for HDF specifically may lead to duplication. Could the extraction of Paths and fspaths happen within dask.bytes (and, of course, fsspec) ?","2019-06-23T13:49:14Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-23T14:25:46Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2019-06-24T16:25:13Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2018-03-21T16:38:28Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-22T18:17:15Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-03-22T20:47:25Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-22T20:57:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-03-22T21:01:35Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-23T15:36:31Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-01T19:43:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-01T19:46:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-01T19:47:22Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-01T20:09:15Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-01T20:15:51Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-01T20:44:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-01T21:28:30Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-01T21:48:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-05-01T22:22:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-19T16:50:50Z",false,"APPROVED"
"jcrist","MEMBER","","2018-03-19T17:27:26Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-03-19T17:28:47Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-03-19T17:30:02Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-03-19T17:31:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-03-19T13:10:24Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-03-19T13:15:14Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-03-19T19:14:02Z",false,"COMMENTED"
"cr458","CONTRIBUTOR","","2018-03-19T19:31:42Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-03-20T05:13:18Z",false,"COMMENTED"
"cr458","CONTRIBUTOR","","2018-03-22T08:58:22Z",false,"COMMENTED"
"cr458","CONTRIBUTOR","","2018-03-22T11:55:43Z",false,"COMMENTED"
"cr458","CONTRIBUTOR","","2018-03-25T12:03:37Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-03-25T12:32:29Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-03-13T19:54:02Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-03-13T19:54:47Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-03-13T19:56:24Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-03-14T15:29:18Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-03-14T15:30:13Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this seems pretty good to me.","2018-03-14T15:48:52Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-03-14T15:56:37Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-03-14T16:39:05Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-03-14T16:39:40Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-03-14T16:44:57Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-03-14T16:46:55Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-04T19:13:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-04T19:15:27Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-04-04T19:16:47Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-04-04T19:17:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-04T19:19:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-04-04T22:34:46Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-04-04T22:57:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-03-14T01:58:14Z",false,"APPROVED"
"jcrist","MEMBER","LGTM","2018-03-19T13:18:15Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-03-10T22:09:37Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-03-09T13:17:54Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-09T15:32:27Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-03-09T15:34:53Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-09T20:54:42Z",false,"COMMENTED"
"mrocklin","MEMBER","This looks pretty good to me.  I left a couple of minor comments.  Can I also ask you to add a note in the changelog at docs/source/changelog.rst ?  If this is your first time then you will also have to add your name and a link at the bottom of that document.","2018-03-08T18:27:13Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-03-08T18:31:42Z",false,"COMMENTED"
"gabrielelanaro","CONTRIBUTOR","","2018-03-08T18:37:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-03-08T21:01:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-03-09T13:45:56Z",false,"COMMENTED"
"jcrist","MEMBER","Apologies for the delayed review, overall this looks good to me.","2018-03-15T17:22:36Z",false,"COMMENTED"
"gabrielelanaro","CONTRIBUTOR","","2018-03-18T20:20:14Z",false,"COMMENTED"
"mrocklin","MEMBER","Added two tiny comments.  Otherwise I think that this is good to merge.  ","2018-03-04T12:11:25Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-27T19:11:24Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-27T19:13:31Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-27T19:14:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-27T19:17:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-27T19:19:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-27T19:20:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-27T19:24:06Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-27T19:27:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-27T19:30:46Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-27T19:32:20Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-27T19:32:55Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-27T20:35:37Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-27T21:12:41Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-02-27T05:16:46Z",false,"APPROVED"
"shoyer","MEMBER","Looks good to me!","2018-02-27T05:23:40Z",false,"APPROVED"
"jakirkham","MEMBER","","2018-02-27T15:23:13Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-26T22:18:06Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-02-26T22:19:47Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-03-05T15:12:45Z",false,"COMMENTED"
"jcrist","MEMBER","I only gave this a cursory skim, but overall this seems like an improvement to me.","2018-02-26T21:52:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-26T22:41:20Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-26T22:45:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-26T22:46:18Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-26T22:50:14Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-26T22:50:25Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-26T22:56:14Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-26T22:56:24Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-26T22:57:37Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-20T06:09:16Z",false,"COMMENTED"
"mrocklin","MEMBER","In general this seems sensible to me.  Thanks for taking it on.  I've left a couple of small comments.","2018-02-26T13:26:50Z",false,"COMMENTED"
"henriqueribeiro","CONTRIBUTOR","","2018-02-26T13:57:26Z",false,"COMMENTED"
"henriqueribeiro","CONTRIBUTOR","","2018-02-26T14:25:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-26T17:56:03Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-02-26T19:42:35Z",false,"COMMENTED"
"henriqueribeiro","CONTRIBUTOR","","2018-02-27T00:02:53Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-02-27T02:13:43Z",false,"COMMENTED"
"henriqueribeiro","CONTRIBUTOR","","2018-02-27T10:22:14Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-12T05:29:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-27T19:27:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-27T19:35:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-27T19:40:02Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-27T19:41:43Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-27T20:37:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-01T04:48:45Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-03-01T04:56:18Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-01T05:09:48Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-03-01T05:14:31Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-03-01T12:40:44Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-01T20:41:25Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-28T05:40:50Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-28T06:15:02Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-03-28T06:39:34Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-28T06:46:16Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-28T07:04:58Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-28T07:12:32Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-28T07:51:12Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-28T07:52:06Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-28T07:55:30Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-28T07:58:25Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-04-05T07:17:40Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-05T13:28:24Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-05T13:31:10Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-05T13:33:29Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-04-24T15:37:10Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-04-24T21:02:02Z",false,"COMMENTED"
"mrocklin","MEMBER","I'm glad to see changes like this.  I suspect that @TomAugspurger might want to take a look.  

It would be useful to add a test or two first though to ensure correctness into the future.","2018-02-23T22:29:31Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-02-24T13:33:03Z",false,"COMMENTED"
"postelrich","CONTRIBUTOR","","2018-02-26T01:03:00Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-02-26T12:08:19Z",false,"COMMENTED"
"postelrich","CONTRIBUTOR","","2018-02-26T15:51:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-26T18:28:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-26T18:29:08Z",false,"COMMENTED"
"postelrich","CONTRIBUTOR","","2018-02-26T21:09:19Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Looks good to me. Will merge tomorrow unless @mrocklin has any further thoughts.","2018-02-27T02:53:27Z",false,"APPROVED"
"jcrist","MEMBER","","2018-02-23T19:06:28Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-02-23T17:40:38Z",false,"APPROVED"
"mrocklin","MEMBER","","2018-02-22T16:40:43Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-22T16:53:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-22T16:56:20Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-22T17:09:30Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-22T16:44:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-22T16:51:53Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-02-21T22:23:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-21T23:10:24Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-24T20:03:36Z",false,"COMMENTED"
"xhochy","CONTRIBUTOR","","2018-02-25T07:43:56Z",false,"COMMENTED"
"xhochy","CONTRIBUTOR","","2018-02-25T11:07:12Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-02-16T15:17:56Z",false,"COMMENTED"
"xhochy","CONTRIBUTOR","","2018-02-25T17:11:41Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-02-25T18:04:00Z",false,"COMMENTED"
"xhochy","CONTRIBUTOR","","2018-02-25T19:36:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-13T17:49:18Z",false,"COMMENTED"
"MaxPowerWasTaken","CONTRIBUTOR","","2018-02-13T17:51:24Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-02-14T03:30:24Z",false,"COMMENTED"
"MaxPowerWasTaken","CONTRIBUTOR","","2018-02-14T14:34:09Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-02-14T15:38:05Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-21T16:42:16Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-02-21T16:48:48Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-02-21T16:56:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-21T17:01:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-12T22:05:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-12T22:09:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-12T22:09:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-12T22:11:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-12T22:48:35Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-12T23:05:40Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-16T16:53:11Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks @jakirkham, overall this looks good to me. I left a few nit-picky comments on style that you can feel free to ignore, and a few small things I'd like changed. Otherwise this looks good to merge. Thanks for being patient here.","2018-02-20T15:02:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-20T15:22:27Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-20T15:24:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-20T15:25:35Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-20T15:26:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-20T15:26:47Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-20T15:28:49Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-20T15:30:31Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-20T16:04:01Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-20T16:19:13Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-02-20T16:23:44Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-08T22:26:50Z",false,"COMMENTED"
"nirizr","CONTRIBUTOR","","2018-02-08T22:38:27Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-02-08T21:37:07Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-02-08T21:37:45Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-02-08T21:42:00Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-02-08T21:43:11Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-02-08T21:43:37Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-08T21:44:47Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-08T21:45:36Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-08T21:45:53Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-08T21:46:29Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-02-09T03:26:52Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-09T03:43:30Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-09T03:49:23Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-09T03:49:31Z",false,"COMMENTED"
"cpcloud","CONTRIBUTOR","","2018-02-09T16:54:55Z",false,"COMMENTED"
"cpcloud","CONTRIBUTOR","","2018-02-09T16:56:34Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-09T18:21:20Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-09T18:22:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-07T19:47:17Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-07T19:55:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-07T21:40:36Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-02-07T21:47:14Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-07T21:58:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-08T17:15:13Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this seems fine to me. I left a few nitpick-y comments, feel free to ignore.","2018-02-08T18:30:39Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-02-08T19:17:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-08T22:40:48Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-02-08T22:42:20Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-08T22:44:11Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-08T22:45:46Z",false,"COMMENTED"
"TomAugspurger","MEMBER","LGTM","2018-02-06T20:51:49Z",false,"APPROVED"
"xhochy","CONTRIBUTOR","+1, LGTM","2018-02-06T16:56:43Z",false,"APPROVED"
"mrocklin","MEMBER","","2018-02-04T14:11:45Z",false,"COMMENTED"
"jcrist","MEMBER","Besides some comments on how the tests are implemented, this looks fine to me.

I see you have some additional commits dragged in (I assume from a merge with master?) If you can, it'd be nice to rebase on master to see if you can remove those. No worries if this proves too difficult.","2018-02-05T18:54:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-01T14:35:14Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-02-01T17:21:20Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-01T19:00:32Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-01T19:01:04Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-01T19:01:40Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-01T19:02:24Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-01T19:03:01Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-01T19:06:13Z",false,"COMMENTED"
"mrocklin","MEMBER","To the extend that I am able to judge, this seems fine.

I left a few small comments.","2018-02-01T22:33:11Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-01T22:34:53Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-01T22:35:21Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-01T22:40:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-01T22:45:10Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-02-01T23:00:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-01T14:19:39Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-02-01T14:44:18Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-01T14:46:55Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-01-31T17:11:54Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-31T17:16:03Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-29T23:50:41Z",false,"COMMENTED"
"mrocklin","MEMBER","Some initital comments, mostly to help educate myself.","2018-01-28T19:22:23Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-01-29T19:15:48Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-01-29T19:15:54Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-01-29T19:18:04Z",false,"COMMENTED"
"shoyer","MEMBER","A few comments on the signature parsing part of the code.","2018-01-29T19:29:55Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-01-29T19:31:56Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-01-30T17:30:41Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-01-31T13:09:25Z",false,"COMMENTED"
"mrocklin","MEMBER","Some small style and testing nits 

Also, what is the current behavior if we apply a gufunc to both a dask array and a numpy array

    f(my_dask_array, my_numpy_array)

I *suspect* that this works by relying on `atop`, but it would be good to verify this with a test.","2018-05-10T15:24:05Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-10T16:54:37Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-10T16:55:25Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-10T16:55:38Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-10T16:55:45Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-10T16:55:53Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-10T16:56:14Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-10T17:19:26Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-05-10T17:20:19Z",false,"COMMENTED"
"shoyer","MEMBER","I'm happy with the API here, just a few minor comments","2018-05-15T15:38:11Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-15T18:46:42Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-15T18:54:16Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-15T18:57:51Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-15T19:02:29Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-15T19:03:27Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-15T19:03:54Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-05-15T19:21:41Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-15T19:54:58Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-05-15T20:07:58Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-05-15T20:08:23Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-15T21:02:00Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-15T21:02:10Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-15T21:02:42Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-05-16T21:39:35Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-16T22:03:29Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-16T22:05:01Z",false,"COMMENTED"
"shoyer","MEMBER","","2018-05-16T22:23:23Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-17T18:10:41Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-17T18:12:03Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-17T18:23:59Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2018-05-17T18:24:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-01-25T15:33:16Z",false,"COMMENTED"
"rsignell-usgs","CONTRIBUTOR","","2018-01-25T19:27:14Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-31T00:22:32Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-22T19:37:25Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-22T19:43:16Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-22T19:46:04Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this seems fine to me.","2018-01-22T15:33:43Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-22T15:58:48Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-22T17:30:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-22T18:35:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-01-22T14:09:33Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-22T14:14:41Z",false,"COMMENTED"
"martindurant","MEMBER","Essentially all good from me. A couple of questions about the handling of the docker file - but I expect that just reflects how things were done before.","2018-01-22T14:37:00Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-22T14:44:15Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-22T14:45:29Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-22T14:49:59Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-22T16:15:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-21T00:41:45Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-21T05:30:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-01-21T14:11:26Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-21T17:56:15Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-21T22:16:26Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-01-18T22:40:13Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-18T22:41:59Z",false,"COMMENTED"
"martindurant","MEMBER","","2018-01-18T22:44:22Z",false,"COMMENTED"
"mrocklin","MEMBER","In general this seems nice to me.  I left a few small comments.  I suspect that Martin would have more to say.","2018-01-16T03:19:14Z",false,"COMMENTED"
"martindurant","MEMBER","I like these changes.
Only a few comments scattered around.","2018-01-16T17:43:00Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-17T19:57:21Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-17T19:57:43Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-17T19:58:31Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-17T20:00:14Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-17T20:00:29Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-17T20:01:10Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-17T20:03:18Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-17T20:04:09Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks for the fix! I left a few comments, but otherwise this looks good.","2018-01-14T22:28:43Z",false,"COMMENTED"
"metasyn","CONTRIBUTOR","","2018-01-15T00:12:23Z",false,"COMMENTED"
"metasyn","CONTRIBUTOR","","2018-01-15T00:14:21Z",false,"COMMENTED"
"metasyn","CONTRIBUTOR","","2018-01-15T00:14:27Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this looks good to me. I can't comment on whether the algorithm change is a benefit overall, but the new tests look good and the implementation seems clean.","2018-02-01T20:47:27Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-02-01T20:51:19Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-13T02:52:36Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-13T05:24:50Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-13T17:40:05Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-14T16:22:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-14T20:31:15Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-01-14T23:49:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-16T13:01:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-01-16T14:10:47Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-16T14:29:31Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-16T15:41:01Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-12T00:09:44Z",false,"COMMENTED"
"rth","CONTRIBUTOR","","2018-01-12T08:02:06Z",false,"COMMENTED"
"jcrist","MEMBER","Apologies, missed one final nitpick. After this, looks good to me. Thanks @rth.","2018-01-12T21:29:51Z",false,"COMMENTED"
"rth","CONTRIBUTOR","","2018-01-12T21:36:01Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this seems fine to me. Having it as a kwarg on `visualize` makes sense for now, we can rethink the interface if more stylings/diagnostics become important.","2018-01-12T21:26:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-01-12T22:48:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-01-12T22:49:49Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-13T00:10:11Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-01-14T15:51:21Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-10T18:41:31Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-01-10T21:20:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-01-10T21:21:48Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-10T21:42:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-01-10T22:32:30Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this looks good to me. Left a few comments about the tests.","2018-01-12T21:11:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-01-12T22:32:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-01-12T22:33:36Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-12T22:38:07Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-09T20:30:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2018-01-09T21:55:51Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-09T22:06:59Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks for working on this @sephib!","2018-01-08T17:20:23Z",false,"COMMENTED"
"sephib","CONTRIBUTOR","","2018-01-09T10:01:49Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-01-04T19:54:37Z",false,"APPROVED"
"jcrist","MEMBER","","2018-01-02T19:23:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-25T04:44:08Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-01-02T20:38:06Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-02T22:25:17Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-12-21T22:51:17Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-12-22T00:04:42Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-01-02T20:48:15Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-02T21:09:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-01-02T21:15:06Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-02T21:17:41Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-02T22:45:40Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-01-03T13:56:22Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2018-01-03T19:48:28Z",false,"APPROVED"
"mrocklin","MEMBER","Small comment on the test.  Otherwise +1

+1 regardless if you disagree with the comment.","2017-12-23T18:13:29Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-12-23T23:18:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-21T14:11:22Z",false,"COMMENTED"
"mfaafm","CONTRIBUTOR","","2017-12-21T14:26:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-21T15:06:26Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-21T05:13:05Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2017-12-21T17:31:40Z",false,"COMMENTED"
"shoyer","MEMBER","Looking good!","2017-12-20T15:55:52Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-12-19T21:49:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-23T18:24:53Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-12-19T22:14:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-20T16:11:31Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-20T16:12:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-20T16:12:29Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-20T16:12:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-20T16:12:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-19T18:18:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-19T18:18:27Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-19T18:19:12Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-19T18:41:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-19T18:45:42Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-19T18:47:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-19T20:08:12Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-19T20:46:13Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-19T20:55:05Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-14T21:16:26Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-14T21:28:25Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-14T21:31:32Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-12-15T00:07:11Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-15T04:01:27Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-16T00:29:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-16T00:30:39Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this looks good to me. Thanks @TomAugspurger.","2017-12-14T20:28:30Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-14T21:51:50Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-12-11T21:50:51Z",false,"APPROVED"
"jcrist","MEMBER","","2017-12-12T05:58:28Z",false,"CHANGES_REQUESTED"
"jsnowacki","CONTRIBUTOR","","2017-12-12T09:18:50Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-12-12T14:04:35Z",false,"COMMENTED"
"jsnowacki","CONTRIBUTOR","","2017-12-12T14:59:01Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-12-13T21:31:42Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-12-14T15:34:09Z",false,"APPROVED"
"mrocklin","MEMBER","I haven't given this a thorough review, just put in a couple comments.

In general this is more code than I expected to be necessary.  My hope is that this would be closer to something like 

```python
finished_writing = delayed(...)
if keep:
    return da.from_array(out, chunks=inp.chunks, wait_token=finished_writing)
else:
    return finished_writing
```","2017-12-12T20:11:33Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-12T21:18:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-12T21:19:56Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-12T21:27:26Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-12T21:34:16Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-13T15:59:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-16T00:28:28Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-16T00:33:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-16T00:54:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-16T01:00:10Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-16T02:09:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-16T02:38:11Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-18T15:45:29Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-18T15:47:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-18T15:48:57Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-18T15:51:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-18T15:52:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-18T16:17:20Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-18T16:22:49Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-18T16:25:16Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-18T16:26:27Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-18T16:33:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-18T16:35:44Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-18T16:36:15Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-18T16:36:44Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-18T16:42:28Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-18T16:45:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-18T16:51:28Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-18T16:54:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-18T17:01:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-18T17:17:15Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-18T17:41:13Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-19T15:57:44Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-19T16:17:35Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-19T16:58:10Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-27T23:31:25Z",false,"COMMENTED"
"jcrist","MEMBER","Apologies for the delay here. I left a few comments, but most are personal preferences rather than requirements. Take them as you will.","2018-01-02T19:18:15Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T19:39:44Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T19:43:30Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T19:44:33Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T19:45:14Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-02T19:46:27Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T19:46:44Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T19:49:03Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-02T19:51:53Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-02T19:52:34Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T20:31:19Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-02T20:36:58Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T20:38:04Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T20:46:49Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-02T20:47:11Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T20:47:22Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T20:47:59Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T20:48:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T20:48:52Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-02T20:52:29Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T20:57:45Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T20:58:44Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T21:00:22Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-02T21:17:58Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T21:23:49Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-02T21:24:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T21:52:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T22:10:32Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T22:28:17Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-02T22:56:26Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-02T23:26:37Z",false,"COMMENTED"
"jcrist","MEMBER","","2018-01-03T00:29:00Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-12T22:44:31Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-01-13T00:26:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2018-03-19T15:27:54Z",false,"COMMENTED"
"jorisvandenbossche","MEMBER","","2017-12-08T12:59:42Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-12-08T15:03:30Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-12-08T17:54:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-06T23:51:33Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-12-06T23:55:11Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-12-07T15:40:43Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-12-08T01:32:25Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-12-05T21:26:13Z",false,"COMMENTED"
"ahaldane","NONE","","2017-12-05T21:43:49Z",false,"COMMENTED"
"ahaldane","NONE","","2017-12-05T21:55:04Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-12-06T15:35:42Z",false,"COMMENTED"
"ahaldane","NONE","","2017-12-06T17:27:22Z",false,"COMMENTED"
"ahaldane","NONE","","2017-12-06T17:35:44Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-12-06T17:44:57Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-12-06T17:50:46Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-12-05T20:35:49Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-12-05T21:51:18Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-12-05T21:55:48Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-12-08T15:41:57Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-12-08T20:53:21Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-12-08T20:54:27Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-12-08T20:57:47Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks for taking care of this @TomAugspurger.","2017-12-12T18:39:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-07T16:02:28Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-07T16:13:48Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-05T13:27:10Z",false,"COMMENTED"
"jonmmease","CONTRIBUTOR","","2017-12-05T14:05:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-05T14:07:02Z",false,"COMMENTED"
"TomAugspurger","MEMBER","This all looks good, thanks.

When a users messes up and passes a column name that doesn't exist in one or either DataFrame, is the exception thrown when the graph is created, or when it's computed. It looks like it should be on creation, correct?","2017-12-05T14:12:57Z",false,"COMMENTED"
"jonmmease","CONTRIBUTOR","","2017-12-05T16:16:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-05T16:19:38Z",false,"COMMENTED"
"jonmmease","CONTRIBUTOR","","2017-12-05T19:48:27Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-04T18:27:40Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-04T18:41:12Z",false,"COMMENTED"
"AlbertDeFusco","CONTRIBUTOR","","2017-12-04T18:42:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-04T18:42:35Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-04T18:47:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-04T18:47:25Z",false,"COMMENTED"
"AlbertDeFusco","CONTRIBUTOR","","2017-12-04T18:47:52Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-04T18:52:08Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-01T12:58:24Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-01T15:29:57Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-01T15:55:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-01T15:57:38Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-12-01T20:10:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-12-01T20:13:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-12-12T04:39:53Z",false,"APPROVED"
"pitrou","MEMBER","","2017-11-30T17:44:28Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-11-30T17:50:39Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-11-30T17:54:31Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-11-30T17:59:05Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-11-30T18:00:23Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-11-30T18:03:19Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks for working on this.  A couple questions below:","2017-11-29T19:38:22Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-11-29T19:39:00Z",false,"COMMENTED"
"avlahop","CONTRIBUTOR","","2017-11-29T21:24:33Z",false,"COMMENTED"
"avlahop","CONTRIBUTOR","","2017-11-29T21:25:26Z",false,"COMMENTED"
"avlahop","CONTRIBUTOR","","2017-11-29T21:26:05Z",false,"COMMENTED"
"avlahop","CONTRIBUTOR","","2017-12-01T19:41:49Z",false,"COMMENTED"
"mrocklin","MEMBER","This is probably a decision to be made by @martindurant ","2017-11-22T23:02:03Z",false,"COMMENTED"
"mariusvniekerk","CONTRIBUTOR","","2017-11-22T23:10:59Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-11-19T23:56:46Z",false,"COMMENTED"
"jni","CONTRIBUTOR","LGTM except for a minor comment. Thanks! =)","2017-11-19T23:58:19Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-11-20T03:04:05Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-11-20T03:05:09Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-11-20T04:44:20Z",false,"COMMENTED"
"jni","CONTRIBUTOR","","2017-11-20T05:07:34Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-11-20T05:21:43Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-11-20T06:49:24Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-11-21T06:32:28Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks for the fix. Can you also add a test to `dask/dataframe/io/tests/test_parquet.py` that tests explicitly passing in `compression` in `to_parquet`?","2017-11-19T18:17:27Z",false,"CHANGES_REQUESTED"
"castalheiro","CONTRIBUTOR","","2017-11-19T19:45:58Z",false,"COMMENTED"
"castalheiro","CONTRIBUTOR","","2017-11-19T19:46:10Z",false,"COMMENTED"
"castalheiro","CONTRIBUTOR","","2017-11-19T19:46:47Z",false,"COMMENTED"
"castalheiro","CONTRIBUTOR","","2017-11-19T19:47:01Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-11-19T20:07:29Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-11-20T00:20:09Z",false,"CHANGES_REQUESTED"
"castalheiro","CONTRIBUTOR","","2017-11-20T21:40:58Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-11-20T21:47:15Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-11-20T22:50:58Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-11-20T22:52:11Z",false,"COMMENTED"
"castalheiro","CONTRIBUTOR","","2017-11-21T20:21:51Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-11-21T21:11:24Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-11-21T22:07:23Z",false,"APPROVED"
"jcrist","MEMBER","","2017-11-17T18:28:25Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-11-09T20:49:08Z",false,"APPROVED"
"pitrou","MEMBER","Looks good to me!","2017-11-08T20:17:36Z",false,"APPROVED"
"xhochy","CONTRIBUTOR","","2017-11-07T21:59:13Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-11-07T22:26:19Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-11-07T22:30:42Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-11-09T17:22:27Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-11-09T17:35:58Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-11-09T17:42:15Z",false,"COMMENTED"
"cpcloud","CONTRIBUTOR","","2017-11-09T19:29:39Z",false,"COMMENTED"
"cpcloud","CONTRIBUTOR","","2017-11-09T19:30:32Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-11-09T19:31:56Z",false,"COMMENTED"
"cpcloud","CONTRIBUTOR","","2017-11-09T19:32:24Z",false,"COMMENTED"
"cpcloud","CONTRIBUTOR","","2017-11-09T19:47:30Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-11-09T19:53:00Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-11-09T19:56:07Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-11-09T20:43:08Z",false,"COMMENTED"
"cpcloud","CONTRIBUTOR","","2017-11-09T20:50:08Z",false,"COMMENTED"
"cpcloud","CONTRIBUTOR","","2017-11-09T20:50:21Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-11-09T21:05:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-11-13T17:03:05Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-11-13T17:06:56Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-11-03T16:52:15Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-11-03T16:52:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-11-02T03:13:36Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-11-02T03:14:53Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-11-02T12:02:46Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-11-02T13:32:33Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-11-02T13:37:46Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-11-02T13:58:15Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-11-02T14:50:16Z",false,"COMMENTED"
"bryevdv","CONTRIBUTOR","","2017-10-31T13:52:23Z",false,"COMMENTED"
"bryevdv","CONTRIBUTOR","","2017-10-31T13:53:33Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-10-31T14:02:51Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-31T15:01:17Z",false,"COMMENTED"
"bryevdv","CONTRIBUTOR","","2017-10-31T15:16:56Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-31T15:21:37Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-10-31T15:54:05Z",false,"COMMENTED"
"bryevdv","CONTRIBUTOR","","2017-10-31T16:28:21Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-31T19:19:57Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-11-01T08:42:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-11-01T08:42:36Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-30T23:01:29Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-10-30T23:14:57Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-30T14:50:38Z",false,"COMMENTED"
"ogrisel","CONTRIBUTOR","","2017-10-30T15:05:44Z",false,"COMMENTED"
"ogrisel","CONTRIBUTOR","","2017-10-30T15:10:32Z",false,"COMMENTED"
"ogrisel","CONTRIBUTOR","","2017-10-30T15:13:18Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-30T15:22:15Z",false,"COMMENTED"
"ogrisel","CONTRIBUTOR","","2017-10-30T15:24:40Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-10-29T17:53:47Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Looks good. Not sure if you want to wait for https://github.com/dask/dask/pull/2814 so this gets tested on CI, but I think it's fine to merge as is.","2017-10-27T18:51:12Z",false,"APPROVED"
"mrocklin","MEMBER","","2017-10-30T16:51:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-30T16:54:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-30T16:55:41Z",false,"COMMENTED"
"jessevogt","CONTRIBUTOR","","2017-10-30T16:58:32Z",false,"COMMENTED"
"jessevogt","CONTRIBUTOR","","2017-10-30T17:40:18Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-30T17:41:37Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-10-31T11:25:54Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-10-27T18:40:37Z",false,"COMMENTED"
"xhochy","CONTRIBUTOR","","2017-10-28T14:14:22Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks for the fix. Overall this looks good, I left a comment on how to simplify the test. Will merge once that's fixed.","2017-10-24T17:44:54Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-10-24T18:18:02Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-24T18:20:22Z",false,"COMMENTED"
"xwang777","CONTRIBUTOR","","2017-10-25T20:04:53Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-25T20:11:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-30T16:49:17Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-27T19:50:38Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-10-27T19:57:00Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-27T20:00:58Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-19T22:16:51Z",false,"COMMENTED"
"mauhai","CONTRIBUTOR","","2017-10-19T22:19:43Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-19T22:24:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-19T22:25:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-19T22:25:45Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-17T14:32:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-17T14:33:04Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-10-17T20:51:03Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-17T20:52:44Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-10-17T21:07:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-17T21:25:45Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-18T23:33:29Z",false,"APPROVED"
"pitrou","MEMBER","","2017-10-16T14:03:10Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-16T14:15:01Z",false,"COMMENTED"
"jakirkham","MEMBER","LGTM. Thanks @jcrist!","2017-10-14T21:07:15Z",false,"APPROVED"
"martindurant","MEMBER","","2017-10-13T14:05:41Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-13T14:08:11Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-10-13T14:12:49Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-13T05:28:27Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-13T05:29:17Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-13T05:30:55Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-13T05:32:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-13T11:53:58Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-13T12:54:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-13T13:28:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-13T13:43:10Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-13T13:47:15Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-13T13:49:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-13T13:50:17Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-13T13:51:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-13T13:52:05Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-13T13:54:59Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-13T13:55:49Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-13T14:07:46Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-13T14:09:51Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-13T14:23:52Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-13T14:50:18Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-15T01:15:32Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-15T07:11:35Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-11-01T02:27:01Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-11-01T02:36:25Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-13T17:23:55Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-13T17:52:32Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-13T18:32:26Z",false,"COMMENTED"
"jcrist","MEMBER","Overall looks fine, sorry for being picky here. Perhaps I'm too stingy with tests, but there is a cost to increasing the size of our test suite.","2017-10-11T18:11:12Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-11T19:06:39Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-11T19:35:21Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-11T20:35:02Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-11T21:43:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-12T12:59:37Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-12T14:57:04Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-12T15:09:36Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Thanks!","2017-10-11T15:32:43Z",false,"APPROVED"
"jakirkham","MEMBER","","2017-10-11T19:21:36Z",false,"COMMENTED"
"jcrist","MEMBER","Sorry for reviewing this after it was merged. I only found this PR while trying to fix some merge conflicts. None of these are a big deal, but I at least think `thread_state` should be removed from the top-level namespace.","2017-10-13T18:19:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-13T18:44:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-13T18:45:06Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-11T15:22:30Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-11T15:28:06Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-11T15:29:54Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-11T15:31:43Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-11T15:34:36Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-11T15:36:22Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-11T17:26:54Z",false,"COMMENTED"
"jcrist","MEMBER","Fine by me. For future reference
- This could have been merged with #2758 (we're not super strict about single function PRs, and both touched the changelog alone).
- For things that couldn't possibly cause tests to fail, it's fine to skip testing by adding `[ci skip]` in the commit message.","2017-10-10T18:04:25Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-10-06T21:25:38Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-10-06T15:19:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-06T15:20:43Z",false,"COMMENTED"
"mrocklin","MEMBER","Haven't started reviewing code yet, but I had a few small comments on the documentation (which is great by the way).","2017-10-05T20:58:46Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-06T12:41:03Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-10-06T14:57:11Z",false,"COMMENTED"
"shoyer","MEMBER","I reviewed the docs. Generally looks great -- this seems like it should be a great fit for xarray.","2017-10-06T15:23:51Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-06T18:14:43Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-06T18:17:42Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-06T18:19:27Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-06T18:29:38Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-06T18:33:21Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-06T18:34:36Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-10T20:56:21Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-10T20:59:47Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-10T21:00:09Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-10T21:00:26Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-10T21:02:21Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-10T21:06:07Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-10T21:06:47Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-10T21:07:21Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-10T21:08:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-10T21:25:59Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-10T21:29:03Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-10T21:44:33Z",false,"COMMENTED"
"shoyer","MEMBER","Thanks for the pseudo-code and description of how all these methods work. I'm feeling pretty good about this.","2017-10-11T03:29:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-13T16:14:36Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-13T18:22:57Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-13T22:02:43Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-13T22:07:18Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-10-13T22:59:04Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks for the fix!  Some comments below.","2017-10-05T14:27:57Z",false,"COMMENTED"
"sjperkins","MEMBER","","2017-10-05T14:36:25Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-10-05T14:37:44Z",false,"COMMENTED"
"sjperkins","MEMBER","","2017-10-05T14:43:01Z",false,"COMMENTED"
"sjperkins","MEMBER","","2017-10-05T14:43:18Z",false,"COMMENTED"
"sjperkins","MEMBER","","2017-10-05T14:46:57Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-10-03T19:02:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-02T12:09:37Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-02T12:10:04Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks, some comments below.","2017-09-30T12:42:55Z",false,"COMMENTED"
"weiji14","CONTRIBUTOR","","2017-10-01T21:18:07Z",false,"COMMENTED"
"weiji14","CONTRIBUTOR","","2017-10-01T21:18:29Z",false,"COMMENTED"
"weiji14","CONTRIBUTOR","","2017-10-01T21:21:34Z",false,"COMMENTED"
"weiji14","CONTRIBUTOR","","2017-10-01T21:25:49Z",false,"COMMENTED"
"weiji14","CONTRIBUTOR","","2017-10-01T21:29:26Z",false,"COMMENTED"
"mrocklin","MEMBER","A couple more nitpicky comments.  My apologies.","2017-10-02T01:56:23Z",false,"COMMENTED"
"weiji14","CONTRIBUTOR","","2017-10-02T20:01:55Z",false,"COMMENTED"
"weiji14","CONTRIBUTOR","","2017-10-02T20:04:27Z",false,"COMMENTED"
"weiji14","CONTRIBUTOR","","2017-10-02T20:05:16Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-02T20:59:49Z",false,"COMMENTED"
"weiji14","CONTRIBUTOR","","2017-10-02T21:08:35Z",false,"COMMENTED"
"weiji14","CONTRIBUTOR","","2017-10-02T21:13:08Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-10-02T21:15:33Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-09-27T02:39:26Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-09-27T10:58:08Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-09-27T12:16:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-09-25T00:09:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-09-25T00:10:12Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-09-25T02:55:47Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-09-25T02:57:09Z",false,"COMMENTED"
"xhochy","CONTRIBUTOR","","2017-09-25T06:42:56Z",false,"COMMENTED"
"mrocklin","MEMBER","I'm glad to see this come in.  A couple of notes below.","2017-09-24T20:33:07Z",false,"COMMENTED"
"dsevero","CONTRIBUTOR","","2017-09-24T20:34:38Z",false,"COMMENTED"
"dsevero","CONTRIBUTOR","","2017-09-24T21:17:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-09-24T21:20:17Z",false,"COMMENTED"
"dsevero","CONTRIBUTOR","","2017-09-24T21:44:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-09-24T19:05:05Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-09-23T14:46:44Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-09-23T16:32:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-22T19:40:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-09-22T19:45:14Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-09-22T19:45:31Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-22T19:57:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-09-22T19:58:27Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-22T20:24:43Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-22T21:41:13Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-23T00:56:01Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-23T16:24:07Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-23T16:39:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-20T23:54:30Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-09-14T21:51:41Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-15T00:36:08Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-15T00:36:19Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-15T00:36:26Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-09-15T00:37:50Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-09-15T00:38:34Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-15T00:41:18Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-09-15T00:52:19Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-15T01:02:10Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-15T01:20:05Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-15T01:29:21Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-15T14:25:52Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-15T14:29:36Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-09-15T14:39:45Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2017-09-18T11:34:49Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-20T20:47:38Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-20T20:48:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-09-20T21:34:35Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-21T14:50:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-21T14:53:53Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-21T15:01:27Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-08T17:00:09Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-09-08T17:01:43Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-05T18:50:15Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-09-05T18:53:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-05T19:00:08Z",false,"COMMENTED"
"TomAugspurger","MEMBER","I think this looks good. I ran my tests dask-ml that needed the boolean filtering, and all those passed.","2017-09-12T15:53:12Z",false,"APPROVED"
"mrocklin","MEMBER","","2017-09-12T18:47:37Z",false,"COMMENTED"
"pp-mo","NONE","","2017-09-04T17:06:57Z",false,"COMMENTED"
"jschendel","CONTRIBUTOR","","2017-09-02T19:14:18Z",false,"COMMENTED"
"jschendel","CONTRIBUTOR","","2017-09-02T19:15:55Z",false,"COMMENTED"
"jschendel","CONTRIBUTOR","","2017-09-02T19:18:49Z",false,"COMMENTED"
"jschendel","CONTRIBUTOR","","2017-09-02T19:22:16Z",false,"COMMENTED"
"jschendel","CONTRIBUTOR","","2017-09-02T19:25:45Z",false,"COMMENTED"
"jschendel","CONTRIBUTOR","","2017-09-02T19:27:01Z",false,"COMMENTED"
"jschendel","CONTRIBUTOR","","2017-09-02T19:32:14Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks for doing this.  A small comment","2017-09-02T23:25:16Z",false,"COMMENTED"
"jschendel","CONTRIBUTOR","","2017-09-03T00:57:17Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-09-03T13:17:45Z",false,"COMMENTED"
"jschendel","CONTRIBUTOR","","2017-09-03T15:49:26Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-09-05T19:08:23Z",false,"COMMENTED"
"jschendel","CONTRIBUTOR","","2017-09-05T19:37:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-09-05T13:44:25Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-05T14:22:13Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-05T14:23:00Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-05T14:24:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-09-05T14:43:54Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-05T14:52:53Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-09-05T19:35:57Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-31T04:39:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-11-30T18:12:28Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-11-30T18:13:44Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-11-30T18:14:16Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-11-30T18:19:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-11-30T18:27:49Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks for the fix. Left some comments, but overall this looks good.","2017-09-01T15:58:57Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-08-31T21:45:09Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-08-31T21:55:05Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-08-29T21:50:04Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-08-29T21:54:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-08-30T00:10:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-08-30T00:28:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-08-30T11:57:25Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-09-05T19:05:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-09-12T14:07:40Z",false,"COMMENTED"
"horta","CONTRIBUTOR","","2017-10-13T04:15:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-10-13T05:07:07Z",false,"COMMENTED"
"mrocklin","MEMBER","A couple of small comments.  I suspect that @TomAugspurger might want to take a look here","2017-08-29T15:21:18Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Only partway through, I'll take another look later, but overall this is looking good. Thanks!","2017-08-29T16:48:00Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-08-29T22:00:03Z",false,"APPROVED"
"jonmmease","CONTRIBUTOR","","2017-08-30T14:38:18Z",false,"COMMENTED"
"jonmmease","CONTRIBUTOR","","2017-08-30T14:38:29Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-08-28T23:39:08Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-08-28T14:09:13Z",false,"COMMENTED"
"MarkDunne","CONTRIBUTOR","","2017-08-18T12:00:06Z",false,"COMMENTED"
"mrocklin","MEMBER","In general this looks good to me.  I don't know what's going on with the failed travis-ci tests","2017-08-18T13:08:58Z",false,"COMMENTED"
"MarkDunne","CONTRIBUTOR","","2017-08-18T13:37:59Z",false,"COMMENTED"
"MarkDunne","CONTRIBUTOR","","2017-08-18T13:38:13Z",false,"COMMENTED"
"MarkDunne","CONTRIBUTOR","","2017-08-18T14:56:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-08-18T14:58:45Z",false,"COMMENTED"
"MarkDunne","CONTRIBUTOR","","2017-08-18T15:18:31Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-08-16T16:13:46Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-08-16T16:37:50Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-08-16T16:39:26Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-08-16T16:42:35Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-08-16T16:44:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-08-16T16:50:53Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-08-16T16:54:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-08-16T11:25:11Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-08-16T18:46:36Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-08-15T19:03:41Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-08-15T19:05:29Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-08-15T19:14:29Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-08-15T19:30:02Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-08-15T19:30:48Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-08-24T16:25:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-08-25T13:24:16Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-08-25T14:38:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-08-25T14:39:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-08-25T14:39:14Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this seems good to me.","2017-08-25T19:26:40Z",false,"COMMENTED"
"jcrist","MEMBER","Seems fine to me. Did you run into a bug caused by this?","2017-08-07T16:39:20Z",false,"COMMENTED"
"eriknw","MEMBER","","2017-08-07T16:47:32Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-08-07T16:57:00Z",false,"COMMENTED"
"eriknw","MEMBER","","2017-08-07T17:15:42Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-08-04T05:46:28Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2017-08-04T18:31:48Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-08-04T19:05:55Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2017-08-04T20:03:21Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-08-04T20:46:14Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-08-02T14:13:27Z",false,"COMMENTED"
"jamesthurgood34","NONE","This works for me. When can this be merged?","2017-09-21T09:19:38Z",false,"APPROVED"
"TomAugspurger","MEMBER","","2017-08-01T12:18:51Z",false,"APPROVED"
"jcrist","MEMBER","","2017-08-01T15:59:33Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-08-01T16:01:25Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this seems fine to me. I'm adverse to adding in so much testing for such a small function, would be nice to add a shorter, smaller test. I'd do this by creating a list of a few interesting input/input pairs and iterate over them. Could use `itertools.product` if you wanted, up to you. Something like (pseudocode):

```python
args = [np.array([0, 1, 2], dtype='i8'), ..., np.int64(1), ..., 1), ..., np.int64]
for x, y in product(args, args):
    assert da.result_type(x, y) == np.result_type(x, y)
```

> I'm seeing a lot of Travis failures that don't look related to anything I touched. Are those expected?

These are all due to failed installs. It's unclear if this is due to some downtime of `anaconda.org` (recently resolved) or a new package release. If it fails again after you push a reduced testing patch I'll take a closer look.","2017-07-31T21:11:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-08-04T14:43:05Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-08-04T14:45:58Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2017-08-04T14:55:01Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-07-25T18:02:54Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-07-28T00:46:46Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks for the fix. This could also use a test to ensure this doesn't break again.","2017-07-25T14:01:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-07-25T13:52:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-07-25T13:55:07Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2017-07-25T14:49:38Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-07-25T15:21:17Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2017-07-25T15:35:26Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-07-25T15:57:35Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-07-25T16:40:47Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-07-25T21:06:21Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2017-07-26T05:56:38Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-07-26T15:34:54Z",false,"APPROVED"
"martindurant","MEMBER","","2017-07-25T02:58:14Z",false,"COMMENTED"
"jrbourbeau","MEMBER","","2017-07-26T02:40:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-07-24T22:06:21Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-07-24T22:27:08Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2017-07-25T06:34:46Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-07-25T07:00:05Z",false,"COMMENTED"
"bmerry","CONTRIBUTOR","","2017-07-25T07:15:40Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-07-26T13:24:04Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-07-26T13:46:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-07-26T13:47:08Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-07-26T19:41:01Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-07-26T19:41:08Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-07-27T03:19:08Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-07-27T03:19:28Z",false,"COMMENTED"
"mrocklin","MEMBER","Generally this looks pretty good to me.  A few small comments below.  Sorry for the late review.","2017-07-27T17:00:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-07-27T17:05:37Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-07-27T17:09:17Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-08-29T13:44:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-07-20T14:14:19Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-07-20T14:16:45Z",false,"COMMENTED"
"jcrist","MEMBER","The fix looks fine, but this whole test file seems to be skipped on travis (not in the logs, and the test as written would fail). I suspect it's the pip install with `--no-deps` in `continuous_integration/travis/install.sh` that's the cause. Moving `boto3` and `moto` to install from conda-forge should fix this.","2017-11-09T17:21:40Z",false,"COMMENTED"
"martindurant","MEMBER","Hurray!
","2017-07-16T14:43:26Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-07-16T14:44:44Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-07-11T15:17:50Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-07-11T19:15:48Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-07-06T19:30:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-07-06T19:32:29Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-07-06T19:42:24Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-07-05T14:24:59Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this seems good to me. I'm not sure if it would be good/useful to also add a link to the equivalent distributed documentation.","2017-07-07T16:02:46Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-28T19:04:07Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-06-28T19:06:04Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-06-20T16:23:16Z",false,"COMMENTED"
"jcrist","MEMBER","This seems like a good improvement to me.","2017-06-20T15:12:36Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-06-20T18:51:29Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this seems fine to me.","2017-06-19T21:37:58Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-06-19T21:43:00Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-06-19T21:44:36Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-06-19T21:45:27Z",false,"COMMENTED"
"jcrist","MEMBER","> For instance, Pandas can compute the mean on object columns, for instance the mean of pd.Series([""1"", ""2"", ""3""]) is 41.

For data of the size that dask is designed to work with, it would be unlikely/a bad idea to store integers as strings. I'm fine with not supporting this. We already make assumptions about what people store as object dtype (e.g. some operations won't work if object dtype aren't all strings).

Besides my test nitpick (sorry for not catching that earlier) this looks good to me. Thanks for fixing this, will merge once the nitpick is addressed and all tests pass.","2017-06-19T16:48:01Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-06-16T18:45:44Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-06-18T16:53:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-29T13:41:02Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-06-29T13:59:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-09-18T13:39:57Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-09-18T14:14:37Z",false,"COMMENTED"
"mrocklin","MEMBER","This looks good to me.  Could use an entry in the api docs.","2017-06-08T19:46:15Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-06-08T19:59:06Z",false,"COMMENTED"
"shoyer","MEMBER","Also, you probably realize this, but just to note that `__array_ufunc__` is only used for NumPy `ufunc` method. It's not used for reductions like `sum` or `cumsum`, though those use an ad-hoc dispatch system based on calling methods.","2017-06-08T00:47:48Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-08T12:37:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-08T12:37:46Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-08T12:38:20Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Looks great. This will need a pretty big warning for users who (maybe unknowingly via a library) relied on numpy ufuncs evaluating dask arrays eagerly.","2017-06-08T13:29:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-08T13:53:39Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-06-08T16:05:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-08T16:10:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-08T16:13:13Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-06-10T17:59:55Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-10T18:09:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-07T20:25:46Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-06-07T20:35:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-07T20:37:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-06-08T15:42:16Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-06-08T15:43:26Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-06-08T15:47:26Z",false,"COMMENTED"
"mrocklin","MEMBER","Other than a truly minor style issue this looks great to me.","2017-06-07T17:47:53Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-06-07T17:49:40Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-06-07T17:51:45Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-06-07T14:24:57Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-07T14:57:57Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-06-07T15:33:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-07T15:37:35Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-06-07T15:48:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-07T15:57:39Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-06-07T16:07:55Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-07T16:09:09Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-06-07T16:24:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-07T16:28:03Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-06-07T16:29:57Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-06-07T16:31:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-07T17:13:08Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-06-06T16:08:33Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-06-06T16:15:40Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-06-06T16:20:55Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-06-01T20:01:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-01T20:04:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-01T20:14:34Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-31T15:53:35Z",false,"COMMENTED"
"jrmlhermitte","CONTRIBUTOR","","2017-05-31T16:29:52Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-31T16:35:25Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-31T16:37:56Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-31T16:38:15Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-31T16:41:59Z",false,"COMMENTED"
"jrmlhermitte","CONTRIBUTOR","","2017-05-31T16:56:15Z",false,"COMMENTED"
"jrmlhermitte","CONTRIBUTOR","","2017-05-31T16:57:57Z",false,"COMMENTED"
"jrmlhermitte","CONTRIBUTOR","","2017-05-31T16:58:11Z",false,"COMMENTED"
"jrmlhermitte","CONTRIBUTOR","","2017-05-31T16:58:55Z",false,"COMMENTED"
"jrmlhermitte","CONTRIBUTOR","","2017-05-31T16:59:50Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-31T17:01:04Z",false,"COMMENTED"
"jrmlhermitte","CONTRIBUTOR","","2017-05-31T17:04:37Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-31T17:05:56Z",false,"COMMENTED"
"jrmlhermitte","CONTRIBUTOR","","2017-05-31T17:06:36Z",false,"COMMENTED"
"jrmlhermitte","CONTRIBUTOR","","2017-05-31T17:09:34Z",false,"COMMENTED"
"jrmlhermitte","CONTRIBUTOR","","2017-05-31T17:10:40Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-31T17:11:21Z",false,"COMMENTED"
"jrmlhermitte","CONTRIBUTOR","","2017-05-31T17:25:48Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-05-31T15:49:42Z",false,"COMMENTED"
"ghisvail","CONTRIBUTOR","","2017-05-31T17:57:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-05-31T15:44:23Z",false,"APPROVED"
"rabernat","CONTRIBUTOR","","2017-05-30T18:36:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-05-30T18:44:05Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-30T18:47:51Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-05-30T19:01:17Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-01T12:40:41Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-01T12:42:29Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-06-01T16:07:43Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-25T19:54:44Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-25T19:55:19Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-25T19:55:29Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-25T19:55:36Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-25T19:56:49Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-25T19:58:31Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-25T20:00:27Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-25T20:00:44Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-05-25T20:21:19Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-05-25T20:22:59Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-05-25T20:26:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-05-25T20:31:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-05-25T20:32:16Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-25T21:15:48Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-25T21:40:54Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this looks good to me.","2017-05-24T17:35:33Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-24T17:36:53Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-05-23T02:44:05Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-05-23T18:26:13Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-05-23T18:32:27Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-05-23T20:27:33Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-05-23T20:33:37Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-05-23T21:00:18Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-05-23T21:40:20Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-05-23T22:01:48Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-05-23T22:22:24Z",false,"COMMENTED"
"jdanbrown","NONE","","2017-05-31T16:31:02Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-05-31T17:01:47Z",false,"COMMENTED"
"jakirkham","MEMBER","LGTM","2017-05-17T04:09:30Z",false,"APPROVED"
"mrocklin","MEMBER","Cool.  Thanks for doing this @jni ","2017-05-17T13:21:00Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-05-17T14:28:32Z",false,"COMMENTED"
"jni","CONTRIBUTOR","","2017-05-18T07:34:19Z",false,"COMMENTED"
"jni","CONTRIBUTOR","","2017-05-18T07:35:47Z",false,"COMMENTED"
"jni","CONTRIBUTOR","","2017-05-18T08:02:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-05-18T14:47:49Z",false,"COMMENTED"
"jni","CONTRIBUTOR","","2017-05-19T00:38:12Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-05-31T19:17:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-06-08T00:42:24Z",false,"COMMENTED"
"mrocklin","MEMBER","I'm curious, what else might we want to add to ufunc in the future other than `.outer`?

This PR may interest @shoyer ","2017-05-18T14:42:02Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-18T14:45:54Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Using a class to store the necessary information seems fine to me.  @chmp if you rebase on master, the unrelated failures should go away.","2017-05-22T13:10:41Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2017-05-22T18:12:27Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2017-06-06T16:32:35Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-09-04T11:05:30Z",false,"APPROVED"
"mrocklin","MEMBER","","2017-05-15T21:22:13Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-15T22:31:15Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-15T23:01:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-05-16T16:47:17Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-16T16:50:43Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-05-16T19:22:37Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-05-12T18:51:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-05-12T20:32:30Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-22T15:51:16Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-22T15:52:44Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-22T15:56:16Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-22T15:58:26Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-22T16:02:16Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-22T16:07:14Z",false,"COMMENTED"
"mraspaud","NONE","","2017-05-23T07:24:30Z",false,"COMMENTED"
"mraspaud","NONE","","2017-05-23T07:49:14Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-23T07:58:26Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-23T08:00:05Z",false,"COMMENTED"
"mraspaud","NONE","","2017-05-23T09:02:39Z",false,"COMMENTED"
"mraspaud","NONE","","2017-05-23T09:04:28Z",false,"COMMENTED"
"mraspaud","NONE","","2017-05-23T09:07:02Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-23T09:07:55Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-23T09:09:47Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-23T09:11:40Z",false,"COMMENTED"
"mraspaud","NONE","","2017-05-23T09:21:56Z",false,"COMMENTED"
"mraspaud","NONE","","2017-05-23T09:26:15Z",false,"COMMENTED"
"mraspaud","NONE","","2017-05-23T09:30:56Z",false,"COMMENTED"
"mraspaud","NONE","","2017-05-23T09:41:59Z",false,"COMMENTED"
"mraspaud","NONE","","2017-05-23T19:53:54Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-29T14:10:24Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-29T14:13:38Z",false,"COMMENTED"
"jcrist","MEMBER","Besides my comment, this fix seems good to me.","2017-05-10T21:29:04Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-05-11T15:50:47Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-05-11T16:00:27Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-11T14:57:55Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-05-10T05:17:43Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this seems fine to me.","2017-05-09T23:47:06Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-05-09T23:51:22Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-09T23:54:56Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-05-09T23:56:12Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-05-09T23:59:13Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-09T23:59:24Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-10T00:00:21Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-05-10T00:13:34Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-05-10T00:17:18Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-05-10T02:06:08Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-05-10T04:31:28Z",false,"APPROVED"
"mrocklin","MEMBER","Looking forward to having pdb support in the threaded scheduler :)","2017-05-09T12:08:56Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-09T14:50:30Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-13T17:23:47Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-05-13T18:55:36Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-22T10:37:11Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-05-22T13:31:15Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-22T13:39:16Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-05-22T13:41:11Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-22T13:41:54Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-05-22T13:49:07Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-22T15:43:34Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-05-05T20:16:47Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-05T20:17:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-05-05T15:03:19Z",false,"COMMENTED"
"mattilyra","NONE","","2017-05-06T06:13:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-05-05T11:43:59Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-05T15:44:34Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-08T22:35:35Z",false,"COMMENTED"
"pelson","CONTRIBUTOR","By no means a comprehensive review, but a few noteworthy things:

-----

```
>>> da.from_array(np.ma.masked_array([1, 2, 3], mask=[1, 0, 0]), chunks=(2,))

Traceback (most recent call last):
  File ""/Users/pelson/miniconda/envs/dev-dask/lib/python3.6/site-packages/numpy/ma/core.py"", line 3142, in view
    if issubclass(dtype, ndarray):
TypeError: issubclass() arg 1 must be a class

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/Users/pelson/dev/dask/dask/base.py"", line 397, in normalize_array
    data = hash_buffer_hex(x.ravel(order='K').view('i1'))
  File ""/Users/pelson/miniconda/envs/dev-dask/lib/python3.6/site-packages/numpy/ma/core.py"", line 3148, in view
    output = ndarray.view(self, dtype)
  File ""/Users/pelson/miniconda/envs/dev-dask/lib/python3.6/site-packages/numpy/ma/core.py"", line 3425, in __setattr__
    self._mask.shape = self.shape
ValueError: cannot reshape array of size 3 into shape (24,)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/Users/pelson/miniconda/envs/dev-dask/lib/python3.6/site-packages/numpy/ma/core.py"", line 3142, in view
    if issubclass(dtype, ndarray):
TypeError: issubclass() arg 1 must be a class

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""example.py"", line 10, in <module>
    ad = da.from_array(np.ma.masked_array([1, 2, 3], mask=[1, 0, 0]), chunks=(2,))
  File ""/Users/pelson/dev/dask/dask/array/core.py"", line 1893, in from_array
    token = tokenize(x, chunks)
  File ""/Users/pelson/dev/dask/dask/base.py"", line 426, in tokenize
    return md5(str(tuple(map(normalize_token, args))).encode()).hexdigest()
  File ""/Users/pelson/dev/dask/dask/utils.py"", line 415, in __call__
    return meth(arg)
  File ""/Users/pelson/dev/dask/dask/base.py"", line 399, in normalize_array
    data = hash_buffer_hex(x.copy().ravel(order='K').view('i1'))
  File ""/Users/pelson/miniconda/envs/dev-dask/lib/python3.6/site-packages/numpy/ma/core.py"", line 3148, in view
    output = ndarray.view(self, dtype)
  File ""/Users/pelson/miniconda/envs/dev-dask/lib/python3.6/site-packages/numpy/ma/core.py"", line 3425, in __setattr__
    self._mask.shape = self.shape
ValueError: cannot reshape array of size 3 into shape (24,)
```

-----

```
>>> da.ma.masked_outside(np.array([1, 2, 3]), 2, 2.5)

Traceback (most recent call last):
  File ""/Users/pelson/dev/dask/dask/array/ma.py"", line 123, in masked_outside
    return map_blocks(np.ma.masked_outside, x, v1, v2)
  File ""/Users/pelson/dev/dask/dask/array/core.py"", line 662, in map_blocks
    out_ind = tuple(range(max(a.ndim for a in arrs)))[::-1]
ValueError: max() arg is an empty sequence
```

---


```

>>> da.ma.masked_where([1, 2, 3], da.arange(3, chunks=(2, )))

---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-2-4270623ca151> in <module>()
      4 import dask.array as da
      5 
----> 6 da.ma.masked_where([1, 2, 3], da.arange(3, chunks=(2, )))

/Users/pelson/dev/dask/dask/array/ma.py in masked_where(condition, a)
    132         raise IndexError(""Inconsistant shape between the condition and the ""
    133                          ""input (got %s and %s)"" % (cshape, a.shape))
--> 134     return map_blocks(np.ma.masked_where, condition, a)
    135 
    136 

/Users/pelson/dev/dask/dask/array/core.py in map_blocks(func, *args, **kwargs)
    690         else:
    691             kwargs2 = kwargs
--> 692         dtype = apply_infer_dtype(func, args, kwargs2, 'map_blocks')
    693 
    694     if len(arrs) == 1:

/Users/pelson/dev/dask/dask/array/core.py in apply_infer_dtype(func, args, kwargs, funcname, suggest_dtype)
    525         msg = None
    526     if msg is not None:
--> 527         raise ValueError(msg)
    528     return o.dtype
    529 

ValueError: `dtype` inference failed in `map_blocks`.

Please specify the dtype explicitly using the `dtype` kwarg.

Original error is below:
------------------------
IndexError('Inconsistant shape between the condition and the input (got (3,) and (1,))',)

Traceback:
---------
  File ""/Users/pelson/dev/dask/dask/array/core.py"", line 510, in apply_infer_dtype
    o = func(*args, **kwargs)
  File ""/Users/pelson/miniconda/lib/python3.5/site-packages/numpy/ma/core.py"", line 1910, in masked_where
    "" (got %s and %s)"" % (cshape, ashape))
```

(I guess this is because the mask should be chunked in the same way as the array)

-----

I was somewhat concerned about the [numerical accuracy](https://github.com/SciTools/biggus/blob/master/biggus/_init.py#L2444) of things like standard deviation - it would be easy to lose precision with the repeated addition result chunks. Biggus goes to some length to implement a streaming single pass standard deviation for both masked and un-masked data, but I don't have an example that justifies that implementation vs what has been done here.

I'm really pleased to say that a cursory experimentation suggests that the accuracy is very good. My code:

```
np.random.seed(0)
rand = np.random.randn(100000) ** 20

# ~4% masked numbers
data = np.ma.masked_outside(rand, -2, 2)

chunks = (rand.size // 500,)
da_data = da.ma.masked_where(da.from_array(data.mask, chunks=chunks),
                            da.from_array(rand, chunks=chunks))

print(biggus.std(data, ddof=2, axis=0).masked_array())
print(np.std(da_data, ddof=2).compute())
print(np.std(da_data.compute(), ddof=2))
```

which gives:

```
0.28873287828340444
0.288732878283
0.288732878283
```

I also visualised the graph with 5 equal chunks:
![mydask](https://user-images.githubusercontent.com/810663/27318908-97c3a152-5586-11e7-9864-708ac2484f4e.png)

Which, just like the biggus implementation has a (necessary) bottleneck at the ``sqrt``, but the preparation before that point parallelises well (just like it does with a ``dask.array``).

----


### In summary

This is a really great implementation - I've pointed out a few usability issues, but in principle I believe the implementation is a viable option for entirely bridging the remaining functionality gap between biggus and dask. With some refinement of this implementation I'm 100% supportive of moving towards formally deprecating biggus in favour of dask (note: I'm a core biggus dev).   

","2017-06-20T06:15:44Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-07-18T22:13:44Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-07-19T21:07:05Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-07-19T22:54:33Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-05-03T15:27:42Z",false,"COMMENTED"
"jcrist","MEMBER","Looks fine to me.","2017-05-02T12:28:44Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-05-01T19:04:26Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-05-01T19:05:04Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-05-01T19:06:27Z",false,"APPROVED"
"mrocklin","MEMBER","","2017-05-01T15:32:22Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-05-01T15:37:37Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-05-01T15:41:40Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-05-01T20:33:16Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-05-01T20:47:08Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-05-01T21:02:07Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-05-08T14:10:09Z",false,"COMMENTED"
"jcrist","MEMBER","Besides the docstring fix, seems fine to me.","2017-05-02T12:30:31Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-01T22:01:39Z",false,"COMMENTED"
"mrocklin","MEMBER","There were a few blocks that appeared to be untested.  Not sure how much we should care about these.","2017-05-02T18:26:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-05-02T18:26:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-05-03T16:40:33Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-05-03T17:09:27Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-03T18:48:45Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-11T15:14:20Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-11T15:15:28Z",false,"COMMENTED"
"jcrist","MEMBER","Besides the small doc changes, this looks good to me.","2017-05-11T16:31:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-28T12:39:24Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-28T13:19:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-28T13:20:54Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-28T14:24:00Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-28T14:26:42Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-28T15:29:56Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-28T16:24:37Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-28T16:36:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-28T16:40:29Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-28T16:43:04Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-28T00:27:08Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-28T01:29:54Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-28T14:54:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-26T18:36:54Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-04-26T18:39:50Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-26T19:06:35Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-26T19:49:47Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-26T19:52:24Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-04-26T20:09:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-28T18:10:19Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-04-28T18:21:17Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-04-28T18:30:32Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-28T18:38:17Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-04-28T19:02:49Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-28T19:27:23Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-04-28T19:28:31Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-04-28T19:41:13Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-05-01T15:19:32Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-05-01T15:23:32Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-05-01T18:28:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-24T19:49:17Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-04-24T19:54:27Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-04-24T20:13:15Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-25T01:20:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-26T02:11:06Z",false,"COMMENTED"
"mrocklin","MEMBER","This looks good to me.","2017-04-26T12:27:14Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-04-26T12:46:23Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-04-26T12:49:16Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-04-26T15:30:05Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-04-27T17:35:37Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-04-27T17:37:08Z",false,"COMMENTED"
"dhirschfeld","NONE","","2017-04-27T22:53:01Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-04-21T22:39:51Z",false,"COMMENTED"
"jreback","CONTRIBUTOR","","2017-04-21T22:45:45Z",false,"COMMENTED"
"jcrist","MEMBER","Overall I like this approach. Seems more maintainable to have the chunk operations do what's expected and support non `np.ndarray` chunks than to bake sparse arrays directly into the class.","2017-04-18T13:57:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-18T14:06:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-18T14:08:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-18T14:08:42Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-04-18T14:13:44Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-17T16:50:24Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-04-17T16:51:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-17T16:53:24Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-04-17T16:40:11Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-17T18:47:31Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-04-17T15:42:21Z",false,"COMMENTED"
"kszucs","NONE","","2017-04-18T08:12:05Z",false,"COMMENTED"
"kszucs","NONE","","2017-04-18T08:17:00Z",false,"COMMENTED"
"kszucs","NONE","","2017-04-18T08:17:38Z",false,"COMMENTED"
"mrocklin","MEMBER","Generally everything here looks sane to me.  

Two main thoughts:

1.  We should include pyarrow in travis.ci (and appveyor?) tests.  My guess is that this becomes much easier after a release.  What is the schedule on this?  This functionality will also depend either on stability on the Arrow side or on continued maintenance from Arrow devs if small things change (which should probably be expected).
2.  Style-wise I would prefer to see these as functions, though this is subjective.  Most of the Dask codebase sticks to the approach of ""use functions if function suffice"".  The use of classes here seems unnecessary.  This is subjective though.  If you were planning to maintain this code and respond to user issues long-term I wouldn't care about this point that much.","2017-04-15T12:38:10Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-04-17T00:47:22Z",false,"COMMENTED"
"mrocklin","MEMBER","This looks pretty good to me.  I've included some minor comments below.  

Regarding style things thank you for being flexible here @wesm .  FWIW I find what is here to be a nice compromise.","2017-04-17T10:57:29Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-04-17T13:07:45Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-04-17T13:07:50Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-04-17T13:08:40Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-04-17T13:12:09Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-04-17T13:15:05Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-04-17T13:15:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-17T13:21:52Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-04-17T13:24:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-25T15:03:00Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-04-25T15:05:26Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-04-25T17:18:49Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-04-25T18:58:57Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-04-25T18:59:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-26T23:17:13Z",false,"COMMENTED"
"martindurant","MEMBER","Generally happy with code. Should the current choice of backends have a space in the docs?","2017-04-27T19:29:20Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-04-28T01:46:13Z",false,"COMMENTED"
"wesm","CONTRIBUTOR","","2017-04-28T01:48:02Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-04-14T17:52:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-14T18:08:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-14T18:08:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-14T18:09:04Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-04-14T18:20:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-17T13:58:54Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-04-17T18:16:41Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-04-18T14:09:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-18T14:26:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-18T19:49:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-14T11:47:54Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-04-14T12:45:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-13T15:09:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-04-13T15:14:46Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-13T15:16:46Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-04-13T17:59:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-13T18:24:40Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Looks good.","2017-04-14T13:22:16Z",false,"APPROVED"
"mrocklin","MEMBER","Minor comments after a skim","2017-04-10T21:16:27Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-04-10T21:20:49Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-04-10T21:21:21Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-04-11T14:40:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-14T12:27:32Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-04-14T12:45:53Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-04-14T12:46:11Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-04-14T14:42:03Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-04-10T14:27:01Z",false,"COMMENTED"
"jcrist","MEMBER","Seems fine to me.","2017-04-10T14:58:55Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-04-10T15:07:34Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-04-08T09:02:46Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-04-08T09:03:51Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-08T20:39:18Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-08T21:03:29Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-08T21:03:33Z",false,"COMMENTED"
"mrocklin","MEMBER","In general this looks pretty good to me","2017-04-07T18:54:24Z",false,"COMMENTED"
"nbren12","CONTRIBUTOR","","2017-04-07T19:08:24Z",false,"COMMENTED"
"nbren12","CONTRIBUTOR","","2017-04-07T19:08:52Z",false,"COMMENTED"
"nbren12","CONTRIBUTOR","","2017-04-07T19:08:58Z",false,"COMMENTED"
"jrmlhermitte","CONTRIBUTOR","I think it looks good, I like it :-)
I just have one main comment I've spread across line notes. Correct me if I'm wrong, but it seems that getattr and binary operators and assumed pure regardless of any setting. If yes, it may be worth documenting this more in the code itself.

I see it's in the [documentation](http://dask.pydata.org/en/latest/delayed-api.html) (just checked), but it might be good to be more redundant.

Definitely, it should be in the test I think. What do you think?

Thanks for this addition, this is an extremely powerful feature if merged :-)","2017-04-06T02:06:04Z",false,"APPROVED"
"jcrist","MEMBER","","2017-04-06T03:02:07Z",false,"COMMENTED"
"jrmlhermitte","CONTRIBUTOR","","2017-04-06T03:08:29Z",false,"COMMENTED"
"jrmlhermitte","CONTRIBUTOR","","2017-04-06T12:21:15Z",false,"COMMENTED"
"jrmlhermitte","CONTRIBUTOR","","2017-04-06T12:21:26Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-04-05T17:02:45Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-05T16:48:32Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-04-05T16:49:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-31T17:18:58Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-31T17:30:49Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-31T17:33:46Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-31T17:36:26Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-31T17:45:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-31T18:13:32Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-31T19:36:10Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-31T21:43:17Z",false,"COMMENTED"
"abast","NONE","","2017-03-30T15:46:38Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-03-30T15:48:45Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-03-30T16:48:18Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-30T16:52:10Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-03-30T16:54:58Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-03-30T16:55:55Z",false,"COMMENTED"
"jcrist","MEMBER","`array_plugins` seems fine to me.","2017-04-03T17:25:18Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-03T19:35:03Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-04-03T19:51:25Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-04-03T20:00:45Z",false,"COMMENTED"
"pwolfram","CONTRIBUTOR","","2017-04-04T14:08:49Z",false,"COMMENTED"
"pwolfram","CONTRIBUTOR","","2017-04-04T14:10:56Z",false,"COMMENTED"
"pwolfram","CONTRIBUTOR","","2017-04-04T14:11:14Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-04T14:12:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-04-04T14:12:20Z",false,"COMMENTED"
"pwolfram","CONTRIBUTOR","","2017-04-04T14:14:02Z",false,"COMMENTED"
"pwolfram","CONTRIBUTOR","","2017-04-04T14:14:48Z",false,"COMMENTED"
"pwolfram","CONTRIBUTOR","@mrocklin, thank you for this PR.  This is great-- it should provide new capabilities to for debugging and performance testing and is much appreciated!","2017-04-04T14:15:29Z",false,"APPROVED"
"mrocklin","MEMBER","","2017-04-04T14:15:42Z",false,"COMMENTED"
"pwolfram","CONTRIBUTOR","","2017-04-04T14:16:16Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-04-05T17:52:28Z",false,"APPROVED"
"mrocklin","MEMBER","","2017-03-30T11:34:17Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-30T13:41:37Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-30T15:32:48Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-30T16:49:27Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-30T17:06:45Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-29T19:15:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-29T19:18:34Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-29T19:20:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-29T19:53:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-23T20:47:20Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-23T20:51:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-23T20:59:14Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-23T21:09:58Z",false,"COMMENTED"
"jreback","CONTRIBUTOR","","2017-03-23T22:26:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-23T23:05:06Z",false,"COMMENTED"
"jreback","CONTRIBUTOR","","2017-03-23T23:09:00Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-23T23:12:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-24T13:43:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-24T13:48:14Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-24T13:49:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-24T13:52:58Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-24T13:54:16Z",false,"COMMENTED"
"mrocklin","MEMBER","Just general comments at this stage.  Thanks for taking this on.","2017-03-22T20:58:11Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-23T14:04:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-23T14:11:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-23T14:24:08Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-23T15:28:59Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-23T15:30:48Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-23T15:43:26Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-23T17:37:54Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-23T17:40:46Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-23T17:46:32Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-23T18:59:08Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-23T18:59:47Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-24T15:44:30Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-24T16:32:21Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-24T20:20:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-25T12:04:26Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-25T14:45:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-25T14:51:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-25T15:07:54Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-25T15:15:25Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-25T15:17:26Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-27T15:30:13Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-27T15:44:26Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-27T18:38:37Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-27T19:36:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-27T20:31:36Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-27T20:33:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-27T20:34:33Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-27T20:34:59Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-27T20:41:46Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-03-28T20:23:34Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-03-28T20:35:15Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-03-22T16:53:05Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-03-22T16:55:48Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-22T17:00:55Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-03-21T21:38:14Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-03-21T21:44:24Z",false,"COMMENTED"
"mrocklin","MEMBER","Generally this seems good to me.  ","2017-03-16T21:06:04Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-03-20T12:36:45Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-03-20T12:36:53Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-03-16T16:31:12Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-16T16:31:30Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-16T16:33:29Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-03-16T16:34:59Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-16T18:21:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-16T21:19:11Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-16T21:22:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-16T21:23:52Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-16T21:29:28Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-16T21:31:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-16T21:32:20Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-16T21:34:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-16T21:36:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-16T21:37:33Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-16T21:37:54Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-16T21:38:18Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-16T21:45:21Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-16T21:48:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-16T21:50:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-16T22:15:20Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-16T22:15:24Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-17T15:09:25Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-17T15:10:32Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-17T15:28:28Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-03-17T16:14:57Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-03-17T16:17:05Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-17T16:19:06Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-03-17T16:20:44Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-17T16:29:17Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-17T16:36:57Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-17T16:42:07Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-17T16:43:27Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-17T19:33:34Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-17T19:43:51Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-17T19:48:29Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-17T20:07:27Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-17T20:12:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-17T22:06:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-17T22:07:16Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-18T15:44:42Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-19T22:09:56Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-19T22:10:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-19T22:20:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-19T22:20:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-19T22:24:55Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-20T17:58:20Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-20T17:58:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-20T18:06:32Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-20T18:43:52Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-20T18:58:57Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-20T19:01:41Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-20T19:26:26Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-20T19:48:45Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-20T19:52:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-20T20:31:23Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-20T20:32:55Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-20T20:40:44Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-20T20:59:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-20T21:58:58Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-20T22:20:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-20T22:29:41Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-20T22:31:39Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-20T22:59:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-20T23:07:05Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-20T23:45:10Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-21T13:49:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-21T14:06:32Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-21T14:09:41Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-21T18:38:09Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-22T14:26:03Z",false,"COMMENTED"
"jakirkham","MEMBER","","2017-03-22T19:27:54Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-03-15T19:33:25Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-03-14T14:35:46Z",false,"COMMENTED"
"roman-kh","NONE","","2017-03-14T14:43:00Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-03-14T14:48:42Z",false,"COMMENTED"
"roman-kh","NONE","","2017-03-14T14:52:45Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-03-14T15:01:34Z",false,"COMMENTED"
"roman-kh","NONE","","2017-03-14T18:17:20Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-05-02T12:35:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-05-02T12:35:33Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-05-02T12:46:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-05-03T15:15:46Z",false,"COMMENTED"
"roman-kh","NONE","","2017-05-03T15:34:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-05-03T15:36:32Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-05-03T15:40:00Z",false,"COMMENTED"
"roman-kh","NONE","","2017-05-03T15:49:25Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-05-03T15:49:28Z",false,"COMMENTED"
"shoyer","MEMBER","Looks great, thanks!","2017-03-14T15:56:51Z",false,"APPROVED"
"shoyer","MEMBER","","2017-03-14T15:59:16Z",false,"APPROVED"
"martindurant","MEMBER","","2017-03-12T15:20:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-12T15:32:15Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-03-08T23:04:58Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-03-08T23:07:43Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-03-08T23:09:04Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-03-08T23:11:47Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-08T23:17:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-08T23:20:42Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-03-08T23:23:48Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-08T23:49:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-08T23:49:48Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-08T23:49:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-08T23:49:58Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-03-09T14:30:27Z",false,"COMMENTED"
"stuartarchibald","CONTRIBUTOR","Thanks for this document, I think it will be very useful for the user base. I've added few suggestions/minor changes.

I'm going to add some further notes but in a more general discussion sense and not part of review.","2017-03-14T23:02:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-28T12:15:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-28T12:16:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-28T12:17:55Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-28T12:20:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-28T12:20:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-28T12:20:46Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-28T12:20:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-28T12:20:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-28T12:21:51Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-03-06T17:25:08Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-08T16:35:56Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-03-08T17:08:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-08T17:12:47Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-03-08T17:18:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-08T21:16:15Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-03-08T21:20:44Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-02-28T13:18:13Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-02-28T17:25:06Z",false,"APPROVED"
"jcrist","MEMBER","Looks good to me.","2017-03-02T15:53:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-02-26T23:18:37Z",false,"COMMENTED"
"mrocklin","MEMBER","These benchmarks look pretty promising.  Small comments below.","2017-02-25T15:14:22Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-02-27T19:49:48Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-02-27T19:49:55Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-02-27T19:50:01Z",false,"COMMENTED"
"mrocklin","MEMBER","Generally this looks good to me.  I left some comments.","2017-02-21T00:51:42Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-02-21T15:37:31Z",false,"COMMENTED"
"shoyer","MEMBER","Nice to see this come together!

One way to solve the fail-case of slow repeated `update` operations would be to let a ShareDict recursively contain other ShareDicts. You would need some cleverness in `__iter__` and `items` to unpack these using a loop (using depth first search) instead of recursing, which would hit the maximum recursion limit before this matters.","2017-02-15T21:48:14Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-02-16T13:58:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-02-16T13:59:04Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-02-16T17:00:54Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-02-16T18:26:03Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-02-16T18:33:26Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-02-16T18:34:30Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-02-16T18:36:03Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-02-16T18:37:56Z",false,"COMMENTED"
"pitrou","MEMBER","","2017-02-16T18:38:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-02-16T18:38:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-02-16T18:47:27Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-02-16T18:47:55Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-02-16T18:48:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-02-16T18:48:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-02-16T18:48:22Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-02-16T19:06:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-02-16T19:10:24Z",false,"COMMENTED"
"shoyer","MEMBER","Looks good to me now","2017-02-16T23:14:11Z",false,"APPROVED"
"jcrist","MEMBER","Overall this looks like a nice improvement to me. +1.","2017-02-17T15:33:11Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-02-17T21:44:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-02-14T20:04:42Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-02-14T20:05:07Z",false,"COMMENTED"
"eriknw","MEMBER","","2017-02-14T20:06:51Z",false,"COMMENTED"
"eriknw","MEMBER","","2017-02-14T20:20:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-02-14T20:26:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-02-14T20:26:57Z",false,"COMMENTED"
"eriknw","MEMBER","","2017-02-14T20:38:49Z",false,"COMMENTED"
"eriknw","MEMBER","","2017-02-14T20:53:47Z",false,"COMMENTED"
"eriknw","MEMBER","","2017-02-14T23:51:53Z",false,"COMMENTED"
"eriknw","MEMBER","","2017-02-06T20:17:20Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-02-06T23:17:31Z",false,"COMMENTED"
"TomAugspurger","MEMBER","LGTM overall. One categorical thing worth mentioning. If you happen to know the set of categories ahead of time, but are reading from a source that doesn't store the categorical metadata (CSV), you can use `df.col.cat.set_categories(categories)` to avoid a full scan of the data.

I can write that up as a change on this branch, but it might be a bit.","2017-02-04T20:15:51Z",false,"APPROVED"
"jcrist","MEMBER","Overall this seems fine to me.","2017-02-06T18:35:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-02-12T15:30:08Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-02-12T16:24:29Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-01-30T15:55:43Z",false,"COMMENTED"
"jcrist","MEMBER","This seems fine to me for now, but I'm still a bit wary of accidentally keeping around large closures. Having a way to clear/set the cache would be nice, but also adds public api that we may not want to fix on yet. Given a smaller cache size, I'd be fine with merging this now, and we can experiment with improvements/changes later.","2017-03-10T18:43:42Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-03-10T19:37:14Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks for contributing this @Talmaj .  I left a couple of comments.  @martindurant will probably have a few more (he knows this topic better than I do).","2017-01-27T17:09:57Z",false,"COMMENTED"
"Talmaj","CONTRIBUTOR","","2017-01-27T17:33:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-01-27T17:36:03Z",false,"COMMENTED"
"Talmaj","CONTRIBUTOR","","2017-01-27T17:37:09Z",false,"COMMENTED"
"Talmaj","CONTRIBUTOR","","2017-01-27T19:04:13Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-01-29T20:49:28Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-01-29T20:51:34Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-01-29T20:57:07Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-01-29T20:57:57Z",false,"COMMENTED"
"Talmaj","CONTRIBUTOR","","2017-01-30T11:27:40Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this looks good to me.","2017-01-25T22:16:39Z",false,"COMMENTED"
"mrocklin","MEMBER","Looks good to me generally.  cc @jcrist to verify","2017-01-23T23:07:05Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-01-23T23:13:54Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-01-23T23:46:03Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-01-24T03:47:39Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-01-24T04:59:29Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-01-24T05:21:34Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-01-24T05:44:48Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-01-24T14:19:58Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-01-24T16:31:08Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-01-24T19:51:21Z",false,"COMMENTED"
"martindurant","MEMBER","","2017-01-24T22:19:54Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-01-24T22:49:31Z",false,"COMMENTED"
"jcrist","MEMBER","Besides my two nit-picks, this looks good to me.","2017-02-03T05:43:07Z",false,"COMMENTED"
"mrocklin","MEMBER","Thanks for writing these up.","2017-01-23T21:11:11Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-01-23T21:35:31Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-01-23T21:36:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-01-23T21:39:33Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-01-23T21:46:34Z",false,"COMMENTED"
"shoyer","MEMBER","LGTM. It will be nice to have this working eventually for duck-dask types, like those in xarray.","2017-01-24T21:10:00Z",false,"APPROVED"
"shoyer","MEMBER","","2017-01-24T21:11:49Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-01-24T21:12:45Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-01-24T21:15:36Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-01-24T21:30:35Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-01-24T21:31:44Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-01-24T21:34:20Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-01-24T21:36:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-01-24T21:37:50Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-01-24T21:38:08Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-01-24T21:40:05Z",false,"APPROVED"
"mrocklin","MEMBER","","2017-01-24T21:43:49Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-01-20T17:04:38Z",false,"APPROVED"
"mrocklin","MEMBER","","2017-01-20T17:13:53Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this looks good to me. Nice tests!","2017-01-17T21:13:46Z",false,"COMMENTED"
"eriknw","MEMBER","","2017-01-17T21:55:13Z",false,"COMMENTED"
"eriknw","MEMBER","","2017-01-17T22:05:12Z",false,"COMMENTED"
"mrocklin","MEMBER","Generally this looks good to me. ","2017-01-14T15:06:55Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-01-17T20:29:48Z",false,"COMMENTED"
"jreback","CONTRIBUTOR","","2017-01-23T15:19:16Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-01-23T20:04:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-01-14T15:03:03Z",false,"COMMENTED"
"sinhrks","MEMBER","","2017-01-19T00:01:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-01-13T12:52:47Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-01-16T14:38:21Z",false,"COMMENTED"
"wabu","CONTRIBUTOR","","2017-01-16T20:31:42Z",false,"COMMENTED"
"jcrist","MEMBER","Thanks for the PR! Overall this looks good to me. I left some nit-picky comments, but those can all be ignored as you see fit.","2017-01-17T20:57:57Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-01-10T17:42:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-01-09T21:33:32Z",false,"COMMENTED"
"jcrist","MEMBER","","2017-01-09T21:36:33Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this seems fine to me. The intent of `nout` was to deal with functions that return multiple results - the use case of a function returning a 1-tuple didn't come up. As such, `nout=None` and `nout=1` were both interpreted to mean a function that returned a single result (and not a tuple). Changing it as you have here seems fine though. My one concern is that the keyword argument name may not make sense anymore in the `nout=1` case. Upon first glance, I'd say that both `foo2` and `foo3` have 1 output, but this PR changes the meaning to be the length of the single output.

```python
@delayed(nout=2)
def foo1():
    return result1, result2

@delayed(nout=1)
def foo2(a):
    return (result,)

# explicitly setting nout=None to illustrate default
@delayed(nout=None)
def foo3(a):
    return result
```

Two thoughts:

- Keep the keyword name the same, but clarify its meaning in the docstring.
- Deprecate the old name, and rename it to something better. Ideas: `ntuple`, `output_length`.

Slight preference for option 1, as I think the current name matches the most common use cases.

> On continues thoughts, I might even think it could be useful to extend the behavior to `nout=0`.

I don't see a use case for returning a 0-tuple, but also see no harm in adding it. Up to you.","2017-01-04T19:21:19Z",false,"COMMENTED"
"magonser","CONTRIBUTOR","","2017-01-05T13:18:14Z",false,"COMMENTED"
"rabernat","CONTRIBUTOR","","2017-01-08T19:31:38Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-01-08T19:54:39Z",false,"COMMENTED"
"nirizr","CONTRIBUTOR","","2017-01-09T11:25:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-01-09T15:31:01Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2017-01-03T18:20:48Z",false,"COMMENTED"
"nirizr","CONTRIBUTOR","","2017-01-03T19:32:36Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-01-04T21:43:12Z",false,"COMMENTED"
"nirizr","CONTRIBUTOR","","2017-01-04T23:14:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-01-04T23:30:19Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-01-04T23:33:32Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-01-04T23:35:16Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-01-04T23:39:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-01-04T23:41:41Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-01-04T23:43:22Z",false,"COMMENTED"
"nirizr","CONTRIBUTOR","","2017-01-04T23:58:38Z",false,"COMMENTED"
"nirizr","CONTRIBUTOR","","2017-01-05T00:00:53Z",false,"COMMENTED"
"nirizr","CONTRIBUTOR","","2017-01-05T00:02:29Z",false,"COMMENTED"
"shoyer","MEMBER","","2017-01-05T00:03:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-01-05T02:00:16Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-01-05T02:00:45Z",false,"COMMENTED"
"nirizr","CONTRIBUTOR","","2017-01-05T10:20:59Z",false,"COMMENTED"
"nirizr","CONTRIBUTOR","","2017-01-05T10:25:24Z",false,"COMMENTED"
"TomAugspurger","MEMBER","Really great work! The introduction of known vs. unknown is exactly what we needed.

I *think* this should work right? concating known and unknown categories:

```python
In [121]: df = dd.read_csv('data/ny-flights.csv.gz', dtype={'unique_carrier': 'category'}, compression='gzip', blocksize=None)

In [122]: x = df.categorize('unique_carrier')

In [123]: dd.concat([x.unique_carrier.loc[:10], df.unique_carrier.loc[20:30]])
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-123-993a6b5a3a56> in <module>()
----> 1 dd.concat([x.unique_carrier.loc[:10], df.unique_carrier.loc[20:30]])

/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/dask/dask/dataframe/multi.py in concat(dfs, axis, join, interleave_partitions)
    586         else:
    587             divisions = [None] * (sum([df.npartitions for df in dfs]) + 1)
--> 588             return stack_partitions(dfs, divisions, join=join)

/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/dask/dask/dataframe/multi.py in stack_partitions(dfs, divisions, join)
    446 def stack_partitions(dfs, divisions, join='outer'):
    447     """"""Concatenate partitions on axis=0 by doing a simple stack""""""
--> 448     meta = methods.concat([df._meta for df in dfs], join=join)
    449     empty = strip_unknown_categories(meta)
    450

/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/dask/dask/dataframe/methods.py in concat(dfs, axis, join, uniform)
    266             if ind is None:
    267                 ind = concat([df.index for df in dfs2])
--> 268             return pd.Series(union_categoricals(dfs2), index=ind,
    269                              name=dfs2[0].name)
    270         out = pd.concat(dfs2, join=join)

/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/pandas/pandas/types/concat.py in union_categoricals(to_union, sort_categories)
    256     if not all(is_dtype_equal(other.categories.dtype, first.categories.dtype)
    257                for other in to_union[1:]):
--> 258         raise TypeError(""dtype of categories must be the same"")
    259
    260     ordered = False

TypeError: dtype of categories must be the same

In [124]: df.unique_carrier._meta
Out[124]:
Series([], Name: unique_carrier, dtype: category
Categories (1, object): [__UNKNOWN_CATEGORIES__])

In [125]: x.unique_carrier._meta
Out[125]:
Series([], Name: unique_carrier, dtype: category
Categories (13, category): [AA, B6, DL, EV, ..., US, VX, WN, OO])
```

Haven't been able to make a reproducible example. In the artificial examples I've made concat with different categories has worked. But I think you have a copy of the airlines dataset.

I also get an error in the repr from `x._meta_nonempty`

<details>
```python

In [163]: x._meta_nonempty
Out[163]: ---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/IPython/IPython/core/formatters.py in __call__(self, obj)
    664                 type_pprinters=self.type_printers,
    665                 deferred_pprinters=self.deferred_printers)
--> 666             printer.pretty(obj)
    667             printer.flush()
    668             return stream.getvalue()

/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/IPython/IPython/lib/pretty.py in pretty(self, obj)
    379                             if callable(meth):
    380                                 return meth(obj, self, cycle)
--> 381             return _default_pprint(obj, self, cycle)
    382         finally:
    383             self.end_group()

/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/IPython/IPython/lib/pretty.py in _default_pprint(obj, p, cycle)
    499     if _safe_getattr(klass, '__repr__', None) not in _baseclass_reprs:
    500         # A user-provided repr. Find newlines and replace them with p.break_()
--> 501         _repr_pprint(obj, p, cycle)
    502         return
    503     p.begin_group(1, '<')

/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/IPython/IPython/lib/pretty.py in _repr_pprint(obj, p, cycle)
    697     """"""A pprint that just redirects to the normal repr function.""""""
    698     # Find newlines and replace them with p.break_()
--> 699     output = repr(obj)
    700     for idx,output_line in enumerate(output.splitlines()):
    701         if idx:

/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/pandas/pandas/core/base.py in __repr__(self)
     70         Yields Bytestring in Py2, Unicode String in py3.
     71         """"""
---> 72         return str(self)
     73
     74

/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/pandas/pandas/core/base.py in __str__(self)
     49
     50         if compat.PY3:
---> 51             return self.__unicode__()
     52         return self.__bytes__()
     53

/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/pandas/pandas/core/frame.py in __unicode__(self)
    576             width = None
    577         self.to_string(buf=buf, max_rows=max_rows, max_cols=max_cols,
--> 578                        line_width=width, show_dimensions=show_dimensions)
    579
    580         return buf.getvalue()

/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/pandas/pandas/core/frame.py in to_string(self, buf, columns, col_space, header, index, na_rep, formatters, float_format, sparsify, index_names, justify, line_width, max_rows, max_cols, show_dimensions)
   1514                                            max_cols=max_cols,
   1515                                            show_dimensions=show_dimensions)
-> 1516         formatter.to_string()
   1517
   1518         if buf is None:

/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/pandas/pandas/formats/format.py in to_string(self)
    565             text = info_line
    566         else:
--> 567             strcols = self._to_str_columns()
    568             if self.line_width is None:  # no need to wrap around just print
    569                 # the whole frame

/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/pandas/pandas/formats/format.py in _to_str_columns(self)
    492                 max_colwidth = max(self.col_space or 0, *(self.adj.len(x)
    493                                                           for x in cheader))
--> 494                 fmt_values = self._format_col(i)
    495                 fmt_values = _make_fixed_width(fmt_values, self.justify,
    496                                                minimum=max_colwidth,

/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/pandas/pandas/formats/format.py in _format_col(self, i)
    673         return format_array(frame.iloc[:, i]._values, formatter,
    674                             float_format=self.float_format, na_rep=self.na_rep,
--> 675                             space=self.col_space, decimal=self.decimal)
    676
    677     def to_html(self, classes=None, notebook=False, border=None):

/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/pandas/pandas/formats/format.py in format_array(values, formatter, float_format, na_rep, digits, space, justify, decimal)
   1932                         space=space, justify=justify, decimal=decimal)
   1933
-> 1934     return fmt_obj.get_result()
   1935
   1936

/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/pandas/pandas/formats/format.py in get_result(self)
   1951
   1952     def get_result(self):
-> 1953         fmt_values = self._format_strings()
   1954         return _make_fixed_width(fmt_values, self.justify)
   1955

/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/pandas/pandas/formats/format.py in _format_strings(self)
   2187
   2188     def _format_strings(self):
-> 2189         fmt_values = format_array(self.values.get_values(), self.formatter,
   2190                                   float_format=self.float_format,
   2191                                   na_rep=self.na_rep, digits=self.digits,

/Users/tom.augspurger/Envs/py3/lib/python3.6/site-packages/pandas/pandas/core/categorical.py in get_values(self)
   1226         if is_datetimelike(self.categories):
   1227             return self.categories.take(self._codes, fill_value=np.nan)
-> 1228         return np.array(self)
   1229
   1230     def check_for_ordered(self, op):

ValueError: object __array__ method not producing an array
```
</details>

Not sure if that's a dask or pandas thing.

I'll have more later.","2017-01-18T22:33:44Z",false,"CHANGES_REQUESTED"
"TomAugspurger","MEMBER","","2017-01-18T22:33:58Z",false,"APPROVED"
"martindurant","MEMBER","","2016-12-22T21:19:49Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-12-22T21:20:08Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-12-22T22:49:50Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-12-22T22:53:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-12-22T14:59:15Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-12-22T15:05:18Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-12-22T15:06:47Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-12-20T15:00:15Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-12-20T15:00:48Z",false,"COMMENTED"
"abast","NONE","","2016-12-20T17:50:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-12-13T18:12:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-12-13T15:46:06Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-12-13T15:49:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-12-13T15:50:44Z",false,"COMMENTED"
"shoyer","MEMBER","","2016-12-11T22:01:43Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-12-09T14:55:17Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-12-09T15:09:43Z",false,"COMMENTED"
"shoyer","MEMBER","","2016-12-10T20:58:18Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-12-11T00:58:54Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-12-02T09:32:18Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-12-02T18:01:21Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-12-02T18:45:56Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-12-02T18:50:52Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-12-04T14:55:08Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-12-04T19:42:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-12-07T16:31:49Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-12-07T16:40:50Z",false,"COMMENTED"
"mrocklin","MEMBER","+1","2016-12-01T20:40:39Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-12-01T20:47:33Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-12-01T00:11:47Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-12-01T00:24:11Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-12-01T00:44:53Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-12-21T17:14:28Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-12-30T20:54:26Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-24T16:01:27Z",false,"COMMENTED"
"jreback","CONTRIBUTOR","","2016-11-23T21:22:44Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-23T21:46:29Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this seems like a nice improvement. I left some comments on a few issues. Some are just code-quality nitpicks, feel free to use or ignore as needed.","2016-11-28T19:26:07Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this looks good to me. I left some nit-picky comments that mostly have to do with my personal formatting preferences. Feel free to use or ignore.","2016-11-28T19:04:28Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-28T22:39:44Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-11-28T23:15:27Z",false,"COMMENTED"
"mikegraham","CONTRIBUTOR","","2016-11-29T02:29:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-29T03:42:50Z",false,"COMMENTED"
"mikegraham","CONTRIBUTOR","","2016-11-29T03:52:25Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-29T03:53:56Z",false,"COMMENTED"
"mikegraham","CONTRIBUTOR","","2016-11-29T03:56:28Z",false,"COMMENTED"
"mrocklin","MEMBER","","2017-05-01T23:34:49Z",false,"COMMENTED"
"shoyer","MEMBER","Thanks!","2016-11-21T16:05:49Z",false,"APPROVED"
"martindurant","MEMBER","","2016-11-18T15:27:08Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-18T15:28:08Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-18T15:34:59Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-18T15:36:08Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-18T15:37:00Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-18T15:39:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-18T15:48:10Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-18T15:51:16Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-19T01:46:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-19T01:50:56Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-19T01:52:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-19T01:55:09Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-29T19:42:12Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-29T20:04:28Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-14T22:13:25Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-14T22:14:15Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-14T22:15:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-14T22:15:35Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-14T22:16:58Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-14T22:17:32Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-14T22:19:06Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-15T02:03:27Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2016-11-15T02:35:21Z",false,"COMMENTED"
"mrocklin","MEMBER","This looks really slick to me
","2016-11-09T23:34:40Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-11-09T23:36:08Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-11-09T23:40:21Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-11-09T23:41:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-10T00:48:38Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-11-09T17:11:57Z",false,"COMMENTED"
"shoyer","MEMBER","","2016-11-09T17:19:27Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-09T17:25:58Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-09T17:28:45Z",false,"COMMENTED"
"shoyer","MEMBER","","2016-11-09T17:33:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-09T17:34:28Z",false,"COMMENTED"
"shoyer","MEMBER","One nit, otherwise LGTM
","2016-11-10T16:59:25Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-10T17:01:41Z",false,"COMMENTED"
"shoyer","MEMBER","","2016-11-10T18:07:18Z",false,"COMMENTED"
"shoyer","MEMBER","","2016-11-04T20:28:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-04T22:20:19Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-11-05T09:44:05Z",false,"COMMENTED"
"shoyer","MEMBER","","2016-11-05T12:09:08Z",false,"COMMENTED"
"laliberte","CONTRIBUTOR","","2016-11-05T12:17:37Z",false,"COMMENTED"
"laliberte","CONTRIBUTOR","","2016-11-05T12:18:11Z",false,"COMMENTED"
"mrocklin","MEMBER","A cursory look through this seems good to me, although I haven't thoroughly reviewed the tricky atop inference bits.
","2016-11-04T13:08:31Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-11-04T13:41:32Z",false,"COMMENTED"
"mrocklin","MEMBER","I think I'm -1 on supporting storing to dask.arrays.  It feels like a promise that we can't keep.  Instead, perhaps we can use the current API of storing a list of arrays to a list of destinations?

``` python
da.store([x, y, z], [out1, out2, out3], regions=[None, (slice(...), slice(...)), None])
```
","2016-11-03T13:25:10Z",false,"COMMENTED"
"laliberte","CONTRIBUTOR","","2016-11-03T13:28:34Z",false,"COMMENTED"
"laliberte","CONTRIBUTOR","","2016-11-03T13:28:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-03T13:30:18Z",false,"COMMENTED"
"laliberte","CONTRIBUTOR","","2016-11-03T13:33:55Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-03T13:40:21Z",false,"COMMENTED"
"laliberte","CONTRIBUTOR","","2016-11-03T13:40:26Z",false,"COMMENTED"
"laliberte","CONTRIBUTOR","","2016-11-03T13:54:08Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-03T13:57:15Z",false,"COMMENTED"
"laliberte","CONTRIBUTOR","","2016-11-03T13:58:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-02T23:14:57Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-02T23:18:42Z",false,"COMMENTED"
"mrocklin","MEMBER","OK, so if it is not feasible to move around live file objects (this does indeed sound like something it would be nice to avoid) then can we write everything we need to in terms of tasks that open, read/write, and then close the file?
","2016-11-07T14:28:57Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-07T15:03:04Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-07T15:04:47Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-07T15:05:59Z",false,"COMMENTED"
"mrocklin","MEMBER","OK so I agree that the opener business and lambda cascade is a bit messy.  I think that a lot of this can be cleaned up if we build an object around all of the things we need to open a file and send that object down to the relevant functions.  Those functions will then always use the object as a context manager, which will open the file in the function.  I think that this is cleaner than sending nested lambdas.

I'm not normally a big fan of making classes, but this might be such a situation.  Here is one approach.

``` python
class Opener(object):
    def __init__(self, open, mode, compression, ...):
        self.open = open
        self.mode = mode
        self.compression = compression
        ...
        self.filename = None
        self.file = None

    def __call__(self, filename):
        return DelayedFile(self, filename)

class DelayedFile(object):
    def __init__(self, opener, filename):
        self.opener = opener
        self.filename = filename

    def __enter__(self):
        self.file = self.opener.open(self.filename, mode=self.opener.mode, ...)
        ... perform all necessary wrapping ...
        return self.file

    def __exit__(self, *args):
        self.file.close()
```

Then in some like read_bytes:

``` python
opener = Opener(fs.open, mode='rb', compression=...)

values = [delayed(read_block_from_file)(opener(fn), start=..., stop=...) 
          for fn in filenames]
return values
```
","2016-11-07T23:34:44Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-08T02:03:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-08T18:00:34Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-08T18:58:34Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-08T19:27:54Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-08T20:08:49Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-11-08T20:09:10Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-11-08T20:11:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-08T20:15:01Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-09T13:20:56Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-09T13:40:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-09T13:51:47Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-09T14:20:31Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-09T19:49:01Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-09T22:12:56Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-09T22:43:25Z",false,"COMMENTED"
"martindurant","MEMBER","","2016-11-10T17:19:33Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-10T19:14:19Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-11-02T16:12:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-02T16:13:46Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-11-02T16:20:46Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-11-01T17:25:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-01T17:34:48Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this looks like a nice improvement. I left some nit-picky comments, mostly on formatting.

It might be nice to add a module level docstring as done [here](https://github.com/dask/dask/blob/master/dask/order.py#L1-L56) to explain the algorithm a bit.","2016-12-07T19:16:42Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-12-07T20:15:50Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-12-07T20:16:38Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-12-07T20:16:54Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-12-07T20:17:11Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-12-07T20:17:36Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-12-07T20:24:02Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-12-07T20:26:00Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-12-07T20:27:50Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-31T12:28:43Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-10-31T12:33:32Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-10-31T12:40:21Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-31T12:46:24Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-10-31T14:03:48Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-10-31T15:34:14Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-01T13:21:51Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-11-01T13:26:17Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-11-01T13:27:54Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-01T13:29:41Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-11-01T13:36:41Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-01T13:41:10Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-11-01T13:51:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-01T13:57:20Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-11-01T14:10:29Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-11-01T14:22:29Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-01T14:30:53Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-01T14:33:48Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-11-01T14:51:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-02T14:23:32Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-11-02T14:25:43Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-11-02T14:42:24Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-02T14:47:38Z",false,"COMMENTED"
"eriknw","MEMBER","","2016-11-02T16:07:42Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-11-02T16:11:28Z",false,"COMMENTED"
"eriknw","MEMBER","","2016-11-02T16:38:29Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-11-02T16:53:17Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-02T16:55:48Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-11-02T17:09:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-02T17:10:00Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-11-02T17:14:44Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-02T17:17:35Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-11-02T17:27:15Z",false,"COMMENTED"
"eriknw","MEMBER","","2016-11-02T17:45:36Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-11-02T17:54:52Z",false,"COMMENTED"
"eriknw","MEMBER","","2016-11-02T17:57:13Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-02T18:02:43Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-30T14:27:13Z",false,"COMMENTED"
"sinhrks","MEMBER","","2016-10-31T04:21:48Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-10-31T15:14:10Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2016-10-30T12:58:37Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-10-26T21:47:17Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-23T12:15:58Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-23T12:18:07Z",false,"COMMENTED"
"mrocklin","MEMBER","Sorry for the delay in review.  This is looking pretty good to me.  Some small requests follow:
","2016-10-28T11:55:32Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-29T11:06:55Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-29T11:07:16Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-29T11:38:45Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-29T11:40:08Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-29T11:44:17Z",false,"COMMENTED"
"mrocklin","MEMBER","This looks pretty good to me.  Most of my comments are stylistic.

This tweet came up today, which seemed timely: https://twitter.com/dan_abramov/status/793122481695559680 :) 
","2016-11-02T11:48:48Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-11-02T16:06:33Z",false,"COMMENTED"
"mrocklin","MEMBER","This all seems pretty good to me
","2016-10-21T15:43:40Z",false,"COMMENTED"
"shoyer","MEMBER","","2016-10-21T16:26:02Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-10-21T16:28:11Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-10-21T16:29:45Z",false,"COMMENTED"
"mrocklin","MEMBER","After a brief review this seems mostly fine to me.
","2016-10-21T23:13:53Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-10-22T15:57:44Z",false,"COMMENTED"
"mrocklin","MEMBER","Hey, nice work.  This looks like a very good start.  I've left some comments below.  cc'ing @jreback who might be able to use this functionality immediately and @jcrist who has done similar work recently.
","2016-10-18T22:36:32Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-19T06:30:30Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-19T06:32:36Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-19T06:34:10Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-19T06:38:34Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-19T06:40:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-19T11:44:28Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-19T11:45:15Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-19T20:31:12Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-19T20:57:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-20T11:58:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-20T12:13:17Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-20T14:22:36Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-10-20T15:41:00Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-20T16:01:41Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-20T22:38:26Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-20T22:41:24Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-20T23:13:10Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-20T23:16:48Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-20T23:17:45Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-23T09:19:26Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-23T09:31:11Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-23T12:01:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-23T12:04:27Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-23T12:07:24Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-23T12:10:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-23T12:11:47Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-23T12:18:46Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-23T12:20:11Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-23T12:25:29Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-23T12:27:08Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-23T12:28:17Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-23T12:49:12Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-23T12:55:39Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-23T13:04:35Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-23T13:11:29Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-23T13:12:12Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-23T13:12:38Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-10-24T16:54:54Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-24T17:01:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-25T11:41:58Z",false,"COMMENTED"
"mrocklin","MEMBER","This looks pretty good to me
","2016-10-25T11:49:26Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-25T16:27:17Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-25T16:30:38Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-25T16:32:50Z",false,"COMMENTED"
"sinhrks","MEMBER","","2016-10-16T09:48:03Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-16T13:38:19Z",false,"COMMENTED"
"shoyer","MEMBER","","2016-10-31T16:48:25Z",false,"COMMENTED"
"sinhrks","MEMBER","","2016-11-03T11:52:09Z",false,"COMMENTED"
"sinhrks","MEMBER","","2016-11-03T11:53:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-11-03T14:08:14Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-15T22:06:28Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-16T07:23:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-16T13:32:46Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-16T13:35:13Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-16T13:45:04Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-16T13:45:40Z",false,"COMMENTED"
"chmp","CONTRIBUTOR","","2016-10-16T14:01:54Z",false,"COMMENTED"
"mrocklin","MEMBER","This looks pretty good to me.  I'm surprised at how simple this is.
","2016-10-15T13:54:18Z",false,"COMMENTED"
"sinhrks","MEMBER","","2016-10-15T14:48:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-15T22:53:25Z",false,"COMMENTED"
"sinhrks","MEMBER","","2016-10-16T03:19:19Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-15T13:45:02Z",false,"COMMENTED"
"sinhrks","MEMBER","","2016-10-15T14:52:26Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-15T13:58:43Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-15T14:01:51Z",false,"COMMENTED"
"mrocklin","MEMBER","I think that we should also use `split_every=False` in cases where the intermediates are series/dataframes of a fixed small number of rows.
","2016-10-18T18:10:05Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-10-18T18:47:11Z",false,"COMMENTED"
"jcrist","MEMBER","Overall this seems like a win to me. I left some comments, mostly having to do with error handling. Thanks for figuring this out!
","2016-10-12T20:11:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-12T20:13:07Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-10-13T12:21:48Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-10-13T12:22:00Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-10-13T12:23:20Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-13T13:06:48Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-10-13T13:20:51Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-10-13T14:21:10Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-10-13T16:21:52Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-13T16:25:32Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-10-13T16:30:28Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-13T16:36:33Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-10-13T16:48:49Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-13T16:50:45Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-13T16:55:38Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-10-13T18:01:55Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-10-12T03:55:00Z",false,"COMMENTED"
"shoyer","MEMBER","Seems like a reasonable approach to try.
","2016-10-12T22:49:06Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-12T22:59:07Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-12T23:00:46Z",false,"COMMENTED"
"shoyer","MEMBER","LGTM
","2016-10-12T23:18:44Z",false,"APPROVED"
"mrocklin","MEMBER","","2017-01-21T12:35:30Z",false,"COMMENTED"
"mrocklin","MEMBER","This looks pretty good to me.  A few nitpicky comments.  Would love for someone more familiar with dask.dataframe to give this a more thorough review.
","2016-10-09T02:47:25Z",false,"COMMENTED"
"JamesJeffryes","CONTRIBUTOR","","2016-10-09T03:58:56Z",false,"COMMENTED"
"JamesJeffryes","CONTRIBUTOR","","2016-10-09T03:59:39Z",false,"COMMENTED"
"JamesJeffryes","CONTRIBUTOR","","2016-10-09T04:00:04Z",false,"COMMENTED"
"JamesJeffryes","CONTRIBUTOR","","2016-10-09T04:03:13Z",false,"COMMENTED"
"JamesJeffryes","CONTRIBUTOR","","2016-10-09T04:07:23Z",false,"COMMENTED"
"sinhrks","MEMBER","","2016-10-11T00:43:35Z",false,"COMMENTED"
"JamesJeffryes","CONTRIBUTOR","","2016-10-11T05:22:35Z",false,"COMMENTED"
"JamesJeffryes","CONTRIBUTOR","","2016-10-11T05:23:42Z",false,"COMMENTED"
"JamesJeffryes","CONTRIBUTOR","","2016-10-11T05:25:30Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-11T12:28:40Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-06T18:49:26Z",false,"COMMENTED"
"jreback","CONTRIBUTOR","","2016-10-06T18:59:07Z",false,"COMMENTED"
"shoyer","MEMBER","> The solution presented here does less, but the changes are also more modest, which reduces the concerns about maintenance bloat a bit (though not to zero).

You also figure out a more elegant/minimal way to adjust `top` than I did :).

> I think the relevant question now is ""Are we likely to want multi-chunk new dimensions?"" If the answer is ""yes"" then we should think harder about this API.

My version didn't actually support mulit-chunking new dimensions. It supported _changing_ the chunking of existing dimensions on the output while keeping ""block indices"" intact. This is a pretty natural sort of thing to do (adjusting the size of each chunk), but maybe more complex than warranted without clear use cases.
","2016-10-05T00:23:46Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-05T12:20:40Z",false,"COMMENTED"
"shoyer","MEMBER","","2016-10-04T13:59:51Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-04T15:12:23Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-10-03T14:34:30Z",false,"COMMENTED"
"shoyer","MEMBER","","2016-10-03T14:55:39Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-03T15:09:29Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-03T15:09:36Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-10-04T15:40:22Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-10-05T12:17:23Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-09-27T15:38:18Z",false,"COMMENTED"
"pitrou","MEMBER","","2016-09-27T16:02:40Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-09-27T16:46:37Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2016-09-23T15:16:18Z",false,"COMMENTED"
"mrocklin","MEMBER","","2016-09-23T16:19:58Z",false,"COMMENTED"
"jcrist","MEMBER","","2016-09-19T18:21:01Z",false,"COMMENTED"
"TomAugspurger","MEMBER","","2016-09-19T18:23:07Z",false,"COMMENTED"
